# If you assign a task to the same stage, they'll run in parallel
stages:
    - pre-merge
    - post-merge
    - release

# This is a gitlabification of  "faster.sh" from: https://gitlab.com/virgohardware/core
# Expected behavior: this will build Chromite and run benchmarks on it, soon as I press commit. 
build-chromite:
    image: registry.gitlab.com/incoresemi/docker-images/chromite
    stage: pre-merge
    script:
        - pip install -r requirements.txt
        - echo -e "section_start:`date +%s`:compile_xlen32\r\e[0KCheck 32 bit compile"
        - python -m configure.main -ispec sample_config/default32.yaml
        - make -j$(nproc) generate_verilog;
        - make clean
        - echo -e "section_end:`date +%s`:compile_xlen32\r\e[0Ksection_start:`date +%s`:benchmarking\r\e[0KRun Benchmarks"
        - python -m configure.main -ispec sample_config/default.yaml
        - make -j$(nproc) generate_verilog; make generate_boot_files link_verilator 
        - make dhrystone
        - echo -e "section_end:`date +%s`:benchmarking\r\e[0K"
    only:
        - merge_requests

# checks if the changelog has been updated and the version has also been upgraded
check-mr-compliance:
    stage: pre-merge
    except: 
        - schedules
    script:
        - export NEWVER=$(grep -P "^\[.*?\]" CHANGELOG.rst -m1 | awk '{print $1}' | sed 's/[][]//g');
        - export CURVER=$(git describe --tags| cut -f1 -d"-")
        - echo $NEWVER
        - echo $CURVER        
        - CURVER=${CURVER//./ }
        - NEWVER=${NEWVER//./ }
        - curpatch=$(echo $CURVER | awk '{print $3}')
        - curminor=$(echo $CURVER | awk '{print $2}')
        - curmajor=$(echo $CURVER | awk '{print $1}')
        - newpatch=$(echo $NEWVER | awk '{print $3}')
        - newminor=$(echo $NEWVER | awk '{print $2}')
        - newmajor=$(echo $NEWVER | awk '{print $1}')
        - if [ $newmajor = $curmajor ] && [ $newminor = $curminor ] && [ $newpatch -gt $curpatch ]; then echo "Patch Update Accepted OK"; exit 0; fi
        - if [ $newmajor = $curmajor ] && [ $newminor = $curminor ] && [ $newpatch -le $curpatch ]; then echo "Revise Patch Atleast!"; exit 1; fi
        - if [ $newmajor = $curmajor ] && [ $newminor -gt $curminor ] && [ $newpatch = 0 ]; then echo "Minor Update Accepted OK!"; exit 0; fi
        - if [ $newmajor = $curmajor ] && [ $newminor -gt $curminor ] && [ $newpatch != 0 ]; then echo "For Minor changes the patches should be 0"; exit 1; fi
        - if [ $newmajor = $curmajor ] && [ $newminor -lt $curminor ]; then echo "Minor version should greater than previuos"; exit 1; fi
        - if [ $newmajor -gt $curmajor ] && [ $newminor = 0 ] && [ $newpatch = 0 ]; then echo "Major Updated Accepted OK"; exit 0; fi
        - echo  "For Major updates Minor and Patches should be 0"
        - exit 1

    only:
        - merge_requests
    tags:
        - incore-group

check-docs-build:
    stage: pre-merge
    except: 
        - schedules
    script:
        - echo -e "section_start:`date +%s`:source_tools\r\e[0KSetup Initialization"
        - export PATH="/home/gitlab-runner/.pyenv/bin:$PATH"
        - eval "$(pyenv init -)"
        - eval "$(pyenv virtualenv-init -)"
        - pyenv shell 3.6.10
        - cd docs/
        - pip install -r requirements.txt
        - make html
    only:
        - merge_requests
    tags:
        - incore-group

release:
    stage: release
    script:
        - echo -e "section_start:`date +%s`:source_tools\r\e[0KSetup Initialization"
        - export PATH="/home/gitlab-runner/.pyenv/bin:$PATH"
        - eval "$(pyenv init -)"
        - eval "$(pyenv virtualenv-init -)"
        - pyenv shell 3.6.10
        - pip install semver python-gitlab requests
        - python /scratch/version-extract-rst.py
        - echo -e "section_end:`date +%s`:tag\r\e[0K"
    only:
        refs:
            - master
    tags:
        - incore-group
    except:
        - schedules

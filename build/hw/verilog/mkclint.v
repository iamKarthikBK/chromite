//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:36:13 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// PREADY                         O     1 reg
// PRDATA                         O    32 reg
// PSLVERR                        O     1 reg
// sb_clint_msip                  O     1 reg
// sb_clint_mtip                  O     1 reg
// sb_clint_mtime                 O    64 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// PADDR                          I    32 reg
// PROT                           I     3 reg
// PENABLE                        I     1
// PWRITE                         I     1 reg
// PWDATA                         I    32 reg
// PSTRB                          I     4 reg
// PSEL                           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkclint(CLK,
	       RST_N,

	       PADDR,
	       PROT,
	       PENABLE,
	       PWRITE,
	       PWDATA,
	       PSTRB,
	       PSEL,

	       PREADY,

	       PRDATA,

	       PSLVERR,

	       sb_clint_msip,

	       sb_clint_mtip,

	       sb_clint_mtime);
  input  CLK;
  input  RST_N;

  // action method slave_s_paddr
  input  [31 : 0] PADDR;
  input  [2 : 0] PROT;
  input  PENABLE;
  input  PWRITE;
  input  [31 : 0] PWDATA;
  input  [3 : 0] PSTRB;
  input  PSEL;

  // value method slave_s_pready
  output PREADY;

  // value method slave_s_prdata
  output [31 : 0] PRDATA;

  // value method slave_s_pslverr
  output PSLVERR;

  // value method slave_s_puser

  // value method device_sb_clint_msip
  output sb_clint_msip;

  // value method device_sb_clint_mtip
  output sb_clint_mtip;

  // value method device_sb_clint_mtime
  output [63 : 0] sb_clint_mtime;

  // signals for module outputs
  wire [63 : 0] sb_clint_mtime;
  wire [31 : 0] PRDATA;
  wire PREADY, PSLVERR, sb_clint_msip, sb_clint_mtip;

  // inlined wires
  wire [71 : 0] clint_s_xactor_wr_request_wget;
  wire [33 : 0] clint_s_xactor_ff_response_rv_port0__write_1,
		clint_s_xactor_ff_response_rv_port1__read,
		clint_s_xactor_ff_response_rv_port1__write_1,
		clint_s_xactor_ff_response_rv_port2__read;
  wire clint_ifc_rg_msip_written_whas;

  // register clint_ifc_dummy
  reg clint_ifc_dummy;
  wire clint_ifc_dummy_D_IN, clint_ifc_dummy_EN;

  // register clint_ifc_rg_msip_inner_reg
  reg [63 : 0] clint_ifc_rg_msip_inner_reg;
  wire [63 : 0] clint_ifc_rg_msip_inner_reg_D_IN;
  wire clint_ifc_rg_msip_inner_reg_EN;

  // register clint_ifc_rg_mtime_inner_reg
  reg [63 : 0] clint_ifc_rg_mtime_inner_reg;
  wire [63 : 0] clint_ifc_rg_mtime_inner_reg_D_IN;
  wire clint_ifc_rg_mtime_inner_reg_EN;

  // register clint_ifc_rg_mtimecmp_inner_reg
  reg [63 : 0] clint_ifc_rg_mtimecmp_inner_reg;
  wire [63 : 0] clint_ifc_rg_mtimecmp_inner_reg_D_IN;
  wire clint_ifc_rg_mtimecmp_inner_reg_EN;

  // register clint_ifc_rg_mtip
  reg clint_ifc_rg_mtip;
  wire clint_ifc_rg_mtip_D_IN, clint_ifc_rg_mtip_EN;

  // register clint_ifc_rg_tick
  reg [2 : 0] clint_ifc_rg_tick;
  wire [2 : 0] clint_ifc_rg_tick_D_IN;
  wire clint_ifc_rg_tick_EN;

  // register clint_s_xactor_ff_response_rv
  reg [33 : 0] clint_s_xactor_ff_response_rv;
  wire [33 : 0] clint_s_xactor_ff_response_rv_D_IN;
  wire clint_s_xactor_ff_response_rv_EN;

  // register clint_s_xactor_rg_pready
  reg clint_s_xactor_rg_pready;
  wire clint_s_xactor_rg_pready_D_IN, clint_s_xactor_rg_pready_EN;

  // register clint_s_xactor_rg_response
  reg [32 : 0] clint_s_xactor_rg_response;
  wire [32 : 0] clint_s_xactor_rg_response_D_IN;
  wire clint_s_xactor_rg_response_EN;

  // register clint_s_xactor_rg_wait
  reg clint_s_xactor_rg_wait;
  wire clint_s_xactor_rg_wait_D_IN, clint_s_xactor_rg_wait_EN;

  // ports of submodule clint_s_xactor_ff_request
  wire [71 : 0] clint_s_xactor_ff_request_D_IN,
		clint_s_xactor_ff_request_D_OUT;
  wire clint_s_xactor_ff_request_CLR,
       clint_s_xactor_ff_request_DEQ,
       clint_s_xactor_ff_request_EMPTY_N,
       clint_s_xactor_ff_request_ENQ,
       clint_s_xactor_ff_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_clint_ifc_rl_generate_interrupt,
       CAN_FIRE_RL_clint_ifc_rl_increment_timer,
       CAN_FIRE_RL_clint_rl_pop_apb_req,
       CAN_FIRE_RL_clint_s_xactor_rg_pready__dreg_update,
       CAN_FIRE_RL_clint_s_xactor_rl_capture_request,
       CAN_FIRE_RL_clint_s_xactor_rl_send_response,
       CAN_FIRE_slave_s_paddr,
       WILL_FIRE_RL_clint_ifc_rl_generate_interrupt,
       WILL_FIRE_RL_clint_ifc_rl_increment_timer,
       WILL_FIRE_RL_clint_rl_pop_apb_req,
       WILL_FIRE_RL_clint_s_xactor_rg_pready__dreg_update,
       WILL_FIRE_RL_clint_s_xactor_rl_capture_request,
       WILL_FIRE_RL_clint_s_xactor_rl_send_response,
       WILL_FIRE_slave_s_paddr;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_clint_ifc_rg_mtime_inner_reg_write_1__VAL_1,
		MUX_clint_ifc_rg_mtime_inner_reg_write_1__VAL_2;
  wire MUX_clint_ifc_rg_mtime_inner_reg_write_1__SEL_1,
       MUX_clint_ifc_rg_mtime_inner_reg_write_1__SEL_2,
       MUX_clint_ifc_rg_mtip_write_1__SEL_1,
       MUX_clint_ifc_rg_mtip_write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d39;
  reg TASK_testplusargs___d40;
  reg TASK_testplusargs___d41;
  reg [63 : 0] v__h2288;
  reg TASK_testplusargs___d177;
  reg TASK_testplusargs___d178;
  reg TASK_testplusargs___d179;
  reg [63 : 0] v__h10088;
  reg TASK_testplusargs___d199;
  reg TASK_testplusargs___d200;
  reg TASK_testplusargs___d201;
  reg [63 : 0] v__h10587;
  reg TASK_testplusargs_77_OR_TASK_testplusargs_78_A_ETC___d191;
  reg TASK_testplusargs_77_OR_TASK_testplusargs_78_A_ETC___d195;
  reg TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d219;
  reg TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d221;
  reg TASK_testplusargs_9_OR_TASK_testplusargs_0_AND_ETC___d49;
  reg TASK_testplusargs_9_OR_TASK_testplusargs_0_AND_ETC___d51;
  reg clint_s_xactor_ff_request_first__5_BIT_36_8_AN_ETC___d182;
  reg NOT_clint_s_xactor_ff_request_first__5_BIT_36__ETC___d204;
  // synopsys translate_on

  // remaining internal signals
  wire [63 : 0] IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66,
		data__h10272,
		din__h10662,
		din__h10692,
		din__h10721,
		newdata1___1__h3649,
		newdata1__h2528;
  wire [47 : 0] IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d134,
		IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d169;
  wire [31 : 0] IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d117,
		IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d162,
		addr__h2427,
		lv2__h10657,
		resp_prdata__h10648,
		x1_avValue_snd__h10304,
		x1_avValue_snd__h10377,
		x1_avValue_snd__h10450;
  wire [7 : 0] IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70,
	       newstrb1___1__h3650,
	       newstrb1__h2529,
	       origdata__h4830,
	       x833_OR_y834__q1,
	       x__h4833,
	       x__h5894,
	       x__h6478,
	       x__h6617,
	       x__h6756,
	       x__h6895,
	       x__h7034,
	       x__h7173,
	       y__h4834,
	       y__h4835,
	       y__h4896,
	       y__h5895,
	       y__h5896,
	       y__h6401,
	       y__h6479,
	       y__h6480,
	       y__h6541,
	       y__h6618,
	       y__h6619,
	       y__h6680,
	       y__h6757,
	       y__h6758,
	       y__h6819,
	       y__h6896,
	       y__h6897,
	       y__h6958,
	       y__h7035,
	       y__h7036,
	       y__h7097,
	       y__h7174,
	       y__h7175,
	       y__h7236,
	       y__h7313,
	       y__h8402,
	       y__h8986,
	       y__h9125,
	       y__h9264,
	       y__h9403,
	       y__h9542,
	       y__h9681,
	       y__h9820;
  wire [5 : 0] x__h3657;

  // action method slave_s_paddr
  assign CAN_FIRE_slave_s_paddr = 1'd1 ;
  assign WILL_FIRE_slave_s_paddr = 1'd1 ;

  // value method slave_s_pready
  assign PREADY = clint_s_xactor_rg_pready ;

  // value method slave_s_prdata
  assign PRDATA = clint_s_xactor_rg_response[32:1] ;

  // value method slave_s_pslverr
  assign PSLVERR = clint_s_xactor_rg_response[0] ;

  // value method device_sb_clint_msip
  assign sb_clint_msip = clint_ifc_rg_msip_inner_reg[0] ;

  // value method device_sb_clint_mtip
  assign sb_clint_mtip = clint_ifc_rg_mtip ;

  // value method device_sb_clint_mtime
  assign sb_clint_mtime = clint_ifc_rg_mtime_inner_reg ;

  // submodule clint_s_xactor_ff_request
  FIFOL1 #(.width(32'd72)) clint_s_xactor_ff_request(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(clint_s_xactor_ff_request_D_IN),
						     .ENQ(clint_s_xactor_ff_request_ENQ),
						     .DEQ(clint_s_xactor_ff_request_DEQ),
						     .CLR(clint_s_xactor_ff_request_CLR),
						     .D_OUT(clint_s_xactor_ff_request_D_OUT),
						     .FULL_N(clint_s_xactor_ff_request_FULL_N),
						     .EMPTY_N(clint_s_xactor_ff_request_EMPTY_N));

  // rule RL_clint_ifc_rl_generate_interrupt
  assign CAN_FIRE_RL_clint_ifc_rl_generate_interrupt = 1'd1 ;
  assign WILL_FIRE_RL_clint_ifc_rl_generate_interrupt = 1'd1 ;

  // rule RL_clint_rl_pop_apb_req
  assign CAN_FIRE_RL_clint_rl_pop_apb_req =
	     clint_s_xactor_ff_request_EMPTY_N &&
	     !clint_s_xactor_ff_response_rv[33] ;
  assign WILL_FIRE_RL_clint_rl_pop_apb_req =
	     CAN_FIRE_RL_clint_rl_pop_apb_req ;

  // rule RL_clint_ifc_rl_increment_timer
  assign CAN_FIRE_RL_clint_ifc_rl_increment_timer = 1'd1 ;
  assign WILL_FIRE_RL_clint_ifc_rl_increment_timer =
	     !WILL_FIRE_RL_clint_rl_pop_apb_req ;

  // rule RL_clint_s_xactor_rl_capture_request
  assign CAN_FIRE_RL_clint_s_xactor_rl_capture_request =
	     clint_s_xactor_ff_request_FULL_N && !clint_s_xactor_rg_wait &&
	     PSEL &&
	     !PENABLE &&
	     clint_s_xactor_ff_request_FULL_N ;
  assign WILL_FIRE_RL_clint_s_xactor_rl_capture_request =
	     CAN_FIRE_RL_clint_s_xactor_rl_capture_request ;

  // rule RL_clint_s_xactor_rl_send_response
  assign CAN_FIRE_RL_clint_s_xactor_rl_send_response =
	     clint_s_xactor_ff_response_rv_port1__read[33] &&
	     clint_s_xactor_rg_wait &&
	     PSEL &&
	     PENABLE ;
  assign WILL_FIRE_RL_clint_s_xactor_rl_send_response =
	     CAN_FIRE_RL_clint_s_xactor_rl_send_response ;

  // rule RL_clint_s_xactor_rg_pready__dreg_update
  assign CAN_FIRE_RL_clint_s_xactor_rg_pready__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_clint_s_xactor_rg_pready__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_clint_ifc_rg_mtime_inner_reg_write_1__SEL_1 =
	     WILL_FIRE_RL_clint_ifc_rl_increment_timer &&
	     clint_ifc_rg_tick == 3'd0 &&
	     !MUX_clint_ifc_rg_mtime_inner_reg_write_1__SEL_2 ;
  assign MUX_clint_ifc_rg_mtime_inner_reg_write_1__SEL_2 =
	     WILL_FIRE_RL_clint_rl_pop_apb_req &&
	     clint_s_xactor_ff_request_D_OUT[36] &&
	     addr__h2427[31:3] == 29'd6143 ;
  assign MUX_clint_ifc_rg_mtip_write_1__SEL_1 =
	     WILL_FIRE_RL_clint_rl_pop_apb_req &&
	     clint_s_xactor_ff_request_D_OUT[36] &&
	     addr__h2427[31:3] == 29'd2048 ;
  assign MUX_clint_ifc_rg_mtime_inner_reg_write_1__VAL_1 =
	     clint_ifc_rg_mtime_inner_reg + 64'd1 ;
  assign MUX_clint_ifc_rg_mtime_inner_reg_write_1__VAL_2 =
	     { IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d169,
	       x__h7173 | y__h9681,
	       x__h4833 | y__h9820 } ;
  assign MUX_clint_ifc_rg_mtip_write_1__VAL_2 =
	     clint_ifc_rg_mtime_inner_reg >= clint_ifc_rg_mtimecmp_inner_reg ;

  // inlined wires
  assign clint_ifc_rg_msip_written_whas =
	     WILL_FIRE_RL_clint_rl_pop_apb_req &&
	     clint_s_xactor_ff_request_D_OUT[36] &&
	     addr__h2427[31:3] == 29'd0 &&
	     addr__h2427[1:0] == 2'd0 ;
  assign clint_s_xactor_wr_request_wget =
	     { PADDR, PROT, PWRITE, PWDATA, PSTRB } ;
  assign clint_s_xactor_ff_response_rv_port0__write_1 =
	     { 1'd1,
	       resp_prdata__h10648,
	       (addr__h2427[31:3] != 29'd0 || addr__h2427[1:0] != 2'd0) &&
	       addr__h2427[31:3] != 29'd2048 &&
	       addr__h2427[31:3] != 29'd6143 } ;
  assign clint_s_xactor_ff_response_rv_port1__read =
	     CAN_FIRE_RL_clint_rl_pop_apb_req ?
	       clint_s_xactor_ff_response_rv_port0__write_1 :
	       clint_s_xactor_ff_response_rv ;
  assign clint_s_xactor_ff_response_rv_port1__write_1 =
	     { 1'd0,
	       33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign clint_s_xactor_ff_response_rv_port2__read =
	     CAN_FIRE_RL_clint_s_xactor_rl_send_response ?
	       clint_s_xactor_ff_response_rv_port1__write_1 :
	       clint_s_xactor_ff_response_rv_port1__read ;

  // register clint_ifc_dummy
  assign clint_ifc_dummy_D_IN = !clint_ifc_dummy ;
  assign clint_ifc_dummy_EN =
	     WILL_FIRE_RL_clint_rl_pop_apb_req &&
	     !clint_s_xactor_ff_request_D_OUT[36] ;

  // register clint_ifc_rg_msip_inner_reg
  assign clint_ifc_rg_msip_inner_reg_D_IN = { 63'd0, x833_OR_y834__q1[0] } ;
  assign clint_ifc_rg_msip_inner_reg_EN = clint_ifc_rg_msip_written_whas ;

  // register clint_ifc_rg_mtime_inner_reg
  assign clint_ifc_rg_mtime_inner_reg_D_IN =
	     MUX_clint_ifc_rg_mtime_inner_reg_write_1__SEL_1 ?
	       MUX_clint_ifc_rg_mtime_inner_reg_write_1__VAL_1 :
	       MUX_clint_ifc_rg_mtime_inner_reg_write_1__VAL_2 ;
  assign clint_ifc_rg_mtime_inner_reg_EN =
	     WILL_FIRE_RL_clint_ifc_rl_increment_timer &&
	     clint_ifc_rg_tick == 3'd0 &&
	     !MUX_clint_ifc_rg_mtime_inner_reg_write_1__SEL_2 ||
	     WILL_FIRE_RL_clint_rl_pop_apb_req &&
	     clint_s_xactor_ff_request_D_OUT[36] &&
	     addr__h2427[31:3] == 29'd6143 ;

  // register clint_ifc_rg_mtimecmp_inner_reg
  assign clint_ifc_rg_mtimecmp_inner_reg_D_IN =
	     { IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d134,
	       x__h7173 | y__h7174,
	       x__h4833 | y__h7313 } ;
  assign clint_ifc_rg_mtimecmp_inner_reg_EN =
	     MUX_clint_ifc_rg_mtip_write_1__SEL_1 ;

  // register clint_ifc_rg_mtip
  assign clint_ifc_rg_mtip_D_IN =
	     !MUX_clint_ifc_rg_mtip_write_1__SEL_1 &&
	     MUX_clint_ifc_rg_mtip_write_1__VAL_2 ;
  assign clint_ifc_rg_mtip_EN = 1'b1 ;

  // register clint_ifc_rg_tick
  assign clint_ifc_rg_tick_D_IN = clint_ifc_rg_tick + 3'd1 ;
  assign clint_ifc_rg_tick_EN = WILL_FIRE_RL_clint_ifc_rl_increment_timer ;

  // register clint_s_xactor_ff_response_rv
  assign clint_s_xactor_ff_response_rv_D_IN =
	     clint_s_xactor_ff_response_rv_port2__read ;
  assign clint_s_xactor_ff_response_rv_EN = 1'b1 ;

  // register clint_s_xactor_rg_pready
  assign clint_s_xactor_rg_pready_D_IN =
	     CAN_FIRE_RL_clint_s_xactor_rl_send_response ;
  assign clint_s_xactor_rg_pready_EN = 1'd1 ;

  // register clint_s_xactor_rg_response
  assign clint_s_xactor_rg_response_D_IN =
	     clint_s_xactor_ff_response_rv_port1__read[32:0] ;
  assign clint_s_xactor_rg_response_EN =
	     CAN_FIRE_RL_clint_s_xactor_rl_send_response ;

  // register clint_s_xactor_rg_wait
  assign clint_s_xactor_rg_wait_D_IN =
	     !WILL_FIRE_RL_clint_s_xactor_rl_send_response ;
  assign clint_s_xactor_rg_wait_EN =
	     WILL_FIRE_RL_clint_s_xactor_rl_send_response ||
	     WILL_FIRE_RL_clint_s_xactor_rl_capture_request ;

  // submodule clint_s_xactor_ff_request
  assign clint_s_xactor_ff_request_D_IN = clint_s_xactor_wr_request_wget ;
  assign clint_s_xactor_ff_request_ENQ =
	     CAN_FIRE_RL_clint_s_xactor_rl_capture_request ;
  assign clint_s_xactor_ff_request_DEQ = CAN_FIRE_RL_clint_rl_pop_apb_req ;
  assign clint_s_xactor_ff_request_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d117 =
	     { x__h5894 | y__h5895,
	       x__h6478 | y__h6479,
	       x__h6617 | y__h6618,
	       x__h6756 | y__h6757 } ;
  assign IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d134 =
	     { IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d117,
	       x__h6895 | y__h6896,
	       x__h7034 | y__h7035 } ;
  assign IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d162 =
	     { x__h5894 | y__h8402,
	       x__h6478 | y__h8986,
	       x__h6617 | y__h9125,
	       x__h6756 | y__h9264 } ;
  assign IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d169 =
	     { IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d162,
	       x__h6895 | y__h9403,
	       x__h7034 | y__h9542 } ;
  assign IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66 =
	     (addr__h2427[2:0] == 3'd0) ?
	       newdata1__h2528 :
	       newdata1___1__h3649 ;
  assign IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70 =
	     (addr__h2427[2:0] == 3'd0) ?
	       newstrb1__h2529 :
	       newstrb1___1__h3650 ;
  assign addr__h2427 = clint_s_xactor_ff_request_D_OUT[71:40] - 32'h02000000 ;
  assign data__h10272 = { 63'd0, clint_ifc_rg_msip_inner_reg[0] } ;
  assign din__h10662 = data__h10272 >> x__h3657 ;
  assign din__h10692 = clint_ifc_rg_mtimecmp_inner_reg >> x__h3657 ;
  assign din__h10721 = clint_ifc_rg_mtime_inner_reg >> x__h3657 ;
  assign lv2__h10657 = x1_avValue_snd__h10304 | x1_avValue_snd__h10377 ;
  assign newdata1___1__h3649 = newdata1__h2528 << x__h3657 ;
  assign newdata1__h2528 = { 32'd0, clint_s_xactor_ff_request_D_OUT[35:4] } ;
  assign newstrb1___1__h3650 = newstrb1__h2529 << addr__h2427[2:0] ;
  assign newstrb1__h2529 = { 4'd0, clint_s_xactor_ff_request_D_OUT[3:0] } ;
  assign origdata__h4830 = { 7'd0, clint_ifc_rg_msip_inner_reg[0] } ;
  assign resp_prdata__h10648 = lv2__h10657 | x1_avValue_snd__h10450 ;
  assign x1_avValue_snd__h10304 =
	     (addr__h2427[31:3] == 29'd0) ?
	       ((addr__h2427[1:0] == 2'd0) ? din__h10662[31:0] : 32'd0) :
	       32'd0 ;
  assign x1_avValue_snd__h10377 =
	     (addr__h2427[31:3] == 29'd2048) ? din__h10692[31:0] : 32'd0 ;
  assign x1_avValue_snd__h10450 =
	     (addr__h2427[31:3] == 29'd6143) ? din__h10721[31:0] : 32'd0 ;
  assign x833_OR_y834__q1 = x__h4833 | y__h4834 ;
  assign x__h3657 = { addr__h2427[2:0], 3'd0 } ;
  assign x__h4833 =
	     IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66[7:0] &
	     y__h4835 ;
  assign x__h5894 =
	     IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66[63:56] &
	     y__h5896 ;
  assign x__h6478 =
	     IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66[55:48] &
	     y__h6480 ;
  assign x__h6617 =
	     IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66[47:40] &
	     y__h6619 ;
  assign x__h6756 =
	     IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66[39:32] &
	     y__h6758 ;
  assign x__h6895 =
	     IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66[31:24] &
	     y__h6897 ;
  assign x__h7034 =
	     IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66[23:16] &
	     y__h7036 ;
  assign x__h7173 =
	     IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d66[15:8] &
	     y__h7175 ;
  assign y__h4834 = origdata__h4830 & y__h4896 ;
  assign y__h4835 =
	     {8{IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70[0]}} ;
  assign y__h4896 = ~y__h4835 ;
  assign y__h5895 = clint_ifc_rg_mtimecmp_inner_reg[63:56] & y__h6401 ;
  assign y__h5896 =
	     {8{IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70[7]}} ;
  assign y__h6401 = ~y__h5896 ;
  assign y__h6479 = clint_ifc_rg_mtimecmp_inner_reg[55:48] & y__h6541 ;
  assign y__h6480 =
	     {8{IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70[6]}} ;
  assign y__h6541 = ~y__h6480 ;
  assign y__h6618 = clint_ifc_rg_mtimecmp_inner_reg[47:40] & y__h6680 ;
  assign y__h6619 =
	     {8{IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70[5]}} ;
  assign y__h6680 = ~y__h6619 ;
  assign y__h6757 = clint_ifc_rg_mtimecmp_inner_reg[39:32] & y__h6819 ;
  assign y__h6758 =
	     {8{IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70[4]}} ;
  assign y__h6819 = ~y__h6758 ;
  assign y__h6896 = clint_ifc_rg_mtimecmp_inner_reg[31:24] & y__h6958 ;
  assign y__h6897 =
	     {8{IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70[3]}} ;
  assign y__h6958 = ~y__h6897 ;
  assign y__h7035 = clint_ifc_rg_mtimecmp_inner_reg[23:16] & y__h7097 ;
  assign y__h7036 =
	     {8{IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70[2]}} ;
  assign y__h7097 = ~y__h7036 ;
  assign y__h7174 = clint_ifc_rg_mtimecmp_inner_reg[15:8] & y__h7236 ;
  assign y__h7175 =
	     {8{IF_clint_s_xactor_ff_request_first__5_BITS_71__ETC___d70[1]}} ;
  assign y__h7236 = ~y__h7175 ;
  assign y__h7313 = clint_ifc_rg_mtimecmp_inner_reg[7:0] & y__h4896 ;
  assign y__h8402 = clint_ifc_rg_mtime_inner_reg[63:56] & y__h6401 ;
  assign y__h8986 = clint_ifc_rg_mtime_inner_reg[55:48] & y__h6541 ;
  assign y__h9125 = clint_ifc_rg_mtime_inner_reg[47:40] & y__h6680 ;
  assign y__h9264 = clint_ifc_rg_mtime_inner_reg[39:32] & y__h6819 ;
  assign y__h9403 = clint_ifc_rg_mtime_inner_reg[31:24] & y__h6958 ;
  assign y__h9542 = clint_ifc_rg_mtime_inner_reg[23:16] & y__h7097 ;
  assign y__h9681 = clint_ifc_rg_mtime_inner_reg[15:8] & y__h7236 ;
  assign y__h9820 = clint_ifc_rg_mtime_inner_reg[7:0] & y__h4896 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        clint_ifc_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	clint_ifc_rg_msip_inner_reg <= `BSV_ASSIGNMENT_DELAY 64'd0;
	clint_ifc_rg_mtime_inner_reg <= `BSV_ASSIGNMENT_DELAY 64'h0;
	clint_ifc_rg_mtimecmp_inner_reg <= `BSV_ASSIGNMENT_DELAY
	    64'hFFFFFFFFFFFFFFFF;
	clint_ifc_rg_mtip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	clint_ifc_rg_tick <= `BSV_ASSIGNMENT_DELAY 3'd0;
	clint_s_xactor_ff_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	clint_s_xactor_rg_pready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	clint_s_xactor_rg_response <= `BSV_ASSIGNMENT_DELAY 33'd0;
	clint_s_xactor_rg_wait <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (clint_ifc_dummy_EN)
	  clint_ifc_dummy <= `BSV_ASSIGNMENT_DELAY clint_ifc_dummy_D_IN;
	if (clint_ifc_rg_msip_inner_reg_EN)
	  clint_ifc_rg_msip_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      clint_ifc_rg_msip_inner_reg_D_IN;
	if (clint_ifc_rg_mtime_inner_reg_EN)
	  clint_ifc_rg_mtime_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      clint_ifc_rg_mtime_inner_reg_D_IN;
	if (clint_ifc_rg_mtimecmp_inner_reg_EN)
	  clint_ifc_rg_mtimecmp_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      clint_ifc_rg_mtimecmp_inner_reg_D_IN;
	if (clint_ifc_rg_mtip_EN)
	  clint_ifc_rg_mtip <= `BSV_ASSIGNMENT_DELAY clint_ifc_rg_mtip_D_IN;
	if (clint_ifc_rg_tick_EN)
	  clint_ifc_rg_tick <= `BSV_ASSIGNMENT_DELAY clint_ifc_rg_tick_D_IN;
	if (clint_s_xactor_ff_response_rv_EN)
	  clint_s_xactor_ff_response_rv <= `BSV_ASSIGNMENT_DELAY
	      clint_s_xactor_ff_response_rv_D_IN;
	if (clint_s_xactor_rg_pready_EN)
	  clint_s_xactor_rg_pready <= `BSV_ASSIGNMENT_DELAY
	      clint_s_xactor_rg_pready_D_IN;
	if (clint_s_xactor_rg_response_EN)
	  clint_s_xactor_rg_response <= `BSV_ASSIGNMENT_DELAY
	      clint_s_xactor_rg_response_D_IN;
	if (clint_s_xactor_rg_wait_EN)
	  clint_s_xactor_rg_wait <= `BSV_ASSIGNMENT_DELAY
	      clint_s_xactor_rg_wait_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    clint_ifc_dummy = 1'h0;
    clint_ifc_rg_msip_inner_reg = 64'hAAAAAAAAAAAAAAAA;
    clint_ifc_rg_mtime_inner_reg = 64'hAAAAAAAAAAAAAAAA;
    clint_ifc_rg_mtimecmp_inner_reg = 64'hAAAAAAAAAAAAAAAA;
    clint_ifc_rg_mtip = 1'h0;
    clint_ifc_rg_tick = 3'h2;
    clint_s_xactor_ff_response_rv = 34'h2AAAAAAAA;
    clint_s_xactor_rg_pready = 1'h0;
    clint_s_xactor_rg_response = 33'h0AAAAAAAA;
    clint_s_xactor_rg_wait = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d39 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d40 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d41 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_9_OR_TASK_testplusargs_0_AND_ETC___d49 =
	(TASK_testplusargs___d39 ||
	 TASK_testplusargs___d40 && TASK_testplusargs___d41) &&
	clint_s_xactor_ff_request_D_OUT[36];
    TASK_testplusargs_9_OR_TASK_testplusargs_0_AND_ETC___d51 =
	(TASK_testplusargs___d39 ||
	 TASK_testplusargs___d40 && TASK_testplusargs___d41) &&
	!clint_s_xactor_ff_request_D_OUT[36];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req)
	begin
	  v__h2288 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  (TASK_testplusargs___d39 ||
	   TASK_testplusargs___d40 && TASK_testplusargs___d41))
	$write("[%10d", v__h2288, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  (TASK_testplusargs___d39 ||
	   TASK_testplusargs___d40 && TASK_testplusargs___d41))
	$write("DC2APB: Req:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  (TASK_testplusargs___d39 ||
	   TASK_testplusargs___d40 && TASK_testplusargs___d41))
	$write("{paddr:'h%0h,",
	       clint_s_xactor_ff_request_D_OUT[71:40],
	       "prot:%0d",
	       clint_s_xactor_ff_request_D_OUT[39:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  (TASK_testplusargs___d39 ||
	   TASK_testplusargs___d40 && TASK_testplusargs___d41))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  TASK_testplusargs_9_OR_TASK_testplusargs_0_AND_ETC___d49)
	$write("write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  TASK_testplusargs_9_OR_TASK_testplusargs_0_AND_ETC___d51)
	$write("read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  TASK_testplusargs_9_OR_TASK_testplusargs_0_AND_ETC___d49)
	$write(",data:'h%0h",
	       clint_s_xactor_ff_request_D_OUT[35:4],
	       ",strb:%b",
	       clint_s_xactor_ff_request_D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  TASK_testplusargs_9_OR_TASK_testplusargs_0_AND_ETC___d51)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  (TASK_testplusargs___d39 ||
	   TASK_testplusargs___d40 && TASK_testplusargs___d41))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  (TASK_testplusargs___d39 ||
	   TASK_testplusargs___d40 && TASK_testplusargs___d41))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d177 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d178 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d179 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_77_OR_TASK_testplusargs_78_A_ETC___d191 =
	(TASK_testplusargs___d177 ||
	 TASK_testplusargs___d178 && TASK_testplusargs___d179) &&
	(addr__h2427[31:3] != 29'd0 || addr__h2427[1:0] != 2'd0) &&
	addr__h2427[31:3] != 29'd2048 &&
	addr__h2427[31:3] != 29'd6143;
    TASK_testplusargs_77_OR_TASK_testplusargs_78_A_ETC___d195 =
	(TASK_testplusargs___d177 ||
	 TASK_testplusargs___d178 && TASK_testplusargs___d179) &&
	(addr__h2427[31:3] == 29'd0 && addr__h2427[1:0] == 2'd0 ||
	 addr__h2427[31:3] == 29'd2048 ||
	 addr__h2427[31:3] == 29'd6143);
    clint_s_xactor_ff_request_first__5_BIT_36_8_AN_ETC___d182 =
	clint_s_xactor_ff_request_D_OUT[36] &&
	(TASK_testplusargs___d177 ||
	 TASK_testplusargs___d178 && TASK_testplusargs___d179);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_D_OUT[36])
	begin
	  v__h10088 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_first__5_BIT_36_8_AN_ETC___d182)
	$write("[%10d", v__h10088, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_first__5_BIT_36_8_AN_ETC___d182)
	$write("DC2APB: Write Resp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_first__5_BIT_36_8_AN_ETC___d182)
	$write("{prdata:'h%0h pslverr:",
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_77_OR_TASK_testplusargs_78_A_ETC___d191)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_77_OR_TASK_testplusargs_78_A_ETC___d195)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_first__5_BIT_36_8_AN_ETC___d182)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  clint_s_xactor_ff_request_first__5_BIT_36_8_AN_ETC___d182)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  !clint_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d199 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  !clint_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d200 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  !clint_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d201 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d219 =
	(TASK_testplusargs___d199 ||
	 TASK_testplusargs___d200 && TASK_testplusargs___d201) &&
	(addr__h2427[31:3] != 29'd0 || addr__h2427[1:0] != 2'd0) &&
	addr__h2427[31:3] != 29'd2048 &&
	addr__h2427[31:3] != 29'd6143;
    TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d221 =
	(TASK_testplusargs___d199 ||
	 TASK_testplusargs___d200 && TASK_testplusargs___d201) &&
	(addr__h2427[31:3] == 29'd0 && addr__h2427[1:0] == 2'd0 ||
	 addr__h2427[31:3] == 29'd2048 ||
	 addr__h2427[31:3] == 29'd6143);
    NOT_clint_s_xactor_ff_request_first__5_BIT_36__ETC___d204 =
	!clint_s_xactor_ff_request_D_OUT[36] &&
	(TASK_testplusargs___d199 ||
	 TASK_testplusargs___d200 && TASK_testplusargs___d201);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  !clint_s_xactor_ff_request_D_OUT[36])
	begin
	  v__h10587 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  NOT_clint_s_xactor_ff_request_first__5_BIT_36__ETC___d204)
	$write("[%10d", v__h10587, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  NOT_clint_s_xactor_ff_request_first__5_BIT_36__ETC___d204)
	$write("DC2APB: Read Resp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  NOT_clint_s_xactor_ff_request_first__5_BIT_36__ETC___d204)
	$write("{prdata:'h%0h pslverr:", resp_prdata__h10648);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  !clint_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d219)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  !clint_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d221)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  NOT_clint_s_xactor_ff_request_first__5_BIT_36__ETC___d204)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_clint_rl_pop_apb_req &&
	  NOT_clint_s_xactor_ff_request_first__5_BIT_36__ETC___d204)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkclint


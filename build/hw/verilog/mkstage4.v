//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:35:46 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// rx_rx_baseout_from_stage3_deq_ena  O     1
// rx_rx_trapout_from_stage3_deq_ena  O     1
// rx_rx_systemout_from_stage3_deq_ena  O     1
// rx_rx_memoryout_from_stage3_deq_ena  O     1
// rx_rx_fuid_from_stage3_deq_ena  O     1
// rx_rx_commitlog_deq_ena        O     1
// tx_tx_systemout_to_stage5_enq_ena  O     1
// tx_tx_systemout_to_stage5_enq_data  O    81
// tx_tx_trapout_to_stage5_enq_ena  O     1
// tx_tx_trapout_to_stage5_enq_data  O    72
// tx_tx_baseout_to_stage5_enq_ena  O     1
// tx_tx_baseout_to_stage5_enq_data  O    74
// tx_tx_memio_to_stage5_enq_ena  O     1
// tx_tx_memio_to_stage5_enq_data  O    69
// tx_tx_fuid_to_stage5_enq_ena   O     1
// tx_tx_fuid_to_stage5_enq_data  O    76
// tx_tx_commitlog_enq_ena        O     1
// tx_tx_commitlog_enq_data       O   309
// RDY_cache_memory_response_put  O     1
// s4_mbox_rx_mbox_output_deq_ena  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rx_rx_baseout_from_stage3_notEmpty_b  I     1 unused
// rx_rx_baseout_from_stage3_first_deq_rdy_b  I     1
// rx_rx_baseout_from_stage3_first_x  I    74
// rx_rx_trapout_from_stage3_notEmpty_b  I     1 unused
// rx_rx_trapout_from_stage3_first_deq_rdy_b  I     1
// rx_rx_trapout_from_stage3_first_x  I    72
// rx_rx_systemout_from_stage3_notEmpty_b  I     1 unused
// rx_rx_systemout_from_stage3_first_deq_rdy_b  I     1
// rx_rx_systemout_from_stage3_first_x  I    81
// rx_rx_memoryout_from_stage3_notEmpty_b  I     1 unused
// rx_rx_memoryout_from_stage3_first_deq_rdy_b  I     1
// rx_rx_memoryout_from_stage3_first_x  I     8
// rx_rx_fuid_from_stage3_notEmpty_b  I     1
// rx_rx_fuid_from_stage3_first_deq_rdy_b  I     1
// rx_rx_fuid_from_stage3_first_x  I    77
// rx_rx_commitlog_notEmpty_b     I     1 unused
// rx_rx_commitlog_first_deq_rdy_b  I     1
// rx_rx_commitlog_first_x        I   309
// tx_tx_systemout_to_stage5_notFull_b  I     1 unused
// tx_tx_systemout_to_stage5_enq_rdy_b  I     1
// tx_tx_trapout_to_stage5_notFull_b  I     1 unused
// tx_tx_trapout_to_stage5_enq_rdy_b  I     1
// tx_tx_baseout_to_stage5_notFull_b  I     1 unused
// tx_tx_baseout_to_stage5_enq_rdy_b  I     1
// tx_tx_memio_to_stage5_notFull_b  I     1 unused
// tx_tx_memio_to_stage5_enq_rdy_b  I     1
// tx_tx_fuid_to_stage5_notFull_b  I     1 unused
// tx_tx_fuid_to_stage5_enq_rdy_b  I     1
// tx_tx_commitlog_notFull_b      I     1 unused
// tx_tx_commitlog_enq_rdy_b      I     1
// cache_memory_response_put      I    76
// s4_mbox_rx_mbox_output_notEmpty_b  I     1
// s4_mbox_rx_mbox_output_first_deq_rdy_b  I     1
// s4_mbox_rx_mbox_output_first_x  I    64
// EN_cache_memory_response_put   I     1
//
// Combinational paths from inputs to outputs:
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b) -> rx_rx_baseout_from_stage3_deq_ena
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b,
//    EN_cache_memory_response_put) -> rx_rx_fuid_from_stage3_deq_ena
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b,
//    EN_cache_memory_response_put) -> rx_rx_commitlog_deq_ena
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b,
//    EN_cache_memory_response_put) -> tx_tx_baseout_to_stage5_enq_ena
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_baseout_from_stage3_first_x,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b,
//    s4_mbox_rx_mbox_output_first_x,
//    EN_cache_memory_response_put) -> tx_tx_baseout_to_stage5_enq_data
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b,
//    EN_cache_memory_response_put) -> tx_tx_fuid_to_stage5_enq_ena
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b,
//    EN_cache_memory_response_put) -> tx_tx_fuid_to_stage5_enq_data
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b,
//    EN_cache_memory_response_put) -> tx_tx_commitlog_enq_ena
//   (rx_rx_baseout_from_stage3_first_deq_rdy_b,
//    rx_rx_baseout_from_stage3_first_x,
//    rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_x,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    rx_rx_commitlog_first_x,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b,
//    s4_mbox_rx_mbox_output_first_x,
//    EN_cache_memory_response_put) -> tx_tx_commitlog_enq_data
//   (rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b) -> rx_rx_trapout_from_stage3_deq_ena
//   (rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    EN_cache_memory_response_put) -> tx_tx_trapout_to_stage5_enq_ena
//   (rx_rx_trapout_from_stage3_first_deq_rdy_b,
//    rx_rx_trapout_from_stage3_first_x,
//    rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    EN_cache_memory_response_put) -> tx_tx_trapout_to_stage5_enq_data
//   (rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b) -> rx_rx_systemout_from_stage3_deq_ena
//   (rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b) -> tx_tx_systemout_to_stage5_enq_ena
//   (rx_rx_systemout_from_stage3_first_deq_rdy_b,
//    rx_rx_systemout_from_stage3_first_x,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_systemout_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b) -> tx_tx_systemout_to_stage5_enq_data
//   (rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    EN_cache_memory_response_put) -> rx_rx_memoryout_from_stage3_deq_ena
//   (rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    EN_cache_memory_response_put) -> tx_tx_memio_to_stage5_enq_ena
//   (rx_rx_memoryout_from_stage3_first_deq_rdy_b,
//    rx_rx_memoryout_from_stage3_first_x,
//    rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_trapout_to_stage5_enq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_memio_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    cache_memory_response_put,
//    EN_cache_memory_response_put) -> tx_tx_memio_to_stage5_enq_data
//   (rx_rx_fuid_from_stage3_first_deq_rdy_b,
//    rx_rx_fuid_from_stage3_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_baseout_to_stage5_enq_rdy_b,
//    tx_tx_fuid_to_stage5_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    s4_mbox_rx_mbox_output_notEmpty_b,
//    s4_mbox_rx_mbox_output_first_deq_rdy_b) -> s4_mbox_rx_mbox_output_deq_ena
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage4(CLK,
		RST_N,

		rx_rx_baseout_from_stage3_notEmpty_b,

		rx_rx_baseout_from_stage3_first_deq_rdy_b,

		rx_rx_baseout_from_stage3_first_x,

		rx_rx_baseout_from_stage3_deq_ena,

		rx_rx_trapout_from_stage3_notEmpty_b,

		rx_rx_trapout_from_stage3_first_deq_rdy_b,

		rx_rx_trapout_from_stage3_first_x,

		rx_rx_trapout_from_stage3_deq_ena,

		rx_rx_systemout_from_stage3_notEmpty_b,

		rx_rx_systemout_from_stage3_first_deq_rdy_b,

		rx_rx_systemout_from_stage3_first_x,

		rx_rx_systemout_from_stage3_deq_ena,

		rx_rx_memoryout_from_stage3_notEmpty_b,

		rx_rx_memoryout_from_stage3_first_deq_rdy_b,

		rx_rx_memoryout_from_stage3_first_x,

		rx_rx_memoryout_from_stage3_deq_ena,

		rx_rx_fuid_from_stage3_notEmpty_b,

		rx_rx_fuid_from_stage3_first_deq_rdy_b,

		rx_rx_fuid_from_stage3_first_x,

		rx_rx_fuid_from_stage3_deq_ena,

		rx_rx_commitlog_notEmpty_b,

		rx_rx_commitlog_first_deq_rdy_b,

		rx_rx_commitlog_first_x,

		rx_rx_commitlog_deq_ena,

		tx_tx_systemout_to_stage5_notFull_b,

		tx_tx_systemout_to_stage5_enq_rdy_b,

		tx_tx_systemout_to_stage5_enq_ena,

		tx_tx_systemout_to_stage5_enq_data,

		tx_tx_trapout_to_stage5_notFull_b,

		tx_tx_trapout_to_stage5_enq_rdy_b,

		tx_tx_trapout_to_stage5_enq_ena,

		tx_tx_trapout_to_stage5_enq_data,

		tx_tx_baseout_to_stage5_notFull_b,

		tx_tx_baseout_to_stage5_enq_rdy_b,

		tx_tx_baseout_to_stage5_enq_ena,

		tx_tx_baseout_to_stage5_enq_data,

		tx_tx_memio_to_stage5_notFull_b,

		tx_tx_memio_to_stage5_enq_rdy_b,

		tx_tx_memio_to_stage5_enq_ena,

		tx_tx_memio_to_stage5_enq_data,

		tx_tx_fuid_to_stage5_notFull_b,

		tx_tx_fuid_to_stage5_enq_rdy_b,

		tx_tx_fuid_to_stage5_enq_ena,

		tx_tx_fuid_to_stage5_enq_data,

		tx_tx_commitlog_notFull_b,

		tx_tx_commitlog_enq_rdy_b,

		tx_tx_commitlog_enq_ena,

		tx_tx_commitlog_enq_data,

		cache_memory_response_put,
		EN_cache_memory_response_put,
		RDY_cache_memory_response_put,

		s4_mbox_rx_mbox_output_notEmpty_b,

		s4_mbox_rx_mbox_output_first_deq_rdy_b,

		s4_mbox_rx_mbox_output_first_x,

		s4_mbox_rx_mbox_output_deq_ena);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // action method rx_rx_baseout_from_stage3_notEmpty
  input  rx_rx_baseout_from_stage3_notEmpty_b;

  // action method rx_rx_baseout_from_stage3_first_deq_rdy
  input  rx_rx_baseout_from_stage3_first_deq_rdy_b;

  // action method rx_rx_baseout_from_stage3_first
  input  [73 : 0] rx_rx_baseout_from_stage3_first_x;

  // value method rx_rx_baseout_from_stage3_deq_ena
  output rx_rx_baseout_from_stage3_deq_ena;

  // action method rx_rx_trapout_from_stage3_notEmpty
  input  rx_rx_trapout_from_stage3_notEmpty_b;

  // action method rx_rx_trapout_from_stage3_first_deq_rdy
  input  rx_rx_trapout_from_stage3_first_deq_rdy_b;

  // action method rx_rx_trapout_from_stage3_first
  input  [71 : 0] rx_rx_trapout_from_stage3_first_x;

  // value method rx_rx_trapout_from_stage3_deq_ena
  output rx_rx_trapout_from_stage3_deq_ena;

  // action method rx_rx_systemout_from_stage3_notEmpty
  input  rx_rx_systemout_from_stage3_notEmpty_b;

  // action method rx_rx_systemout_from_stage3_first_deq_rdy
  input  rx_rx_systemout_from_stage3_first_deq_rdy_b;

  // action method rx_rx_systemout_from_stage3_first
  input  [80 : 0] rx_rx_systemout_from_stage3_first_x;

  // value method rx_rx_systemout_from_stage3_deq_ena
  output rx_rx_systemout_from_stage3_deq_ena;

  // action method rx_rx_memoryout_from_stage3_notEmpty
  input  rx_rx_memoryout_from_stage3_notEmpty_b;

  // action method rx_rx_memoryout_from_stage3_first_deq_rdy
  input  rx_rx_memoryout_from_stage3_first_deq_rdy_b;

  // action method rx_rx_memoryout_from_stage3_first
  input  [7 : 0] rx_rx_memoryout_from_stage3_first_x;

  // value method rx_rx_memoryout_from_stage3_deq_ena
  output rx_rx_memoryout_from_stage3_deq_ena;

  // action method rx_rx_fuid_from_stage3_notEmpty
  input  rx_rx_fuid_from_stage3_notEmpty_b;

  // action method rx_rx_fuid_from_stage3_first_deq_rdy
  input  rx_rx_fuid_from_stage3_first_deq_rdy_b;

  // action method rx_rx_fuid_from_stage3_first
  input  [76 : 0] rx_rx_fuid_from_stage3_first_x;

  // value method rx_rx_fuid_from_stage3_deq_ena
  output rx_rx_fuid_from_stage3_deq_ena;

  // action method rx_rx_commitlog_notEmpty
  input  rx_rx_commitlog_notEmpty_b;

  // action method rx_rx_commitlog_first_deq_rdy
  input  rx_rx_commitlog_first_deq_rdy_b;

  // action method rx_rx_commitlog_first
  input  [308 : 0] rx_rx_commitlog_first_x;

  // value method rx_rx_commitlog_deq_ena
  output rx_rx_commitlog_deq_ena;

  // action method tx_tx_systemout_to_stage5_notFull
  input  tx_tx_systemout_to_stage5_notFull_b;

  // action method tx_tx_systemout_to_stage5_enq_rdy
  input  tx_tx_systemout_to_stage5_enq_rdy_b;

  // value method tx_tx_systemout_to_stage5_enq_ena
  output tx_tx_systemout_to_stage5_enq_ena;

  // value method tx_tx_systemout_to_stage5_enq_data
  output [80 : 0] tx_tx_systemout_to_stage5_enq_data;

  // action method tx_tx_trapout_to_stage5_notFull
  input  tx_tx_trapout_to_stage5_notFull_b;

  // action method tx_tx_trapout_to_stage5_enq_rdy
  input  tx_tx_trapout_to_stage5_enq_rdy_b;

  // value method tx_tx_trapout_to_stage5_enq_ena
  output tx_tx_trapout_to_stage5_enq_ena;

  // value method tx_tx_trapout_to_stage5_enq_data
  output [71 : 0] tx_tx_trapout_to_stage5_enq_data;

  // action method tx_tx_baseout_to_stage5_notFull
  input  tx_tx_baseout_to_stage5_notFull_b;

  // action method tx_tx_baseout_to_stage5_enq_rdy
  input  tx_tx_baseout_to_stage5_enq_rdy_b;

  // value method tx_tx_baseout_to_stage5_enq_ena
  output tx_tx_baseout_to_stage5_enq_ena;

  // value method tx_tx_baseout_to_stage5_enq_data
  output [73 : 0] tx_tx_baseout_to_stage5_enq_data;

  // action method tx_tx_memio_to_stage5_notFull
  input  tx_tx_memio_to_stage5_notFull_b;

  // action method tx_tx_memio_to_stage5_enq_rdy
  input  tx_tx_memio_to_stage5_enq_rdy_b;

  // value method tx_tx_memio_to_stage5_enq_ena
  output tx_tx_memio_to_stage5_enq_ena;

  // value method tx_tx_memio_to_stage5_enq_data
  output [68 : 0] tx_tx_memio_to_stage5_enq_data;

  // action method tx_tx_fuid_to_stage5_notFull
  input  tx_tx_fuid_to_stage5_notFull_b;

  // action method tx_tx_fuid_to_stage5_enq_rdy
  input  tx_tx_fuid_to_stage5_enq_rdy_b;

  // value method tx_tx_fuid_to_stage5_enq_ena
  output tx_tx_fuid_to_stage5_enq_ena;

  // value method tx_tx_fuid_to_stage5_enq_data
  output [75 : 0] tx_tx_fuid_to_stage5_enq_data;

  // action method tx_tx_commitlog_notFull
  input  tx_tx_commitlog_notFull_b;

  // action method tx_tx_commitlog_enq_rdy
  input  tx_tx_commitlog_enq_rdy_b;

  // value method tx_tx_commitlog_enq_ena
  output tx_tx_commitlog_enq_ena;

  // value method tx_tx_commitlog_enq_data
  output [308 : 0] tx_tx_commitlog_enq_data;

  // action method cache_memory_response_put
  input  [75 : 0] cache_memory_response_put;
  input  EN_cache_memory_response_put;
  output RDY_cache_memory_response_put;

  // action method s4_mbox_rx_mbox_output_notEmpty
  input  s4_mbox_rx_mbox_output_notEmpty_b;

  // action method s4_mbox_rx_mbox_output_first_deq_rdy
  input  s4_mbox_rx_mbox_output_first_deq_rdy_b;

  // action method s4_mbox_rx_mbox_output_first
  input  [63 : 0] s4_mbox_rx_mbox_output_first_x;

  // value method s4_mbox_rx_mbox_output_deq_ena
  output s4_mbox_rx_mbox_output_deq_ena;

  // signals for module outputs
  reg [308 : 0] tx_tx_commitlog_enq_data;
  reg [75 : 0] tx_tx_fuid_to_stage5_enq_data;
  reg [73 : 0] tx_tx_baseout_to_stage5_enq_data;
  wire [80 : 0] tx_tx_systemout_to_stage5_enq_data;
  wire [71 : 0] tx_tx_trapout_to_stage5_enq_data;
  wire [68 : 0] tx_tx_memio_to_stage5_enq_data;
  wire RDY_cache_memory_response_put,
       rx_rx_baseout_from_stage3_deq_ena,
       rx_rx_commitlog_deq_ena,
       rx_rx_fuid_from_stage3_deq_ena,
       rx_rx_memoryout_from_stage3_deq_ena,
       rx_rx_systemout_from_stage3_deq_ena,
       rx_rx_trapout_from_stage3_deq_ena,
       s4_mbox_rx_mbox_output_deq_ena,
       tx_tx_baseout_to_stage5_enq_ena,
       tx_tx_commitlog_enq_ena,
       tx_tx_fuid_to_stage5_enq_ena,
       tx_tx_memio_to_stage5_enq_ena,
       tx_tx_systemout_to_stage5_enq_ena,
       tx_tx_trapout_to_stage5_enq_ena;

  // inlined wires
  wire [76 : 0] ff_memory_response_rv_port0__write_1,
		ff_memory_response_rv_port1__read,
		ff_memory_response_rv_port1__write_1,
		ff_memory_response_rv_port2__read;
  wire rx_fuid_w_ena_whas,
       tx_baseout_w_ena_whas,
       tx_memio_w_ena_whas,
       tx_trapout_w_ena_whas;

  // register ff_memory_response_rv
  reg [76 : 0] ff_memory_response_rv;
  wire [76 : 0] ff_memory_response_rv_D_IN;
  wire ff_memory_response_rv_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_capture_muldiv,
       CAN_FIRE_RL_rl_fwd_baseout,
       CAN_FIRE_RL_rl_fwd_systemout,
       CAN_FIRE_RL_rl_fwd_trapout,
       CAN_FIRE_RL_rl_handle_memory,
       CAN_FIRE_RL_rl_polling_check,
       CAN_FIRE_cache_memory_response_put,
       CAN_FIRE_rx_rx_baseout_from_stage3_first,
       CAN_FIRE_rx_rx_baseout_from_stage3_first_deq_rdy,
       CAN_FIRE_rx_rx_baseout_from_stage3_notEmpty,
       CAN_FIRE_rx_rx_commitlog_first,
       CAN_FIRE_rx_rx_commitlog_first_deq_rdy,
       CAN_FIRE_rx_rx_commitlog_notEmpty,
       CAN_FIRE_rx_rx_fuid_from_stage3_first,
       CAN_FIRE_rx_rx_fuid_from_stage3_first_deq_rdy,
       CAN_FIRE_rx_rx_fuid_from_stage3_notEmpty,
       CAN_FIRE_rx_rx_memoryout_from_stage3_first,
       CAN_FIRE_rx_rx_memoryout_from_stage3_first_deq_rdy,
       CAN_FIRE_rx_rx_memoryout_from_stage3_notEmpty,
       CAN_FIRE_rx_rx_systemout_from_stage3_first,
       CAN_FIRE_rx_rx_systemout_from_stage3_first_deq_rdy,
       CAN_FIRE_rx_rx_systemout_from_stage3_notEmpty,
       CAN_FIRE_rx_rx_trapout_from_stage3_first,
       CAN_FIRE_rx_rx_trapout_from_stage3_first_deq_rdy,
       CAN_FIRE_rx_rx_trapout_from_stage3_notEmpty,
       CAN_FIRE_s4_mbox_rx_mbox_output_first,
       CAN_FIRE_s4_mbox_rx_mbox_output_first_deq_rdy,
       CAN_FIRE_s4_mbox_rx_mbox_output_notEmpty,
       CAN_FIRE_tx_tx_baseout_to_stage5_enq_rdy,
       CAN_FIRE_tx_tx_baseout_to_stage5_notFull,
       CAN_FIRE_tx_tx_commitlog_enq_rdy,
       CAN_FIRE_tx_tx_commitlog_notFull,
       CAN_FIRE_tx_tx_fuid_to_stage5_enq_rdy,
       CAN_FIRE_tx_tx_fuid_to_stage5_notFull,
       CAN_FIRE_tx_tx_memio_to_stage5_enq_rdy,
       CAN_FIRE_tx_tx_memio_to_stage5_notFull,
       CAN_FIRE_tx_tx_systemout_to_stage5_enq_rdy,
       CAN_FIRE_tx_tx_systemout_to_stage5_notFull,
       CAN_FIRE_tx_tx_trapout_to_stage5_enq_rdy,
       CAN_FIRE_tx_tx_trapout_to_stage5_notFull,
       WILL_FIRE_RL_rl_capture_muldiv,
       WILL_FIRE_RL_rl_fwd_baseout,
       WILL_FIRE_RL_rl_fwd_systemout,
       WILL_FIRE_RL_rl_fwd_trapout,
       WILL_FIRE_RL_rl_handle_memory,
       WILL_FIRE_RL_rl_polling_check,
       WILL_FIRE_cache_memory_response_put,
       WILL_FIRE_rx_rx_baseout_from_stage3_first,
       WILL_FIRE_rx_rx_baseout_from_stage3_first_deq_rdy,
       WILL_FIRE_rx_rx_baseout_from_stage3_notEmpty,
       WILL_FIRE_rx_rx_commitlog_first,
       WILL_FIRE_rx_rx_commitlog_first_deq_rdy,
       WILL_FIRE_rx_rx_commitlog_notEmpty,
       WILL_FIRE_rx_rx_fuid_from_stage3_first,
       WILL_FIRE_rx_rx_fuid_from_stage3_first_deq_rdy,
       WILL_FIRE_rx_rx_fuid_from_stage3_notEmpty,
       WILL_FIRE_rx_rx_memoryout_from_stage3_first,
       WILL_FIRE_rx_rx_memoryout_from_stage3_first_deq_rdy,
       WILL_FIRE_rx_rx_memoryout_from_stage3_notEmpty,
       WILL_FIRE_rx_rx_systemout_from_stage3_first,
       WILL_FIRE_rx_rx_systemout_from_stage3_first_deq_rdy,
       WILL_FIRE_rx_rx_systemout_from_stage3_notEmpty,
       WILL_FIRE_rx_rx_trapout_from_stage3_first,
       WILL_FIRE_rx_rx_trapout_from_stage3_first_deq_rdy,
       WILL_FIRE_rx_rx_trapout_from_stage3_notEmpty,
       WILL_FIRE_s4_mbox_rx_mbox_output_first,
       WILL_FIRE_s4_mbox_rx_mbox_output_first_deq_rdy,
       WILL_FIRE_s4_mbox_rx_mbox_output_notEmpty,
       WILL_FIRE_tx_tx_baseout_to_stage5_enq_rdy,
       WILL_FIRE_tx_tx_baseout_to_stage5_notFull,
       WILL_FIRE_tx_tx_commitlog_enq_rdy,
       WILL_FIRE_tx_tx_commitlog_notFull,
       WILL_FIRE_tx_tx_fuid_to_stage5_enq_rdy,
       WILL_FIRE_tx_tx_fuid_to_stage5_notFull,
       WILL_FIRE_tx_tx_memio_to_stage5_enq_rdy,
       WILL_FIRE_tx_tx_memio_to_stage5_notFull,
       WILL_FIRE_tx_tx_systemout_to_stage5_enq_rdy,
       WILL_FIRE_tx_tx_systemout_to_stage5_notFull,
       WILL_FIRE_tx_tx_trapout_to_stage5_enq_rdy,
       WILL_FIRE_tx_tx_trapout_to_stage5_notFull;

  // inputs to muxes for submodule ports
  wire [308 : 0] MUX_tx_commitlog_w_data_wset_1__VAL_1,
		 MUX_tx_commitlog_w_data_wset_1__VAL_3,
		 MUX_tx_commitlog_w_data_wset_1__VAL_4;
  wire [75 : 0] MUX_tx_fuid_w_data_wset_1__VAL_1,
		MUX_tx_fuid_w_data_wset_1__VAL_2,
		MUX_tx_fuid_w_data_wset_1__VAL_3;
  wire [73 : 0] MUX_tx_baseout_w_data_wset_1__VAL_1,
		MUX_tx_baseout_w_data_wset_1__VAL_3;
  wire [71 : 0] MUX_tx_trapout_w_data_wset_1__VAL_1;
  wire MUX_rx_commitlog_w_ena_wset_1__SEL_1,
       MUX_tx_baseout_w_data_wset_1__SEL_1,
       MUX_tx_commitlog_w_data_wset_1__SEL_2,
       MUX_tx_fuid_w_data_wset_1__SEL_2,
       MUX_tx_trapout_w_data_wset_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d71;
  reg TASK_testplusargs___d72;
  reg TASK_testplusargs___d73;
  reg [63 : 0] v__h4306;
  reg TASK_testplusargs___d77;
  reg TASK_testplusargs___d78;
  reg TASK_testplusargs___d79;
  reg [63 : 0] v__h4451;
  reg TASK_testplusargs___d101;
  reg TASK_testplusargs___d102;
  reg TASK_testplusargs___d103;
  reg [63 : 0] v__h5306;
  reg TASK_testplusargs___d107;
  reg TASK_testplusargs___d108;
  reg TASK_testplusargs___d109;
  reg [63 : 0] v__h5451;
  reg TASK_testplusargs___d125;
  reg TASK_testplusargs___d126;
  reg TASK_testplusargs___d127;
  reg [63 : 0] v__h6643;
  reg TASK_testplusargs___d131;
  reg TASK_testplusargs___d132;
  reg TASK_testplusargs___d133;
  reg [63 : 0] v__h6788;
  reg TASK_testplusargs___d151;
  reg TASK_testplusargs___d152;
  reg TASK_testplusargs___d153;
  reg [63 : 0] v__h7762;
  reg TASK_testplusargs___d194;
  reg TASK_testplusargs___d195;
  reg TASK_testplusargs___d196;
  reg [63 : 0] v__h8442;
  reg TASK_testplusargs___d255;
  reg TASK_testplusargs___d256;
  reg TASK_testplusargs___d257;
  reg [63 : 0] v__h9520;
  reg TASK_testplusargs___d328;
  reg TASK_testplusargs___d329;
  reg TASK_testplusargs___d330;
  reg [63 : 0] v__h10485;
  reg TASK_testplusargs___d340;
  reg TASK_testplusargs___d341;
  reg TASK_testplusargs___d342;
  reg [63 : 0] v__h8004;
  reg TASK_testplusargs___d4;
  reg TASK_testplusargs___d5;
  reg TASK_testplusargs___d6;
  reg [63 : 0] v__h3630;
  reg TASK_testplusargs___d14;
  reg TASK_testplusargs___d15;
  reg TASK_testplusargs___d16;
  reg [63 : 0] v__h3848;
  reg TASK_testplusargs___d360;
  reg TASK_testplusargs___d361;
  reg TASK_testplusargs___d362;
  reg [63 : 0] v__h11381;
  reg TASK_testplusargs___d366;
  reg TASK_testplusargs___d367;
  reg TASK_testplusargs___d368;
  reg [63 : 0] v__h11526;
  reg ff_memory_response_rv_port1__read__37_BIT_11_6_ETC___d199;
  reg TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d203;
  reg TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d226;
  reg ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d264;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d269;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d275;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d281;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d287;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d293;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d299;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d318;
  reg NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d333;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d26;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d29;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d32;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d45;
  reg NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d345;
  // synopsys translate_on

  // remaining internal signals
  wire [308 : 0] rx_commitlog_w_data_wget__3_BITS_308_TO_211_4__ETC___d189;
  wire [208 : 0] IF_NOT_IF_rx_memoryout_w_data_whas__68_THEN_rx_ETC___d188;
  wire ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161,
       tx_fuid_w_rdy_wget__8_AND_tx_commitlog_w_rdy_w_ETC___d146;

  // action method rx_rx_baseout_from_stage3_notEmpty
  assign CAN_FIRE_rx_rx_baseout_from_stage3_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_baseout_from_stage3_notEmpty = 1'd1 ;

  // action method rx_rx_baseout_from_stage3_first_deq_rdy
  assign CAN_FIRE_rx_rx_baseout_from_stage3_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_baseout_from_stage3_first_deq_rdy = 1'd1 ;

  // action method rx_rx_baseout_from_stage3_first
  assign CAN_FIRE_rx_rx_baseout_from_stage3_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_baseout_from_stage3_first = 1'd1 ;

  // value method rx_rx_baseout_from_stage3_deq_ena
  assign rx_rx_baseout_from_stage3_deq_ena = CAN_FIRE_RL_rl_fwd_baseout ;

  // action method rx_rx_trapout_from_stage3_notEmpty
  assign CAN_FIRE_rx_rx_trapout_from_stage3_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_trapout_from_stage3_notEmpty = 1'd1 ;

  // action method rx_rx_trapout_from_stage3_first_deq_rdy
  assign CAN_FIRE_rx_rx_trapout_from_stage3_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_trapout_from_stage3_first_deq_rdy = 1'd1 ;

  // action method rx_rx_trapout_from_stage3_first
  assign CAN_FIRE_rx_rx_trapout_from_stage3_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_trapout_from_stage3_first = 1'd1 ;

  // value method rx_rx_trapout_from_stage3_deq_ena
  assign rx_rx_trapout_from_stage3_deq_ena = CAN_FIRE_RL_rl_fwd_trapout ;

  // action method rx_rx_systemout_from_stage3_notEmpty
  assign CAN_FIRE_rx_rx_systemout_from_stage3_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_systemout_from_stage3_notEmpty = 1'd1 ;

  // action method rx_rx_systemout_from_stage3_first_deq_rdy
  assign CAN_FIRE_rx_rx_systemout_from_stage3_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_systemout_from_stage3_first_deq_rdy = 1'd1 ;

  // action method rx_rx_systemout_from_stage3_first
  assign CAN_FIRE_rx_rx_systemout_from_stage3_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_systemout_from_stage3_first = 1'd1 ;

  // value method rx_rx_systemout_from_stage3_deq_ena
  assign rx_rx_systemout_from_stage3_deq_ena = CAN_FIRE_RL_rl_fwd_systemout ;

  // action method rx_rx_memoryout_from_stage3_notEmpty
  assign CAN_FIRE_rx_rx_memoryout_from_stage3_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_memoryout_from_stage3_notEmpty = 1'd1 ;

  // action method rx_rx_memoryout_from_stage3_first_deq_rdy
  assign CAN_FIRE_rx_rx_memoryout_from_stage3_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_memoryout_from_stage3_first_deq_rdy = 1'd1 ;

  // action method rx_rx_memoryout_from_stage3_first
  assign CAN_FIRE_rx_rx_memoryout_from_stage3_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_memoryout_from_stage3_first = 1'd1 ;

  // value method rx_rx_memoryout_from_stage3_deq_ena
  assign rx_rx_memoryout_from_stage3_deq_ena =
	     MUX_rx_commitlog_w_ena_wset_1__SEL_1 ;

  // action method rx_rx_fuid_from_stage3_notEmpty
  assign CAN_FIRE_rx_rx_fuid_from_stage3_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_fuid_from_stage3_notEmpty = 1'd1 ;

  // action method rx_rx_fuid_from_stage3_first_deq_rdy
  assign CAN_FIRE_rx_rx_fuid_from_stage3_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_fuid_from_stage3_first_deq_rdy = 1'd1 ;

  // action method rx_rx_fuid_from_stage3_first
  assign CAN_FIRE_rx_rx_fuid_from_stage3_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_fuid_from_stage3_first = 1'd1 ;

  // value method rx_rx_fuid_from_stage3_deq_ena
  assign rx_rx_fuid_from_stage3_deq_ena = rx_fuid_w_ena_whas ;

  // action method rx_rx_commitlog_notEmpty
  assign CAN_FIRE_rx_rx_commitlog_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_notEmpty = 1'd1 ;

  // action method rx_rx_commitlog_first_deq_rdy
  assign CAN_FIRE_rx_rx_commitlog_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_first_deq_rdy = 1'd1 ;

  // action method rx_rx_commitlog_first
  assign CAN_FIRE_rx_rx_commitlog_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_first = 1'd1 ;

  // value method rx_rx_commitlog_deq_ena
  assign rx_rx_commitlog_deq_ena = rx_fuid_w_ena_whas ;

  // action method tx_tx_systemout_to_stage5_notFull
  assign CAN_FIRE_tx_tx_systemout_to_stage5_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_systemout_to_stage5_notFull = 1'd1 ;

  // action method tx_tx_systemout_to_stage5_enq_rdy
  assign CAN_FIRE_tx_tx_systemout_to_stage5_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_systemout_to_stage5_enq_rdy = 1'd1 ;

  // value method tx_tx_systemout_to_stage5_enq_ena
  assign tx_tx_systemout_to_stage5_enq_ena = CAN_FIRE_RL_rl_fwd_systemout ;

  // value method tx_tx_systemout_to_stage5_enq_data
  assign tx_tx_systemout_to_stage5_enq_data =
	     rx_rx_systemout_from_stage3_first_x ;

  // action method tx_tx_trapout_to_stage5_notFull
  assign CAN_FIRE_tx_tx_trapout_to_stage5_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_trapout_to_stage5_notFull = 1'd1 ;

  // action method tx_tx_trapout_to_stage5_enq_rdy
  assign CAN_FIRE_tx_tx_trapout_to_stage5_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_trapout_to_stage5_enq_rdy = 1'd1 ;

  // value method tx_tx_trapout_to_stage5_enq_ena
  assign tx_tx_trapout_to_stage5_enq_ena = tx_trapout_w_ena_whas ;

  // value method tx_tx_trapout_to_stage5_enq_data
  assign tx_tx_trapout_to_stage5_enq_data =
	     MUX_tx_trapout_w_data_wset_1__SEL_1 ?
	       MUX_tx_trapout_w_data_wset_1__VAL_1 :
	       rx_rx_trapout_from_stage3_first_x ;

  // action method tx_tx_baseout_to_stage5_notFull
  assign CAN_FIRE_tx_tx_baseout_to_stage5_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_baseout_to_stage5_notFull = 1'd1 ;

  // action method tx_tx_baseout_to_stage5_enq_rdy
  assign CAN_FIRE_tx_tx_baseout_to_stage5_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_baseout_to_stage5_enq_rdy = 1'd1 ;

  // value method tx_tx_baseout_to_stage5_enq_ena
  assign tx_tx_baseout_to_stage5_enq_ena = tx_baseout_w_ena_whas ;

  // value method tx_tx_baseout_to_stage5_enq_data
  always@(MUX_tx_baseout_w_data_wset_1__SEL_1 or
	  MUX_tx_baseout_w_data_wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_fwd_baseout or
	  rx_rx_baseout_from_stage3_first_x or
	  WILL_FIRE_RL_rl_capture_muldiv or
	  MUX_tx_baseout_w_data_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tx_baseout_w_data_wset_1__SEL_1:
	  tx_tx_baseout_to_stage5_enq_data =
	      MUX_tx_baseout_w_data_wset_1__VAL_1;
      WILL_FIRE_RL_rl_fwd_baseout:
	  tx_tx_baseout_to_stage5_enq_data =
	      rx_rx_baseout_from_stage3_first_x;
      WILL_FIRE_RL_rl_capture_muldiv:
	  tx_tx_baseout_to_stage5_enq_data =
	      MUX_tx_baseout_w_data_wset_1__VAL_3;
      default: tx_tx_baseout_to_stage5_enq_data =
		   74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // action method tx_tx_memio_to_stage5_notFull
  assign CAN_FIRE_tx_tx_memio_to_stage5_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_memio_to_stage5_notFull = 1'd1 ;

  // action method tx_tx_memio_to_stage5_enq_rdy
  assign CAN_FIRE_tx_tx_memio_to_stage5_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_memio_to_stage5_enq_rdy = 1'd1 ;

  // value method tx_tx_memio_to_stage5_enq_ena
  assign tx_tx_memio_to_stage5_enq_ena = tx_memio_w_ena_whas ;

  // value method tx_tx_memio_to_stage5_enq_data
  assign tx_tx_memio_to_stage5_enq_data =
	     { ff_memory_response_rv_port1__read[75:12],
	       ff_memory_response_rv_port1__read[0],
	       ff_memory_response_rv_port1__read[2],
	       rx_rx_memoryout_from_stage3_first_x[2:0] } ;

  // action method tx_tx_fuid_to_stage5_notFull
  assign CAN_FIRE_tx_tx_fuid_to_stage5_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_fuid_to_stage5_notFull = 1'd1 ;

  // action method tx_tx_fuid_to_stage5_enq_rdy
  assign CAN_FIRE_tx_tx_fuid_to_stage5_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_fuid_to_stage5_enq_rdy = 1'd1 ;

  // value method tx_tx_fuid_to_stage5_enq_ena
  assign tx_tx_fuid_to_stage5_enq_ena = rx_fuid_w_ena_whas ;

  // value method tx_tx_fuid_to_stage5_enq_data
  always@(MUX_rx_commitlog_w_ena_wset_1__SEL_1 or
	  MUX_tx_fuid_w_data_wset_1__VAL_1 or
	  MUX_tx_fuid_w_data_wset_1__SEL_2 or
	  MUX_tx_fuid_w_data_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_capture_muldiv or MUX_tx_fuid_w_data_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rx_commitlog_w_ena_wset_1__SEL_1:
	  tx_tx_fuid_to_stage5_enq_data = MUX_tx_fuid_w_data_wset_1__VAL_1;
      MUX_tx_fuid_w_data_wset_1__SEL_2:
	  tx_tx_fuid_to_stage5_enq_data = MUX_tx_fuid_w_data_wset_1__VAL_2;
      WILL_FIRE_RL_rl_capture_muldiv:
	  tx_tx_fuid_to_stage5_enq_data = MUX_tx_fuid_w_data_wset_1__VAL_3;
      default: tx_tx_fuid_to_stage5_enq_data =
		   76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // action method tx_tx_commitlog_notFull
  assign CAN_FIRE_tx_tx_commitlog_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_commitlog_notFull = 1'd1 ;

  // action method tx_tx_commitlog_enq_rdy
  assign CAN_FIRE_tx_tx_commitlog_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_commitlog_enq_rdy = 1'd1 ;

  // value method tx_tx_commitlog_enq_ena
  assign tx_tx_commitlog_enq_ena = rx_fuid_w_ena_whas ;

  // value method tx_tx_commitlog_enq_data
  always@(MUX_rx_commitlog_w_ena_wset_1__SEL_1 or
	  MUX_tx_commitlog_w_data_wset_1__VAL_1 or
	  MUX_tx_commitlog_w_data_wset_1__SEL_2 or
	  rx_rx_commitlog_first_x or
	  WILL_FIRE_RL_rl_fwd_baseout or
	  MUX_tx_commitlog_w_data_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_capture_muldiv or
	  MUX_tx_commitlog_w_data_wset_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rx_commitlog_w_ena_wset_1__SEL_1:
	  tx_tx_commitlog_enq_data = MUX_tx_commitlog_w_data_wset_1__VAL_1;
      MUX_tx_commitlog_w_data_wset_1__SEL_2:
	  tx_tx_commitlog_enq_data = rx_rx_commitlog_first_x;
      WILL_FIRE_RL_rl_fwd_baseout:
	  tx_tx_commitlog_enq_data = MUX_tx_commitlog_w_data_wset_1__VAL_3;
      WILL_FIRE_RL_rl_capture_muldiv:
	  tx_tx_commitlog_enq_data = MUX_tx_commitlog_w_data_wset_1__VAL_4;
      default: tx_tx_commitlog_enq_data =
		   309'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // action method cache_memory_response_put
  assign RDY_cache_memory_response_put = !ff_memory_response_rv[76] ;
  assign CAN_FIRE_cache_memory_response_put = !ff_memory_response_rv[76] ;
  assign WILL_FIRE_cache_memory_response_put = EN_cache_memory_response_put ;

  // action method s4_mbox_rx_mbox_output_notEmpty
  assign CAN_FIRE_s4_mbox_rx_mbox_output_notEmpty = 1'd1 ;
  assign WILL_FIRE_s4_mbox_rx_mbox_output_notEmpty = 1'd1 ;

  // action method s4_mbox_rx_mbox_output_first_deq_rdy
  assign CAN_FIRE_s4_mbox_rx_mbox_output_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_s4_mbox_rx_mbox_output_first_deq_rdy = 1'd1 ;

  // action method s4_mbox_rx_mbox_output_first
  assign CAN_FIRE_s4_mbox_rx_mbox_output_first = 1'd1 ;
  assign WILL_FIRE_s4_mbox_rx_mbox_output_first = 1'd1 ;

  // value method s4_mbox_rx_mbox_output_deq_ena
  assign s4_mbox_rx_mbox_output_deq_ena = CAN_FIRE_RL_rl_capture_muldiv ;

  // rule RL_rl_fwd_baseout
  assign CAN_FIRE_RL_rl_fwd_baseout =
	     rx_rx_fuid_from_stage3_first_deq_rdy_b &&
	     tx_tx_baseout_to_stage5_enq_rdy_b &&
	     rx_rx_baseout_from_stage3_first_deq_rdy_b &&
	     tx_tx_fuid_to_stage5_enq_rdy_b &&
	     tx_tx_commitlog_enq_rdy_b &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage3_first_x[2:0] == 3'd0 ;
  assign WILL_FIRE_RL_rl_fwd_baseout = CAN_FIRE_RL_rl_fwd_baseout ;

  // rule RL_rl_fwd_systemout
  assign CAN_FIRE_RL_rl_fwd_systemout =
	     rx_rx_fuid_from_stage3_first_deq_rdy_b &&
	     tx_tx_fuid_to_stage5_enq_rdy_b &&
	     tx_tx_commitlog_enq_rdy_b &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     tx_tx_systemout_to_stage5_enq_rdy_b &&
	     rx_rx_systemout_from_stage3_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage3_first_x[2:0] == 3'd1 ;
  assign WILL_FIRE_RL_rl_fwd_systemout = CAN_FIRE_RL_rl_fwd_systemout ;

  // rule RL_rl_fwd_trapout
  assign CAN_FIRE_RL_rl_fwd_trapout =
	     rx_rx_fuid_from_stage3_first_deq_rdy_b &&
	     tx_tx_fuid_to_stage5_enq_rdy_b &&
	     tx_tx_commitlog_enq_rdy_b &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     tx_tx_trapout_to_stage5_enq_rdy_b &&
	     rx_rx_trapout_from_stage3_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage3_first_x[2:0] == 3'd2 ;
  assign WILL_FIRE_RL_rl_fwd_trapout = CAN_FIRE_RL_rl_fwd_trapout ;

  // rule RL_rl_handle_memory
  assign CAN_FIRE_RL_rl_handle_memory = WILL_FIRE_RL_rl_handle_memory ;
  assign WILL_FIRE_RL_rl_handle_memory =
	     ff_memory_response_rv_port1__read[76] &&
	     rx_rx_fuid_from_stage3_first_deq_rdy_b &&
	     tx_fuid_w_rdy_wget__8_AND_tx_commitlog_w_rdy_w_ETC___d146 &&
	     rx_rx_fuid_from_stage3_first_x[2:0] == 3'd3 ;

  // rule RL_rl_polling_check
  assign CAN_FIRE_RL_rl_polling_check =
	     rx_rx_fuid_from_stage3_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage3_notEmpty_b ;
  assign WILL_FIRE_RL_rl_polling_check =
	     CAN_FIRE_RL_rl_polling_check &&
	     !WILL_FIRE_RL_rl_capture_muldiv &&
	     !WILL_FIRE_RL_rl_handle_memory &&
	     !WILL_FIRE_RL_rl_fwd_trapout &&
	     !WILL_FIRE_RL_rl_fwd_systemout &&
	     !WILL_FIRE_RL_rl_fwd_baseout ;

  // rule RL_rl_capture_muldiv
  assign CAN_FIRE_RL_rl_capture_muldiv =
	     rx_rx_fuid_from_stage3_first_deq_rdy_b &&
	     tx_tx_baseout_to_stage5_enq_rdy_b &&
	     tx_tx_fuid_to_stage5_enq_rdy_b &&
	     tx_tx_commitlog_enq_rdy_b &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     s4_mbox_rx_mbox_output_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage3_first_x[2:0] == 3'd4 &&
	     s4_mbox_rx_mbox_output_notEmpty_b ;
  assign WILL_FIRE_RL_rl_capture_muldiv = CAN_FIRE_RL_rl_capture_muldiv ;

  // inputs to muxes for submodule ports
  assign MUX_rx_commitlog_w_ena_wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_memory &&
	     ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 ;
  assign MUX_tx_baseout_w_data_wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_memory &&
	     ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	     !ff_memory_response_rv_port1__read[11] &&
	     !ff_memory_response_rv_port1__read[1] ;
  assign MUX_tx_commitlog_w_data_wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_fwd_trapout || WILL_FIRE_RL_rl_fwd_systemout ;
  assign MUX_tx_fuid_w_data_wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_fwd_trapout || WILL_FIRE_RL_rl_fwd_systemout ||
	     WILL_FIRE_RL_rl_fwd_baseout ;
  assign MUX_tx_trapout_w_data_wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_memory &&
	     ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	     ff_memory_response_rv_port1__read[11] ;
  assign MUX_tx_baseout_w_data_wset_1__VAL_1 =
	     { rx_rx_fuid_from_stage3_first_x[76:73],
	       ff_memory_response_rv_port1__read[75:12],
	       rx_rx_fuid_from_stage3_first_x[8:3] } ;
  assign MUX_tx_baseout_w_data_wset_1__VAL_3 =
	     { rx_rx_fuid_from_stage3_first_x[76:73],
	       s4_mbox_rx_mbox_output_first_x,
	       rx_rx_fuid_from_stage3_first_x[8:3] } ;
  assign MUX_tx_commitlog_w_data_wset_1__VAL_1 =
	     (ff_memory_response_rv_port1__read[11] ||
	      ff_memory_response_rv_port1__read[1]) ?
	       rx_rx_commitlog_first_x :
	       rx_commitlog_w_data_wget__3_BITS_308_TO_211_4__ETC___d189 ;
  assign MUX_tx_commitlog_w_data_wset_1__VAL_3 =
	     { rx_rx_commitlog_first_x[308:211],
	       2'd3,
	       139'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       rx_rx_baseout_from_stage3_first_x[69:6],
	       rx_rx_commitlog_first_x[5:0] } ;
  assign MUX_tx_commitlog_w_data_wset_1__VAL_4 =
	     { rx_rx_commitlog_first_x[308:211],
	       2'd3,
	       139'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       s4_mbox_rx_mbox_output_first_x,
	       rx_rx_commitlog_first_x[5:0] } ;
  assign MUX_tx_fuid_w_data_wset_1__VAL_1 =
	     { rx_rx_fuid_from_stage3_first_x[76:3],
	       ff_memory_response_rv_port1__read[11] ?
		 2'd2 :
		 (ff_memory_response_rv_port1__read[1] ? 2'd3 : 2'd0) } ;
  assign MUX_tx_fuid_w_data_wset_1__VAL_2 =
	     { rx_rx_fuid_from_stage3_first_x[76:3],
	       (rx_rx_fuid_from_stage3_first_x[2:0] == 3'd0) ?
		 2'd0 :
		 ((rx_rx_fuid_from_stage3_first_x[2:0] == 3'd1) ?
		    2'd1 :
		    ((rx_rx_fuid_from_stage3_first_x[2:0] == 3'd2) ?
		       2'd2 :
		       ((rx_rx_fuid_from_stage3_first_x[2:0] == 3'd3) ?
			  2'd3 :
			  2'd0))) } ;
  assign MUX_tx_fuid_w_data_wset_1__VAL_3 =
	     { rx_rx_fuid_from_stage3_first_x[76:3], 2'd0 } ;
  assign MUX_tx_trapout_w_data_wset_1__VAL_1 =
	     { 1'd0,
	       ff_memory_response_rv_port1__read[10:4],
	       ff_memory_response_rv_port1__read[75:12] } ;

  // inlined wires
  assign rx_fuid_w_ena_whas =
	     WILL_FIRE_RL_rl_handle_memory &&
	     ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 ||
	     WILL_FIRE_RL_rl_fwd_trapout ||
	     WILL_FIRE_RL_rl_fwd_systemout ||
	     WILL_FIRE_RL_rl_fwd_baseout ||
	     WILL_FIRE_RL_rl_capture_muldiv ;
  assign tx_trapout_w_ena_whas =
	     WILL_FIRE_RL_rl_handle_memory &&
	     ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	     ff_memory_response_rv_port1__read[11] ||
	     WILL_FIRE_RL_rl_fwd_trapout ;
  assign tx_baseout_w_ena_whas =
	     WILL_FIRE_RL_rl_handle_memory &&
	     ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	     !ff_memory_response_rv_port1__read[11] &&
	     !ff_memory_response_rv_port1__read[1] ||
	     WILL_FIRE_RL_rl_fwd_baseout ||
	     WILL_FIRE_RL_rl_capture_muldiv ;
  assign tx_memio_w_ena_whas =
	     WILL_FIRE_RL_rl_handle_memory &&
	     ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	     !ff_memory_response_rv_port1__read[11] &&
	     ff_memory_response_rv_port1__read[1] ;
  assign ff_memory_response_rv_port0__write_1 =
	     { 1'd1, cache_memory_response_put } ;
  assign ff_memory_response_rv_port1__read =
	     EN_cache_memory_response_put ?
	       ff_memory_response_rv_port0__write_1 :
	       ff_memory_response_rv ;
  assign ff_memory_response_rv_port1__write_1 =
	     { 1'd0,
	       76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_memory_response_rv_port2__read =
	     WILL_FIRE_RL_rl_handle_memory ?
	       ff_memory_response_rv_port1__write_1 :
	       ff_memory_response_rv_port1__read ;

  // register ff_memory_response_rv
  assign ff_memory_response_rv_D_IN = ff_memory_response_rv_port2__read ;
  assign ff_memory_response_rv_EN = 1'b1 ;

  // remaining internal signals
  assign IF_NOT_IF_rx_memoryout_w_data_whas__68_THEN_rx_ETC___d188 =
	     (rx_rx_memoryout_from_stage3_first_x[2:0] != 3'd2 ||
	      rx_rx_memoryout_from_stage3_first_x[7:3] != 5'b00111) ?
	       { rx_rx_commitlog_first_x[208:81],
		 ff_memory_response_rv_port1__read[75:12],
		 rx_rx_commitlog_first_x[16:0] } :
	       { 139'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 ff_memory_response_rv_port1__read[75:12],
		 rx_rx_fuid_from_stage3_first_x[8:4],
		 1'd1 } ;
  assign ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 =
	     ff_memory_response_rv_port1__read[3] ==
	     rx_rx_fuid_from_stage3_first_x[3] ;
  assign rx_commitlog_w_data_wget__3_BITS_308_TO_211_4__ETC___d189 =
	     { rx_rx_commitlog_first_x[308:211],
	       (rx_rx_memoryout_from_stage3_first_x[2:0] == 3'd2 &&
		rx_rx_memoryout_from_stage3_first_x[7:3] == 5'b00111) ?
		 2'd3 :
		 2'd1,
	       IF_NOT_IF_rx_memoryout_w_data_whas__68_THEN_rx_ETC___d188 } ;
  assign tx_fuid_w_rdy_wget__8_AND_tx_commitlog_w_rdy_w_ETC___d146 =
	     tx_tx_fuid_to_stage5_enq_rdy_b && tx_tx_commitlog_enq_rdy_b &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     rx_rx_memoryout_from_stage3_first_deq_rdy_b &&
	     tx_tx_trapout_to_stage5_enq_rdy_b &&
	     tx_tx_memio_to_stage5_enq_rdy_b &&
	     tx_tx_baseout_to_stage5_enq_rdy_b ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_memory_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (ff_memory_response_rv_EN)
	  ff_memory_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_memory_response_rv_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_memory_response_rv = 77'h0AAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout)
	begin
	  TASK_testplusargs___d71 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout)
	begin
	  TASK_testplusargs___d72 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout)
	begin
	  TASK_testplusargs___d73 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout)
	begin
	  v__h4306 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout &&
	  (TASK_testplusargs___d71 ||
	   TASK_testplusargs___d72 && TASK_testplusargs___d73))
	$write("[%10d", v__h4306, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout &&
	  (TASK_testplusargs___d71 ||
	   TASK_testplusargs___d72 && TASK_testplusargs___d73))
	$write("[%2d]STAGE4: PC:%h",
	       hartid,
	       rx_rx_fuid_from_stage3_first_x[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout &&
	  (TASK_testplusargs___d71 ||
	   TASK_testplusargs___d72 && TASK_testplusargs___d73))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout)
	begin
	  TASK_testplusargs___d77 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout)
	begin
	  TASK_testplusargs___d78 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout)
	begin
	  TASK_testplusargs___d79 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout)
	begin
	  v__h4451 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout &&
	  (TASK_testplusargs___d77 ||
	   TASK_testplusargs___d78 && TASK_testplusargs___d79))
	$write("[%10d", v__h4451, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout &&
	  (TASK_testplusargs___d77 ||
	   TASK_testplusargs___d78 && TASK_testplusargs___d79))
	$write("[%2d]STAGE4: Buffering Base ALU Output", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_baseout &&
	  (TASK_testplusargs___d77 ||
	   TASK_testplusargs___d78 && TASK_testplusargs___d79))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout)
	begin
	  TASK_testplusargs___d101 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout)
	begin
	  TASK_testplusargs___d102 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout)
	begin
	  TASK_testplusargs___d103 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout)
	begin
	  v__h5306 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout &&
	  (TASK_testplusargs___d101 ||
	   TASK_testplusargs___d102 && TASK_testplusargs___d103))
	$write("[%10d", v__h5306, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout &&
	  (TASK_testplusargs___d101 ||
	   TASK_testplusargs___d102 && TASK_testplusargs___d103))
	$write("[%2d]STAGE4: PC:%h",
	       hartid,
	       rx_rx_fuid_from_stage3_first_x[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout &&
	  (TASK_testplusargs___d101 ||
	   TASK_testplusargs___d102 && TASK_testplusargs___d103))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout)
	begin
	  TASK_testplusargs___d107 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout)
	begin
	  TASK_testplusargs___d108 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout)
	begin
	  TASK_testplusargs___d109 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout)
	begin
	  v__h5451 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout &&
	  (TASK_testplusargs___d107 ||
	   TASK_testplusargs___d108 && TASK_testplusargs___d109))
	$write("[%10d", v__h5451, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout &&
	  (TASK_testplusargs___d107 ||
	   TASK_testplusargs___d108 && TASK_testplusargs___d109))
	$write("[%2d]STAGE4: Buffering System Output", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_systemout &&
	  (TASK_testplusargs___d107 ||
	   TASK_testplusargs___d108 && TASK_testplusargs___d109))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout)
	begin
	  TASK_testplusargs___d125 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout)
	begin
	  TASK_testplusargs___d126 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout)
	begin
	  TASK_testplusargs___d127 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout)
	begin
	  v__h6643 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("[%10d", v__h6643, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("[%2d]STAGE4: PC:%h",
	       hartid,
	       rx_rx_fuid_from_stage3_first_x[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout)
	begin
	  TASK_testplusargs___d131 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout)
	begin
	  TASK_testplusargs___d132 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout)
	begin
	  TASK_testplusargs___d133 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout)
	begin
	  v__h6788 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout &&
	  (TASK_testplusargs___d131 ||
	   TASK_testplusargs___d132 && TASK_testplusargs___d133))
	$write("[%10d", v__h6788, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout &&
	  (TASK_testplusargs___d131 ||
	   TASK_testplusargs___d132 && TASK_testplusargs___d133))
	$write("[%2d]STAGE4: Buffering Trap Output", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fwd_trapout &&
	  (TASK_testplusargs___d131 ||
	   TASK_testplusargs___d132 && TASK_testplusargs___d133))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory)
	begin
	  TASK_testplusargs___d151 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory)
	begin
	  TASK_testplusargs___d152 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory)
	begin
	  TASK_testplusargs___d153 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory)
	begin
	  v__h7762 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  (TASK_testplusargs___d151 ||
	   TASK_testplusargs___d152 && TASK_testplusargs___d153))
	$write("[%10d", v__h7762, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  (TASK_testplusargs___d151 ||
	   TASK_testplusargs___d152 && TASK_testplusargs___d153))
	$write("[%2d]STAGE4: PC:%h",
	       hartid,
	       rx_rx_fuid_from_stage3_first_x[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  (TASK_testplusargs___d151 ||
	   TASK_testplusargs___d152 && TASK_testplusargs___d153))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read[11])
	begin
	  TASK_testplusargs___d194 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read[11])
	begin
	  TASK_testplusargs___d195 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read[11])
	begin
	  TASK_testplusargs___d196 = $test$plusargs("l0");
	  #0;
	end
    ff_memory_response_rv_port1__read__37_BIT_11_6_ETC___d199 =
	ff_memory_response_rv_port1__read[11] &&
	(TASK_testplusargs___d194 ||
	 TASK_testplusargs___d195 && TASK_testplusargs___d196);
    TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d203 =
	(TASK_testplusargs___d194 ||
	 TASK_testplusargs___d195 && TASK_testplusargs___d196) &&
	ff_memory_response_rv_port1__read[10];
    TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d226 =
	(TASK_testplusargs___d194 ||
	 TASK_testplusargs___d195 && TASK_testplusargs___d196) &&
	!ff_memory_response_rv_port1__read[10];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read[11])
	begin
	  v__h8442 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read__37_BIT_11_6_ETC___d199)
	$write("[%10d", v__h8442, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read__37_BIT_11_6_ETC___d199)
	$write("[%2d]STAGE4: Memory responded with trap:", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read[11] &&
	  TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d203)
	if (ff_memory_response_rv_port1__read[9:4] == 6'd0)
	  $write("User-Soft-Interrupt");
	else
	  if (ff_memory_response_rv_port1__read[9:4] == 6'd1)
	    $write("Supervisor-Soft-Interrupt");
	  else
	    if (ff_memory_response_rv_port1__read[9:4] == 6'd3)
	      $write("Machine-Soft-Interrupt");
	    else
	      if (ff_memory_response_rv_port1__read[9:4] == 6'd4)
		$write("User-Timer-Interrupt");
	      else
		if (ff_memory_response_rv_port1__read[9:4] == 6'd5)
		  $write("Supervisor-Timer-Interrupt");
		else
		  if (ff_memory_response_rv_port1__read[9:4] == 6'd7)
		    $write("Machine-Timer-Interrupt");
		  else
		    if (ff_memory_response_rv_port1__read[9:4] == 6'd8)
		      $write("User-External-Interrupt");
		    else
		      if (ff_memory_response_rv_port1__read[9:4] == 6'd9)
			$write("Supervisor-External-Interrupt");
		      else
			if (ff_memory_response_rv_port1__read[9:4] == 6'd11)
			  $write("Machine-External-Interrupt");
			else
			  $write("UNKNOWN INTERRUPT VALUE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read[11] &&
	  TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d226)
	if (ff_memory_response_rv_port1__read[9:4] == 6'd0)
	  $write("Instruction-Address-Misaligned-Trap");
	else
	  if (ff_memory_response_rv_port1__read[9:4] == 6'd1)
	    $write("Instruction-Access-Fault-Trap");
	  else
	    if (ff_memory_response_rv_port1__read[9:4] == 6'd4)
	      $write("Load-Address-Misaligned-Trap");
	    else
	      if (ff_memory_response_rv_port1__read[9:4] == 6'd5)
		$write("Load-Access-Fault-Trap");
	      else
		if (ff_memory_response_rv_port1__read[9:4] == 6'd6)
		  $write("Store-Address-Misaligned-Trap");
		else
		  if (ff_memory_response_rv_port1__read[9:4] == 6'd7)
		    $write("Store-Access-Fault-Trap");
		  else
		    if (ff_memory_response_rv_port1__read[9:4] == 6'd12)
		      $write("Instruction-Page-Fault-Trap");
		    else
		      if (ff_memory_response_rv_port1__read[9:4] == 6'd13)
			$write("Load-Page-Fault-Trap");
		      else
			if (ff_memory_response_rv_port1__read[9:4] == 6'd15)
			  $write("Store-Page-Fault-Trap");
			else
			  if (ff_memory_response_rv_port1__read[9:4] == 6'd2)
			    $write("Illegal-Trap");
			  else
			    if (ff_memory_response_rv_port1__read[9:4] ==
				6'd11)
			      $write("ECALL-Machine-Trap");
			    else
			      if (ff_memory_response_rv_port1__read[9:4] ==
				  6'd8)
				$write("ECALL-User-Trap");
			      else
				if (ff_memory_response_rv_port1__read[9:4] ==
				    6'd9)
				  $write("ECALL-Supervisor-Trap");
				else
				  if (ff_memory_response_rv_port1__read[9:4] ==
				      6'd3)
				    $write("Breakpoint-Trap");
				  else
				    $write("UNKNOWN EXCEPTION VALUE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read__37_BIT_11_6_ETC___d199)
	$write(" mtval:%h", ff_memory_response_rv_port1__read[75:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  ff_memory_response_rv_port1__read__37_BIT_11_6_ETC___d199)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1])
	begin
	  TASK_testplusargs___d255 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1])
	begin
	  TASK_testplusargs___d256 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1])
	begin
	  TASK_testplusargs___d257 = $test$plusargs("l0");
	  #0;
	end
    ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260 =
	ff_memory_response_rv_port1__read[1] &&
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257);
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d264 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	ff_memory_response_rv_port1__read[2];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d269 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	!ff_memory_response_rv_port1__read[2];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d275 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	rx_rx_memoryout_from_stage3_first_x[2:0] == 3'd0;
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d281 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	rx_rx_memoryout_from_stage3_first_x[2:0] == 3'd1;
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d287 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	rx_rx_memoryout_from_stage3_first_x[2:0] == 3'd3;
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d293 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	rx_rx_memoryout_from_stage3_first_x[2:0] == 3'd4;
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d299 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	rx_rx_memoryout_from_stage3_first_x[2:0] == 3'd2;
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d318 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	rx_rx_memoryout_from_stage3_first_x[2:0] != 3'd0 &&
	rx_rx_memoryout_from_stage3_first_x[2:0] != 3'd1 &&
	rx_rx_memoryout_from_stage3_first_x[2:0] != 3'd3 &&
	rx_rx_memoryout_from_stage3_first_x[2:0] != 3'd4 &&
	rx_rx_memoryout_from_stage3_first_x[2:0] != 3'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1])
	begin
	  v__h9520 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write("[%10d", v__h9520, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write("[%2d]STAGE4: Mem response received:", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write("WBMemop { ", "atomic_rd_data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write("'h%h", ff_memory_response_rv_port1__read[75:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write(", ", "sb_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write("'h%h", ff_memory_response_rv_port1__read[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1] &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d264)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1] &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d269)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write(", ", "memaccess: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1] &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d275)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1] &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d281)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1] &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d287)
	$write("Fence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1] &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d293)
	$write("FenceI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1] &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d299)
	$write("Atomic");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read[1] &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d318)
	$write("SFence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  ff_memory_response_rv_port1__read__37_BIT_1_63_ETC___d260)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  !ff_memory_response_rv_port1__read[1])
	begin
	  TASK_testplusargs___d328 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  !ff_memory_response_rv_port1__read[1])
	begin
	  TASK_testplusargs___d329 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  !ff_memory_response_rv_port1__read[1])
	begin
	  TASK_testplusargs___d330 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d333 =
	!ff_memory_response_rv_port1__read[1] &&
	(TASK_testplusargs___d328 ||
	 TASK_testplusargs___d329 && TASK_testplusargs___d330);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  !ff_memory_response_rv_port1__read[1])
	begin
	  v__h10485 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d333)
	$write("[%10d", v__h10485, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d333)
	$write("[%2d]STAGE4: Memory responded with data:", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d333)
	$write("rd:%2d rdval:%h",
	       rx_rx_fuid_from_stage3_first_x[8:4],
	       ff_memory_response_rv_port1__read[75:12],
	       " id:%2d",
	       rx_rx_fuid_from_stage3_first_x[76:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	  !ff_memory_response_rv_port1__read[11] &&
	  NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d333)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  !ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161)
	begin
	  TASK_testplusargs___d340 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  !ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161)
	begin
	  TASK_testplusargs___d341 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  !ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161)
	begin
	  TASK_testplusargs___d342 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d345 =
	!ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161 &&
	(TASK_testplusargs___d340 ||
	 TASK_testplusargs___d341 && TASK_testplusargs___d342);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  !ff_memory_response_rv_port1__read__37_BIT_3_58_ETC___d161)
	begin
	  v__h8004 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d345)
	$write("[%10d", v__h8004, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d345)
	$write("[%2d]STAGE4: Dropping Mem response", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_memory &&
	  NOT_ff_memory_response_rv_port1__read__37_BIT__ETC___d345)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check)
	begin
	  TASK_testplusargs___d4 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check)
	begin
	  TASK_testplusargs___d5 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check)
	begin
	  TASK_testplusargs___d6 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check)
	begin
	  v__h3630 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  (TASK_testplusargs___d4 ||
	   TASK_testplusargs___d5 && TASK_testplusargs___d6))
	$write("[%10d", v__h3630, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  (TASK_testplusargs___d4 ||
	   TASK_testplusargs___d5 && TASK_testplusargs___d6))
	$write("[%2d]STAGE4: PC:%h",
	       hartid,
	       rx_rx_fuid_from_stage3_first_x[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  (TASK_testplusargs___d4 ||
	   TASK_testplusargs___d5 && TASK_testplusargs___d6))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check)
	begin
	  TASK_testplusargs___d14 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check)
	begin
	  TASK_testplusargs___d15 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check)
	begin
	  TASK_testplusargs___d16 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	rx_rx_fuid_from_stage3_first_x[2:0] == 3'd0;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d26 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	rx_rx_fuid_from_stage3_first_x[2:0] == 3'd1;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d29 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	rx_rx_fuid_from_stage3_first_x[2:0] == 3'd2;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d32 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	rx_rx_fuid_from_stage3_first_x[2:0] == 3'd3;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d45 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	rx_rx_fuid_from_stage3_first_x[2:0] != 3'd0 &&
	rx_rx_fuid_from_stage3_first_x[2:0] != 3'd1 &&
	rx_rx_fuid_from_stage3_first_x[2:0] != 3'd2 &&
	rx_rx_fuid_from_stage3_first_x[2:0] != 3'd3;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check)
	begin
	  v__h3848 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write("[%10d", v__h3848, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write("[%2d]STAGE4: Waiting for FUnit:", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23)
	$write("BASE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d26)
	$write("SYSTEM");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d29)
	$write("TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d32)
	$write("MEMORY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d45)
	$write("MULDIV");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_polling_check &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv)
	begin
	  TASK_testplusargs___d360 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv)
	begin
	  TASK_testplusargs___d361 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv)
	begin
	  TASK_testplusargs___d362 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv)
	begin
	  v__h11381 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv &&
	  (TASK_testplusargs___d360 ||
	   TASK_testplusargs___d361 && TASK_testplusargs___d362))
	$write("[%10d", v__h11381, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv &&
	  (TASK_testplusargs___d360 ||
	   TASK_testplusargs___d361 && TASK_testplusargs___d362))
	$write("[%2d]STAGE4: PC:%h",
	       hartid,
	       rx_rx_fuid_from_stage3_first_x[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv &&
	  (TASK_testplusargs___d360 ||
	   TASK_testplusargs___d361 && TASK_testplusargs___d362))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv)
	begin
	  TASK_testplusargs___d366 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv)
	begin
	  TASK_testplusargs___d367 = $test$plusargs("mstage4");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv)
	begin
	  TASK_testplusargs___d368 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv)
	begin
	  v__h11526 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("[%10d", v__h11526, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("[%2d]STAGE4: Enquing MULDIV Output: ",
	       hartid,
	       "'h%h",
	       s4_mbox_rx_mbox_output_first_x);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_muldiv &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstage4


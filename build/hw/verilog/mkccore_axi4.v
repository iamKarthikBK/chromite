//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:36:05 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// master_d_AWVALID               O     1
// master_d_AWID                  O     1 reg
// master_d_AWADDR                O    32 reg
// master_d_AWLEN                 O     8 reg
// master_d_AWSIZE                O     3 reg
// master_d_AWBURST               O     2 reg
// master_d_AWLOCK                O     1 reg
// master_d_AWCACHE               O     4 reg
// master_d_AWPROT                O     3 reg
// master_d_AWQOS                 O     4 reg
// master_d_AWREGION              O     4 reg
// master_d_WVALID                O     1
// master_d_WDATA                 O    64 reg
// master_d_WSTRB                 O     8 reg
// master_d_WLAST                 O     1 reg
// master_d_BREADY                O     1
// master_d_ARVALID               O     1
// master_d_ARID                  O     1 reg
// master_d_ARADDR                O    32 reg
// master_d_ARLEN                 O     8 reg
// master_d_ARSIZE                O     3 reg
// master_d_ARBURST               O     2 reg
// master_d_ARLOCK                O     1 reg
// master_d_ARCACHE               O     4 reg
// master_d_ARPROT                O     3 reg
// master_d_ARQOS                 O     4 reg
// master_d_ARREGION              O     4 reg
// master_d_RREADY                O     1
// master_i_AWVALID               O     1
// master_i_AWID                  O     1 reg
// master_i_AWADDR                O    32 reg
// master_i_AWLEN                 O     8 reg
// master_i_AWSIZE                O     3 reg
// master_i_AWBURST               O     2 reg
// master_i_AWLOCK                O     1 reg
// master_i_AWCACHE               O     4 reg
// master_i_AWPROT                O     3 reg
// master_i_AWQOS                 O     4 reg
// master_i_AWREGION              O     4 reg
// master_i_WVALID                O     1
// master_i_WDATA                 O    64 reg
// master_i_WSTRB                 O     8 reg
// master_i_WLAST                 O     1 reg
// master_i_BREADY                O     1
// master_i_ARVALID               O     1
// master_i_ARID                  O     1 reg
// master_i_ARADDR                O    32 reg
// master_i_ARLEN                 O     8 reg
// master_i_ARSIZE                O     3 reg
// master_i_ARBURST               O     2 reg
// master_i_ARLOCK                O     1 reg
// master_i_ARCACHE               O     4 reg
// master_i_ARPROT                O     3 reg
// master_i_ARQOS                 O     4 reg
// master_i_ARREGION              O     4 reg
// master_i_RREADY                O     1
// RDY_sb_clint_msip              O     1 const
// RDY_sb_clint_mtip              O     1 const
// RDY_sb_clint_mtime             O     1 const
// RDY_sb_plic_meip               O     1 const
// RDY_sb_plic_seip               O     1 const
// sbread_mv_csr_misa             O    64
// RDY_sbread_mv_csr_misa         O     1 const
// sbread_mv_csr_mvendorid        O    64 const
// RDY_sbread_mv_csr_mvendorid    O     1 const
// sbread_mv_csr_stvec            O    64 reg
// RDY_sbread_mv_csr_stvec        O     1 const
// sbread_mv_csr_mtvec            O    64 reg
// RDY_sbread_mv_csr_mtvec        O     1 const
// sbread_mv_csr_mstatus          O    64
// RDY_sbread_mv_csr_mstatus      O     1 const
// sbread_mv_csr_marchid          O    64 const
// RDY_sbread_mv_csr_marchid      O     1 const
// sbread_mv_csr_mimpid           O    64 const
// RDY_sbread_mv_csr_mimpid       O     1 const
// sbread_mv_csr_mhartid          O    64 const
// RDY_sbread_mv_csr_mhartid      O     1 const
// sbread_mv_csr_mip              O    64
// RDY_sbread_mv_csr_mip          O     1 const
// sbread_mv_csr_sip              O    64
// RDY_sbread_mv_csr_sip          O     1 const
// sbread_mv_csr_mie              O    64
// RDY_sbread_mv_csr_mie          O     1 const
// sbread_mv_csr_sie              O    64
// RDY_sbread_mv_csr_sie          O     1 const
// sbread_mv_csr_mscratch         O    64 reg
// RDY_sbread_mv_csr_mscratch     O     1 const
// sbread_mv_csr_sscratch         O    64 reg
// RDY_sbread_mv_csr_sscratch     O     1 const
// sbread_mv_csr_sepc             O    64 reg
// RDY_sbread_mv_csr_sepc         O     1 const
// sbread_mv_csr_stval            O    64 reg
// RDY_sbread_mv_csr_stval        O     1 const
// sbread_mv_csr_scause           O    64
// RDY_sbread_mv_csr_scause       O     1 const
// sbread_mv_csr_mepc             O    64 reg
// RDY_sbread_mv_csr_mepc         O     1 const
// sbread_mv_csr_mtval            O    64 reg
// RDY_sbread_mv_csr_mtval        O     1 const
// sbread_mv_csr_mcause           O    64
// RDY_sbread_mv_csr_mcause       O     1 const
// sbread_mv_csr_mcycle           O    64
// RDY_sbread_mv_csr_mcycle       O     1 const
// sbread_mv_csr_minstret         O    64
// RDY_sbread_mv_csr_minstret     O     1 const
// sbread_mv_csr_time             O    64 reg
// RDY_sbread_mv_csr_time         O     1 const
// sbread_mv_csr_mideleg          O    64 reg
// RDY_sbread_mv_csr_mideleg      O     1 const
// sbread_mv_csr_medeleg          O    64 reg
// RDY_sbread_mv_csr_medeleg      O     1 const
// sbread_mv_csr_pmpcfg0          O    64
// RDY_sbread_mv_csr_pmpcfg0      O     1 const
// sbread_mv_csr_pmpaddr0         O    64 reg
// RDY_sbread_mv_csr_pmpaddr0     O     1 const
// sbread_mv_csr_pmpaddr1         O    64 reg
// RDY_sbread_mv_csr_pmpaddr1     O     1 const
// sbread_mv_csr_pmpaddr2         O    64 reg
// RDY_sbread_mv_csr_pmpaddr2     O     1 const
// sbread_mv_csr_pmpaddr3         O    64 reg
// RDY_sbread_mv_csr_pmpaddr3     O     1 const
// sbread_mv_csr_satp             O    64 reg
// RDY_sbread_mv_csr_satp         O     1 const
// sbread_mv_csr_mcountinhibit    O    32 const
// RDY_sbread_mv_csr_mcountinhibit  O     1 const
// sbread_mv_csr_customcontrol    O    64 const
// RDY_sbread_mv_csr_customcontrol  O     1 const
// commitlog                      O   310 reg
// RDY_commitlog                  O     1 const
// resetpc                        I    64
// CLK                            I     1 clock
// RST_N                          I     1 reset
// master_d_AWREADY               I     1
// master_d_WREADY                I     1
// master_d_BVALID                I     1
// master_d_BID                   I     1 reg
// master_d_BRESP                 I     2 reg
// master_d_ARREADY               I     1
// master_d_RVALID                I     1
// master_d_RID                   I     1 reg
// master_d_RDATA                 I    64 reg
// master_d_RRESP                 I     2 reg
// master_d_RLAST                 I     1 reg
// master_i_AWREADY               I     1
// master_i_WREADY                I     1
// master_i_BVALID                I     1
// master_i_BID                   I     1 reg
// master_i_BRESP                 I     2 reg
// master_i_ARREADY               I     1
// master_i_RVALID                I     1
// master_i_RID                   I     1 reg
// master_i_RDATA                 I    64 reg
// master_i_RRESP                 I     2 reg
// master_i_RLAST                 I     1 reg
// sb_clint_msip_m                I     1
// sb_clint_mtip_m                I     1
// sb_clint_mtime_m               I    64 reg
// sb_plic_meip_ex_i              I     1
// sb_plic_seip_ex_i              I     1
// EN_sb_clint_msip               I     1
// EN_sb_clint_mtip               I     1
// EN_sb_clint_mtime              I     1
// EN_sb_plic_meip                I     1
// EN_sb_plic_seip                I     1
//
// Combinational paths from inputs to outputs:
//   (sb_clint_msip_m,
//    sb_clint_mtip_m,
//    sb_plic_meip_ex_i,
//    sb_plic_seip_ex_i,
//    EN_sb_clint_msip,
//    EN_sb_clint_mtip,
//    EN_sb_plic_meip,
//    EN_sb_plic_seip,
//    resetpc) -> sbread_mv_csr_mip
//   (sb_plic_seip_ex_i, EN_sb_plic_seip, resetpc) -> sbread_mv_csr_sip
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkccore_axi4(resetpc,
		    CLK,
		    RST_N,

		    master_d_AWVALID,

		    master_d_AWID,

		    master_d_AWADDR,

		    master_d_AWLEN,

		    master_d_AWSIZE,

		    master_d_AWBURST,

		    master_d_AWLOCK,

		    master_d_AWCACHE,

		    master_d_AWPROT,

		    master_d_AWQOS,

		    master_d_AWREGION,

		    master_d_AWREADY,

		    master_d_WVALID,

		    master_d_WDATA,

		    master_d_WSTRB,

		    master_d_WLAST,

		    master_d_WREADY,

		    master_d_BVALID,
		    master_d_BID,
		    master_d_BRESP,

		    master_d_BREADY,

		    master_d_ARVALID,

		    master_d_ARID,

		    master_d_ARADDR,

		    master_d_ARLEN,

		    master_d_ARSIZE,

		    master_d_ARBURST,

		    master_d_ARLOCK,

		    master_d_ARCACHE,

		    master_d_ARPROT,

		    master_d_ARQOS,

		    master_d_ARREGION,

		    master_d_ARREADY,

		    master_d_RVALID,
		    master_d_RID,
		    master_d_RDATA,
		    master_d_RRESP,
		    master_d_RLAST,

		    master_d_RREADY,

		    master_i_AWVALID,

		    master_i_AWID,

		    master_i_AWADDR,

		    master_i_AWLEN,

		    master_i_AWSIZE,

		    master_i_AWBURST,

		    master_i_AWLOCK,

		    master_i_AWCACHE,

		    master_i_AWPROT,

		    master_i_AWQOS,

		    master_i_AWREGION,

		    master_i_AWREADY,

		    master_i_WVALID,

		    master_i_WDATA,

		    master_i_WSTRB,

		    master_i_WLAST,

		    master_i_WREADY,

		    master_i_BVALID,
		    master_i_BID,
		    master_i_BRESP,

		    master_i_BREADY,

		    master_i_ARVALID,

		    master_i_ARID,

		    master_i_ARADDR,

		    master_i_ARLEN,

		    master_i_ARSIZE,

		    master_i_ARBURST,

		    master_i_ARLOCK,

		    master_i_ARCACHE,

		    master_i_ARPROT,

		    master_i_ARQOS,

		    master_i_ARREGION,

		    master_i_ARREADY,

		    master_i_RVALID,
		    master_i_RID,
		    master_i_RDATA,
		    master_i_RRESP,
		    master_i_RLAST,

		    master_i_RREADY,

		    sb_clint_msip_m,
		    EN_sb_clint_msip,
		    RDY_sb_clint_msip,

		    sb_clint_mtip_m,
		    EN_sb_clint_mtip,
		    RDY_sb_clint_mtip,

		    sb_clint_mtime_m,
		    EN_sb_clint_mtime,
		    RDY_sb_clint_mtime,

		    sb_plic_meip_ex_i,
		    EN_sb_plic_meip,
		    RDY_sb_plic_meip,

		    sb_plic_seip_ex_i,
		    EN_sb_plic_seip,
		    RDY_sb_plic_seip,

		    sbread_mv_csr_misa,
		    RDY_sbread_mv_csr_misa,

		    sbread_mv_csr_mvendorid,
		    RDY_sbread_mv_csr_mvendorid,

		    sbread_mv_csr_stvec,
		    RDY_sbread_mv_csr_stvec,

		    sbread_mv_csr_mtvec,
		    RDY_sbread_mv_csr_mtvec,

		    sbread_mv_csr_mstatus,
		    RDY_sbread_mv_csr_mstatus,

		    sbread_mv_csr_marchid,
		    RDY_sbread_mv_csr_marchid,

		    sbread_mv_csr_mimpid,
		    RDY_sbread_mv_csr_mimpid,

		    sbread_mv_csr_mhartid,
		    RDY_sbread_mv_csr_mhartid,

		    sbread_mv_csr_mip,
		    RDY_sbread_mv_csr_mip,

		    sbread_mv_csr_sip,
		    RDY_sbread_mv_csr_sip,

		    sbread_mv_csr_mie,
		    RDY_sbread_mv_csr_mie,

		    sbread_mv_csr_sie,
		    RDY_sbread_mv_csr_sie,

		    sbread_mv_csr_mscratch,
		    RDY_sbread_mv_csr_mscratch,

		    sbread_mv_csr_sscratch,
		    RDY_sbread_mv_csr_sscratch,

		    sbread_mv_csr_sepc,
		    RDY_sbread_mv_csr_sepc,

		    sbread_mv_csr_stval,
		    RDY_sbread_mv_csr_stval,

		    sbread_mv_csr_scause,
		    RDY_sbread_mv_csr_scause,

		    sbread_mv_csr_mepc,
		    RDY_sbread_mv_csr_mepc,

		    sbread_mv_csr_mtval,
		    RDY_sbread_mv_csr_mtval,

		    sbread_mv_csr_mcause,
		    RDY_sbread_mv_csr_mcause,

		    sbread_mv_csr_mcycle,
		    RDY_sbread_mv_csr_mcycle,

		    sbread_mv_csr_minstret,
		    RDY_sbread_mv_csr_minstret,

		    sbread_mv_csr_time,
		    RDY_sbread_mv_csr_time,

		    sbread_mv_csr_mideleg,
		    RDY_sbread_mv_csr_mideleg,

		    sbread_mv_csr_medeleg,
		    RDY_sbread_mv_csr_medeleg,

		    sbread_mv_csr_pmpcfg0,
		    RDY_sbread_mv_csr_pmpcfg0,

		    sbread_mv_csr_pmpaddr0,
		    RDY_sbread_mv_csr_pmpaddr0,

		    sbread_mv_csr_pmpaddr1,
		    RDY_sbread_mv_csr_pmpaddr1,

		    sbread_mv_csr_pmpaddr2,
		    RDY_sbread_mv_csr_pmpaddr2,

		    sbread_mv_csr_pmpaddr3,
		    RDY_sbread_mv_csr_pmpaddr3,

		    sbread_mv_csr_satp,
		    RDY_sbread_mv_csr_satp,

		    sbread_mv_csr_mcountinhibit,
		    RDY_sbread_mv_csr_mcountinhibit,

		    sbread_mv_csr_customcontrol,
		    RDY_sbread_mv_csr_customcontrol,

		    commitlog,
		    RDY_commitlog);
  parameter [63 : 0] hartid = 64'b0;
  input  [63 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // value method master_d_m_awvalid
  output master_d_AWVALID;

  // value method master_d_m_awid
  output master_d_AWID;

  // value method master_d_m_awaddr
  output [31 : 0] master_d_AWADDR;

  // value method master_d_m_awlen
  output [7 : 0] master_d_AWLEN;

  // value method master_d_m_awsize
  output [2 : 0] master_d_AWSIZE;

  // value method master_d_m_awburst
  output [1 : 0] master_d_AWBURST;

  // value method master_d_m_awlock
  output master_d_AWLOCK;

  // value method master_d_m_awcache
  output [3 : 0] master_d_AWCACHE;

  // value method master_d_m_awprot
  output [2 : 0] master_d_AWPROT;

  // value method master_d_m_awqos
  output [3 : 0] master_d_AWQOS;

  // value method master_d_m_awregion
  output [3 : 0] master_d_AWREGION;

  // value method master_d_m_awuser

  // action method master_d_m_awready
  input  master_d_AWREADY;

  // value method master_d_m_wvalid
  output master_d_WVALID;

  // value method master_d_m_wdata
  output [63 : 0] master_d_WDATA;

  // value method master_d_m_wstrb
  output [7 : 0] master_d_WSTRB;

  // value method master_d_m_wlast
  output master_d_WLAST;

  // value method master_d_m_wuser

  // action method master_d_m_wready
  input  master_d_WREADY;

  // action method master_d_m_bvalid
  input  master_d_BVALID;
  input  master_d_BID;
  input  [1 : 0] master_d_BRESP;

  // value method master_d_m_bready
  output master_d_BREADY;

  // value method master_d_m_arvalid
  output master_d_ARVALID;

  // value method master_d_m_arid
  output master_d_ARID;

  // value method master_d_m_araddr
  output [31 : 0] master_d_ARADDR;

  // value method master_d_m_arlen
  output [7 : 0] master_d_ARLEN;

  // value method master_d_m_arsize
  output [2 : 0] master_d_ARSIZE;

  // value method master_d_m_arburst
  output [1 : 0] master_d_ARBURST;

  // value method master_d_m_arlock
  output master_d_ARLOCK;

  // value method master_d_m_arcache
  output [3 : 0] master_d_ARCACHE;

  // value method master_d_m_arprot
  output [2 : 0] master_d_ARPROT;

  // value method master_d_m_arqos
  output [3 : 0] master_d_ARQOS;

  // value method master_d_m_arregion
  output [3 : 0] master_d_ARREGION;

  // value method master_d_m_aruser

  // action method master_d_m_arready
  input  master_d_ARREADY;

  // action method master_d_m_rvalid
  input  master_d_RVALID;
  input  master_d_RID;
  input  [63 : 0] master_d_RDATA;
  input  [1 : 0] master_d_RRESP;
  input  master_d_RLAST;

  // value method master_d_m_rready
  output master_d_RREADY;

  // value method master_i_m_awvalid
  output master_i_AWVALID;

  // value method master_i_m_awid
  output master_i_AWID;

  // value method master_i_m_awaddr
  output [31 : 0] master_i_AWADDR;

  // value method master_i_m_awlen
  output [7 : 0] master_i_AWLEN;

  // value method master_i_m_awsize
  output [2 : 0] master_i_AWSIZE;

  // value method master_i_m_awburst
  output [1 : 0] master_i_AWBURST;

  // value method master_i_m_awlock
  output master_i_AWLOCK;

  // value method master_i_m_awcache
  output [3 : 0] master_i_AWCACHE;

  // value method master_i_m_awprot
  output [2 : 0] master_i_AWPROT;

  // value method master_i_m_awqos
  output [3 : 0] master_i_AWQOS;

  // value method master_i_m_awregion
  output [3 : 0] master_i_AWREGION;

  // value method master_i_m_awuser

  // action method master_i_m_awready
  input  master_i_AWREADY;

  // value method master_i_m_wvalid
  output master_i_WVALID;

  // value method master_i_m_wdata
  output [63 : 0] master_i_WDATA;

  // value method master_i_m_wstrb
  output [7 : 0] master_i_WSTRB;

  // value method master_i_m_wlast
  output master_i_WLAST;

  // value method master_i_m_wuser

  // action method master_i_m_wready
  input  master_i_WREADY;

  // action method master_i_m_bvalid
  input  master_i_BVALID;
  input  master_i_BID;
  input  [1 : 0] master_i_BRESP;

  // value method master_i_m_bready
  output master_i_BREADY;

  // value method master_i_m_arvalid
  output master_i_ARVALID;

  // value method master_i_m_arid
  output master_i_ARID;

  // value method master_i_m_araddr
  output [31 : 0] master_i_ARADDR;

  // value method master_i_m_arlen
  output [7 : 0] master_i_ARLEN;

  // value method master_i_m_arsize
  output [2 : 0] master_i_ARSIZE;

  // value method master_i_m_arburst
  output [1 : 0] master_i_ARBURST;

  // value method master_i_m_arlock
  output master_i_ARLOCK;

  // value method master_i_m_arcache
  output [3 : 0] master_i_ARCACHE;

  // value method master_i_m_arprot
  output [2 : 0] master_i_ARPROT;

  // value method master_i_m_arqos
  output [3 : 0] master_i_ARQOS;

  // value method master_i_m_arregion
  output [3 : 0] master_i_ARREGION;

  // value method master_i_m_aruser

  // action method master_i_m_arready
  input  master_i_ARREADY;

  // action method master_i_m_rvalid
  input  master_i_RVALID;
  input  master_i_RID;
  input  [63 : 0] master_i_RDATA;
  input  [1 : 0] master_i_RRESP;
  input  master_i_RLAST;

  // value method master_i_m_rready
  output master_i_RREADY;

  // action method sb_clint_msip
  input  sb_clint_msip_m;
  input  EN_sb_clint_msip;
  output RDY_sb_clint_msip;

  // action method sb_clint_mtip
  input  sb_clint_mtip_m;
  input  EN_sb_clint_mtip;
  output RDY_sb_clint_mtip;

  // action method sb_clint_mtime
  input  [63 : 0] sb_clint_mtime_m;
  input  EN_sb_clint_mtime;
  output RDY_sb_clint_mtime;

  // action method sb_plic_meip
  input  sb_plic_meip_ex_i;
  input  EN_sb_plic_meip;
  output RDY_sb_plic_meip;

  // action method sb_plic_seip
  input  sb_plic_seip_ex_i;
  input  EN_sb_plic_seip;
  output RDY_sb_plic_seip;

  // value method sbread_mv_csr_misa
  output [63 : 0] sbread_mv_csr_misa;
  output RDY_sbread_mv_csr_misa;

  // value method sbread_mv_csr_mvendorid
  output [63 : 0] sbread_mv_csr_mvendorid;
  output RDY_sbread_mv_csr_mvendorid;

  // value method sbread_mv_csr_stvec
  output [63 : 0] sbread_mv_csr_stvec;
  output RDY_sbread_mv_csr_stvec;

  // value method sbread_mv_csr_mtvec
  output [63 : 0] sbread_mv_csr_mtvec;
  output RDY_sbread_mv_csr_mtvec;

  // value method sbread_mv_csr_mstatus
  output [63 : 0] sbread_mv_csr_mstatus;
  output RDY_sbread_mv_csr_mstatus;

  // value method sbread_mv_csr_marchid
  output [63 : 0] sbread_mv_csr_marchid;
  output RDY_sbread_mv_csr_marchid;

  // value method sbread_mv_csr_mimpid
  output [63 : 0] sbread_mv_csr_mimpid;
  output RDY_sbread_mv_csr_mimpid;

  // value method sbread_mv_csr_mhartid
  output [63 : 0] sbread_mv_csr_mhartid;
  output RDY_sbread_mv_csr_mhartid;

  // value method sbread_mv_csr_mip
  output [63 : 0] sbread_mv_csr_mip;
  output RDY_sbread_mv_csr_mip;

  // value method sbread_mv_csr_sip
  output [63 : 0] sbread_mv_csr_sip;
  output RDY_sbread_mv_csr_sip;

  // value method sbread_mv_csr_mie
  output [63 : 0] sbread_mv_csr_mie;
  output RDY_sbread_mv_csr_mie;

  // value method sbread_mv_csr_sie
  output [63 : 0] sbread_mv_csr_sie;
  output RDY_sbread_mv_csr_sie;

  // value method sbread_mv_csr_mscratch
  output [63 : 0] sbread_mv_csr_mscratch;
  output RDY_sbread_mv_csr_mscratch;

  // value method sbread_mv_csr_sscratch
  output [63 : 0] sbread_mv_csr_sscratch;
  output RDY_sbread_mv_csr_sscratch;

  // value method sbread_mv_csr_sepc
  output [63 : 0] sbread_mv_csr_sepc;
  output RDY_sbread_mv_csr_sepc;

  // value method sbread_mv_csr_stval
  output [63 : 0] sbread_mv_csr_stval;
  output RDY_sbread_mv_csr_stval;

  // value method sbread_mv_csr_scause
  output [63 : 0] sbread_mv_csr_scause;
  output RDY_sbread_mv_csr_scause;

  // value method sbread_mv_csr_mepc
  output [63 : 0] sbread_mv_csr_mepc;
  output RDY_sbread_mv_csr_mepc;

  // value method sbread_mv_csr_mtval
  output [63 : 0] sbread_mv_csr_mtval;
  output RDY_sbread_mv_csr_mtval;

  // value method sbread_mv_csr_mcause
  output [63 : 0] sbread_mv_csr_mcause;
  output RDY_sbread_mv_csr_mcause;

  // value method sbread_mv_csr_mcycle
  output [63 : 0] sbread_mv_csr_mcycle;
  output RDY_sbread_mv_csr_mcycle;

  // value method sbread_mv_csr_minstret
  output [63 : 0] sbread_mv_csr_minstret;
  output RDY_sbread_mv_csr_minstret;

  // value method sbread_mv_csr_time
  output [63 : 0] sbread_mv_csr_time;
  output RDY_sbread_mv_csr_time;

  // value method sbread_mv_csr_mideleg
  output [63 : 0] sbread_mv_csr_mideleg;
  output RDY_sbread_mv_csr_mideleg;

  // value method sbread_mv_csr_medeleg
  output [63 : 0] sbread_mv_csr_medeleg;
  output RDY_sbread_mv_csr_medeleg;

  // value method sbread_mv_csr_pmpcfg0
  output [63 : 0] sbread_mv_csr_pmpcfg0;
  output RDY_sbread_mv_csr_pmpcfg0;

  // value method sbread_mv_csr_pmpaddr0
  output [63 : 0] sbread_mv_csr_pmpaddr0;
  output RDY_sbread_mv_csr_pmpaddr0;

  // value method sbread_mv_csr_pmpaddr1
  output [63 : 0] sbread_mv_csr_pmpaddr1;
  output RDY_sbread_mv_csr_pmpaddr1;

  // value method sbread_mv_csr_pmpaddr2
  output [63 : 0] sbread_mv_csr_pmpaddr2;
  output RDY_sbread_mv_csr_pmpaddr2;

  // value method sbread_mv_csr_pmpaddr3
  output [63 : 0] sbread_mv_csr_pmpaddr3;
  output RDY_sbread_mv_csr_pmpaddr3;

  // value method sbread_mv_csr_satp
  output [63 : 0] sbread_mv_csr_satp;
  output RDY_sbread_mv_csr_satp;

  // value method sbread_mv_csr_mcountinhibit
  output [31 : 0] sbread_mv_csr_mcountinhibit;
  output RDY_sbread_mv_csr_mcountinhibit;

  // value method sbread_mv_csr_customcontrol
  output [63 : 0] sbread_mv_csr_customcontrol;
  output RDY_sbread_mv_csr_customcontrol;

  // value method commitlog
  output [309 : 0] commitlog;
  output RDY_commitlog;

  // signals for module outputs
  wire [309 : 0] commitlog;
  wire [63 : 0] master_d_WDATA,
		master_i_WDATA,
		sbread_mv_csr_customcontrol,
		sbread_mv_csr_marchid,
		sbread_mv_csr_mcause,
		sbread_mv_csr_mcycle,
		sbread_mv_csr_medeleg,
		sbread_mv_csr_mepc,
		sbread_mv_csr_mhartid,
		sbread_mv_csr_mideleg,
		sbread_mv_csr_mie,
		sbread_mv_csr_mimpid,
		sbread_mv_csr_minstret,
		sbread_mv_csr_mip,
		sbread_mv_csr_misa,
		sbread_mv_csr_mscratch,
		sbread_mv_csr_mstatus,
		sbread_mv_csr_mtval,
		sbread_mv_csr_mtvec,
		sbread_mv_csr_mvendorid,
		sbread_mv_csr_pmpaddr0,
		sbread_mv_csr_pmpaddr1,
		sbread_mv_csr_pmpaddr2,
		sbread_mv_csr_pmpaddr3,
		sbread_mv_csr_pmpcfg0,
		sbread_mv_csr_satp,
		sbread_mv_csr_scause,
		sbread_mv_csr_sepc,
		sbread_mv_csr_sie,
		sbread_mv_csr_sip,
		sbread_mv_csr_sscratch,
		sbread_mv_csr_stval,
		sbread_mv_csr_stvec,
		sbread_mv_csr_time;
  wire [31 : 0] master_d_ARADDR,
		master_d_AWADDR,
		master_i_ARADDR,
		master_i_AWADDR,
		sbread_mv_csr_mcountinhibit;
  wire [7 : 0] master_d_ARLEN,
	       master_d_AWLEN,
	       master_d_WSTRB,
	       master_i_ARLEN,
	       master_i_AWLEN,
	       master_i_WSTRB;
  wire [3 : 0] master_d_ARCACHE,
	       master_d_ARQOS,
	       master_d_ARREGION,
	       master_d_AWCACHE,
	       master_d_AWQOS,
	       master_d_AWREGION,
	       master_i_ARCACHE,
	       master_i_ARQOS,
	       master_i_ARREGION,
	       master_i_AWCACHE,
	       master_i_AWQOS,
	       master_i_AWREGION;
  wire [2 : 0] master_d_ARPROT,
	       master_d_ARSIZE,
	       master_d_AWPROT,
	       master_d_AWSIZE,
	       master_i_ARPROT,
	       master_i_ARSIZE,
	       master_i_AWPROT,
	       master_i_AWSIZE;
  wire [1 : 0] master_d_ARBURST,
	       master_d_AWBURST,
	       master_i_ARBURST,
	       master_i_AWBURST;
  wire RDY_commitlog,
       RDY_sb_clint_msip,
       RDY_sb_clint_mtime,
       RDY_sb_clint_mtip,
       RDY_sb_plic_meip,
       RDY_sb_plic_seip,
       RDY_sbread_mv_csr_customcontrol,
       RDY_sbread_mv_csr_marchid,
       RDY_sbread_mv_csr_mcause,
       RDY_sbread_mv_csr_mcountinhibit,
       RDY_sbread_mv_csr_mcycle,
       RDY_sbread_mv_csr_medeleg,
       RDY_sbread_mv_csr_mepc,
       RDY_sbread_mv_csr_mhartid,
       RDY_sbread_mv_csr_mideleg,
       RDY_sbread_mv_csr_mie,
       RDY_sbread_mv_csr_mimpid,
       RDY_sbread_mv_csr_minstret,
       RDY_sbread_mv_csr_mip,
       RDY_sbread_mv_csr_misa,
       RDY_sbread_mv_csr_mscratch,
       RDY_sbread_mv_csr_mstatus,
       RDY_sbread_mv_csr_mtval,
       RDY_sbread_mv_csr_mtvec,
       RDY_sbread_mv_csr_mvendorid,
       RDY_sbread_mv_csr_pmpaddr0,
       RDY_sbread_mv_csr_pmpaddr1,
       RDY_sbread_mv_csr_pmpaddr2,
       RDY_sbread_mv_csr_pmpaddr3,
       RDY_sbread_mv_csr_pmpcfg0,
       RDY_sbread_mv_csr_satp,
       RDY_sbread_mv_csr_scause,
       RDY_sbread_mv_csr_sepc,
       RDY_sbread_mv_csr_sie,
       RDY_sbread_mv_csr_sip,
       RDY_sbread_mv_csr_sscratch,
       RDY_sbread_mv_csr_stval,
       RDY_sbread_mv_csr_stvec,
       RDY_sbread_mv_csr_time,
       master_d_ARID,
       master_d_ARLOCK,
       master_d_ARVALID,
       master_d_AWID,
       master_d_AWLOCK,
       master_d_AWVALID,
       master_d_BREADY,
       master_d_RREADY,
       master_d_WLAST,
       master_d_WVALID,
       master_i_ARID,
       master_i_ARLOCK,
       master_i_ARVALID,
       master_i_AWID,
       master_i_AWLOCK,
       master_i_AWVALID,
       master_i_BREADY,
       master_i_RREADY,
       master_i_WLAST,
       master_i_WVALID;

  // inlined wires
  wire fetch_xactor_crg_rd_addr_full_EN_port1__write,
       fetch_xactor_crg_rd_addr_full_port2__read,
       fetch_xactor_crg_rd_addr_full_port3__read,
       fetch_xactor_crg_rd_data_full_EN_port2__write,
       fetch_xactor_crg_rd_data_full_port2__read,
       fetch_xactor_crg_rd_data_full_port3__read,
       fetch_xactor_crg_wr_addr_full_EN_port1__write,
       fetch_xactor_crg_wr_addr_full_port2__read,
       fetch_xactor_crg_wr_data_full_EN_port1__write,
       fetch_xactor_crg_wr_data_full_port2__read,
       fetch_xactor_crg_wr_resp_full_EN_port2__write,
       fetch_xactor_crg_wr_resp_full_port3__read,
       memory_xactor_crg_rd_addr_full_EN_port1__write,
       memory_xactor_crg_rd_addr_full_EN_port2__write,
       memory_xactor_crg_rd_addr_full_port2__read,
       memory_xactor_crg_rd_addr_full_port3__read,
       memory_xactor_crg_rd_data_full_EN_port1__write,
       memory_xactor_crg_rd_data_full_EN_port2__write,
       memory_xactor_crg_rd_data_full_port2__read,
       memory_xactor_crg_rd_data_full_port3__read,
       memory_xactor_crg_wr_addr_full_EN_port1__write,
       memory_xactor_crg_wr_addr_full_EN_port2__write,
       memory_xactor_crg_wr_addr_full_port2__read,
       memory_xactor_crg_wr_addr_full_port3__read,
       memory_xactor_crg_wr_data_full_EN_port1__write,
       memory_xactor_crg_wr_data_full_EN_port2__write,
       memory_xactor_crg_wr_data_full_port2__read,
       memory_xactor_crg_wr_data_full_port3__read,
       memory_xactor_crg_wr_resp_full_EN_port1__write,
       memory_xactor_crg_wr_resp_full_EN_port2__write,
       memory_xactor_crg_wr_resp_full_port2__read,
       memory_xactor_crg_wr_resp_full_port3__read,
       ptwalk_wr_deq_holding_ff_whas;

  // register fetch_xactor_crg_rd_addr_full
  reg fetch_xactor_crg_rd_addr_full;
  wire fetch_xactor_crg_rd_addr_full_D_IN, fetch_xactor_crg_rd_addr_full_EN;

  // register fetch_xactor_crg_rd_data_full
  reg fetch_xactor_crg_rd_data_full;
  wire fetch_xactor_crg_rd_data_full_D_IN, fetch_xactor_crg_rd_data_full_EN;

  // register fetch_xactor_crg_wr_addr_full
  reg fetch_xactor_crg_wr_addr_full;
  wire fetch_xactor_crg_wr_addr_full_D_IN, fetch_xactor_crg_wr_addr_full_EN;

  // register fetch_xactor_crg_wr_data_full
  reg fetch_xactor_crg_wr_data_full;
  wire fetch_xactor_crg_wr_data_full_D_IN, fetch_xactor_crg_wr_data_full_EN;

  // register fetch_xactor_crg_wr_resp_full
  reg fetch_xactor_crg_wr_resp_full;
  wire fetch_xactor_crg_wr_resp_full_D_IN, fetch_xactor_crg_wr_resp_full_EN;

  // register fetch_xactor_rg_rd_addr
  reg [61 : 0] fetch_xactor_rg_rd_addr;
  wire [61 : 0] fetch_xactor_rg_rd_addr_D_IN;
  wire fetch_xactor_rg_rd_addr_EN;

  // register fetch_xactor_rg_rd_data
  reg [67 : 0] fetch_xactor_rg_rd_data;
  wire [67 : 0] fetch_xactor_rg_rd_data_D_IN;
  wire fetch_xactor_rg_rd_data_EN;

  // register fetch_xactor_rg_wr_addr
  reg [61 : 0] fetch_xactor_rg_wr_addr;
  wire [61 : 0] fetch_xactor_rg_wr_addr_D_IN;
  wire fetch_xactor_rg_wr_addr_EN;

  // register fetch_xactor_rg_wr_data
  reg [72 : 0] fetch_xactor_rg_wr_data;
  wire [72 : 0] fetch_xactor_rg_wr_data_D_IN;
  wire fetch_xactor_rg_wr_data_EN;

  // register fetch_xactor_rg_wr_resp
  reg [2 : 0] fetch_xactor_rg_wr_resp;
  wire [2 : 0] fetch_xactor_rg_wr_resp_D_IN;
  wire fetch_xactor_rg_wr_resp_EN;

  // register memory_xactor_crg_rd_addr_full
  reg memory_xactor_crg_rd_addr_full;
  wire memory_xactor_crg_rd_addr_full_D_IN, memory_xactor_crg_rd_addr_full_EN;

  // register memory_xactor_crg_rd_data_full
  reg memory_xactor_crg_rd_data_full;
  wire memory_xactor_crg_rd_data_full_D_IN, memory_xactor_crg_rd_data_full_EN;

  // register memory_xactor_crg_wr_addr_full
  reg memory_xactor_crg_wr_addr_full;
  wire memory_xactor_crg_wr_addr_full_D_IN, memory_xactor_crg_wr_addr_full_EN;

  // register memory_xactor_crg_wr_data_full
  reg memory_xactor_crg_wr_data_full;
  wire memory_xactor_crg_wr_data_full_D_IN, memory_xactor_crg_wr_data_full_EN;

  // register memory_xactor_crg_wr_resp_full
  reg memory_xactor_crg_wr_resp_full;
  wire memory_xactor_crg_wr_resp_full_D_IN, memory_xactor_crg_wr_resp_full_EN;

  // register memory_xactor_rg_rd_addr
  reg [61 : 0] memory_xactor_rg_rd_addr;
  reg [61 : 0] memory_xactor_rg_rd_addr_D_IN;
  wire memory_xactor_rg_rd_addr_EN;

  // register memory_xactor_rg_rd_data
  reg [67 : 0] memory_xactor_rg_rd_data;
  wire [67 : 0] memory_xactor_rg_rd_data_D_IN;
  wire memory_xactor_rg_rd_data_EN;

  // register memory_xactor_rg_wr_addr
  reg [61 : 0] memory_xactor_rg_wr_addr;
  wire [61 : 0] memory_xactor_rg_wr_addr_D_IN;
  wire memory_xactor_rg_wr_addr_EN;

  // register memory_xactor_rg_wr_data
  reg [72 : 0] memory_xactor_rg_wr_data;
  reg [72 : 0] memory_xactor_rg_wr_data_D_IN;
  wire memory_xactor_rg_wr_data_EN;

  // register memory_xactor_rg_wr_resp
  reg [2 : 0] memory_xactor_rg_wr_resp;
  wire [2 : 0] memory_xactor_rg_wr_resp_D_IN;
  wire memory_xactor_rg_wr_resp_EN;

  // register ptwalk_rg_a
  reg [55 : 0] ptwalk_rg_a;
  wire [55 : 0] ptwalk_rg_a_D_IN;
  wire ptwalk_rg_a_EN;

  // register ptwalk_rg_hold_epoch
  reg ptwalk_rg_hold_epoch;
  wire ptwalk_rg_hold_epoch_D_IN, ptwalk_rg_hold_epoch_EN;

  // register ptwalk_rg_levels
  reg [1 : 0] ptwalk_rg_levels;
  wire [1 : 0] ptwalk_rg_levels_D_IN;
  wire ptwalk_rg_levels_EN;

  // register ptwalk_rg_state
  reg [1 : 0] ptwalk_rg_state;
  reg [1 : 0] ptwalk_rg_state_D_IN;
  wire ptwalk_rg_state_EN;

  // register rg_burst_count
  reg [7 : 0] rg_burst_count;
  wire [7 : 0] rg_burst_count_D_IN;
  wire rg_burst_count_EN;

  // register rg_ptw_state
  reg [1 : 0] rg_ptw_state;
  reg [1 : 0] rg_ptw_state_D_IN;
  wire rg_ptw_state_EN;

  // register rg_read_line_req
  reg [62 : 0] rg_read_line_req;
  wire [62 : 0] rg_read_line_req_D_IN;
  wire rg_read_line_req_EN;

  // register rg_shift_amount
  reg [8 : 0] rg_shift_amount;
  wire [8 : 0] rg_shift_amount_D_IN;
  wire rg_shift_amount_EN;

  // register wr_write_req
  reg [32 : 0] wr_write_req;
  wire [32 : 0] wr_write_req_D_IN;
  wire wr_write_req_EN;

  // ports of submodule dmem
  wire [554 : 0] dmem_send_mem_wr_req;
  wire [142 : 0] dmem_receive_core_req_put;
  wire [140 : 0] dmem_get_hold_req_get;
  wire [99 : 0] dmem_send_mem_io_req_get;
  wire [76 : 0] dmem_send_core_io_resp;
  wire [75 : 0] dmem_get_ptw_resp_get, dmem_send_core_cache_resp_get;
  wire [65 : 0] dmem_get_req_to_ptw_get, dmem_receive_mem_rd_resp_put;
  wire [64 : 0] dmem_receive_mem_io_resp_put;
  wire [63 : 0] dmem_ma_mstatus_from_csr_m,
		dmem_ma_satp_from_csr_s,
		dmem_put_resp_from_ptw_put;
  wire [42 : 0] dmem_send_mem_rd_req_get;
  wire [1 : 0] dmem_ma_commit_store_storecommit, dmem_ma_curr_priv_c;
  wire dmem_EN_deq_mem_wr_req,
       dmem_EN_get_hold_req_get,
       dmem_EN_get_ptw_resp_get,
       dmem_EN_get_req_to_ptw_get,
       dmem_EN_ma_cache_enable,
       dmem_EN_ma_commit_io,
       dmem_EN_ma_commit_store,
       dmem_EN_ma_mstatus_from_csr,
       dmem_EN_ma_satp_from_csr,
       dmem_EN_put_resp_from_ptw_put,
       dmem_EN_receive_core_req_put,
       dmem_EN_receive_mem_io_resp_put,
       dmem_EN_receive_mem_rd_resp_put,
       dmem_EN_receive_mem_wr_resp_put,
       dmem_EN_send_core_cache_resp_get,
       dmem_EN_send_mem_io_req_get,
       dmem_EN_send_mem_rd_req_get,
       dmem_RDY_deq_mem_wr_req,
       dmem_RDY_get_hold_req_get,
       dmem_RDY_get_ptw_resp_get,
       dmem_RDY_get_req_to_ptw_get,
       dmem_RDY_put_resp_from_ptw_put,
       dmem_RDY_receive_core_req_put,
       dmem_RDY_receive_mem_io_resp_put,
       dmem_RDY_receive_mem_rd_resp_put,
       dmem_RDY_receive_mem_wr_resp_put,
       dmem_RDY_send_core_cache_resp_get,
       dmem_RDY_send_mem_io_req_get,
       dmem_RDY_send_mem_rd_req_get,
       dmem_RDY_send_mem_wr_req,
       dmem_ma_cache_enable_c,
       dmem_ma_commit_io_currepoch,
       dmem_mv_dmem_available,
       dmem_receive_mem_wr_resp_put;

  // ports of submodule imem
  wire [67 : 0] imem_put_core_req_put;
  wire [65 : 0] imem_get_request_to_ptw_get, imem_put_read_mem_resp_put;
  wire [63 : 0] imem_ma_satp_from_csr_s, imem_put_response_frm_ptw_put;
  wire [43 : 0] imem_get_read_mem_req_get;
  wire [41 : 0] imem_get_core_resp_get;
  wire [1 : 0] imem_ma_curr_priv_c;
  wire imem_EN_get_core_resp_get,
       imem_EN_get_read_mem_req_get,
       imem_EN_get_request_to_ptw_get,
       imem_EN_ma_cache_enable,
       imem_EN_ma_curr_priv,
       imem_EN_ma_satp_from_csr,
       imem_EN_put_core_req_put,
       imem_EN_put_read_mem_resp_put,
       imem_EN_put_response_frm_ptw_put,
       imem_RDY_get_core_resp_get,
       imem_RDY_get_read_mem_req_get,
       imem_RDY_get_request_to_ptw_get,
       imem_RDY_put_core_req_put,
       imem_RDY_put_read_mem_resp_put,
       imem_RDY_put_response_frm_ptw_put,
       imem_ma_cache_enable_c;

  // ports of submodule ptwalk_ff_hold_req
  wire [140 : 0] ptwalk_ff_hold_req_D_IN, ptwalk_ff_hold_req_D_OUT;
  wire ptwalk_ff_hold_req_CLR,
       ptwalk_ff_hold_req_DEQ,
       ptwalk_ff_hold_req_EMPTY_N,
       ptwalk_ff_hold_req_ENQ,
       ptwalk_ff_hold_req_FULL_N;

  // ports of submodule ptwalk_ff_memory_req
  reg [142 : 0] ptwalk_ff_memory_req_D_IN;
  wire [142 : 0] ptwalk_ff_memory_req_D_OUT;
  wire ptwalk_ff_memory_req_CLR,
       ptwalk_ff_memory_req_DEQ,
       ptwalk_ff_memory_req_EMPTY_N,
       ptwalk_ff_memory_req_ENQ,
       ptwalk_ff_memory_req_FULL_N;

  // ports of submodule ptwalk_ff_memory_response
  wire [75 : 0] ptwalk_ff_memory_response_D_IN,
		ptwalk_ff_memory_response_D_OUT;
  wire ptwalk_ff_memory_response_CLR,
       ptwalk_ff_memory_response_DEQ,
       ptwalk_ff_memory_response_EMPTY_N,
       ptwalk_ff_memory_response_ENQ,
       ptwalk_ff_memory_response_FULL_N;

  // ports of submodule ptwalk_ff_req_queue
  wire [65 : 0] ptwalk_ff_req_queue_D_IN, ptwalk_ff_req_queue_D_OUT;
  wire ptwalk_ff_req_queue_CLR,
       ptwalk_ff_req_queue_DEQ,
       ptwalk_ff_req_queue_EMPTY_N,
       ptwalk_ff_req_queue_ENQ,
       ptwalk_ff_req_queue_FULL_N;

  // ports of submodule ptwalk_ff_response
  wire [63 : 0] ptwalk_ff_response_D_IN, ptwalk_ff_response_D_OUT;
  wire ptwalk_ff_response_CLR,
       ptwalk_ff_response_DEQ,
       ptwalk_ff_response_EMPTY_N,
       ptwalk_ff_response_ENQ,
       ptwalk_ff_response_FULL_N;

  // ports of submodule riscv
  wire [309 : 0] riscv_commitlog;
  wire [142 : 0] riscv_s3_cache_mv_memory_request_get;
  wire [127 : 0] riscv_csrs_mv_pmp_addr;
  wire [76 : 0] riscv_s5_cache_ma_io_response_r;
  wire [75 : 0] riscv_s4_cache_memory_response_put;
  wire [67 : 0] riscv_s0_icache_to_icache_get;
  wire [63 : 0] riscv_csrs_mv_csr_mstatus,
		riscv_csrs_mv_csr_satp,
		riscv_interrupts_ma_clint_mtime_mtime,
		riscv_sbread_mv_csr_customcontrol,
		riscv_sbread_mv_csr_marchid,
		riscv_sbread_mv_csr_mcause,
		riscv_sbread_mv_csr_mcycle,
		riscv_sbread_mv_csr_medeleg,
		riscv_sbread_mv_csr_mepc,
		riscv_sbread_mv_csr_mhartid,
		riscv_sbread_mv_csr_mideleg,
		riscv_sbread_mv_csr_mie,
		riscv_sbread_mv_csr_mimpid,
		riscv_sbread_mv_csr_minstret,
		riscv_sbread_mv_csr_mip,
		riscv_sbread_mv_csr_misa,
		riscv_sbread_mv_csr_mscratch,
		riscv_sbread_mv_csr_mstatus,
		riscv_sbread_mv_csr_mtval,
		riscv_sbread_mv_csr_mtvec,
		riscv_sbread_mv_csr_mvendorid,
		riscv_sbread_mv_csr_pmpaddr0,
		riscv_sbread_mv_csr_pmpaddr1,
		riscv_sbread_mv_csr_pmpaddr2,
		riscv_sbread_mv_csr_pmpaddr3,
		riscv_sbread_mv_csr_pmpcfg0,
		riscv_sbread_mv_csr_satp,
		riscv_sbread_mv_csr_scause,
		riscv_sbread_mv_csr_sepc,
		riscv_sbread_mv_csr_sie,
		riscv_sbread_mv_csr_sip,
		riscv_sbread_mv_csr_sscratch,
		riscv_sbread_mv_csr_stval,
		riscv_sbread_mv_csr_stvec,
		riscv_sbread_mv_csr_time;
  wire [41 : 0] riscv_s1_icache_inst_response_put;
  wire [31 : 0] riscv_csrs_mv_pmp_cfg, riscv_sbread_mv_csr_mcountinhibit;
  wire [2 : 0] riscv_csrs_mv_cacheenable;
  wire [1 : 0] riscv_csrs_mv_curr_priv;
  wire riscv_EN_interrupts_ma_clint_msip,
       riscv_EN_interrupts_ma_clint_mtime,
       riscv_EN_interrupts_ma_clint_mtip,
       riscv_EN_interrupts_ma_plic_meip,
       riscv_EN_interrupts_ma_plic_seip,
       riscv_EN_s0_icache_to_icache_get,
       riscv_EN_s1_icache_inst_response_put,
       riscv_EN_s3_cache_mv_memory_request_get,
       riscv_EN_s4_cache_memory_response_put,
       riscv_EN_s5_cache_ma_io_response,
       riscv_RDY_s0_icache_to_icache_get,
       riscv_RDY_s1_icache_inst_response_put,
       riscv_RDY_s3_cache_mv_memory_request_get,
       riscv_RDY_s4_cache_memory_response_put,
       riscv_RDY_s5_cache_mv_initiate_ioop,
       riscv_RDY_s5_cache_mv_initiate_store_fst,
       riscv_RDY_s5_cache_mv_initiate_store_snd,
       riscv_interrupts_ma_clint_msip_intrpt,
       riscv_interrupts_ma_clint_mtip_intrpt,
       riscv_interrupts_ma_plic_meip_intrpt,
       riscv_interrupts_ma_plic_seip_intrpt,
       riscv_s3_cache_ma_cache_is_available_avail,
       riscv_s5_cache_mv_initiate_ioop,
       riscv_s5_cache_mv_initiate_store_fst,
       riscv_s5_cache_mv_initiate_store_snd;

  // rule scheduling signals
  wire CAN_FIRE_RL_core_req_mkConnectionGetPut,
       CAN_FIRE_RL_core_resp_mkConnectionGetPut,
       CAN_FIRE_RL_handle_dmem_line_write_resp,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_10,
       CAN_FIRE_RL_mkConnectionVtoAf_11,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_mkConnectionVtoAf_4,
       CAN_FIRE_RL_mkConnectionVtoAf_5,
       CAN_FIRE_RL_mkConnectionVtoAf_6,
       CAN_FIRE_RL_mkConnectionVtoAf_7,
       CAN_FIRE_RL_mkConnectionVtoAf_8,
       CAN_FIRE_RL_mkConnectionVtoAf_9,
       CAN_FIRE_RL_ptwalk_check_pte,
       CAN_FIRE_RL_ptwalk_deq_holding_fifo,
       CAN_FIRE_RL_ptwalk_generate_pte,
       CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut,
       CAN_FIRE_RL_ptwalk_resend_core_req_to_cache,
       CAN_FIRE_RL_rl_dmem_burst_write_data,
       CAN_FIRE_RL_rl_dtlb_req_to_ptwalk,
       CAN_FIRE_RL_rl_handle_delayed_read,
       CAN_FIRE_RL_rl_handle_dmem_line_read_request,
       CAN_FIRE_RL_rl_handle_dmem_line_resp,
       CAN_FIRE_RL_rl_handle_dmem_write_request,
       CAN_FIRE_RL_rl_handle_imem_line_request,
       CAN_FIRE_RL_rl_handle_imem_line_resp,
       CAN_FIRE_RL_rl_handle_io_read_response,
       CAN_FIRE_RL_rl_handle_io_write_resp,
       CAN_FIRE_RL_rl_imem_enable,
       CAN_FIRE_RL_rl_initiate_io,
       CAN_FIRE_RL_rl_itlb_req_to_ptwalk,
       CAN_FIRE_RL_rl_map_dmem_enable,
       CAN_FIRE_RL_rl_ptwalk_resp_to_dtlb,
       CAN_FIRE_RL_rl_ptwalk_resp_to_itlb,
       CAN_FIRE___me_check_13,
       CAN_FIRE_master_d_m_arready,
       CAN_FIRE_master_d_m_awready,
       CAN_FIRE_master_d_m_bvalid,
       CAN_FIRE_master_d_m_rvalid,
       CAN_FIRE_master_d_m_wready,
       CAN_FIRE_master_i_m_arready,
       CAN_FIRE_master_i_m_awready,
       CAN_FIRE_master_i_m_bvalid,
       CAN_FIRE_master_i_m_rvalid,
       CAN_FIRE_master_i_m_wready,
       CAN_FIRE_sb_clint_msip,
       CAN_FIRE_sb_clint_mtime,
       CAN_FIRE_sb_clint_mtip,
       CAN_FIRE_sb_plic_meip,
       CAN_FIRE_sb_plic_seip,
       WILL_FIRE_RL_core_req_mkConnectionGetPut,
       WILL_FIRE_RL_core_resp_mkConnectionGetPut,
       WILL_FIRE_RL_handle_dmem_line_write_resp,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_10,
       WILL_FIRE_RL_mkConnectionVtoAf_11,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_mkConnectionVtoAf_4,
       WILL_FIRE_RL_mkConnectionVtoAf_5,
       WILL_FIRE_RL_mkConnectionVtoAf_6,
       WILL_FIRE_RL_mkConnectionVtoAf_7,
       WILL_FIRE_RL_mkConnectionVtoAf_8,
       WILL_FIRE_RL_mkConnectionVtoAf_9,
       WILL_FIRE_RL_ptwalk_check_pte,
       WILL_FIRE_RL_ptwalk_deq_holding_fifo,
       WILL_FIRE_RL_ptwalk_generate_pte,
       WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut,
       WILL_FIRE_RL_ptwalk_resend_core_req_to_cache,
       WILL_FIRE_RL_rl_dmem_burst_write_data,
       WILL_FIRE_RL_rl_dtlb_req_to_ptwalk,
       WILL_FIRE_RL_rl_handle_delayed_read,
       WILL_FIRE_RL_rl_handle_dmem_line_read_request,
       WILL_FIRE_RL_rl_handle_dmem_line_resp,
       WILL_FIRE_RL_rl_handle_dmem_write_request,
       WILL_FIRE_RL_rl_handle_imem_line_request,
       WILL_FIRE_RL_rl_handle_imem_line_resp,
       WILL_FIRE_RL_rl_handle_io_read_response,
       WILL_FIRE_RL_rl_handle_io_write_resp,
       WILL_FIRE_RL_rl_imem_enable,
       WILL_FIRE_RL_rl_initiate_io,
       WILL_FIRE_RL_rl_itlb_req_to_ptwalk,
       WILL_FIRE_RL_rl_map_dmem_enable,
       WILL_FIRE_RL_rl_ptwalk_resp_to_dtlb,
       WILL_FIRE_RL_rl_ptwalk_resp_to_itlb,
       WILL_FIRE___me_check_13,
       WILL_FIRE_master_d_m_arready,
       WILL_FIRE_master_d_m_awready,
       WILL_FIRE_master_d_m_bvalid,
       WILL_FIRE_master_d_m_rvalid,
       WILL_FIRE_master_d_m_wready,
       WILL_FIRE_master_i_m_arready,
       WILL_FIRE_master_i_m_awready,
       WILL_FIRE_master_i_m_bvalid,
       WILL_FIRE_master_i_m_rvalid,
       WILL_FIRE_master_i_m_wready,
       WILL_FIRE_sb_clint_msip,
       WILL_FIRE_sb_clint_mtime,
       WILL_FIRE_sb_clint_mtip,
       WILL_FIRE_sb_plic_meip,
       WILL_FIRE_sb_plic_seip;

  // inputs to muxes for submodule ports
  wire [142 : 0] MUX_ptwalk_ff_memory_req_enq_1__VAL_1,
		 MUX_ptwalk_ff_memory_req_enq_1__VAL_2,
		 MUX_ptwalk_ff_memory_req_enq_1__VAL_3;
  wire [72 : 0] MUX_memory_xactor_rg_wr_data_write_1__VAL_1,
		MUX_memory_xactor_rg_wr_data_write_1__VAL_2,
		MUX_memory_xactor_rg_wr_data_write_1__VAL_3;
  wire [64 : 0] MUX_dmem_receive_mem_io_resp_put_1__VAL_1,
		MUX_dmem_receive_mem_io_resp_put_1__VAL_2;
  wire [62 : 0] MUX_rg_read_line_req_write_1__VAL_1,
		MUX_rg_read_line_req_write_1__VAL_2;
  wire [61 : 0] MUX_memory_xactor_rg_rd_addr_write_1__VAL_1,
		MUX_memory_xactor_rg_rd_addr_write_1__VAL_2,
		MUX_memory_xactor_rg_wr_addr_write_1__VAL_2;
  wire [32 : 0] MUX_wr_write_req_write_1__VAL_1,
		MUX_wr_write_req_write_1__VAL_2;
  wire [7 : 0] MUX_rg_burst_count_write_1__VAL_2;
  wire [1 : 0] MUX_ptwalk_rg_state_write_1__VAL_1;
  wire MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_1,
       MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_2,
       MUX_memory_xactor_crg_wr_addr_full_port2__write_1__SEL_1,
       MUX_ptwalk_ff_memory_req_enq_1__SEL_1,
       MUX_rg_ptw_state_write_1__SEL_1,
       MUX_rg_read_line_req_write_1__SEL_1,
       MUX_wr_write_req_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d483;
  reg TASK_testplusargs___d484;
  reg TASK_testplusargs___d485;
  reg [63 : 0] v__h8783;
  reg TASK_testplusargs___d502;
  reg TASK_testplusargs___d503;
  reg TASK_testplusargs___d504;
  reg [63 : 0] v__h9014;
  reg TASK_testplusargs___d527;
  reg TASK_testplusargs___d528;
  reg TASK_testplusargs___d529;
  reg [63 : 0] v__h9217;
  reg TASK_testplusargs___d582;
  reg TASK_testplusargs___d583;
  reg TASK_testplusargs___d584;
  reg [63 : 0] v__h11987;
  reg TASK_testplusargs___d601;
  reg TASK_testplusargs___d602;
  reg TASK_testplusargs___d603;
  reg [63 : 0] v__h12201;
  reg TASK_testplusargs___d635;
  reg TASK_testplusargs___d636;
  reg TASK_testplusargs___d637;
  reg [63 : 0] v__h12984;
  reg TASK_testplusargs___d650;
  reg TASK_testplusargs___d651;
  reg TASK_testplusargs___d652;
  reg [63 : 0] v__h13222;
  reg TASK_testplusargs___d660;
  reg TASK_testplusargs___d661;
  reg TASK_testplusargs___d662;
  reg [63 : 0] v__h13454;
  reg TASK_testplusargs___d682;
  reg TASK_testplusargs___d683;
  reg TASK_testplusargs___d684;
  reg [63 : 0] v__h13701;
  reg TASK_testplusargs___d706;
  reg TASK_testplusargs___d707;
  reg TASK_testplusargs___d708;
  reg [63 : 0] v__h14109;
  reg TASK_testplusargs___d724;
  reg TASK_testplusargs___d725;
  reg TASK_testplusargs___d726;
  reg [63 : 0] v__h14286;
  reg TASK_testplusargs___d749;
  reg TASK_testplusargs___d750;
  reg TASK_testplusargs___d751;
  reg [63 : 0] v__h14794;
  reg TASK_testplusargs___d759;
  reg TASK_testplusargs___d760;
  reg TASK_testplusargs___d761;
  reg [63 : 0] v__h14950;
  reg TASK_testplusargs___d9;
  reg TASK_testplusargs___d10;
  reg TASK_testplusargs___d11;
  reg [63 : 0] v__h1565;
  reg TASK_testplusargs___d103;
  reg TASK_testplusargs___d104;
  reg TASK_testplusargs___d105;
  reg [63 : 0] v__h2275;
  reg TASK_testplusargs___d112;
  reg TASK_testplusargs___d113;
  reg TASK_testplusargs___d114;
  reg [63 : 0] v__h2437;
  reg TASK_testplusargs___d155;
  reg TASK_testplusargs___d156;
  reg TASK_testplusargs___d157;
  reg [63 : 0] v__h2807;
  reg TASK_testplusargs___d198;
  reg TASK_testplusargs___d199;
  reg TASK_testplusargs___d200;
  reg [63 : 0] v__h3059;
  reg TASK_testplusargs___d204;
  reg TASK_testplusargs___d205;
  reg TASK_testplusargs___d206;
  reg [63 : 0] v__h3237;
  reg TASK_testplusargs___d360;
  reg TASK_testplusargs___d361;
  reg TASK_testplusargs___d362;
  reg [63 : 0] v__h4057;
  reg TASK_testplusargs___d414;
  reg TASK_testplusargs___d415;
  reg TASK_testplusargs___d416;
  reg [63 : 0] v__h4599;
  reg TASK_testplusargs___d445;
  reg TASK_testplusargs___d446;
  reg TASK_testplusargs___d447;
  reg [63 : 0] v__h4721;
  reg NOT_ptwalk_ff_memory_response_first__61_BIT_13_ETC___d419;
  reg ptwalk_ff_memory_response_first__61_BIT_13_14__ETC___d450;
  reg IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d47;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d81;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d82;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d84;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d86;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d87;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d163;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d185;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d188;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d191;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d194;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d197;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d211;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d213;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d215;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d217;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d219;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d221;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d223;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d225;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d227;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d229;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d231;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d233;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d235;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d237;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d239;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d241;
  reg NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d365;
  reg ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d451;
  reg TASK_testplusargs_02_OR_TASK_testplusargs_03_A_ETC___d509;
  reg TASK_testplusargs_02_OR_TASK_testplusargs_03_A_ETC___d511;
  reg TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d536;
  reg TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d538;
  reg TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d589;
  reg TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d591;
  reg NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655;
  reg TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d688;
  reg TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d689;
  reg TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d713;
  reg TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d715;
  reg TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d717;
  reg TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d723;
  reg TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d730;
  reg TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d732;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] w_wdata__h9793;
  reg [8 : 0] CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1;
  reg [7 : 0] write_strobe__h9323;
  reg [6 : 0] cause___1__h4119, cause___1__h4140;
  wire [511 : 0] x__h14702;
  wire [63 : 0] x_address__h2690, x_writedata__h2695, x_writedata__h4285;
  wire [55 : 0] a__h2369, pte_address__h2370, x__h4465;
  wire [31 : 0] wr_write_req_BITS_31_TO_0__q2;
  wire [11 : 0] x__h2538;
  wire [8 : 0] x__h14576;
  wire [7 : 0] IF_NOT_ptwalk_ff_memory_response_first__61_BIT_ETC___d340,
	       write_strobe__h9325,
	       x__h14613;
  wire [6 : 0] IF_NOT_ptwalk_ff_memory_response_first__61_BIT_ETC___d337,
	       _theResult_____1__h3971;
  wire [2 : 0] value__h8827, x__h13897, x__h13932, x__h9542;
  wire [1 : 0] max_levels__h2368, priv__h3170, x__h4182;
  wire IF_IF_ptwalk_wr_mstatus_whas__44_THEN_ptwalk_w_ETC___d285,
       IF_IF_ptwalk_wr_mstatus_whas__44_THEN_ptwalk_w_ETC___d345,
       IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630,
       NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d292,
       NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d367,
       NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d326,
       NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d433,
       NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d435,
       NOT_ptwalk_rg_levels_18_EQ_0_43_74_OR_ptwalk_f_ETC___d441,
       NOT_ptwalk_rg_levels_18_EQ_1_44_77_OR_ptwalk_f_ETC___d406,
       NOT_ptwalk_rg_levels_18_EQ_1_44_77_OR_ptwalk_f_ETC___d439,
       _dand1ptwalk_ff_req_queue_EN_deq,
       ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409,
       ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d287,
       ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d322,
       ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d324,
       ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d347,
       ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d395,
       ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d403,
       ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d437,
       ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330,
       ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d350,
       ptwalk_rg_levels_18_EQ_1_44_AND_NOT_ptwalk_ff__ETC___d328;

  // value method master_d_m_awvalid
  assign master_d_AWVALID = memory_xactor_crg_wr_addr_full ;

  // value method master_d_m_awid
  assign master_d_AWID = memory_xactor_rg_wr_addr[61] ;

  // value method master_d_m_awaddr
  assign master_d_AWADDR = memory_xactor_rg_wr_addr[60:29] ;

  // value method master_d_m_awlen
  assign master_d_AWLEN = memory_xactor_rg_wr_addr[28:21] ;

  // value method master_d_m_awsize
  assign master_d_AWSIZE = memory_xactor_rg_wr_addr[20:18] ;

  // value method master_d_m_awburst
  assign master_d_AWBURST = memory_xactor_rg_wr_addr[17:16] ;

  // value method master_d_m_awlock
  assign master_d_AWLOCK = memory_xactor_rg_wr_addr[15] ;

  // value method master_d_m_awcache
  assign master_d_AWCACHE = memory_xactor_rg_wr_addr[14:11] ;

  // value method master_d_m_awprot
  assign master_d_AWPROT = memory_xactor_rg_wr_addr[10:8] ;

  // value method master_d_m_awqos
  assign master_d_AWQOS = memory_xactor_rg_wr_addr[7:4] ;

  // value method master_d_m_awregion
  assign master_d_AWREGION = memory_xactor_rg_wr_addr[3:0] ;

  // action method master_d_m_awready
  assign CAN_FIRE_master_d_m_awready = 1'd1 ;
  assign WILL_FIRE_master_d_m_awready = 1'd1 ;

  // value method master_d_m_wvalid
  assign master_d_WVALID = memory_xactor_crg_wr_data_full ;

  // value method master_d_m_wdata
  assign master_d_WDATA = memory_xactor_rg_wr_data[72:9] ;

  // value method master_d_m_wstrb
  assign master_d_WSTRB = memory_xactor_rg_wr_data[8:1] ;

  // value method master_d_m_wlast
  assign master_d_WLAST = memory_xactor_rg_wr_data[0] ;

  // action method master_d_m_wready
  assign CAN_FIRE_master_d_m_wready = 1'd1 ;
  assign WILL_FIRE_master_d_m_wready = 1'd1 ;

  // action method master_d_m_bvalid
  assign CAN_FIRE_master_d_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_bvalid = 1'd1 ;

  // value method master_d_m_bready
  assign master_d_BREADY = !memory_xactor_crg_wr_resp_full_port2__read ;

  // value method master_d_m_arvalid
  assign master_d_ARVALID = memory_xactor_crg_rd_addr_full ;

  // value method master_d_m_arid
  assign master_d_ARID = memory_xactor_rg_rd_addr[61] ;

  // value method master_d_m_araddr
  assign master_d_ARADDR = memory_xactor_rg_rd_addr[60:29] ;

  // value method master_d_m_arlen
  assign master_d_ARLEN = memory_xactor_rg_rd_addr[28:21] ;

  // value method master_d_m_arsize
  assign master_d_ARSIZE = memory_xactor_rg_rd_addr[20:18] ;

  // value method master_d_m_arburst
  assign master_d_ARBURST = memory_xactor_rg_rd_addr[17:16] ;

  // value method master_d_m_arlock
  assign master_d_ARLOCK = memory_xactor_rg_rd_addr[15] ;

  // value method master_d_m_arcache
  assign master_d_ARCACHE = memory_xactor_rg_rd_addr[14:11] ;

  // value method master_d_m_arprot
  assign master_d_ARPROT = memory_xactor_rg_rd_addr[10:8] ;

  // value method master_d_m_arqos
  assign master_d_ARQOS = memory_xactor_rg_rd_addr[7:4] ;

  // value method master_d_m_arregion
  assign master_d_ARREGION = memory_xactor_rg_rd_addr[3:0] ;

  // action method master_d_m_arready
  assign CAN_FIRE_master_d_m_arready = 1'd1 ;
  assign WILL_FIRE_master_d_m_arready = 1'd1 ;

  // action method master_d_m_rvalid
  assign CAN_FIRE_master_d_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_rvalid = 1'd1 ;

  // value method master_d_m_rready
  assign master_d_RREADY = !memory_xactor_crg_rd_data_full_port2__read ;

  // value method master_i_m_awvalid
  assign master_i_AWVALID = fetch_xactor_crg_wr_addr_full ;

  // value method master_i_m_awid
  assign master_i_AWID = fetch_xactor_rg_wr_addr[61] ;

  // value method master_i_m_awaddr
  assign master_i_AWADDR = fetch_xactor_rg_wr_addr[60:29] ;

  // value method master_i_m_awlen
  assign master_i_AWLEN = fetch_xactor_rg_wr_addr[28:21] ;

  // value method master_i_m_awsize
  assign master_i_AWSIZE = fetch_xactor_rg_wr_addr[20:18] ;

  // value method master_i_m_awburst
  assign master_i_AWBURST = fetch_xactor_rg_wr_addr[17:16] ;

  // value method master_i_m_awlock
  assign master_i_AWLOCK = fetch_xactor_rg_wr_addr[15] ;

  // value method master_i_m_awcache
  assign master_i_AWCACHE = fetch_xactor_rg_wr_addr[14:11] ;

  // value method master_i_m_awprot
  assign master_i_AWPROT = fetch_xactor_rg_wr_addr[10:8] ;

  // value method master_i_m_awqos
  assign master_i_AWQOS = fetch_xactor_rg_wr_addr[7:4] ;

  // value method master_i_m_awregion
  assign master_i_AWREGION = fetch_xactor_rg_wr_addr[3:0] ;

  // action method master_i_m_awready
  assign CAN_FIRE_master_i_m_awready = 1'd1 ;
  assign WILL_FIRE_master_i_m_awready = 1'd1 ;

  // value method master_i_m_wvalid
  assign master_i_WVALID = fetch_xactor_crg_wr_data_full ;

  // value method master_i_m_wdata
  assign master_i_WDATA = fetch_xactor_rg_wr_data[72:9] ;

  // value method master_i_m_wstrb
  assign master_i_WSTRB = fetch_xactor_rg_wr_data[8:1] ;

  // value method master_i_m_wlast
  assign master_i_WLAST = fetch_xactor_rg_wr_data[0] ;

  // action method master_i_m_wready
  assign CAN_FIRE_master_i_m_wready = 1'd1 ;
  assign WILL_FIRE_master_i_m_wready = 1'd1 ;

  // action method master_i_m_bvalid
  assign CAN_FIRE_master_i_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_bvalid = 1'd1 ;

  // value method master_i_m_bready
  assign master_i_BREADY = !fetch_xactor_crg_wr_resp_full ;

  // value method master_i_m_arvalid
  assign master_i_ARVALID = fetch_xactor_crg_rd_addr_full ;

  // value method master_i_m_arid
  assign master_i_ARID = fetch_xactor_rg_rd_addr[61] ;

  // value method master_i_m_araddr
  assign master_i_ARADDR = fetch_xactor_rg_rd_addr[60:29] ;

  // value method master_i_m_arlen
  assign master_i_ARLEN = fetch_xactor_rg_rd_addr[28:21] ;

  // value method master_i_m_arsize
  assign master_i_ARSIZE = fetch_xactor_rg_rd_addr[20:18] ;

  // value method master_i_m_arburst
  assign master_i_ARBURST = fetch_xactor_rg_rd_addr[17:16] ;

  // value method master_i_m_arlock
  assign master_i_ARLOCK = fetch_xactor_rg_rd_addr[15] ;

  // value method master_i_m_arcache
  assign master_i_ARCACHE = fetch_xactor_rg_rd_addr[14:11] ;

  // value method master_i_m_arprot
  assign master_i_ARPROT = fetch_xactor_rg_rd_addr[10:8] ;

  // value method master_i_m_arqos
  assign master_i_ARQOS = fetch_xactor_rg_rd_addr[7:4] ;

  // value method master_i_m_arregion
  assign master_i_ARREGION = fetch_xactor_rg_rd_addr[3:0] ;

  // action method master_i_m_arready
  assign CAN_FIRE_master_i_m_arready = 1'd1 ;
  assign WILL_FIRE_master_i_m_arready = 1'd1 ;

  // action method master_i_m_rvalid
  assign CAN_FIRE_master_i_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_rvalid = 1'd1 ;

  // value method master_i_m_rready
  assign master_i_RREADY = !fetch_xactor_crg_rd_data_full_port2__read ;

  // action method sb_clint_msip
  assign RDY_sb_clint_msip = 1'd1 ;
  assign CAN_FIRE_sb_clint_msip = 1'd1 ;
  assign WILL_FIRE_sb_clint_msip = EN_sb_clint_msip ;

  // action method sb_clint_mtip
  assign RDY_sb_clint_mtip = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtip = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtip = EN_sb_clint_mtip ;

  // action method sb_clint_mtime
  assign RDY_sb_clint_mtime = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtime = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtime = EN_sb_clint_mtime ;

  // action method sb_plic_meip
  assign RDY_sb_plic_meip = 1'd1 ;
  assign CAN_FIRE_sb_plic_meip = 1'd1 ;
  assign WILL_FIRE_sb_plic_meip = EN_sb_plic_meip ;

  // action method sb_plic_seip
  assign RDY_sb_plic_seip = 1'd1 ;
  assign CAN_FIRE_sb_plic_seip = 1'd1 ;
  assign WILL_FIRE_sb_plic_seip = EN_sb_plic_seip ;

  // value method sbread_mv_csr_misa
  assign sbread_mv_csr_misa = riscv_sbread_mv_csr_misa ;
  assign RDY_sbread_mv_csr_misa = 1'd1 ;

  // value method sbread_mv_csr_mvendorid
  assign sbread_mv_csr_mvendorid = riscv_sbread_mv_csr_mvendorid ;
  assign RDY_sbread_mv_csr_mvendorid = 1'd1 ;

  // value method sbread_mv_csr_stvec
  assign sbread_mv_csr_stvec = riscv_sbread_mv_csr_stvec ;
  assign RDY_sbread_mv_csr_stvec = 1'd1 ;

  // value method sbread_mv_csr_mtvec
  assign sbread_mv_csr_mtvec = riscv_sbread_mv_csr_mtvec ;
  assign RDY_sbread_mv_csr_mtvec = 1'd1 ;

  // value method sbread_mv_csr_mstatus
  assign sbread_mv_csr_mstatus = riscv_sbread_mv_csr_mstatus ;
  assign RDY_sbread_mv_csr_mstatus = 1'd1 ;

  // value method sbread_mv_csr_marchid
  assign sbread_mv_csr_marchid = riscv_sbread_mv_csr_marchid ;
  assign RDY_sbread_mv_csr_marchid = 1'd1 ;

  // value method sbread_mv_csr_mimpid
  assign sbread_mv_csr_mimpid = riscv_sbread_mv_csr_mimpid ;
  assign RDY_sbread_mv_csr_mimpid = 1'd1 ;

  // value method sbread_mv_csr_mhartid
  assign sbread_mv_csr_mhartid = riscv_sbread_mv_csr_mhartid ;
  assign RDY_sbread_mv_csr_mhartid = 1'd1 ;

  // value method sbread_mv_csr_mip
  assign sbread_mv_csr_mip = riscv_sbread_mv_csr_mip ;
  assign RDY_sbread_mv_csr_mip = 1'd1 ;

  // value method sbread_mv_csr_sip
  assign sbread_mv_csr_sip = riscv_sbread_mv_csr_sip ;
  assign RDY_sbread_mv_csr_sip = 1'd1 ;

  // value method sbread_mv_csr_mie
  assign sbread_mv_csr_mie = riscv_sbread_mv_csr_mie ;
  assign RDY_sbread_mv_csr_mie = 1'd1 ;

  // value method sbread_mv_csr_sie
  assign sbread_mv_csr_sie = riscv_sbread_mv_csr_sie ;
  assign RDY_sbread_mv_csr_sie = 1'd1 ;

  // value method sbread_mv_csr_mscratch
  assign sbread_mv_csr_mscratch = riscv_sbread_mv_csr_mscratch ;
  assign RDY_sbread_mv_csr_mscratch = 1'd1 ;

  // value method sbread_mv_csr_sscratch
  assign sbread_mv_csr_sscratch = riscv_sbread_mv_csr_sscratch ;
  assign RDY_sbread_mv_csr_sscratch = 1'd1 ;

  // value method sbread_mv_csr_sepc
  assign sbread_mv_csr_sepc = riscv_sbread_mv_csr_sepc ;
  assign RDY_sbread_mv_csr_sepc = 1'd1 ;

  // value method sbread_mv_csr_stval
  assign sbread_mv_csr_stval = riscv_sbread_mv_csr_stval ;
  assign RDY_sbread_mv_csr_stval = 1'd1 ;

  // value method sbread_mv_csr_scause
  assign sbread_mv_csr_scause = riscv_sbread_mv_csr_scause ;
  assign RDY_sbread_mv_csr_scause = 1'd1 ;

  // value method sbread_mv_csr_mepc
  assign sbread_mv_csr_mepc = riscv_sbread_mv_csr_mepc ;
  assign RDY_sbread_mv_csr_mepc = 1'd1 ;

  // value method sbread_mv_csr_mtval
  assign sbread_mv_csr_mtval = riscv_sbread_mv_csr_mtval ;
  assign RDY_sbread_mv_csr_mtval = 1'd1 ;

  // value method sbread_mv_csr_mcause
  assign sbread_mv_csr_mcause = riscv_sbread_mv_csr_mcause ;
  assign RDY_sbread_mv_csr_mcause = 1'd1 ;

  // value method sbread_mv_csr_mcycle
  assign sbread_mv_csr_mcycle = riscv_sbread_mv_csr_mcycle ;
  assign RDY_sbread_mv_csr_mcycle = 1'd1 ;

  // value method sbread_mv_csr_minstret
  assign sbread_mv_csr_minstret = riscv_sbread_mv_csr_minstret ;
  assign RDY_sbread_mv_csr_minstret = 1'd1 ;

  // value method sbread_mv_csr_time
  assign sbread_mv_csr_time = riscv_sbread_mv_csr_time ;
  assign RDY_sbread_mv_csr_time = 1'd1 ;

  // value method sbread_mv_csr_mideleg
  assign sbread_mv_csr_mideleg = riscv_sbread_mv_csr_mideleg ;
  assign RDY_sbread_mv_csr_mideleg = 1'd1 ;

  // value method sbread_mv_csr_medeleg
  assign sbread_mv_csr_medeleg = riscv_sbread_mv_csr_medeleg ;
  assign RDY_sbread_mv_csr_medeleg = 1'd1 ;

  // value method sbread_mv_csr_pmpcfg0
  assign sbread_mv_csr_pmpcfg0 = riscv_sbread_mv_csr_pmpcfg0 ;
  assign RDY_sbread_mv_csr_pmpcfg0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr0
  assign sbread_mv_csr_pmpaddr0 = riscv_sbread_mv_csr_pmpaddr0 ;
  assign RDY_sbread_mv_csr_pmpaddr0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr1
  assign sbread_mv_csr_pmpaddr1 = riscv_sbread_mv_csr_pmpaddr1 ;
  assign RDY_sbread_mv_csr_pmpaddr1 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr2
  assign sbread_mv_csr_pmpaddr2 = riscv_sbread_mv_csr_pmpaddr2 ;
  assign RDY_sbread_mv_csr_pmpaddr2 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr3
  assign sbread_mv_csr_pmpaddr3 = riscv_sbread_mv_csr_pmpaddr3 ;
  assign RDY_sbread_mv_csr_pmpaddr3 = 1'd1 ;

  // value method sbread_mv_csr_satp
  assign sbread_mv_csr_satp = riscv_sbread_mv_csr_satp ;
  assign RDY_sbread_mv_csr_satp = 1'd1 ;

  // value method sbread_mv_csr_mcountinhibit
  assign sbread_mv_csr_mcountinhibit = riscv_sbread_mv_csr_mcountinhibit ;
  assign RDY_sbread_mv_csr_mcountinhibit = 1'd1 ;

  // value method sbread_mv_csr_customcontrol
  assign sbread_mv_csr_customcontrol = riscv_sbread_mv_csr_customcontrol ;
  assign RDY_sbread_mv_csr_customcontrol = 1'd1 ;

  // value method commitlog
  assign commitlog = riscv_commitlog ;
  assign RDY_commitlog = 1'd1 ;

  // submodule dmem
  mkdmem #(.id(hartid[31:0])) dmem(.pmp_cfg_0(riscv_csrs_mv_pmp_cfg[7:0]),
				   .pmp_cfg_1(riscv_csrs_mv_pmp_cfg[15:8]),
				   .pmp_cfg_2(riscv_csrs_mv_pmp_cfg[23:16]),
				   .pmp_cfg_3(riscv_csrs_mv_pmp_cfg[31:24]),
				   .pmp_addr_0(riscv_csrs_mv_pmp_addr[31:0]),
				   .pmp_addr_1(riscv_csrs_mv_pmp_addr[63:32]),
				   .pmp_addr_2(riscv_csrs_mv_pmp_addr[95:64]),
				   .pmp_addr_3(riscv_csrs_mv_pmp_addr[127:96]),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .ma_cache_enable_c(dmem_ma_cache_enable_c),
				   .ma_commit_io_currepoch(dmem_ma_commit_io_currepoch),
				   .ma_commit_store_storecommit(dmem_ma_commit_store_storecommit),
				   .ma_curr_priv_c(dmem_ma_curr_priv_c),
				   .ma_mstatus_from_csr_m(dmem_ma_mstatus_from_csr_m),
				   .ma_satp_from_csr_s(dmem_ma_satp_from_csr_s),
				   .put_resp_from_ptw_put(dmem_put_resp_from_ptw_put),
				   .receive_core_req_put(dmem_receive_core_req_put),
				   .receive_mem_io_resp_put(dmem_receive_mem_io_resp_put),
				   .receive_mem_rd_resp_put(dmem_receive_mem_rd_resp_put),
				   .receive_mem_wr_resp_put(dmem_receive_mem_wr_resp_put),
				   .EN_receive_core_req_put(dmem_EN_receive_core_req_put),
				   .EN_send_core_cache_resp_get(dmem_EN_send_core_cache_resp_get),
				   .EN_send_mem_io_req_get(dmem_EN_send_mem_io_req_get),
				   .EN_receive_mem_io_resp_put(dmem_EN_receive_mem_io_resp_put),
				   .EN_ma_commit_io(dmem_EN_ma_commit_io),
				   .EN_receive_mem_wr_resp_put(dmem_EN_receive_mem_wr_resp_put),
				   .EN_deq_mem_wr_req(dmem_EN_deq_mem_wr_req),
				   .EN_send_mem_rd_req_get(dmem_EN_send_mem_rd_req_get),
				   .EN_receive_mem_rd_resp_put(dmem_EN_receive_mem_rd_resp_put),
				   .EN_ma_commit_store(dmem_EN_ma_commit_store),
				   .EN_ma_cache_enable(dmem_EN_ma_cache_enable),
				   .EN_get_ptw_resp_get(dmem_EN_get_ptw_resp_get),
				   .EN_get_req_to_ptw_get(dmem_EN_get_req_to_ptw_get),
				   .EN_put_resp_from_ptw_put(dmem_EN_put_resp_from_ptw_put),
				   .EN_ma_satp_from_csr(dmem_EN_ma_satp_from_csr),
				   .EN_ma_mstatus_from_csr(dmem_EN_ma_mstatus_from_csr),
				   .EN_get_hold_req_get(dmem_EN_get_hold_req_get),
				   .RDY_receive_core_req_put(dmem_RDY_receive_core_req_put),
				   .send_core_cache_resp_get(dmem_send_core_cache_resp_get),
				   .RDY_send_core_cache_resp_get(dmem_RDY_send_core_cache_resp_get),
				   .send_core_io_resp(dmem_send_core_io_resp),
				   .RDY_send_core_io_resp(),
				   .send_mem_io_req_get(dmem_send_mem_io_req_get),
				   .RDY_send_mem_io_req_get(dmem_RDY_send_mem_io_req_get),
				   .RDY_receive_mem_io_resp_put(dmem_RDY_receive_mem_io_resp_put),
				   .RDY_ma_commit_io(),
				   .mv_dmem_available(dmem_mv_dmem_available),
				   .send_mem_wr_req(dmem_send_mem_wr_req),
				   .RDY_send_mem_wr_req(dmem_RDY_send_mem_wr_req),
				   .RDY_receive_mem_wr_resp_put(dmem_RDY_receive_mem_wr_resp_put),
				   .RDY_deq_mem_wr_req(dmem_RDY_deq_mem_wr_req),
				   .send_mem_rd_req_get(dmem_send_mem_rd_req_get),
				   .RDY_send_mem_rd_req_get(dmem_RDY_send_mem_rd_req_get),
				   .RDY_receive_mem_rd_resp_put(dmem_RDY_receive_mem_rd_resp_put),
				   .RDY_ma_commit_store(),
				   .RDY_ma_cache_enable(),
				   .mv_storebuffer_empty(),
				   .get_ptw_resp_get(dmem_get_ptw_resp_get),
				   .RDY_get_ptw_resp_get(dmem_RDY_get_ptw_resp_get),
				   .get_req_to_ptw_get(dmem_get_req_to_ptw_get),
				   .RDY_get_req_to_ptw_get(dmem_RDY_get_req_to_ptw_get),
				   .RDY_put_resp_from_ptw_put(dmem_RDY_put_resp_from_ptw_put),
				   .RDY_ma_satp_from_csr(),
				   .RDY_ma_mstatus_from_csr(),
				   .get_hold_req_get(dmem_get_hold_req_get),
				   .RDY_get_hold_req_get(dmem_RDY_get_hold_req_get));

  // submodule imem
  mkimem #(.id(hartid[31:0])) imem(.pmp_cfg_0(riscv_csrs_mv_pmp_cfg[7:0]),
				   .pmp_cfg_1(riscv_csrs_mv_pmp_cfg[15:8]),
				   .pmp_cfg_2(riscv_csrs_mv_pmp_cfg[23:16]),
				   .pmp_cfg_3(riscv_csrs_mv_pmp_cfg[31:24]),
				   .pmp_addr_0(riscv_csrs_mv_pmp_addr[31:0]),
				   .pmp_addr_1(riscv_csrs_mv_pmp_addr[63:32]),
				   .pmp_addr_2(riscv_csrs_mv_pmp_addr[95:64]),
				   .pmp_addr_3(riscv_csrs_mv_pmp_addr[127:96]),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .ma_cache_enable_c(imem_ma_cache_enable_c),
				   .ma_curr_priv_c(imem_ma_curr_priv_c),
				   .ma_satp_from_csr_s(imem_ma_satp_from_csr_s),
				   .put_core_req_put(imem_put_core_req_put),
				   .put_read_mem_resp_put(imem_put_read_mem_resp_put),
				   .put_response_frm_ptw_put(imem_put_response_frm_ptw_put),
				   .EN_put_core_req_put(imem_EN_put_core_req_put),
				   .EN_get_core_resp_get(imem_EN_get_core_resp_get),
				   .EN_ma_cache_enable(imem_EN_ma_cache_enable),
				   .EN_get_read_mem_req_get(imem_EN_get_read_mem_req_get),
				   .EN_put_read_mem_resp_put(imem_EN_put_read_mem_resp_put),
				   .EN_ma_curr_priv(imem_EN_ma_curr_priv),
				   .EN_get_request_to_ptw_get(imem_EN_get_request_to_ptw_get),
				   .EN_put_response_frm_ptw_put(imem_EN_put_response_frm_ptw_put),
				   .EN_ma_satp_from_csr(imem_EN_ma_satp_from_csr),
				   .RDY_put_core_req_put(imem_RDY_put_core_req_put),
				   .get_core_resp_get(imem_get_core_resp_get),
				   .RDY_get_core_resp_get(imem_RDY_get_core_resp_get),
				   .RDY_ma_cache_enable(),
				   .get_read_mem_req_get(imem_get_read_mem_req_get),
				   .RDY_get_read_mem_req_get(imem_RDY_get_read_mem_req_get),
				   .RDY_put_read_mem_resp_put(imem_RDY_put_read_mem_resp_put),
				   .mv_cache_available(),
				   .RDY_mv_cache_available(),
				   .RDY_ma_curr_priv(),
				   .get_request_to_ptw_get(imem_get_request_to_ptw_get),
				   .RDY_get_request_to_ptw_get(imem_RDY_get_request_to_ptw_get),
				   .RDY_put_response_frm_ptw_put(imem_RDY_put_response_frm_ptw_put),
				   .RDY_ma_satp_from_csr());

  // submodule ptwalk_ff_hold_req
  FIFO1 #(.width(32'd141), .guarded(1'd1)) ptwalk_ff_hold_req(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ptwalk_ff_hold_req_D_IN),
							      .ENQ(ptwalk_ff_hold_req_ENQ),
							      .DEQ(ptwalk_ff_hold_req_DEQ),
							      .CLR(ptwalk_ff_hold_req_CLR),
							      .D_OUT(ptwalk_ff_hold_req_D_OUT),
							      .FULL_N(ptwalk_ff_hold_req_FULL_N),
							      .EMPTY_N(ptwalk_ff_hold_req_EMPTY_N));

  // submodule ptwalk_ff_memory_req
  FIFO2 #(.width(32'd143), .guarded(1'd1)) ptwalk_ff_memory_req(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ptwalk_ff_memory_req_D_IN),
								.ENQ(ptwalk_ff_memory_req_ENQ),
								.DEQ(ptwalk_ff_memory_req_DEQ),
								.CLR(ptwalk_ff_memory_req_CLR),
								.D_OUT(ptwalk_ff_memory_req_D_OUT),
								.FULL_N(ptwalk_ff_memory_req_FULL_N),
								.EMPTY_N(ptwalk_ff_memory_req_EMPTY_N));

  // submodule ptwalk_ff_memory_response
  FIFO2 #(.width(32'd76),
	  .guarded(1'd1)) ptwalk_ff_memory_response(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ptwalk_ff_memory_response_D_IN),
						    .ENQ(ptwalk_ff_memory_response_ENQ),
						    .DEQ(ptwalk_ff_memory_response_DEQ),
						    .CLR(ptwalk_ff_memory_response_CLR),
						    .D_OUT(ptwalk_ff_memory_response_D_OUT),
						    .FULL_N(ptwalk_ff_memory_response_FULL_N),
						    .EMPTY_N(ptwalk_ff_memory_response_EMPTY_N));

  // submodule ptwalk_ff_req_queue
  FIFO2 #(.width(32'd66), .guarded(1'd1)) ptwalk_ff_req_queue(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ptwalk_ff_req_queue_D_IN),
							      .ENQ(ptwalk_ff_req_queue_ENQ),
							      .DEQ(ptwalk_ff_req_queue_DEQ),
							      .CLR(ptwalk_ff_req_queue_CLR),
							      .D_OUT(ptwalk_ff_req_queue_D_OUT),
							      .FULL_N(ptwalk_ff_req_queue_FULL_N),
							      .EMPTY_N(ptwalk_ff_req_queue_EMPTY_N));

  // submodule ptwalk_ff_response
  FIFO2 #(.width(32'd64), .guarded(1'd1)) ptwalk_ff_response(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptwalk_ff_response_D_IN),
							     .ENQ(ptwalk_ff_response_ENQ),
							     .DEQ(ptwalk_ff_response_DEQ),
							     .CLR(ptwalk_ff_response_CLR),
							     .D_OUT(ptwalk_ff_response_D_OUT),
							     .FULL_N(ptwalk_ff_response_FULL_N),
							     .EMPTY_N(ptwalk_ff_response_EMPTY_N));

  // submodule riscv
  mkriscv #(.hartid(hartid)) riscv(.resetpc(resetpc),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .interrupts_ma_clint_msip_intrpt(riscv_interrupts_ma_clint_msip_intrpt),
				   .interrupts_ma_clint_mtime_mtime(riscv_interrupts_ma_clint_mtime_mtime),
				   .interrupts_ma_clint_mtip_intrpt(riscv_interrupts_ma_clint_mtip_intrpt),
				   .interrupts_ma_plic_meip_intrpt(riscv_interrupts_ma_plic_meip_intrpt),
				   .interrupts_ma_plic_seip_intrpt(riscv_interrupts_ma_plic_seip_intrpt),
				   .s1_icache_inst_response_put(riscv_s1_icache_inst_response_put),
				   .s3_cache_ma_cache_is_available_avail(riscv_s3_cache_ma_cache_is_available_avail),
				   .s4_cache_memory_response_put(riscv_s4_cache_memory_response_put),
				   .s5_cache_ma_io_response_r(riscv_s5_cache_ma_io_response_r),
				   .EN_s0_icache_to_icache_get(riscv_EN_s0_icache_to_icache_get),
				   .EN_s1_icache_inst_response_put(riscv_EN_s1_icache_inst_response_put),
				   .EN_s3_cache_mv_memory_request_get(riscv_EN_s3_cache_mv_memory_request_get),
				   .EN_s4_cache_memory_response_put(riscv_EN_s4_cache_memory_response_put),
				   .EN_interrupts_ma_clint_msip(riscv_EN_interrupts_ma_clint_msip),
				   .EN_interrupts_ma_clint_mtip(riscv_EN_interrupts_ma_clint_mtip),
				   .EN_interrupts_ma_clint_mtime(riscv_EN_interrupts_ma_clint_mtime),
				   .EN_interrupts_ma_plic_meip(riscv_EN_interrupts_ma_plic_meip),
				   .EN_interrupts_ma_plic_seip(riscv_EN_interrupts_ma_plic_seip),
				   .EN_s5_cache_ma_io_response(riscv_EN_s5_cache_ma_io_response),
				   .s0_icache_to_icache_get(riscv_s0_icache_to_icache_get),
				   .RDY_s0_icache_to_icache_get(riscv_RDY_s0_icache_to_icache_get),
				   .RDY_s1_icache_inst_response_put(riscv_RDY_s1_icache_inst_response_put),
				   .s3_cache_mv_memory_request_get(riscv_s3_cache_mv_memory_request_get),
				   .RDY_s3_cache_mv_memory_request_get(riscv_RDY_s3_cache_mv_memory_request_get),
				   .RDY_s4_cache_memory_response_put(riscv_RDY_s4_cache_memory_response_put),
				   .RDY_interrupts_ma_clint_msip(),
				   .RDY_interrupts_ma_clint_mtip(),
				   .RDY_interrupts_ma_clint_mtime(),
				   .RDY_interrupts_ma_plic_meip(),
				   .RDY_interrupts_ma_plic_seip(),
				   .s5_cache_mv_initiate_store_fst(riscv_s5_cache_mv_initiate_store_fst),
				   .RDY_s5_cache_mv_initiate_store_fst(riscv_RDY_s5_cache_mv_initiate_store_fst),
				   .s5_cache_mv_initiate_store_snd(riscv_s5_cache_mv_initiate_store_snd),
				   .RDY_s5_cache_mv_initiate_store_snd(riscv_RDY_s5_cache_mv_initiate_store_snd),
				   .s5_cache_mv_initiate_ioop(riscv_s5_cache_mv_initiate_ioop),
				   .RDY_s5_cache_mv_initiate_ioop(riscv_RDY_s5_cache_mv_initiate_ioop),
				   .RDY_s5_cache_ma_io_response(),
				   .csrs_mv_csr_mstatus(riscv_csrs_mv_csr_mstatus),
				   .RDY_csrs_mv_csr_mstatus(),
				   .csrs_mv_cacheenable(riscv_csrs_mv_cacheenable),
				   .RDY_csrs_mv_cacheenable(),
				   .csrs_mv_curr_priv(riscv_csrs_mv_curr_priv),
				   .RDY_csrs_mv_curr_priv(),
				   .csrs_mv_csr_satp(riscv_csrs_mv_csr_satp),
				   .RDY_csrs_mv_csr_satp(),
				   .csrs_mv_pmp_cfg(riscv_csrs_mv_pmp_cfg),
				   .RDY_csrs_mv_pmp_cfg(),
				   .csrs_mv_pmp_addr(riscv_csrs_mv_pmp_addr),
				   .RDY_csrs_mv_pmp_addr(),
				   .pipe_status_mv_pipe_isbs_empty(),
				   .RDY_pipe_status_mv_pipe_isbs_empty(),
				   .pipe_status_mv_wfi_detected(),
				   .RDY_pipe_status_mv_wfi_detected(),
				   .commitlog(riscv_commitlog),
				   .RDY_commitlog(),
				   .sbread_mv_csr_misa(riscv_sbread_mv_csr_misa),
				   .RDY_sbread_mv_csr_misa(),
				   .sbread_mv_csr_mvendorid(riscv_sbread_mv_csr_mvendorid),
				   .RDY_sbread_mv_csr_mvendorid(),
				   .sbread_mv_csr_stvec(riscv_sbread_mv_csr_stvec),
				   .RDY_sbread_mv_csr_stvec(),
				   .sbread_mv_csr_mtvec(riscv_sbread_mv_csr_mtvec),
				   .RDY_sbread_mv_csr_mtvec(),
				   .sbread_mv_csr_mstatus(riscv_sbread_mv_csr_mstatus),
				   .RDY_sbread_mv_csr_mstatus(),
				   .sbread_mv_csr_marchid(riscv_sbread_mv_csr_marchid),
				   .RDY_sbread_mv_csr_marchid(),
				   .sbread_mv_csr_mimpid(riscv_sbread_mv_csr_mimpid),
				   .RDY_sbread_mv_csr_mimpid(),
				   .sbread_mv_csr_mhartid(riscv_sbread_mv_csr_mhartid),
				   .RDY_sbread_mv_csr_mhartid(),
				   .sbread_mv_csr_mip(riscv_sbread_mv_csr_mip),
				   .RDY_sbread_mv_csr_mip(),
				   .sbread_mv_csr_sip(riscv_sbread_mv_csr_sip),
				   .RDY_sbread_mv_csr_sip(),
				   .sbread_mv_csr_mie(riscv_sbread_mv_csr_mie),
				   .RDY_sbread_mv_csr_mie(),
				   .sbread_mv_csr_sie(riscv_sbread_mv_csr_sie),
				   .RDY_sbread_mv_csr_sie(),
				   .sbread_mv_csr_mscratch(riscv_sbread_mv_csr_mscratch),
				   .RDY_sbread_mv_csr_mscratch(),
				   .sbread_mv_csr_sscratch(riscv_sbread_mv_csr_sscratch),
				   .RDY_sbread_mv_csr_sscratch(),
				   .sbread_mv_csr_sepc(riscv_sbread_mv_csr_sepc),
				   .RDY_sbread_mv_csr_sepc(),
				   .sbread_mv_csr_stval(riscv_sbread_mv_csr_stval),
				   .RDY_sbread_mv_csr_stval(),
				   .sbread_mv_csr_scause(riscv_sbread_mv_csr_scause),
				   .RDY_sbread_mv_csr_scause(),
				   .sbread_mv_csr_mepc(riscv_sbread_mv_csr_mepc),
				   .RDY_sbread_mv_csr_mepc(),
				   .sbread_mv_csr_mtval(riscv_sbread_mv_csr_mtval),
				   .RDY_sbread_mv_csr_mtval(),
				   .sbread_mv_csr_mcause(riscv_sbread_mv_csr_mcause),
				   .RDY_sbread_mv_csr_mcause(),
				   .sbread_mv_csr_mcycle(riscv_sbread_mv_csr_mcycle),
				   .RDY_sbread_mv_csr_mcycle(),
				   .sbread_mv_csr_minstret(riscv_sbread_mv_csr_minstret),
				   .RDY_sbread_mv_csr_minstret(),
				   .sbread_mv_csr_time(riscv_sbread_mv_csr_time),
				   .RDY_sbread_mv_csr_time(),
				   .sbread_mv_csr_mideleg(riscv_sbread_mv_csr_mideleg),
				   .RDY_sbread_mv_csr_mideleg(),
				   .sbread_mv_csr_medeleg(riscv_sbread_mv_csr_medeleg),
				   .RDY_sbread_mv_csr_medeleg(),
				   .sbread_mv_csr_pmpcfg0(riscv_sbread_mv_csr_pmpcfg0),
				   .RDY_sbread_mv_csr_pmpcfg0(),
				   .sbread_mv_csr_pmpaddr0(riscv_sbread_mv_csr_pmpaddr0),
				   .RDY_sbread_mv_csr_pmpaddr0(),
				   .sbread_mv_csr_pmpaddr1(riscv_sbread_mv_csr_pmpaddr1),
				   .RDY_sbread_mv_csr_pmpaddr1(),
				   .sbread_mv_csr_pmpaddr2(riscv_sbread_mv_csr_pmpaddr2),
				   .RDY_sbread_mv_csr_pmpaddr2(),
				   .sbread_mv_csr_pmpaddr3(riscv_sbread_mv_csr_pmpaddr3),
				   .RDY_sbread_mv_csr_pmpaddr3(),
				   .sbread_mv_csr_satp(riscv_sbread_mv_csr_satp),
				   .RDY_sbread_mv_csr_satp(),
				   .sbread_mv_csr_mcountinhibit(riscv_sbread_mv_csr_mcountinhibit),
				   .RDY_sbread_mv_csr_mcountinhibit(),
				   .sbread_mv_csr_customcontrol(riscv_sbread_mv_csr_customcontrol),
				   .RDY_sbread_mv_csr_customcontrol());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_rl_handle_imem_line_request
  assign CAN_FIRE_RL_rl_handle_imem_line_request =
	     !fetch_xactor_crg_rd_addr_full_port2__read &&
	     imem_RDY_get_read_mem_req_get ;
  assign WILL_FIRE_RL_rl_handle_imem_line_request =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;

  // rule RL_rl_handle_imem_line_resp
  assign CAN_FIRE_RL_rl_handle_imem_line_resp =
	     imem_RDY_put_read_mem_resp_put && fetch_xactor_crg_rd_data_full ;
  assign WILL_FIRE_RL_rl_handle_imem_line_resp =
	     CAN_FIRE_RL_rl_handle_imem_line_resp ;

  // rule RL_rl_imem_enable
  assign CAN_FIRE_RL_rl_imem_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_imem_enable = 1'd1 ;

  // rule RL_rl_initiate_io
  assign CAN_FIRE_RL_rl_initiate_io =
	     dmem_RDY_send_mem_io_req_get &&
	     !memory_xactor_crg_wr_addr_full_port2__read &&
	     !memory_xactor_crg_wr_data_full_port2__read &&
	     !memory_xactor_crg_rd_addr_full_port2__read &&
	     rg_burst_count == 8'd0 ;
  assign WILL_FIRE_RL_rl_initiate_io = CAN_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_handle_io_read_response
  assign CAN_FIRE_RL_rl_handle_io_read_response =
	     dmem_RDY_receive_mem_io_resp_put &&
	     memory_xactor_crg_rd_data_full &&
	     memory_xactor_rg_rd_data[67] ;
  assign WILL_FIRE_RL_rl_handle_io_read_response =
	     CAN_FIRE_RL_rl_handle_io_read_response ;

  // rule RL_rl_handle_io_write_resp
  assign CAN_FIRE_RL_rl_handle_io_write_resp =
	     dmem_RDY_receive_mem_io_resp_put &&
	     memory_xactor_crg_wr_resp_full &&
	     memory_xactor_rg_wr_resp[2] ;
  assign WILL_FIRE_RL_rl_handle_io_write_resp =
	     CAN_FIRE_RL_rl_handle_io_write_resp ;

  // rule __me_check_13
  assign CAN_FIRE___me_check_13 = 1'b1 ;
  assign WILL_FIRE___me_check_13 = 1'b1 ;

  // rule RL_rl_map_dmem_enable
  assign CAN_FIRE_RL_rl_map_dmem_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_map_dmem_enable = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_rl_handle_dmem_line_read_request
  assign CAN_FIRE_RL_rl_handle_dmem_line_read_request =
	     dmem_RDY_send_mem_rd_req_get &&
	     !memory_xactor_crg_rd_addr_full_port2__read &&
	     !rg_read_line_req[62] ;
  assign WILL_FIRE_RL_rl_handle_dmem_line_read_request =
	     CAN_FIRE_RL_rl_handle_dmem_line_read_request &&
	     !WILL_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_handle_delayed_read
  assign CAN_FIRE_RL_rl_handle_delayed_read =
	     !memory_xactor_crg_rd_addr_full_port2__read &&
	     rg_read_line_req[62] &&
	     !wr_write_req[32] ;
  assign WILL_FIRE_RL_rl_handle_delayed_read =
	     CAN_FIRE_RL_rl_handle_delayed_read &&
	     !WILL_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_handle_dmem_line_resp
  assign CAN_FIRE_RL_rl_handle_dmem_line_resp =
	     dmem_RDY_receive_mem_rd_resp_put &&
	     memory_xactor_crg_rd_data_full &&
	     !memory_xactor_rg_rd_data[67] ;
  assign WILL_FIRE_RL_rl_handle_dmem_line_resp =
	     CAN_FIRE_RL_rl_handle_dmem_line_resp ;

  // rule RL_rl_handle_dmem_write_request
  assign CAN_FIRE_RL_rl_handle_dmem_write_request =
	     !memory_xactor_crg_wr_addr_full_port2__read &&
	     !memory_xactor_crg_wr_data_full_port2__read &&
	     dmem_RDY_send_mem_wr_req &&
	     rg_burst_count == 8'd0 ;
  assign WILL_FIRE_RL_rl_handle_dmem_write_request =
	     CAN_FIRE_RL_rl_handle_dmem_write_request &&
	     !WILL_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_dmem_burst_write_data
  assign CAN_FIRE_RL_rl_dmem_burst_write_data =
	     !memory_xactor_crg_wr_data_full_port2__read &&
	     dmem_RDY_send_mem_wr_req &&
	     dmem_RDY_deq_mem_wr_req &&
	     rg_burst_count != 8'd0 ;
  assign WILL_FIRE_RL_rl_dmem_burst_write_data =
	     CAN_FIRE_RL_rl_dmem_burst_write_data ;

  // rule RL_handle_dmem_line_write_resp
  assign CAN_FIRE_RL_handle_dmem_line_write_resp =
	     dmem_RDY_receive_mem_wr_resp_put &&
	     memory_xactor_crg_wr_resp_full &&
	     !memory_xactor_rg_wr_resp[2] ;
  assign WILL_FIRE_RL_handle_dmem_line_write_resp =
	     CAN_FIRE_RL_handle_dmem_line_write_resp ;

  // rule RL_mkConnectionVtoAf_4
  assign CAN_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_5
  assign CAN_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_6
  assign CAN_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     riscv_RDY_s0_icache_to_icache_get && imem_RDY_put_core_req_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     riscv_RDY_s1_icache_inst_response_put &&
	     imem_RDY_get_core_resp_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionVtoAf_7
  assign CAN_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_8
  assign CAN_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_9
  assign CAN_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_10
  assign CAN_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_11
  assign CAN_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;

  // rule RL_rl_itlb_req_to_ptwalk
  assign CAN_FIRE_RL_rl_itlb_req_to_ptwalk =
	     imem_RDY_get_request_to_ptw_get && ptwalk_ff_req_queue_FULL_N &&
	     rg_ptw_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_itlb_req_to_ptwalk =
	     CAN_FIRE_RL_rl_itlb_req_to_ptwalk &&
	     !WILL_FIRE_RL_rl_dtlb_req_to_ptwalk ;

  // rule RL_rl_ptwalk_resp_to_itlb
  assign CAN_FIRE_RL_rl_ptwalk_resp_to_itlb =
	     imem_RDY_put_response_frm_ptw_put &&
	     ptwalk_ff_response_EMPTY_N &&
	     rg_ptw_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_ptwalk_resp_to_itlb =
	     CAN_FIRE_RL_rl_ptwalk_resp_to_itlb ;

  // rule RL_rl_dtlb_req_to_ptwalk
  assign CAN_FIRE_RL_rl_dtlb_req_to_ptwalk =
	     dmem_RDY_get_req_to_ptw_get && ptwalk_ff_req_queue_FULL_N &&
	     rg_ptw_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_dtlb_req_to_ptwalk =
	     CAN_FIRE_RL_rl_dtlb_req_to_ptwalk ;

  // rule RL_rl_ptwalk_resp_to_dtlb
  assign CAN_FIRE_RL_rl_ptwalk_resp_to_dtlb =
	     dmem_RDY_put_resp_from_ptw_put && ptwalk_ff_response_EMPTY_N &&
	     rg_ptw_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_ptwalk_resp_to_dtlb =
	     CAN_FIRE_RL_rl_ptwalk_resp_to_dtlb ;

  // rule RL_ptwalk_resend_core_req_to_cache
  assign CAN_FIRE_RL_ptwalk_resend_core_req_to_cache =
	     ptwalk_ff_hold_req_EMPTY_N && ptwalk_ff_memory_req_FULL_N &&
	     ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_rg_state == 2'd0 ;
  assign WILL_FIRE_RL_ptwalk_resend_core_req_to_cache =
	     CAN_FIRE_RL_ptwalk_resend_core_req_to_cache ;

  // rule RL_ptwalk_generate_pte
  assign CAN_FIRE_RL_ptwalk_generate_pte =
	     ptwalk_ff_memory_req_FULL_N && ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_ptwalk_generate_pte = CAN_FIRE_RL_ptwalk_generate_pte ;

  // rule RL_ptwalk_check_pte
  assign CAN_FIRE_RL_ptwalk_check_pte =
	     ptwalk_ff_memory_response_EMPTY_N &&
	     ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_ff_response_FULL_N &&
	     ptwalk_ff_memory_req_FULL_N &&
	     ptwalk_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_ptwalk_check_pte = CAN_FIRE_RL_ptwalk_check_pte ;

  // rule RL_ptwalk_deq_holding_fifo
  assign CAN_FIRE_RL_ptwalk_deq_holding_fifo =
	     ptwalk_ff_hold_req_EMPTY_N && ptwalk_wr_deq_holding_ff_whas ;
  assign WILL_FIRE_RL_ptwalk_deq_holding_fifo =
	     CAN_FIRE_RL_ptwalk_deq_holding_fifo ;

  // rule RL_core_req_mkConnectionGetPut
  assign CAN_FIRE_RL_core_req_mkConnectionGetPut =
	     riscv_RDY_s3_cache_mv_memory_request_get &&
	     dmem_RDY_receive_core_req_put ;
  assign WILL_FIRE_RL_core_req_mkConnectionGetPut =
	     CAN_FIRE_RL_core_req_mkConnectionGetPut ;

  // rule RL_ptwalk_req_mkConnectionGetPut
  assign CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut =
	     dmem_RDY_receive_core_req_put && ptwalk_ff_memory_req_EMPTY_N ;
  assign WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut =
	     CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut &&
	     !WILL_FIRE_RL_core_req_mkConnectionGetPut ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 =
	     riscv_RDY_s5_cache_mv_initiate_ioop ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 =
	     riscv_RDY_s5_cache_mv_initiate_ioop ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 =
	     riscv_RDY_s5_cache_mv_initiate_store_fst &&
	     riscv_RDY_s5_cache_mv_initiate_store_snd ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = CAN_FIRE_RL_mkConnectionVtoAf_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     dmem_RDY_get_ptw_resp_get && ptwalk_ff_memory_response_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     dmem_RDY_get_hold_req_get && ptwalk_ff_hold_req_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_core_resp_mkConnectionGetPut
  assign CAN_FIRE_RL_core_resp_mkConnectionGetPut =
	     riscv_RDY_s4_cache_memory_response_put &&
	     dmem_RDY_send_core_cache_resp_get ;
  assign WILL_FIRE_RL_core_resp_mkConnectionGetPut =
	     CAN_FIRE_RL_core_resp_mkConnectionGetPut ;

  // inputs to muxes for submodule ports
  assign MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_initiate_io && !dmem_send_mem_io_req_get[67] ;
  assign MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630) ;
  assign MUX_memory_xactor_crg_wr_addr_full_port2__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_initiate_io && dmem_send_mem_io_req_get[67] ;
  assign MUX_ptwalk_ff_memory_req_enq_1__SEL_1 =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d367 ;
  assign MUX_rg_ptw_state_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptwalk_resp_to_dtlb ||
	     WILL_FIRE_RL_rl_ptwalk_resp_to_itlb ;
  assign MUX_rg_read_line_req_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     wr_write_req[32] &&
	     IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630 ;
  assign MUX_wr_write_req_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_dmem_burst_write_data && rg_burst_count == 8'd7 ;
  assign MUX_dmem_receive_mem_io_resp_put_1__VAL_1 =
	     { memory_xactor_rg_rd_data[66:3],
	       memory_xactor_rg_rd_data[2:1] != 2'b0 } ;
  assign MUX_dmem_receive_mem_io_resp_put_1__VAL_2 =
	     { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       memory_xactor_rg_wr_resp[1:0] != 2'b0 } ;
  assign MUX_memory_xactor_rg_rd_addr_write_1__VAL_1 =
	     { 1'd1,
	       dmem_send_mem_io_req_get[99:68],
	       8'd0,
	       x__h9542,
	       2'b0,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       x__h13932,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign MUX_memory_xactor_rg_rd_addr_write_1__VAL_2 =
	     { 1'd0,
	       dmem_send_mem_rd_req_get,
	       2'b10,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       x__h13932,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign MUX_memory_xactor_rg_wr_addr_write_1__VAL_2 =
	     { 1'd0,
	       dmem_send_mem_wr_req[554:523],
	       dmem_send_mem_wr_req[10:3],
	       x__h13897,
	       2'b10,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       x__h13932,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign MUX_memory_xactor_rg_wr_data_write_1__VAL_1 =
	     { w_wdata__h9793, write_strobe__h9325, 1'd1 } ;
  assign MUX_memory_xactor_rg_wr_data_write_1__VAL_2 =
	     { dmem_send_mem_wr_req[74:11],
	       8'd255,
	       dmem_send_mem_wr_req[10:3] == 8'd0 } ;
  assign MUX_memory_xactor_rg_wr_data_write_1__VAL_3 =
	     { x__h14702[63:0], 8'd255, rg_burst_count == 8'd7 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_1 =
	     { ptwalk_ff_req_queue_D_OUT[65:2],
	       ptwalk_rg_hold_epoch,
	       6'd24,
	       x_writedata__h4285,
	       5'bxxxxx /* unspecified value */ ,
	       3'd1 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_2 =
	     { ptwalk_ff_hold_req_D_OUT[140:77],
	       ptwalk_ff_hold_req_D_OUT[75],
	       ptwalk_ff_hold_req_D_OUT[72:70],
	       1'd0,
	       ptwalk_ff_hold_req_D_OUT[74:73],
	       ptwalk_ff_hold_req_D_OUT[69:1],
	       3'd0 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_3 =
	     { x_address__h2690,
	       ptwalk_rg_hold_epoch,
	       6'd24,
	       x_writedata__h2695,
	       5'bxxxxx /* unspecified value */ ,
	       3'd2 } ;
  assign MUX_ptwalk_rg_state_write_1__VAL_1 =
	     (!ptwalk_ff_memory_response_D_OUT[12] ||
	      !ptwalk_ff_memory_response_D_OUT[13] &&
	      ptwalk_ff_memory_response_D_OUT[14] ||
	      ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d350 ||
	      ptwalk_ff_memory_response_D_OUT[11] ||
	      !ptwalk_ff_memory_response_D_OUT[13] &&
	      !ptwalk_ff_memory_response_D_OUT[15] ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3) ?
	       2'd2 :
	       2'd0 ;
  assign MUX_rg_burst_count_write_1__VAL_2 =
	     (rg_burst_count == 8'd7) ? 8'd0 : x__h14613 ;
  assign MUX_rg_read_line_req_write_1__VAL_1 =
	     { 2'd2,
	       dmem_send_mem_rd_req_get,
	       2'b10,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       x__h13932,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign MUX_rg_read_line_req_write_1__VAL_2 =
	     { 1'd0,
	       62'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_wr_write_req_write_1__VAL_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_wr_write_req_write_1__VAL_2 =
	     { 1'd1, dmem_send_mem_wr_req[554:523] } ;

  // inlined wires
  assign ptwalk_wr_deq_holding_ff_whas =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d367 ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;
  assign fetch_xactor_crg_wr_addr_full_EN_port1__write =
	     fetch_xactor_crg_wr_addr_full && master_i_AWREADY ;
  assign fetch_xactor_crg_wr_addr_full_port2__read =
	     !fetch_xactor_crg_wr_addr_full_EN_port1__write &&
	     fetch_xactor_crg_wr_addr_full ;
  assign fetch_xactor_crg_wr_data_full_EN_port1__write =
	     fetch_xactor_crg_wr_data_full && master_i_WREADY ;
  assign fetch_xactor_crg_wr_data_full_port2__read =
	     !fetch_xactor_crg_wr_data_full_EN_port1__write &&
	     fetch_xactor_crg_wr_data_full ;
  assign fetch_xactor_crg_wr_resp_full_EN_port2__write =
	     master_i_BVALID && !fetch_xactor_crg_wr_resp_full ;
  assign fetch_xactor_crg_wr_resp_full_port3__read =
	     fetch_xactor_crg_wr_resp_full_EN_port2__write ||
	     fetch_xactor_crg_wr_resp_full ;
  assign fetch_xactor_crg_rd_addr_full_EN_port1__write =
	     fetch_xactor_crg_rd_addr_full && master_i_ARREADY ;
  assign fetch_xactor_crg_rd_addr_full_port2__read =
	     !fetch_xactor_crg_rd_addr_full_EN_port1__write &&
	     fetch_xactor_crg_rd_addr_full ;
  assign fetch_xactor_crg_rd_addr_full_port3__read =
	     CAN_FIRE_RL_rl_handle_imem_line_request ||
	     fetch_xactor_crg_rd_addr_full_port2__read ;
  assign fetch_xactor_crg_rd_data_full_port2__read =
	     !CAN_FIRE_RL_rl_handle_imem_line_resp &&
	     fetch_xactor_crg_rd_data_full ;
  assign fetch_xactor_crg_rd_data_full_EN_port2__write =
	     master_i_RVALID && !fetch_xactor_crg_rd_data_full_port2__read ;
  assign fetch_xactor_crg_rd_data_full_port3__read =
	     fetch_xactor_crg_rd_data_full_EN_port2__write ||
	     fetch_xactor_crg_rd_data_full_port2__read ;
  assign memory_xactor_crg_wr_addr_full_EN_port1__write =
	     memory_xactor_crg_wr_addr_full && master_d_AWREADY ;
  assign memory_xactor_crg_wr_addr_full_port2__read =
	     !memory_xactor_crg_wr_addr_full_EN_port1__write &&
	     memory_xactor_crg_wr_addr_full ;
  assign memory_xactor_crg_wr_addr_full_EN_port2__write =
	     WILL_FIRE_RL_rl_initiate_io && dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request ;
  assign memory_xactor_crg_wr_addr_full_port3__read =
	     memory_xactor_crg_wr_addr_full_EN_port2__write ?
	       1'd1 :
	       memory_xactor_crg_wr_addr_full_port2__read ;
  assign memory_xactor_crg_wr_data_full_EN_port1__write =
	     memory_xactor_crg_wr_data_full && master_d_WREADY ;
  assign memory_xactor_crg_wr_data_full_port2__read =
	     !memory_xactor_crg_wr_data_full_EN_port1__write &&
	     memory_xactor_crg_wr_data_full ;
  assign memory_xactor_crg_wr_data_full_EN_port2__write =
	     WILL_FIRE_RL_rl_initiate_io && dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request ;
  assign memory_xactor_crg_wr_data_full_port3__read =
	     memory_xactor_crg_wr_data_full_EN_port2__write ?
	       1'd1 :
	       memory_xactor_crg_wr_data_full_port2__read ;
  assign memory_xactor_crg_wr_resp_full_EN_port1__write =
	     WILL_FIRE_RL_handle_dmem_line_write_resp ||
	     WILL_FIRE_RL_rl_handle_io_write_resp ;
  assign memory_xactor_crg_wr_resp_full_port2__read =
	     !memory_xactor_crg_wr_resp_full_EN_port1__write &&
	     memory_xactor_crg_wr_resp_full ;
  assign memory_xactor_crg_wr_resp_full_EN_port2__write =
	     master_d_BVALID && !memory_xactor_crg_wr_resp_full_port2__read ;
  assign memory_xactor_crg_wr_resp_full_port3__read =
	     memory_xactor_crg_wr_resp_full_EN_port2__write ||
	     memory_xactor_crg_wr_resp_full_port2__read ;
  assign memory_xactor_crg_rd_addr_full_EN_port1__write =
	     memory_xactor_crg_rd_addr_full && master_d_ARREADY ;
  assign memory_xactor_crg_rd_addr_full_port2__read =
	     !memory_xactor_crg_rd_addr_full_EN_port1__write &&
	     memory_xactor_crg_rd_addr_full ;
  assign memory_xactor_crg_rd_addr_full_EN_port2__write =
	     WILL_FIRE_RL_rl_initiate_io && !dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630) ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;
  assign memory_xactor_crg_rd_addr_full_port3__read =
	     memory_xactor_crg_rd_addr_full_EN_port2__write ?
	       1'd1 :
	       memory_xactor_crg_rd_addr_full_port2__read ;
  assign memory_xactor_crg_rd_data_full_EN_port1__write =
	     WILL_FIRE_RL_rl_handle_dmem_line_resp ||
	     WILL_FIRE_RL_rl_handle_io_read_response ;
  assign memory_xactor_crg_rd_data_full_port2__read =
	     !memory_xactor_crg_rd_data_full_EN_port1__write &&
	     memory_xactor_crg_rd_data_full ;
  assign memory_xactor_crg_rd_data_full_EN_port2__write =
	     master_d_RVALID && !memory_xactor_crg_rd_data_full_port2__read ;
  assign memory_xactor_crg_rd_data_full_port3__read =
	     memory_xactor_crg_rd_data_full_EN_port2__write ||
	     memory_xactor_crg_rd_data_full_port2__read ;

  // register fetch_xactor_crg_rd_addr_full
  assign fetch_xactor_crg_rd_addr_full_D_IN =
	     fetch_xactor_crg_rd_addr_full_port3__read ;
  assign fetch_xactor_crg_rd_addr_full_EN = 1'b1 ;

  // register fetch_xactor_crg_rd_data_full
  assign fetch_xactor_crg_rd_data_full_D_IN =
	     fetch_xactor_crg_rd_data_full_port3__read ;
  assign fetch_xactor_crg_rd_data_full_EN = 1'b1 ;

  // register fetch_xactor_crg_wr_addr_full
  assign fetch_xactor_crg_wr_addr_full_D_IN =
	     fetch_xactor_crg_wr_addr_full_port2__read ;
  assign fetch_xactor_crg_wr_addr_full_EN = 1'b1 ;

  // register fetch_xactor_crg_wr_data_full
  assign fetch_xactor_crg_wr_data_full_D_IN =
	     fetch_xactor_crg_wr_data_full_port2__read ;
  assign fetch_xactor_crg_wr_data_full_EN = 1'b1 ;

  // register fetch_xactor_crg_wr_resp_full
  assign fetch_xactor_crg_wr_resp_full_D_IN =
	     fetch_xactor_crg_wr_resp_full_port3__read ;
  assign fetch_xactor_crg_wr_resp_full_EN = 1'b1 ;

  // register fetch_xactor_rg_rd_addr
  assign fetch_xactor_rg_rd_addr_D_IN =
	     { imem_get_read_mem_req_get[0],
	       imem_get_read_mem_req_get[43:1],
	       2'b10,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       value__h8827,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign fetch_xactor_rg_rd_addr_EN =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;

  // register fetch_xactor_rg_rd_data
  assign fetch_xactor_rg_rd_data_D_IN =
	     { master_i_RID,
	       master_i_RDATA,
	       master_i_RRESP,
	       master_i_RLAST } ;
  assign fetch_xactor_rg_rd_data_EN =
	     master_i_RVALID && !fetch_xactor_crg_rd_data_full_port2__read ;

  // register fetch_xactor_rg_wr_addr
  assign fetch_xactor_rg_wr_addr_D_IN = 62'h0 ;
  assign fetch_xactor_rg_wr_addr_EN = 1'b0 ;

  // register fetch_xactor_rg_wr_data
  assign fetch_xactor_rg_wr_data_D_IN = 73'h0 ;
  assign fetch_xactor_rg_wr_data_EN = 1'b0 ;

  // register fetch_xactor_rg_wr_resp
  assign fetch_xactor_rg_wr_resp_D_IN = { master_i_BID, master_i_BRESP } ;
  assign fetch_xactor_rg_wr_resp_EN =
	     master_i_BVALID && !fetch_xactor_crg_wr_resp_full ;

  // register memory_xactor_crg_rd_addr_full
  assign memory_xactor_crg_rd_addr_full_D_IN =
	     memory_xactor_crg_rd_addr_full_port3__read ;
  assign memory_xactor_crg_rd_addr_full_EN = 1'b1 ;

  // register memory_xactor_crg_rd_data_full
  assign memory_xactor_crg_rd_data_full_D_IN =
	     memory_xactor_crg_rd_data_full_port3__read ;
  assign memory_xactor_crg_rd_data_full_EN = 1'b1 ;

  // register memory_xactor_crg_wr_addr_full
  assign memory_xactor_crg_wr_addr_full_D_IN =
	     memory_xactor_crg_wr_addr_full_port3__read ;
  assign memory_xactor_crg_wr_addr_full_EN = 1'b1 ;

  // register memory_xactor_crg_wr_data_full
  assign memory_xactor_crg_wr_data_full_D_IN =
	     memory_xactor_crg_wr_data_full_port3__read ;
  assign memory_xactor_crg_wr_data_full_EN = 1'b1 ;

  // register memory_xactor_crg_wr_resp_full
  assign memory_xactor_crg_wr_resp_full_D_IN =
	     memory_xactor_crg_wr_resp_full_port3__read ;
  assign memory_xactor_crg_wr_resp_full_EN = 1'b1 ;

  // register memory_xactor_rg_rd_addr
  always@(MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_1 or
	  MUX_memory_xactor_rg_rd_addr_write_1__VAL_1 or
	  MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_2 or
	  MUX_memory_xactor_rg_rd_addr_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_handle_delayed_read or rg_read_line_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_1:
	  memory_xactor_rg_rd_addr_D_IN =
	      MUX_memory_xactor_rg_rd_addr_write_1__VAL_1;
      MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_2:
	  memory_xactor_rg_rd_addr_D_IN =
	      MUX_memory_xactor_rg_rd_addr_write_1__VAL_2;
      WILL_FIRE_RL_rl_handle_delayed_read:
	  memory_xactor_rg_rd_addr_D_IN = rg_read_line_req[61:0];
      default: memory_xactor_rg_rd_addr_D_IN =
		   62'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign memory_xactor_rg_rd_addr_EN =
	     WILL_FIRE_RL_rl_initiate_io && !dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630) ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;

  // register memory_xactor_rg_rd_data
  assign memory_xactor_rg_rd_data_D_IN =
	     { master_d_RID,
	       master_d_RDATA,
	       master_d_RRESP,
	       master_d_RLAST } ;
  assign memory_xactor_rg_rd_data_EN =
	     master_d_RVALID && !memory_xactor_crg_rd_data_full_port2__read ;

  // register memory_xactor_rg_wr_addr
  assign memory_xactor_rg_wr_addr_D_IN =
	     MUX_memory_xactor_crg_wr_addr_full_port2__write_1__SEL_1 ?
	       MUX_memory_xactor_rg_rd_addr_write_1__VAL_1 :
	       MUX_memory_xactor_rg_wr_addr_write_1__VAL_2 ;
  assign memory_xactor_rg_wr_addr_EN =
	     WILL_FIRE_RL_rl_initiate_io && dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request ;

  // register memory_xactor_rg_wr_data
  always@(MUX_memory_xactor_crg_wr_addr_full_port2__write_1__SEL_1 or
	  MUX_memory_xactor_rg_wr_data_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_handle_dmem_write_request or
	  MUX_memory_xactor_rg_wr_data_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_dmem_burst_write_data or
	  MUX_memory_xactor_rg_wr_data_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_memory_xactor_crg_wr_addr_full_port2__write_1__SEL_1:
	  memory_xactor_rg_wr_data_D_IN =
	      MUX_memory_xactor_rg_wr_data_write_1__VAL_1;
      WILL_FIRE_RL_rl_handle_dmem_write_request:
	  memory_xactor_rg_wr_data_D_IN =
	      MUX_memory_xactor_rg_wr_data_write_1__VAL_2;
      WILL_FIRE_RL_rl_dmem_burst_write_data:
	  memory_xactor_rg_wr_data_D_IN =
	      MUX_memory_xactor_rg_wr_data_write_1__VAL_3;
      default: memory_xactor_rg_wr_data_D_IN =
		   73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign memory_xactor_rg_wr_data_EN =
	     WILL_FIRE_RL_rl_initiate_io && dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ;

  // register memory_xactor_rg_wr_resp
  assign memory_xactor_rg_wr_resp_D_IN = { master_d_BID, master_d_BRESP } ;
  assign memory_xactor_rg_wr_resp_EN =
	     master_d_BVALID && !memory_xactor_crg_wr_resp_full_port2__read ;

  // register ptwalk_rg_a
  assign ptwalk_rg_a_D_IN = x__h4465 ;
  assign ptwalk_rg_a_EN =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 &&
	     !ptwalk_ff_memory_response_D_OUT[11] &&
	     !ptwalk_ff_memory_response_D_OUT[13] &&
	     !ptwalk_ff_memory_response_D_OUT[15] ;

  // register ptwalk_rg_hold_epoch
  assign ptwalk_rg_hold_epoch_D_IN = dmem_get_hold_req_get[75] ;
  assign ptwalk_rg_hold_epoch_EN = CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // register ptwalk_rg_levels
  assign ptwalk_rg_levels_D_IN =
	     (!ptwalk_ff_memory_response_D_OUT[12] ||
	      !ptwalk_ff_memory_response_D_OUT[13] &&
	      ptwalk_ff_memory_response_D_OUT[14] ||
	      ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 ||
	      ptwalk_ff_memory_response_D_OUT[11]) ?
	       max_levels__h2368 :
	       ((!ptwalk_ff_memory_response_D_OUT[13] &&
		 !ptwalk_ff_memory_response_D_OUT[15]) ?
		  x__h4182 :
		  max_levels__h2368) ;
  assign ptwalk_rg_levels_EN = CAN_FIRE_RL_ptwalk_check_pte ;

  // register ptwalk_rg_state
  always@(WILL_FIRE_RL_ptwalk_check_pte or
	  MUX_ptwalk_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_ptwalk_generate_pte or
	  WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ptwalk_check_pte:
	  ptwalk_rg_state_D_IN = MUX_ptwalk_rg_state_write_1__VAL_1;
      WILL_FIRE_RL_ptwalk_generate_pte: ptwalk_rg_state_D_IN = 2'd1;
      WILL_FIRE_RL_ptwalk_resend_core_req_to_cache:
	  ptwalk_rg_state_D_IN = 2'd2;
      default: ptwalk_rg_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign ptwalk_rg_state_EN =
	     WILL_FIRE_RL_ptwalk_check_pte ||
	     WILL_FIRE_RL_ptwalk_generate_pte ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;

  // register rg_burst_count
  assign rg_burst_count_D_IN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request ?
	       x__h14613 :
	       MUX_rg_burst_count_write_1__VAL_2 ;
  assign rg_burst_count_EN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ;

  // register rg_ptw_state
  always@(MUX_rg_ptw_state_write_1__SEL_1 or
	  WILL_FIRE_RL_rl_itlb_req_to_ptwalk or
	  WILL_FIRE_RL_rl_dtlb_req_to_ptwalk)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_ptw_state_write_1__SEL_1: rg_ptw_state_D_IN = 2'd0;
      WILL_FIRE_RL_rl_itlb_req_to_ptwalk: rg_ptw_state_D_IN = 2'd1;
      WILL_FIRE_RL_rl_dtlb_req_to_ptwalk: rg_ptw_state_D_IN = 2'd2;
      default: rg_ptw_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_ptw_state_EN =
	     WILL_FIRE_RL_rl_ptwalk_resp_to_dtlb ||
	     WILL_FIRE_RL_rl_ptwalk_resp_to_itlb ||
	     WILL_FIRE_RL_rl_itlb_req_to_ptwalk ||
	     WILL_FIRE_RL_rl_dtlb_req_to_ptwalk ;

  // register rg_read_line_req
  assign rg_read_line_req_D_IN =
	     MUX_rg_read_line_req_write_1__SEL_1 ?
	       MUX_rg_read_line_req_write_1__VAL_1 :
	       MUX_rg_read_line_req_write_1__VAL_2 ;
  assign rg_read_line_req_EN =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     wr_write_req[32] &&
	     IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630 ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;

  // register rg_shift_amount
  assign rg_shift_amount_D_IN = (rg_burst_count == 8'd7) ? 9'd64 : x__h14576 ;
  assign rg_shift_amount_EN = CAN_FIRE_RL_rl_dmem_burst_write_data ;

  // register wr_write_req
  assign wr_write_req_D_IN =
	     MUX_wr_write_req_write_1__SEL_1 ?
	       MUX_wr_write_req_write_1__VAL_1 :
	       MUX_wr_write_req_write_1__VAL_2 ;
  assign wr_write_req_EN =
	     WILL_FIRE_RL_rl_dmem_burst_write_data &&
	     rg_burst_count == 8'd7 ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request ;

  // submodule dmem
  assign dmem_ma_cache_enable_c = riscv_csrs_mv_cacheenable[1] ;
  assign dmem_ma_commit_io_currepoch = riscv_s5_cache_mv_initiate_ioop ;
  assign dmem_ma_commit_store_storecommit =
	     { riscv_s5_cache_mv_initiate_store_fst,
	       riscv_s5_cache_mv_initiate_store_snd } ;
  assign dmem_ma_curr_priv_c = riscv_csrs_mv_curr_priv ;
  assign dmem_ma_mstatus_from_csr_m = riscv_csrs_mv_csr_mstatus ;
  assign dmem_ma_satp_from_csr_s = riscv_csrs_mv_csr_satp ;
  assign dmem_put_resp_from_ptw_put = ptwalk_ff_response_D_OUT ;
  assign dmem_receive_core_req_put =
	     WILL_FIRE_RL_core_req_mkConnectionGetPut ?
	       riscv_s3_cache_mv_memory_request_get :
	       ptwalk_ff_memory_req_D_OUT ;
  assign dmem_receive_mem_io_resp_put =
	     WILL_FIRE_RL_rl_handle_io_read_response ?
	       MUX_dmem_receive_mem_io_resp_put_1__VAL_1 :
	       MUX_dmem_receive_mem_io_resp_put_1__VAL_2 ;
  assign dmem_receive_mem_rd_resp_put =
	     { memory_xactor_rg_rd_data[66:3],
	       memory_xactor_rg_rd_data[0],
	       memory_xactor_rg_rd_data[2:1] != 2'b0 } ;
  assign dmem_receive_mem_wr_resp_put =
	     memory_xactor_rg_wr_resp[1:0] != 2'b0 ;
  assign dmem_EN_receive_core_req_put =
	     WILL_FIRE_RL_core_req_mkConnectionGetPut ||
	     WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut ;
  assign dmem_EN_send_core_cache_resp_get =
	     CAN_FIRE_RL_core_resp_mkConnectionGetPut ;
  assign dmem_EN_send_mem_io_req_get = CAN_FIRE_RL_rl_initiate_io ;
  assign dmem_EN_receive_mem_io_resp_put =
	     WILL_FIRE_RL_rl_handle_io_read_response ||
	     WILL_FIRE_RL_rl_handle_io_write_resp ;
  assign dmem_EN_ma_commit_io = riscv_RDY_s5_cache_mv_initiate_ioop ;
  assign dmem_EN_receive_mem_wr_resp_put =
	     CAN_FIRE_RL_handle_dmem_line_write_resp ;
  assign dmem_EN_deq_mem_wr_req = MUX_wr_write_req_write_1__SEL_1 ;
  assign dmem_EN_send_mem_rd_req_get =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request ;
  assign dmem_EN_receive_mem_rd_resp_put =
	     CAN_FIRE_RL_rl_handle_dmem_line_resp ;
  assign dmem_EN_ma_commit_store = CAN_FIRE_RL_mkConnectionVtoAf_1 ;
  assign dmem_EN_ma_cache_enable = 1'd1 ;
  assign dmem_EN_get_ptw_resp_get = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign dmem_EN_get_req_to_ptw_get = CAN_FIRE_RL_rl_dtlb_req_to_ptwalk ;
  assign dmem_EN_put_resp_from_ptw_put = CAN_FIRE_RL_rl_ptwalk_resp_to_dtlb ;
  assign dmem_EN_ma_satp_from_csr = 1'd1 ;
  assign dmem_EN_ma_mstatus_from_csr = 1'd1 ;
  assign dmem_EN_get_hold_req_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // submodule imem
  assign imem_ma_cache_enable_c = riscv_csrs_mv_cacheenable[0] ;
  assign imem_ma_curr_priv_c = riscv_csrs_mv_curr_priv ;
  assign imem_ma_satp_from_csr_s = riscv_csrs_mv_csr_satp ;
  assign imem_put_core_req_put = riscv_s0_icache_to_icache_get ;
  assign imem_put_read_mem_resp_put =
	     { fetch_xactor_rg_rd_data[66:3],
	       fetch_xactor_rg_rd_data[0],
	       fetch_xactor_rg_rd_data[2:1] != 2'b0 } ;
  assign imem_put_response_frm_ptw_put = ptwalk_ff_response_D_OUT ;
  assign imem_EN_put_core_req_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign imem_EN_get_core_resp_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign imem_EN_ma_cache_enable = 1'd1 ;
  assign imem_EN_get_read_mem_req_get =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;
  assign imem_EN_put_read_mem_resp_put =
	     CAN_FIRE_RL_rl_handle_imem_line_resp ;
  assign imem_EN_ma_curr_priv = 1'd1 ;
  assign imem_EN_get_request_to_ptw_get = WILL_FIRE_RL_rl_itlb_req_to_ptwalk ;
  assign imem_EN_put_response_frm_ptw_put =
	     CAN_FIRE_RL_rl_ptwalk_resp_to_itlb ;
  assign imem_EN_ma_satp_from_csr = 1'd1 ;

  // submodule ptwalk_ff_hold_req
  assign ptwalk_ff_hold_req_D_IN = dmem_get_hold_req_get ;
  assign ptwalk_ff_hold_req_ENQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign ptwalk_ff_hold_req_DEQ = CAN_FIRE_RL_ptwalk_deq_holding_fifo ;
  assign ptwalk_ff_hold_req_CLR = 1'b0 ;

  // submodule ptwalk_ff_memory_req
  always@(MUX_ptwalk_ff_memory_req_enq_1__SEL_1 or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_1 or
	  WILL_FIRE_RL_ptwalk_resend_core_req_to_cache or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_2 or
	  WILL_FIRE_RL_ptwalk_generate_pte or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ptwalk_ff_memory_req_enq_1__SEL_1:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_1;
      WILL_FIRE_RL_ptwalk_resend_core_req_to_cache:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_2;
      WILL_FIRE_RL_ptwalk_generate_pte:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_3;
      default: ptwalk_ff_memory_req_D_IN =
		   143'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ptwalk_ff_memory_req_ENQ =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d367 ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ||
	     WILL_FIRE_RL_ptwalk_generate_pte ;
  assign ptwalk_ff_memory_req_DEQ =
	     WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut ;
  assign ptwalk_ff_memory_req_CLR = 1'b0 ;

  // submodule ptwalk_ff_memory_response
  assign ptwalk_ff_memory_response_D_IN = dmem_get_ptw_resp_get ;
  assign ptwalk_ff_memory_response_ENQ = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign ptwalk_ff_memory_response_DEQ = CAN_FIRE_RL_ptwalk_check_pte ;
  assign ptwalk_ff_memory_response_CLR = 1'b0 ;

  // submodule ptwalk_ff_req_queue
  assign ptwalk_ff_req_queue_D_IN =
	     WILL_FIRE_RL_rl_itlb_req_to_ptwalk ?
	       imem_get_request_to_ptw_get :
	       dmem_get_req_to_ptw_get ;
  assign ptwalk_ff_req_queue_ENQ =
	     WILL_FIRE_RL_rl_itlb_req_to_ptwalk ||
	     WILL_FIRE_RL_rl_dtlb_req_to_ptwalk ;
  assign ptwalk_ff_req_queue_DEQ =
	     _dand1ptwalk_ff_req_queue_EN_deq ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;
  assign ptwalk_ff_req_queue_CLR = 1'b0 ;

  // submodule ptwalk_ff_response
  assign ptwalk_ff_response_D_IN =
	     { ptwalk_ff_memory_response_D_OUT[65:12],
	       ptwalk_rg_levels,
	       IF_NOT_ptwalk_ff_memory_response_first__61_BIT_ETC___d340 } ;
  assign ptwalk_ff_response_ENQ =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     (NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d292 ||
	      ptwalk_ff_memory_response_D_OUT[13] ||
	      ptwalk_ff_memory_response_D_OUT[15]) ;
  assign ptwalk_ff_response_DEQ = MUX_rg_ptw_state_write_1__SEL_1 ;
  assign ptwalk_ff_response_CLR = 1'b0 ;

  // submodule riscv
  assign riscv_interrupts_ma_clint_msip_intrpt = sb_clint_msip_m ;
  assign riscv_interrupts_ma_clint_mtime_mtime = sb_clint_mtime_m ;
  assign riscv_interrupts_ma_clint_mtip_intrpt = sb_clint_mtip_m ;
  assign riscv_interrupts_ma_plic_meip_intrpt = sb_plic_meip_ex_i ;
  assign riscv_interrupts_ma_plic_seip_intrpt = sb_plic_seip_ex_i ;
  assign riscv_s1_icache_inst_response_put = imem_get_core_resp_get ;
  assign riscv_s3_cache_ma_cache_is_available_avail = dmem_mv_dmem_available ;
  assign riscv_s4_cache_memory_response_put = dmem_send_core_cache_resp_get ;
  assign riscv_s5_cache_ma_io_response_r = dmem_send_core_io_resp ;
  assign riscv_EN_s0_icache_to_icache_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign riscv_EN_s1_icache_inst_response_put =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign riscv_EN_s3_cache_mv_memory_request_get =
	     CAN_FIRE_RL_core_req_mkConnectionGetPut ;
  assign riscv_EN_s4_cache_memory_response_put =
	     CAN_FIRE_RL_core_resp_mkConnectionGetPut ;
  assign riscv_EN_interrupts_ma_clint_msip = EN_sb_clint_msip ;
  assign riscv_EN_interrupts_ma_clint_mtip = EN_sb_clint_mtip ;
  assign riscv_EN_interrupts_ma_clint_mtime = EN_sb_clint_mtime ;
  assign riscv_EN_interrupts_ma_plic_meip = EN_sb_plic_meip ;
  assign riscv_EN_interrupts_ma_plic_seip = EN_sb_plic_seip ;
  assign riscv_EN_s5_cache_ma_io_response = 1'd1 ;

  // remaining internal signals
  assign IF_IF_ptwalk_wr_mstatus_whas__44_THEN_ptwalk_w_ETC___d285 =
	     priv__h3170 == 2'd1 && ptwalk_ff_memory_response_D_OUT[16] &&
	     !riscv_csrs_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd0 ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 ||
	     !ptwalk_ff_memory_response_D_OUT[18] ||
	     !ptwalk_ff_memory_response_D_OUT[19] &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign IF_IF_ptwalk_wr_mstatus_whas__44_THEN_ptwalk_w_ETC___d345 =
	     priv__h3170 == 2'd1 && ptwalk_ff_memory_response_D_OUT[16] &&
	     !riscv_csrs_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[13] &&
	     (!ptwalk_ff_memory_response_D_OUT[15] ||
	      !riscv_csrs_mv_csr_mstatus[19]) ||
	     !ptwalk_ff_memory_response_D_OUT[18] ||
	     !ptwalk_ff_memory_response_D_OUT[19] &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign IF_NOT_ptwalk_ff_memory_response_first__61_BIT_ETC___d337 =
	     (!ptwalk_ff_memory_response_D_OUT[12] ||
	      !ptwalk_ff_memory_response_D_OUT[13] &&
	      ptwalk_ff_memory_response_D_OUT[14] ||
	      ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330) ?
	       cause___1__h4140 :
	       7'd0 ;
  assign IF_NOT_ptwalk_ff_memory_response_first__61_BIT_ETC___d340 =
	     (!ptwalk_ff_memory_response_D_OUT[12] ||
	      !ptwalk_ff_memory_response_D_OUT[13] &&
	      ptwalk_ff_memory_response_D_OUT[14] ||
	      ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 ||
	      ptwalk_ff_memory_response_D_OUT[11]) ?
	       { 1'd1, _theResult_____1__h3971 } :
	       8'd0 ;
  assign IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630 =
	     wr_write_req_BITS_31_TO_0__q2[31:16] ==
	     dmem_send_mem_rd_req_get[42:27] ;
  assign NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d292 =
	     !ptwalk_ff_memory_response_D_OUT[12] ||
	     ptwalk_ff_memory_response_D_OUT[14] ||
	     ptwalk_rg_levels == 2'd0 ||
	     ptwalk_ff_memory_response_D_OUT[14] &&
	     (ptwalk_rg_levels == 2'd1 &&
	      ptwalk_ff_memory_response_D_OUT[30:22] != 9'd0 ||
	      ptwalk_rg_levels == 2'd2 &&
	      ptwalk_ff_memory_response_D_OUT[39:22] != 18'd0 ||
	      ptwalk_rg_levels == 2'd3 &&
	      ptwalk_ff_memory_response_D_OUT[48:22] != 27'd0 ||
	      ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d287) ||
	     ptwalk_ff_memory_response_D_OUT[11] ;
  assign NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d367 =
	     (!ptwalk_ff_memory_response_D_OUT[12] ||
	      !ptwalk_ff_memory_response_D_OUT[13] &&
	      ptwalk_ff_memory_response_D_OUT[14] ||
	      ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d350 ||
	      ptwalk_ff_memory_response_D_OUT[11]) &&
	     ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ;
  assign NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d326 =
	     ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 &&
	     !ptwalk_ff_memory_response_D_OUT[16] &&
	     priv__h3170 == 2'd0 ||
	     ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 && priv__h3170 == 2'd1 &&
	     ptwalk_ff_memory_response_D_OUT[16] &&
	     !riscv_csrs_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d324 ;
  assign NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d433 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      !ptwalk_ff_memory_response_D_OUT[15] ||
	      !ptwalk_ff_memory_response_D_OUT[16] ||
	      riscv_csrs_mv_curr_priv != 2'd1) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[15]) &&
	     ptwalk_ff_memory_response_D_OUT[18] &&
	     (ptwalk_ff_memory_response_D_OUT[19] ||
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd1) ;
  assign NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d435 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[13] ||
	      ptwalk_ff_memory_response_D_OUT[15] &&
	      riscv_csrs_mv_csr_mstatus[19]) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      !ptwalk_ff_memory_response_D_OUT[15] ||
	      ptwalk_ff_memory_response_D_OUT[16] ||
	      riscv_csrs_mv_curr_priv != 2'd0) &&
	     NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d433 ;
  assign NOT_ptwalk_rg_levels_18_EQ_0_43_74_OR_ptwalk_f_ETC___d441 =
	     (ptwalk_rg_levels != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[13] ||
	      ptwalk_ff_memory_response_D_OUT[15]) &&
	     (!ptwalk_ff_memory_response_D_OUT[15] &&
	      !ptwalk_ff_memory_response_D_OUT[13] &&
	      !ptwalk_ff_memory_response_D_OUT[14] ||
	      NOT_ptwalk_rg_levels_18_EQ_1_44_77_OR_ptwalk_f_ETC___d439) ;
  assign NOT_ptwalk_rg_levels_18_EQ_1_44_77_OR_ptwalk_f_ETC___d406 =
	     (ptwalk_rg_levels != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[30:22] == 9'd0) &&
	     (ptwalk_rg_levels != 2'd2 ||
	      ptwalk_ff_memory_response_D_OUT[39:22] == 18'd0) &&
	     (ptwalk_rg_levels != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[48:22] == 27'd0) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[14]) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[16] ||
	      priv__h3170 != 2'd0) &&
	     ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d403 ;
  assign NOT_ptwalk_rg_levels_18_EQ_1_44_77_OR_ptwalk_f_ETC___d439 =
	     (ptwalk_rg_levels != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[30:22] == 9'd0) &&
	     (ptwalk_rg_levels != 2'd2 ||
	      ptwalk_ff_memory_response_D_OUT[39:22] == 18'd0) &&
	     (ptwalk_rg_levels != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[48:22] == 27'd0) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[14]) &&
	     ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d437 ;
  assign _dand1ptwalk_ff_req_queue_EN_deq =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     (!ptwalk_ff_memory_response_D_OUT[12] ||
	      !ptwalk_ff_memory_response_D_OUT[13] &&
	      ptwalk_ff_memory_response_D_OUT[14] ||
	      ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 ||
	      ptwalk_ff_memory_response_D_OUT[11] ||
	      (ptwalk_ff_memory_response_D_OUT[13] ||
	       ptwalk_ff_memory_response_D_OUT[15]) &&
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3) ;
  assign _theResult_____1__h3971 =
	     ptwalk_ff_memory_response_D_OUT[11] ?
	       cause___1__h4119 :
	       IF_NOT_ptwalk_ff_memory_response_first__61_BIT_ETC___d337 ;
  assign a__h2369 =
	     (ptwalk_rg_levels == max_levels__h2368) ?
	       { riscv_csrs_mv_csr_satp[43:0], 12'b0 } :
	       ptwalk_rg_a ;
  assign max_levels__h2368 =
	     (riscv_csrs_mv_csr_satp[63:60] == 4'd8) ? 2'd2 : 2'd3 ;
  assign priv__h3170 =
	     riscv_csrs_mv_csr_mstatus[17] ?
	       riscv_csrs_mv_csr_mstatus[12:11] :
	       riscv_csrs_mv_curr_priv ;
  assign pte_address__h2370 = a__h2369 + { 44'd0, x__h2538 } ;
  assign ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 =
	     ptwalk_ff_memory_response_D_OUT[12] &&
	     (ptwalk_ff_memory_response_D_OUT[13] ||
	      !ptwalk_ff_memory_response_D_OUT[14]) &&
	     (ptwalk_rg_levels != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[13] ||
	      ptwalk_ff_memory_response_D_OUT[15]) &&
	     (!ptwalk_ff_memory_response_D_OUT[14] ||
	      NOT_ptwalk_rg_levels_18_EQ_1_44_77_OR_ptwalk_f_ETC___d406) ;
  assign ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d287 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[14] ||
	     !ptwalk_ff_memory_response_D_OUT[16] && priv__h3170 == 2'd0 ||
	     IF_IF_ptwalk_wr_mstatus_whas__44_THEN_ptwalk_w_ETC___d285 ;
  assign ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d322 =
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[15] &&
	     ptwalk_ff_memory_response_D_OUT[16] &&
	     riscv_csrs_mv_curr_priv == 2'd1 ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     !ptwalk_ff_memory_response_D_OUT[15] ||
	     !ptwalk_ff_memory_response_D_OUT[18] ||
	     !ptwalk_ff_memory_response_D_OUT[19] &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d324 =
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[13] &&
	     (!ptwalk_ff_memory_response_D_OUT[15] ||
	      !riscv_csrs_mv_csr_mstatus[19]) ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[15] &&
	     !ptwalk_ff_memory_response_D_OUT[16] &&
	     riscv_csrs_mv_curr_priv == 2'd0 ||
	     ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d322 ;
  assign ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d347 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[14] ||
	     !ptwalk_ff_memory_response_D_OUT[16] && priv__h3170 == 2'd0 ||
	     IF_IF_ptwalk_wr_mstatus_whas__44_THEN_ptwalk_w_ETC___d345 ;
  assign ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d395 =
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 || priv__h3170 != 2'd1 ||
	     !ptwalk_ff_memory_response_D_OUT[16] ||
	     riscv_csrs_mv_csr_mstatus[18] ;
  assign ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d403 =
	     ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d395 &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[13]) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[15]) &&
	     ptwalk_ff_memory_response_D_OUT[18] &&
	     (ptwalk_ff_memory_response_D_OUT[19] ||
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd1) ;
  assign ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d437 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[16] ||
	      priv__h3170 != 2'd0) &&
	     ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d395 &&
	     NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d435 ;
  assign ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 =
	     ptwalk_rg_levels == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[13] &&
	     !ptwalk_ff_memory_response_D_OUT[15] ||
	     (ptwalk_ff_memory_response_D_OUT[15] ||
	      ptwalk_ff_memory_response_D_OUT[13] ||
	      ptwalk_ff_memory_response_D_OUT[14]) &&
	     ptwalk_rg_levels_18_EQ_1_44_AND_NOT_ptwalk_ff__ETC___d328 ;
  assign ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d350 =
	     ptwalk_rg_levels == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[13] &&
	     !ptwalk_ff_memory_response_D_OUT[15] ||
	     (ptwalk_ff_memory_response_D_OUT[15] ||
	      ptwalk_ff_memory_response_D_OUT[13] ||
	      ptwalk_ff_memory_response_D_OUT[14]) &&
	     (ptwalk_rg_levels == 2'd1 &&
	      ptwalk_ff_memory_response_D_OUT[30:22] != 9'd0 ||
	      ptwalk_rg_levels == 2'd2 &&
	      ptwalk_ff_memory_response_D_OUT[39:22] != 18'd0 ||
	      ptwalk_rg_levels == 2'd3 &&
	      ptwalk_ff_memory_response_D_OUT[48:22] != 27'd0 ||
	      ptwalk_ff_req_queue_first__09_BITS_1_TO_0_11_E_ETC___d347) ;
  assign ptwalk_rg_levels_18_EQ_1_44_AND_NOT_ptwalk_ff__ETC___d328 =
	     ptwalk_rg_levels == 2'd1 &&
	     ptwalk_ff_memory_response_D_OUT[30:22] != 9'd0 ||
	     ptwalk_rg_levels == 2'd2 &&
	     ptwalk_ff_memory_response_D_OUT[39:22] != 18'd0 ||
	     ptwalk_rg_levels == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[48:22] != 27'd0 ||
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[14] ||
	     NOT_ptwalk_ff_req_queue_first__09_BITS_1_TO_0__ETC___d326 ;
  assign value__h8827 = { 2'd2, riscv_csrs_mv_curr_priv[1] } ;
  assign wr_write_req_BITS_31_TO_0__q2 = wr_write_req[31:0] ;
  assign write_strobe__h9325 =
	     write_strobe__h9323 << dmem_send_mem_io_req_get[70:68] ;
  assign x__h13897 = { 1'd0, dmem_send_mem_wr_req[1:0] } ;
  assign x__h13932 = { 2'd0, riscv_csrs_mv_curr_priv[1] } ;
  assign x__h14576 = rg_shift_amount + 9'd64 ;
  assign x__h14613 = rg_burst_count + 8'd1 ;
  assign x__h14702 = dmem_send_mem_wr_req[522:11] >> rg_shift_amount ;
  assign x__h2538 =
	     { CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1, 3'b0 } ;
  assign x__h4182 = ptwalk_rg_levels - 2'd1 ;
  assign x__h4465 = { ptwalk_ff_memory_response_D_OUT[65:22], 12'b0 } ;
  assign x__h9542 = { 1'd0, dmem_send_mem_io_req_get[1:0] } ;
  assign x_address__h2690 =
	     { {8{pte_address__h2370[55]}}, pte_address__h2370 } ;
  assign x_writedata__h2695 = { 57'd0, 7'bxxxxxxx /* unspecified value */  } ;
  assign x_writedata__h4285 = { 57'd0, _theResult_____1__h3971 } ;
  always@(ptwalk_rg_levels or ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_rg_levels)
      2'd0:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[22:14];
      2'd1:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[31:23];
      2'd2:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[40:32];
      2'd3:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      9'bxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(dmem_send_mem_io_req_get)
  begin
    case (dmem_send_mem_io_req_get[1:0])
      2'd0: w_wdata__h9793 = {8{dmem_send_mem_io_req_get[10:3]}};
      2'd1: w_wdata__h9793 = {4{dmem_send_mem_io_req_get[18:3]}};
      2'd2: w_wdata__h9793 = {2{dmem_send_mem_io_req_get[34:3]}};
      2'd3: w_wdata__h9793 = dmem_send_mem_io_req_get[66:3];
    endcase
  end
  always@(dmem_send_mem_io_req_get)
  begin
    case (dmem_send_mem_io_req_get[1:0])
      2'd0: write_strobe__h9323 = 8'b00000001;
      2'd1: write_strobe__h9323 = 8'b00000011;
      2'd2: write_strobe__h9323 = 8'h0F;
      2'd3: write_strobe__h9323 = 8'd255;
    endcase
  end
  always@(ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_ff_req_queue_D_OUT[1:0])
      2'd0: cause___1__h4119 = 7'd5;
      2'd3: cause___1__h4119 = 7'd1;
      default: cause___1__h4119 = 7'd7;
    endcase
  end
  always@(ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_ff_req_queue_D_OUT[1:0])
      2'd0: cause___1__h4140 = 7'd13;
      2'd3: cause___1__h4140 = 7'd12;
      default: cause___1__h4140 = 7'd15;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fetch_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptwalk_rg_a <= `BSV_ASSIGNMENT_DELAY 56'd0;
	ptwalk_rg_hold_epoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptwalk_rg_levels <= `BSV_ASSIGNMENT_DELAY 2'd2;
	ptwalk_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd2;
	rg_burst_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_ptw_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_read_line_req <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      62'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_shift_amount <= `BSV_ASSIGNMENT_DELAY 9'd64;
	wr_write_req <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (fetch_xactor_crg_rd_addr_full_EN)
	  fetch_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_rd_addr_full_D_IN;
	if (fetch_xactor_crg_rd_data_full_EN)
	  fetch_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_rd_data_full_D_IN;
	if (fetch_xactor_crg_wr_addr_full_EN)
	  fetch_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_wr_addr_full_D_IN;
	if (fetch_xactor_crg_wr_data_full_EN)
	  fetch_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_wr_data_full_D_IN;
	if (fetch_xactor_crg_wr_resp_full_EN)
	  fetch_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_wr_resp_full_D_IN;
	if (memory_xactor_crg_rd_addr_full_EN)
	  memory_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_rd_addr_full_D_IN;
	if (memory_xactor_crg_rd_data_full_EN)
	  memory_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_rd_data_full_D_IN;
	if (memory_xactor_crg_wr_addr_full_EN)
	  memory_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_wr_addr_full_D_IN;
	if (memory_xactor_crg_wr_data_full_EN)
	  memory_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_wr_data_full_D_IN;
	if (memory_xactor_crg_wr_resp_full_EN)
	  memory_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_wr_resp_full_D_IN;
	if (ptwalk_rg_a_EN)
	  ptwalk_rg_a <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_a_D_IN;
	if (ptwalk_rg_hold_epoch_EN)
	  ptwalk_rg_hold_epoch <= `BSV_ASSIGNMENT_DELAY
	      ptwalk_rg_hold_epoch_D_IN;
	if (ptwalk_rg_levels_EN)
	  ptwalk_rg_levels <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_levels_D_IN;
	if (ptwalk_rg_state_EN)
	  ptwalk_rg_state <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_state_D_IN;
	if (rg_burst_count_EN)
	  rg_burst_count <= `BSV_ASSIGNMENT_DELAY rg_burst_count_D_IN;
	if (rg_ptw_state_EN)
	  rg_ptw_state <= `BSV_ASSIGNMENT_DELAY rg_ptw_state_D_IN;
	if (rg_read_line_req_EN)
	  rg_read_line_req <= `BSV_ASSIGNMENT_DELAY rg_read_line_req_D_IN;
	if (rg_shift_amount_EN)
	  rg_shift_amount <= `BSV_ASSIGNMENT_DELAY rg_shift_amount_D_IN;
	if (wr_write_req_EN)
	  wr_write_req <= `BSV_ASSIGNMENT_DELAY wr_write_req_D_IN;
      end
    if (fetch_xactor_rg_rd_addr_EN)
      fetch_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_rd_addr_D_IN;
    if (fetch_xactor_rg_rd_data_EN)
      fetch_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_rd_data_D_IN;
    if (fetch_xactor_rg_wr_addr_EN)
      fetch_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_wr_addr_D_IN;
    if (fetch_xactor_rg_wr_data_EN)
      fetch_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_wr_data_D_IN;
    if (fetch_xactor_rg_wr_resp_EN)
      fetch_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_wr_resp_D_IN;
    if (memory_xactor_rg_rd_addr_EN)
      memory_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_rd_addr_D_IN;
    if (memory_xactor_rg_rd_data_EN)
      memory_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_rd_data_D_IN;
    if (memory_xactor_rg_wr_addr_EN)
      memory_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_wr_addr_D_IN;
    if (memory_xactor_rg_wr_data_EN)
      memory_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_wr_data_D_IN;
    if (memory_xactor_rg_wr_resp_EN)
      memory_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_wr_resp_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fetch_xactor_crg_rd_addr_full = 1'h0;
    fetch_xactor_crg_rd_data_full = 1'h0;
    fetch_xactor_crg_wr_addr_full = 1'h0;
    fetch_xactor_crg_wr_data_full = 1'h0;
    fetch_xactor_crg_wr_resp_full = 1'h0;
    fetch_xactor_rg_rd_addr = 62'h2AAAAAAAAAAAAAAA;
    fetch_xactor_rg_rd_data = 68'hAAAAAAAAAAAAAAAAA;
    fetch_xactor_rg_wr_addr = 62'h2AAAAAAAAAAAAAAA;
    fetch_xactor_rg_wr_data = 73'h0AAAAAAAAAAAAAAAAAA;
    fetch_xactor_rg_wr_resp = 3'h2;
    memory_xactor_crg_rd_addr_full = 1'h0;
    memory_xactor_crg_rd_data_full = 1'h0;
    memory_xactor_crg_wr_addr_full = 1'h0;
    memory_xactor_crg_wr_data_full = 1'h0;
    memory_xactor_crg_wr_resp_full = 1'h0;
    memory_xactor_rg_rd_addr = 62'h2AAAAAAAAAAAAAAA;
    memory_xactor_rg_rd_data = 68'hAAAAAAAAAAAAAAAAA;
    memory_xactor_rg_wr_addr = 62'h2AAAAAAAAAAAAAAA;
    memory_xactor_rg_wr_data = 73'h0AAAAAAAAAAAAAAAAAA;
    memory_xactor_rg_wr_resp = 3'h2;
    ptwalk_rg_a = 56'hAAAAAAAAAAAAAA;
    ptwalk_rg_hold_epoch = 1'h0;
    ptwalk_rg_levels = 2'h2;
    ptwalk_rg_state = 2'h2;
    rg_burst_count = 8'hAA;
    rg_ptw_state = 2'h2;
    rg_read_line_req = 63'h2AAAAAAAAAAAAAAA;
    rg_shift_amount = 9'h0AA;
    wr_write_req = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d483 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d484 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d485 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  v__h8783 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("[%10d", v__h8783, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("[%2d]CORE : IMEM Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("Axi4_rd_addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", imem_get_read_mem_req_get[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", imem_get_read_mem_req_get[43:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", imem_get_read_mem_req_get[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", imem_get_read_mem_req_get[3:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", 1'bx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", value__h8827);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("'h%h", 1'b0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d483 ||
	   TASK_testplusargs___d484 && TASK_testplusargs___d485))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d502 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d503 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d504 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_02_OR_TASK_testplusargs_03_A_ETC___d509 =
	(TASK_testplusargs___d502 ||
	 TASK_testplusargs___d503 && TASK_testplusargs___d504) &&
	fetch_xactor_rg_rd_data[0];
    TASK_testplusargs_02_OR_TASK_testplusargs_03_A_ETC___d511 =
	(TASK_testplusargs___d502 ||
	 TASK_testplusargs___d503 && TASK_testplusargs___d504) &&
	!fetch_xactor_rg_rd_data[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  v__h9014 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write("[%10d", v__h9014, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write("[%2d]CORE : IMEM Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write("Axi4_rd_data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write("'h%h", fetch_xactor_rg_rd_data[67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write("'h%h", fetch_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write("'h%h", fetch_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_02_OR_TASK_testplusargs_03_A_ETC___d509)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_02_OR_TASK_testplusargs_03_A_ETC___d511)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d502 ||
	   TASK_testplusargs___d503 && TASK_testplusargs___d504))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io)
	begin
	  TASK_testplusargs___d527 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io)
	begin
	  TASK_testplusargs___d528 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io)
	begin
	  TASK_testplusargs___d529 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d536 =
	(TASK_testplusargs___d527 ||
	 TASK_testplusargs___d528 && TASK_testplusargs___d529) &&
	dmem_send_mem_io_req_get[67];
    TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d538 =
	(TASK_testplusargs___d527 ||
	 TASK_testplusargs___d528 && TASK_testplusargs___d529) &&
	!dmem_send_mem_io_req_get[67];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io)
	begin
	  v__h9217 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write("[%10d", v__h9217, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write("CORE: Received io op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write("DCache_io_req { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write("'h%h", dmem_send_mem_io_req_get[99:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write(", ", "read_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d536)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d538)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write("'h%h", dmem_send_mem_io_req_get[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write("'h%h", dmem_send_mem_io_req_get[2:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d527 ||
	   TASK_testplusargs___d528 && TASK_testplusargs___d529))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response)
	begin
	  TASK_testplusargs___d582 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response)
	begin
	  TASK_testplusargs___d583 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response)
	begin
	  TASK_testplusargs___d584 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d589 =
	(TASK_testplusargs___d582 ||
	 TASK_testplusargs___d583 && TASK_testplusargs___d584) &&
	memory_xactor_rg_rd_data[0];
    TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d591 =
	(TASK_testplusargs___d582 ||
	 TASK_testplusargs___d583 && TASK_testplusargs___d584) &&
	!memory_xactor_rg_rd_data[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response)
	begin
	  v__h11987 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write("[%10d", v__h11987, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write("[%2d]CORE : IO Read Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write("Axi4_rd_data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write("'h%h", memory_xactor_rg_rd_data[67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write("'h%h", memory_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write("'h%h", memory_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d589)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d591)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  (TASK_testplusargs___d582 ||
	   TASK_testplusargs___d583 && TASK_testplusargs___d584))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp)
	begin
	  TASK_testplusargs___d601 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp)
	begin
	  TASK_testplusargs___d602 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp)
	begin
	  TASK_testplusargs___d603 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp)
	begin
	  v__h12201 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write("[%10d", v__h12201, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write("[%2d]CORE : IO Write Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write("Axi4_wr_resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write("'h%h", memory_xactor_rg_wr_resp[2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write("'h%h", memory_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_write_resp &&
	  (TASK_testplusargs___d601 ||
	   TASK_testplusargs___d602 && TASK_testplusargs___d603))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  WILL_FIRE_RL_rl_handle_io_write_resp)
	$display("Error: \"src//ccore.bsv\", line 122, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_handle_io_read_response]\n  and [RL_rl_handle_io_write_resp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630)
	begin
	  TASK_testplusargs___d635 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630)
	begin
	  TASK_testplusargs___d636 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630)
	begin
	  TASK_testplusargs___d637 = $test$plusargs("l1");
	  #0;
	end
    IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640 =
	IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630 &&
	(TASK_testplusargs___d635 ||
	 TASK_testplusargs___d636 && TASK_testplusargs___d637);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630)
	begin
	  v__h12984 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write("[%10d", v__h12984, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write("[%2d]CORE: Delaying Request: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write("DCache_mem_readreq { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write("'h%h", dmem_send_mem_rd_req_get[42:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write(", ", "burst_len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write("'h%h", dmem_send_mem_rd_req_get[10:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write(", ", "burst_size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write("'h%h", dmem_send_mem_rd_req_get[2:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d640)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630))
	begin
	  TASK_testplusargs___d650 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630))
	begin
	  TASK_testplusargs___d651 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630))
	begin
	  TASK_testplusargs___d652 = $test$plusargs("l1");
	  #0;
	end
    NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655 =
	(!wr_write_req[32] ||
	 !IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630) &&
	(TASK_testplusargs___d650 ||
	 TASK_testplusargs___d651 && TASK_testplusargs___d652);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_23_BIT_32_24_THEN_wr_write_req_ETC___d630))
	begin
	  v__h13222 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("[%10d", v__h13222, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("[%2d]CORE : DMEM Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("Axi4_rd_addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", dmem_send_mem_rd_req_get[42:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", dmem_send_mem_rd_req_get[10:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", dmem_send_mem_rd_req_get[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", 1'bx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", x__h13932);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("'h%h", 1'b0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_23_BIT_32_24_46_OR_NOT_IF_wr__ETC___d655)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d660 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d661 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d662 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  v__h13454 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("[%10d", v__h13454, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("[%2d]CORE : DMEM Delayed Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("Axi4_rd_addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", rg_read_line_req[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d660 ||
	   TASK_testplusargs___d661 && TASK_testplusargs___d662))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d682 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d683 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d684 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d688 =
	(TASK_testplusargs___d682 ||
	 TASK_testplusargs___d683 && TASK_testplusargs___d684) &&
	memory_xactor_rg_rd_data[0];
    TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d689 =
	(TASK_testplusargs___d682 ||
	 TASK_testplusargs___d683 && TASK_testplusargs___d684) &&
	!memory_xactor_rg_rd_data[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  v__h13701 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write("[%10d", v__h13701, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write("[%2d]CORE : DMEM Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write("Axi4_rd_data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write("'h%h", memory_xactor_rg_rd_data[67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write("'h%h", memory_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write("'h%h", memory_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d688)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d689)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d682 ||
	   TASK_testplusargs___d683 && TASK_testplusargs___d684))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d706 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d707 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d708 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d713 =
	(TASK_testplusargs___d706 ||
	 TASK_testplusargs___d707 && TASK_testplusargs___d708) &&
	dmem_send_mem_wr_req[1:0] == 2'd0;
    TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d715 =
	(TASK_testplusargs___d706 ||
	 TASK_testplusargs___d707 && TASK_testplusargs___d708) &&
	dmem_send_mem_wr_req[1:0] == 2'd1;
    TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d717 =
	(TASK_testplusargs___d706 ||
	 TASK_testplusargs___d707 && TASK_testplusargs___d708) &&
	dmem_send_mem_wr_req[1:0] == 2'd2;
    TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d723 =
	(TASK_testplusargs___d706 ||
	 TASK_testplusargs___d707 && TASK_testplusargs___d708) &&
	dmem_send_mem_wr_req[1:0] != 2'd0 &&
	dmem_send_mem_wr_req[1:0] != 2'd1 &&
	dmem_send_mem_wr_req[1:0] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  v__h14109 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d706 ||
	   TASK_testplusargs___d707 && TASK_testplusargs___d708))
	$write("[%10d", v__h14109, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d706 ||
	   TASK_testplusargs___d707 && TASK_testplusargs___d708))
	$write("[%2d]CORE : DMEM Write Addr : Request ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d706 ||
	   TASK_testplusargs___d707 && TASK_testplusargs___d708))
	$write("{awaddr:%0h,",
	       dmem_send_mem_wr_req[554:523],
	       "awlen:%0d",
	       dmem_send_mem_wr_req[10:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d706 ||
	   TASK_testplusargs___d707 && TASK_testplusargs___d708))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d713)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d715)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d717)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d723)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d706 ||
	   TASK_testplusargs___d707 && TASK_testplusargs___d708))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d706 ||
	   TASK_testplusargs___d707 && TASK_testplusargs___d708))
	$write("wrap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d706 ||
	   TASK_testplusargs___d707 && TASK_testplusargs___d708))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d706 ||
	   TASK_testplusargs___d707 && TASK_testplusargs___d708))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d724 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d725 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d726 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d730 =
	(TASK_testplusargs___d724 ||
	 TASK_testplusargs___d725 && TASK_testplusargs___d726) &&
	dmem_send_mem_wr_req[10:3] == 8'd0;
    TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d732 =
	(TASK_testplusargs___d724 ||
	 TASK_testplusargs___d725 && TASK_testplusargs___d726) &&
	dmem_send_mem_wr_req[10:3] != 8'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  v__h14286 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d724 ||
	   TASK_testplusargs___d725 && TASK_testplusargs___d726))
	$write("[%10d", v__h14286, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d724 ||
	   TASK_testplusargs___d725 && TASK_testplusargs___d726))
	$write("[%2d]CORE : DMEM Write Data : Request ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d724 ||
	   TASK_testplusargs___d725 && TASK_testplusargs___d726))
	$write("{wdata:%0h,wstrb:%0h", dmem_send_mem_wr_req[74:11], 8'd255);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d730)
	$write(",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d732)
	$write(",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d724 ||
	   TASK_testplusargs___d725 && TASK_testplusargs___d726))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d724 ||
	   TASK_testplusargs___d725 && TASK_testplusargs___d726))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d749 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d750 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d751 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  v__h14794 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d749 ||
	   TASK_testplusargs___d750 && TASK_testplusargs___d751))
	$write("[%10d", v__h14794, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d749 ||
	   TASK_testplusargs___d750 && TASK_testplusargs___d751))
	$write("[%2d]CORE : DMEM Write Data: %h rg_burst_count: %d last: %b rg_shift_amount:%d",
	       hartid,
	       x__h14702,
	       rg_burst_count,
	       rg_burst_count == 8'd7,
	       rg_shift_amount);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d749 ||
	   TASK_testplusargs___d750 && TASK_testplusargs___d751))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d759 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d760 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d761 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  v__h14950 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write("[%10d", v__h14950, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write("[%2d]CORE : DMEM Write Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write("Axi4_wr_resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write("'h%h", memory_xactor_rg_wr_resp[2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write("'h%h", memory_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d759 ||
	   TASK_testplusargs___d760 && TASK_testplusargs___d761))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d9 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d10 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d11 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	ptwalk_ff_hold_req_D_OUT[76];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	!ptwalk_ff_hold_req_D_OUT[76] &&
	ptwalk_ff_hold_req_D_OUT[74:73] != 2'd2 &&
	!ptwalk_ff_hold_req_D_OUT[0];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d47 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	!ptwalk_ff_hold_req_D_OUT[76] &&
	ptwalk_ff_hold_req_D_OUT[74:73] == 2'd2 &&
	!ptwalk_ff_hold_req_D_OUT[0];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d81 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	!ptwalk_ff_hold_req_D_OUT[76] &&
	(ptwalk_ff_hold_req_D_OUT[74:73] == 2'd2 ||
	 ptwalk_ff_hold_req_D_OUT[0]) &&
	(ptwalk_ff_hold_req_D_OUT[74:73] != 2'd2 ||
	 ptwalk_ff_hold_req_D_OUT[0]);
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d84 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	ptwalk_ff_hold_req_D_OUT[74:73] != 2'd0;
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d82 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	ptwalk_ff_hold_req_D_OUT[74:73] == 2'd0;
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d86 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	ptwalk_ff_hold_req_D_OUT[0];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d87 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	!ptwalk_ff_hold_req_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
	begin
	  v__h1565 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("[%10d", v__h1565, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("PTW : Resending Core request back to DCache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("{va:%h", ptwalk_ff_hold_req_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18)
	$write(" is a Fence op");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27)
	if (ptwalk_ff_hold_req_D_OUT[74:73] == 2'd0)
	  if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b0)
	    $write(" is a %s%s op", "L", "B");
	  else
	    if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b001)
	      $write(" is a %s%s op", "L", "H");
	    else
	      if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b010)
		$write(" is a %s%s op", "L", "W");
	      else
		if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b011)
		  $write(" is a %s%s op", "L", "D");
		else
		  if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b100)
		    $write(" is a %s%s op", "L", "BU");
		  else
		    if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b101)
		      $write(" is a %s%s op", "L", "HU");
		    else
		      $write(" is a %s%s op", "L", "WU");
	else
	  if (ptwalk_ff_hold_req_D_OUT[74:73] == 2'd1)
	    if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b0)
	      $write(" is a %s%s op", "S", "B");
	    else
	      if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b001)
		$write(" is a %s%s op", "S", "H");
	      else
		if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b010)
		  $write(" is a %s%s op", "S", "W");
		else
		  if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b011)
		    $write(" is a %s%s op", "S", "D");
		  else
		    if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b100)
		      $write(" is a %s%s op", "S", "BU");
		    else
		      if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b101)
			$write(" is a %s%s op", "S", "HU");
		      else
			$write(" is a %s%s op", "S", "WU");
	  else
	    if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b0)
	      $write(" is a %s%s op", "UNKNOWN ACCESS", "B");
	    else
	      if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b001)
		$write(" is a %s%s op", "UNKNOWN ACCESS", "H");
	      else
		if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b010)
		  $write(" is a %s%s op", "UNKNOWN ACCESS", "W");
		else
		  if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b011)
		    $write(" is a %s%s op", "UNKNOWN ACCESS", "D");
		  else
		    if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b100)
		      $write(" is a %s%s op", "UNKNOWN ACCESS", "BU");
		    else
		      if (ptwalk_ff_hold_req_D_OUT[72:70] == 3'b101)
			$write(" is a %s%s op", "UNKNOWN ACCESS", "HU");
		      else
			$write(" is a %s%s op", "UNKNOWN ACCESS", "WU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d47)
	if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b0011)
	  if (ptwalk_ff_hold_req_D_OUT[5])
	    $write(" is a %s op", "AMOSWAP.D");
	  else
	    $write(" is a %s op", "AMOSWAP.W");
	else
	  if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b0)
	    if (ptwalk_ff_hold_req_D_OUT[5])
	      $write(" is a %s op", "AMOADD.D");
	    else
	      $write(" is a %s op", "AMOADD.W");
	  else
	    if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b0010)
	      if (ptwalk_ff_hold_req_D_OUT[5])
		$write(" is a %s op", "AMOXOR.D");
	      else
		$write(" is a %s op", "AMOXOR.W");
	    else
	      if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b0110)
		if (ptwalk_ff_hold_req_D_OUT[5])
		  $write(" is a %s op", "AMOAND.D");
		else
		  $write(" is a %s op", "AMOAND.W");
	      else
		if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b0100)
		  if (ptwalk_ff_hold_req_D_OUT[5])
		    $write(" is a %s op", "AMOOR.D");
		  else
		    $write(" is a %s op", "AMOOR.W");
		else
		  if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b1100)
		    if (ptwalk_ff_hold_req_D_OUT[5])
		      $write(" is a %s op", "AMOMINU.D");
		    else
		      $write(" is a %s op", "AMOMINU.W");
		  else
		    if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b1110)
		      if (ptwalk_ff_hold_req_D_OUT[5])
			$write(" is a %s op", "AMOMAXU.D");
		      else
			$write(" is a %s op", "AMOMAXU.W");
		    else
		      if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b1000)
			if (ptwalk_ff_hold_req_D_OUT[5])
			  $write(" is a %s op", "AMOMIN.D");
			else
			  $write(" is a %s op", "AMOMIN.W");
		      else
			if (ptwalk_ff_hold_req_D_OUT[4:1] == 4'b1010)
			  if (ptwalk_ff_hold_req_D_OUT[5])
			    $write(" is a %s op", "AMOMAX.D");
			  else
			    $write(" is a %s op", "AMOMAX.W");
			else
			  $write(" is a %s op", "UNKNOWN OP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d81)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d82)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d84)
	$write(", data:%h", ptwalk_ff_hold_req_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d86)
	$write(" coming from PTWALK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d87)
	$write(" coming from CORE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d103 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d104 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d105 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  v__h2275 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d103 ||
	   TASK_testplusargs___d104 && TASK_testplusargs___d105))
	$write("[%10d", v__h2275, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d103 ||
	   TASK_testplusargs___d104 && TASK_testplusargs___d105))
	$write("PTW : Recieved Request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d103 ||
	   TASK_testplusargs___d104 && TASK_testplusargs___d105))
	$write("PTWalk_tlb_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d103 ||
	   TASK_testplusargs___d104 && TASK_testplusargs___d105))
	$write("'h%h", ptwalk_ff_req_queue_D_OUT[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d103 ||
	   TASK_testplusargs___d104 && TASK_testplusargs___d105))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d103 ||
	   TASK_testplusargs___d104 && TASK_testplusargs___d105))
	$write("'h%h", ptwalk_ff_req_queue_D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d103 ||
	   TASK_testplusargs___d104 && TASK_testplusargs___d105))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d112 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d113 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d114 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  v__h2437 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d112 ||
	   TASK_testplusargs___d113 && TASK_testplusargs___d114))
	$write("[%10d", v__h2437, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d112 ||
	   TASK_testplusargs___d113 && TASK_testplusargs___d114))
	$write("PTW : Sending PTE - Address to DMEM:%h", pte_address__h2370);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d112 ||
	   TASK_testplusargs___d113 && TASK_testplusargs___d114))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d155 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d156 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d157 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d163 =
	(TASK_testplusargs___d155 ||
	 TASK_testplusargs___d156 && TASK_testplusargs___d157) &&
	ptwalk_ff_memory_response_D_OUT[11];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d185 =
	(TASK_testplusargs___d155 ||
	 TASK_testplusargs___d156 && TASK_testplusargs___d157) &&
	!ptwalk_ff_memory_response_D_OUT[11];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d188 =
	(TASK_testplusargs___d155 ||
	 TASK_testplusargs___d156 && TASK_testplusargs___d157) &&
	!ptwalk_ff_memory_response_D_OUT[11] &&
	ptwalk_ff_memory_response_D_OUT[2];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d191 =
	(TASK_testplusargs___d155 ||
	 TASK_testplusargs___d156 && TASK_testplusargs___d157) &&
	!ptwalk_ff_memory_response_D_OUT[11] &&
	!ptwalk_ff_memory_response_D_OUT[2];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d197 =
	(TASK_testplusargs___d155 ||
	 TASK_testplusargs___d156 && TASK_testplusargs___d157) &&
	!ptwalk_ff_memory_response_D_OUT[11] &&
	!ptwalk_ff_memory_response_D_OUT[1];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d194 =
	(TASK_testplusargs___d155 ||
	 TASK_testplusargs___d156 && TASK_testplusargs___d157) &&
	!ptwalk_ff_memory_response_D_OUT[11] &&
	ptwalk_ff_memory_response_D_OUT[1];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  v__h2807 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d155 ||
	   TASK_testplusargs___d156 && TASK_testplusargs___d157))
	$write("[%10d", v__h2807, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d155 ||
	   TASK_testplusargs___d156 && TASK_testplusargs___d157))
	$write("PTW : Memory Response: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d163)
	if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd0)
	  $write("{%s with mtval:%h",
		 "Instruction-Address-Misaligned-Trap",
		 ptwalk_ff_memory_response_D_OUT[75:12]);
	else
	  if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd1)
	    $write("{%s with mtval:%h",
		   "Instruction-Access-Fault-Trap",
		   ptwalk_ff_memory_response_D_OUT[75:12]);
	  else
	    if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd4)
	      $write("{%s with mtval:%h",
		     "Load-Address-Misaligned-Trap",
		     ptwalk_ff_memory_response_D_OUT[75:12]);
	    else
	      if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd5)
		$write("{%s with mtval:%h",
		       "Load-Access-Fault-Trap",
		       ptwalk_ff_memory_response_D_OUT[75:12]);
	      else
		if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd6)
		  $write("{%s with mtval:%h",
			 "Store-Address-Misaligned-Trap",
			 ptwalk_ff_memory_response_D_OUT[75:12]);
		else
		  if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd7)
		    $write("{%s with mtval:%h",
			   "Store-Access-Fault-Trap",
			   ptwalk_ff_memory_response_D_OUT[75:12]);
		  else
		    if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd12)
		      $write("{%s with mtval:%h",
			     "Instruction-Page-Fault-Trap",
			     ptwalk_ff_memory_response_D_OUT[75:12]);
		    else
		      if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd13)
			$write("{%s with mtval:%h",
			       "Load-Page-Fault-Trap",
			       ptwalk_ff_memory_response_D_OUT[75:12]);
		      else
			if (ptwalk_ff_memory_response_D_OUT[10:4] == 7'd15)
			  $write("{%s with mtval:%h",
				 "Store-Page-Fault-Trap",
				 ptwalk_ff_memory_response_D_OUT[75:12]);
			else
			  $write("{%s with mtval:%h",
				 "UNKNOWN CAUSE VALUE",
				 ptwalk_ff_memory_response_D_OUT[75:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d185)
	$write("{data:%h", ptwalk_ff_memory_response_D_OUT[75:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d163)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d188)
	$write(" is IO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d191)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d163)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d194)
	$write(" and entry allocated");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d197)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d155 ||
	   TASK_testplusargs___d156 && TASK_testplusargs___d157))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d155 ||
	   TASK_testplusargs___d156 && TASK_testplusargs___d157))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d198 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d199 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d200 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  v__h3059 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d198 ||
	   TASK_testplusargs___d199 && TASK_testplusargs___d200))
	$write("[%10d", v__h3059, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d198 ||
	   TASK_testplusargs___d199 && TASK_testplusargs___d200))
	$write("PTW : For Request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d198 ||
	   TASK_testplusargs___d199 && TASK_testplusargs___d200))
	$write("PTWalk_tlb_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d198 ||
	   TASK_testplusargs___d199 && TASK_testplusargs___d200))
	$write("'h%h", ptwalk_ff_req_queue_D_OUT[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d198 ||
	   TASK_testplusargs___d199 && TASK_testplusargs___d200))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d198 ||
	   TASK_testplusargs___d199 && TASK_testplusargs___d200))
	$write("'h%h", ptwalk_ff_req_queue_D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d198 ||
	   TASK_testplusargs___d199 && TASK_testplusargs___d200))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d204 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d205 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d206 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d211 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	ptwalk_ff_memory_response_D_OUT[12];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d213 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	!ptwalk_ff_memory_response_D_OUT[12];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d215 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	ptwalk_ff_memory_response_D_OUT[13];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d217 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	!ptwalk_ff_memory_response_D_OUT[13];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d221 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	!ptwalk_ff_memory_response_D_OUT[14];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d219 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	ptwalk_ff_memory_response_D_OUT[14];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d223 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	ptwalk_ff_memory_response_D_OUT[15];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d225 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	!ptwalk_ff_memory_response_D_OUT[15];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d227 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	ptwalk_ff_memory_response_D_OUT[16];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d231 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	ptwalk_ff_memory_response_D_OUT[17];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d229 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	!ptwalk_ff_memory_response_D_OUT[16];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d233 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	!ptwalk_ff_memory_response_D_OUT[17];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d235 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	ptwalk_ff_memory_response_D_OUT[18];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d237 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	!ptwalk_ff_memory_response_D_OUT[18];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d239 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	ptwalk_ff_memory_response_D_OUT[19];
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d241 =
	(TASK_testplusargs___d204 ||
	 TASK_testplusargs___d205 && TASK_testplusargs___d206) &&
	!ptwalk_ff_memory_response_D_OUT[19];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  v__h3237 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write("[%10d", v__h3237, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write("PTW : Permissions");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write("TLB_permissions { ", "v: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d211)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d213)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write(", ", "r: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d215)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d217)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write(", ", "w: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d219)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d221)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write(", ", "x: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d223)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d225)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write(", ", "u: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d227)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d229)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write(", ", "g: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d231)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d233)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write(", ", "a: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d235)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d237)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write(", ", "d: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d239)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d241)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d204 ||
	   TASK_testplusargs___d205 && TASK_testplusargs___d206))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (!ptwalk_ff_memory_response_D_OUT[12] ||
	   !ptwalk_ff_memory_response_D_OUT[13] &&
	   ptwalk_ff_memory_response_D_OUT[14] ||
	   ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 ||
	   ptwalk_ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d360 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (!ptwalk_ff_memory_response_D_OUT[12] ||
	   !ptwalk_ff_memory_response_D_OUT[13] &&
	   ptwalk_ff_memory_response_D_OUT[14] ||
	   ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 ||
	   ptwalk_ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d361 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (!ptwalk_ff_memory_response_D_OUT[12] ||
	   !ptwalk_ff_memory_response_D_OUT[13] &&
	   ptwalk_ff_memory_response_D_OUT[14] ||
	   ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 ||
	   ptwalk_ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d362 = $test$plusargs("l2");
	  #0;
	end
    NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d365 =
	(!ptwalk_ff_memory_response_D_OUT[12] ||
	 !ptwalk_ff_memory_response_D_OUT[13] &&
	 ptwalk_ff_memory_response_D_OUT[14] ||
	 ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 ||
	 ptwalk_ff_memory_response_D_OUT[11]) &&
	(TASK_testplusargs___d360 ||
	 TASK_testplusargs___d361 && TASK_testplusargs___d362);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (!ptwalk_ff_memory_response_D_OUT[12] ||
	   !ptwalk_ff_memory_response_D_OUT[13] &&
	   ptwalk_ff_memory_response_D_OUT[14] ||
	   ptwalk_rg_levels_18_EQ_0_43_AND_NOT_ptwalk_ff__ETC___d330 ||
	   ptwalk_ff_memory_response_D_OUT[11]))
	begin
	  v__h4057 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d365)
	$write("[%10d", v__h4057, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d365)
	$write("PTW : Generated Error. Cause:%d", _theResult_____1__h3971);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  NOT_ptwalk_ff_memory_response_first__61_BIT_12_ETC___d365)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  !ptwalk_ff_memory_response_D_OUT[13] &&
	  !ptwalk_ff_memory_response_D_OUT[15])
	begin
	  TASK_testplusargs___d414 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  !ptwalk_ff_memory_response_D_OUT[13] &&
	  !ptwalk_ff_memory_response_D_OUT[15])
	begin
	  TASK_testplusargs___d415 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  !ptwalk_ff_memory_response_D_OUT[13] &&
	  !ptwalk_ff_memory_response_D_OUT[15])
	begin
	  TASK_testplusargs___d416 = $test$plusargs("l2");
	  #0;
	end
    NOT_ptwalk_ff_memory_response_first__61_BIT_13_ETC___d419 =
	!ptwalk_ff_memory_response_D_OUT[13] &&
	!ptwalk_ff_memory_response_D_OUT[15] &&
	(TASK_testplusargs___d414 ||
	 TASK_testplusargs___d415 && TASK_testplusargs___d416);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  !ptwalk_ff_memory_response_D_OUT[13] &&
	  !ptwalk_ff_memory_response_D_OUT[15])
	begin
	  v__h4599 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  NOT_ptwalk_ff_memory_response_first__61_BIT_13_ETC___d419)
	$write("[%10d", v__h4599, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  NOT_ptwalk_ff_memory_response_first__61_BIT_13_ETC___d419)
	$write("PTW : Pointer to NextLevel:%h Levels:%d",
	       x__h4465,
	       ptwalk_rg_levels);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d409 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  NOT_ptwalk_ff_memory_response_first__61_BIT_13_ETC___d419)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_D_OUT[12] &&
	  (ptwalk_ff_memory_response_D_OUT[13] ||
	   !ptwalk_ff_memory_response_D_OUT[14]) &&
	  NOT_ptwalk_rg_levels_18_EQ_0_43_74_OR_ptwalk_f_ETC___d441 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  (ptwalk_ff_memory_response_D_OUT[13] ||
	   ptwalk_ff_memory_response_D_OUT[15]))
	begin
	  TASK_testplusargs___d445 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_D_OUT[12] &&
	  (ptwalk_ff_memory_response_D_OUT[13] ||
	   !ptwalk_ff_memory_response_D_OUT[14]) &&
	  NOT_ptwalk_rg_levels_18_EQ_0_43_74_OR_ptwalk_f_ETC___d441 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  (ptwalk_ff_memory_response_D_OUT[13] ||
	   ptwalk_ff_memory_response_D_OUT[15]))
	begin
	  TASK_testplusargs___d446 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_D_OUT[12] &&
	  (ptwalk_ff_memory_response_D_OUT[13] ||
	   !ptwalk_ff_memory_response_D_OUT[14]) &&
	  NOT_ptwalk_rg_levels_18_EQ_0_43_74_OR_ptwalk_f_ETC___d441 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  (ptwalk_ff_memory_response_D_OUT[13] ||
	   ptwalk_ff_memory_response_D_OUT[15]))
	begin
	  TASK_testplusargs___d447 = $test$plusargs("l2");
	  #0;
	end
    ptwalk_ff_memory_response_first__61_BIT_13_14__ETC___d450 =
	(ptwalk_ff_memory_response_D_OUT[13] ||
	 ptwalk_ff_memory_response_D_OUT[15]) &&
	(TASK_testplusargs___d445 ||
	 TASK_testplusargs___d446 && TASK_testplusargs___d447);
    ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d451 =
	ptwalk_ff_memory_response_D_OUT[12] &&
	(ptwalk_ff_memory_response_D_OUT[13] ||
	 !ptwalk_ff_memory_response_D_OUT[14]) &&
	NOT_ptwalk_rg_levels_18_EQ_0_43_74_OR_ptwalk_f_ETC___d441 &&
	!ptwalk_ff_memory_response_D_OUT[11] &&
	ptwalk_ff_memory_response_first__61_BIT_13_14__ETC___d450;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_D_OUT[12] &&
	  (ptwalk_ff_memory_response_D_OUT[13] ||
	   !ptwalk_ff_memory_response_D_OUT[14]) &&
	  NOT_ptwalk_rg_levels_18_EQ_0_43_74_OR_ptwalk_f_ETC___d441 &&
	  !ptwalk_ff_memory_response_D_OUT[11] &&
	  (ptwalk_ff_memory_response_D_OUT[13] ||
	   ptwalk_ff_memory_response_D_OUT[15]))
	begin
	  v__h4721 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d451)
	$write("[%10d", v__h4721, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d451)
	$write("PTW : Found Leaf PTE:%h levels: %d",
	       ptwalk_ff_memory_response_D_OUT[75:12],
	       ptwalk_rg_levels);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__61_BIT_12_10__ETC___d451)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkccore_axi4


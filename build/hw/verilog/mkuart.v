//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:36:12 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// PREADY                         O     1 reg
// PRDATA                         O    32 reg
// PSLVERR                        O     1 reg
// io_SOUT                        O     1 reg
// interrupt                      O     1
// RDY_interrupt                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// PADDR                          I    32 reg
// PROT                           I     3 reg
// PENABLE                        I     1
// PWRITE                         I     1 reg
// PWDATA                         I    32 reg
// PSTRB                          I     4 reg
// PSEL                           I     1
// io_SIN                         I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkuart(CLK,
	      RST_N,

	      PADDR,
	      PROT,
	      PENABLE,
	      PWRITE,
	      PWDATA,
	      PSTRB,
	      PSEL,

	      PREADY,

	      PRDATA,

	      PSLVERR,

	      io_SIN,

	      io_SOUT,

	      interrupt,
	      RDY_interrupt);
  input  CLK;
  input  RST_N;

  // action method slave_s_paddr
  input  [31 : 0] PADDR;
  input  [2 : 0] PROT;
  input  PENABLE;
  input  PWRITE;
  input  [31 : 0] PWDATA;
  input  [3 : 0] PSTRB;
  input  PSEL;

  // value method slave_s_pready
  output PREADY;

  // value method slave_s_prdata
  output [31 : 0] PRDATA;

  // value method slave_s_pslverr
  output PSLVERR;

  // value method slave_s_puser

  // action method device_io_sin
  input  io_SIN;

  // value method device_io_sout
  output io_SOUT;

  // value method device_interrupt
  output interrupt;
  output RDY_interrupt;

  // signals for module outputs
  wire [31 : 0] PRDATA;
  wire PREADY, PSLVERR, RDY_interrupt, interrupt, io_SOUT;

  // inlined wires
  wire [71 : 0] uart_s_xactor_wr_request_wget;
  wire [33 : 0] uart_s_xactor_ff_response_rv_port0__write_1,
		uart_s_xactor_ff_response_rv_port1__read,
		uart_s_xactor_ff_response_rv_port1__write_1,
		uart_s_xactor_ff_response_rv_port2__read;
  wire [3 : 0] uart_ifc_uart_err_status_reg_port0__write_1,
	       uart_ifc_uart_err_status_reg_port1__write_1,
	       uart_ifc_uart_err_status_reg_port2__read;
  wire uart_ifc_rg_baud_val_written_whas,
       uart_ifc_rg_control_written_whas,
       uart_ifc_rg_intr_en_written_whas,
       uart_ifc_uart_fifoRecv_r_enq_whas,
       uart_ifc_uart_fifoXmit_r_enq_whas,
       uart_ifc_uart_pwRecvCellCountReset_whas,
       uart_ifc_uart_pwRecvResetBitCount_whas,
       uart_ifc_uart_pwXmitCellCountReset_whas,
       uart_ifc_uart_pwXmitEnableBitCount_whas,
       uart_ifc_uart_pwXmitLoadBuffer_whas;

  // register uart_ifc_dummy
  reg uart_ifc_dummy;
  wire uart_ifc_dummy_D_IN, uart_ifc_dummy_EN;

  // register uart_ifc_rg_baud_val_inner_reg
  reg [15 : 0] uart_ifc_rg_baud_val_inner_reg;
  wire [15 : 0] uart_ifc_rg_baud_val_inner_reg_D_IN;
  wire uart_ifc_rg_baud_val_inner_reg_EN;

  // register uart_ifc_rg_control_inner_reg
  reg [31 : 0] uart_ifc_rg_control_inner_reg;
  wire [31 : 0] uart_ifc_rg_control_inner_reg_D_IN;
  wire uart_ifc_rg_control_inner_reg_EN;

  // register uart_ifc_rg_intr_en_inner_reg
  reg [31 : 0] uart_ifc_rg_intr_en_inner_reg;
  wire [31 : 0] uart_ifc_rg_intr_en_inner_reg_D_IN;
  wire uart_ifc_rg_intr_en_inner_reg_EN;

  // register uart_ifc_uart_err_status_reg
  reg [3 : 0] uart_ifc_uart_err_status_reg;
  wire [3 : 0] uart_ifc_uart_err_status_reg_D_IN;
  wire uart_ifc_uart_err_status_reg_EN;

  // register uart_ifc_uart_fifoRecv_countReg
  reg [4 : 0] uart_ifc_uart_fifoRecv_countReg;
  wire [4 : 0] uart_ifc_uart_fifoRecv_countReg_D_IN;
  wire uart_ifc_uart_fifoRecv_countReg_EN;

  // register uart_ifc_uart_fifoXmit_countReg
  reg [4 : 0] uart_ifc_uart_fifoXmit_countReg;
  wire [4 : 0] uart_ifc_uart_fifoXmit_countReg_D_IN;
  wire uart_ifc_uart_fifoXmit_countReg_EN;

  // register uart_ifc_uart_rRecvBitCount
  reg [3 : 0] uart_ifc_uart_rRecvBitCount;
  wire [3 : 0] uart_ifc_uart_rRecvBitCount_D_IN;
  wire uart_ifc_uart_rRecvBitCount_EN;

  // register uart_ifc_uart_rRecvCellCount
  reg [3 : 0] uart_ifc_uart_rRecvCellCount;
  wire [3 : 0] uart_ifc_uart_rRecvCellCount_D_IN;
  wire uart_ifc_uart_rRecvCellCount_EN;

  // register uart_ifc_uart_rRecvData
  reg uart_ifc_uart_rRecvData;
  wire uart_ifc_uart_rRecvData_D_IN, uart_ifc_uart_rRecvData_EN;

  // register uart_ifc_uart_rRecvParity
  reg uart_ifc_uart_rRecvParity;
  wire uart_ifc_uart_rRecvParity_D_IN, uart_ifc_uart_rRecvParity_EN;

  // register uart_ifc_uart_rRecvState
  reg [2 : 0] uart_ifc_uart_rRecvState;
  reg [2 : 0] uart_ifc_uart_rRecvState_D_IN;
  wire uart_ifc_uart_rRecvState_EN;

  // register uart_ifc_uart_rXmitBitCount
  reg [3 : 0] uart_ifc_uart_rXmitBitCount;
  wire [3 : 0] uart_ifc_uart_rXmitBitCount_D_IN;
  wire uart_ifc_uart_rXmitBitCount_EN;

  // register uart_ifc_uart_rXmitCellCount
  reg [3 : 0] uart_ifc_uart_rXmitCellCount;
  wire [3 : 0] uart_ifc_uart_rXmitCellCount_D_IN;
  wire uart_ifc_uart_rXmitCellCount_EN;

  // register uart_ifc_uart_rXmitDataOut
  reg uart_ifc_uart_rXmitDataOut;
  reg uart_ifc_uart_rXmitDataOut_D_IN;
  wire uart_ifc_uart_rXmitDataOut_EN;

  // register uart_ifc_uart_rXmitParity
  reg uart_ifc_uart_rXmitParity;
  wire uart_ifc_uart_rXmitParity_D_IN, uart_ifc_uart_rXmitParity_EN;

  // register uart_ifc_uart_rXmitState
  reg [2 : 0] uart_ifc_uart_rXmitState;
  reg [2 : 0] uart_ifc_uart_rXmitState_D_IN;
  wire uart_ifc_uart_rXmitState_EN;

  // register uart_ifc_uart_rg_stop_error
  reg uart_ifc_uart_rg_stop_error;
  wire uart_ifc_uart_rg_stop_error_D_IN, uart_ifc_uart_rg_stop_error_EN;

  // register uart_ifc_uart_rx_thld_triggered
  reg uart_ifc_uart_rx_thld_triggered;
  wire uart_ifc_uart_rx_thld_triggered_D_IN,
       uart_ifc_uart_rx_thld_triggered_EN;

  // register uart_ifc_uart_tx_thld_triggered
  reg uart_ifc_uart_tx_thld_triggered;
  wire uart_ifc_uart_tx_thld_triggered_D_IN,
       uart_ifc_uart_tx_thld_triggered_EN;

  // register uart_ifc_uart_vrRecvBuffer
  reg uart_ifc_uart_vrRecvBuffer;
  wire uart_ifc_uart_vrRecvBuffer_D_IN, uart_ifc_uart_vrRecvBuffer_EN;

  // register uart_ifc_uart_vrRecvBuffer_1
  reg uart_ifc_uart_vrRecvBuffer_1;
  wire uart_ifc_uart_vrRecvBuffer_1_D_IN, uart_ifc_uart_vrRecvBuffer_1_EN;

  // register uart_ifc_uart_vrRecvBuffer_2
  reg uart_ifc_uart_vrRecvBuffer_2;
  wire uart_ifc_uart_vrRecvBuffer_2_D_IN, uart_ifc_uart_vrRecvBuffer_2_EN;

  // register uart_ifc_uart_vrRecvBuffer_3
  reg uart_ifc_uart_vrRecvBuffer_3;
  wire uart_ifc_uart_vrRecvBuffer_3_D_IN, uart_ifc_uart_vrRecvBuffer_3_EN;

  // register uart_ifc_uart_vrRecvBuffer_4
  reg uart_ifc_uart_vrRecvBuffer_4;
  wire uart_ifc_uart_vrRecvBuffer_4_D_IN, uart_ifc_uart_vrRecvBuffer_4_EN;

  // register uart_ifc_uart_vrRecvBuffer_5
  reg uart_ifc_uart_vrRecvBuffer_5;
  wire uart_ifc_uart_vrRecvBuffer_5_D_IN, uart_ifc_uart_vrRecvBuffer_5_EN;

  // register uart_ifc_uart_vrRecvBuffer_6
  reg uart_ifc_uart_vrRecvBuffer_6;
  wire uart_ifc_uart_vrRecvBuffer_6_D_IN, uart_ifc_uart_vrRecvBuffer_6_EN;

  // register uart_ifc_uart_vrRecvBuffer_7
  reg uart_ifc_uart_vrRecvBuffer_7;
  wire uart_ifc_uart_vrRecvBuffer_7_D_IN, uart_ifc_uart_vrRecvBuffer_7_EN;

  // register uart_ifc_uart_vrXmitBuffer
  reg uart_ifc_uart_vrXmitBuffer;
  wire uart_ifc_uart_vrXmitBuffer_D_IN, uart_ifc_uart_vrXmitBuffer_EN;

  // register uart_ifc_uart_vrXmitBuffer_1
  reg uart_ifc_uart_vrXmitBuffer_1;
  wire uart_ifc_uart_vrXmitBuffer_1_D_IN, uart_ifc_uart_vrXmitBuffer_1_EN;

  // register uart_ifc_uart_vrXmitBuffer_2
  reg uart_ifc_uart_vrXmitBuffer_2;
  wire uart_ifc_uart_vrXmitBuffer_2_D_IN, uart_ifc_uart_vrXmitBuffer_2_EN;

  // register uart_ifc_uart_vrXmitBuffer_3
  reg uart_ifc_uart_vrXmitBuffer_3;
  wire uart_ifc_uart_vrXmitBuffer_3_D_IN, uart_ifc_uart_vrXmitBuffer_3_EN;

  // register uart_ifc_uart_vrXmitBuffer_4
  reg uart_ifc_uart_vrXmitBuffer_4;
  wire uart_ifc_uart_vrXmitBuffer_4_D_IN, uart_ifc_uart_vrXmitBuffer_4_EN;

  // register uart_ifc_uart_vrXmitBuffer_5
  reg uart_ifc_uart_vrXmitBuffer_5;
  wire uart_ifc_uart_vrXmitBuffer_5_D_IN, uart_ifc_uart_vrXmitBuffer_5_EN;

  // register uart_ifc_uart_vrXmitBuffer_6
  reg uart_ifc_uart_vrXmitBuffer_6;
  wire uart_ifc_uart_vrXmitBuffer_6_D_IN, uart_ifc_uart_vrXmitBuffer_6_EN;

  // register uart_ifc_uart_vrXmitBuffer_7
  reg uart_ifc_uart_vrXmitBuffer_7;
  wire uart_ifc_uart_vrXmitBuffer_7_D_IN, uart_ifc_uart_vrXmitBuffer_7_EN;

  // register uart_ifc_uart_wr_rx_thld_clear
  reg uart_ifc_uart_wr_rx_thld_clear;
  wire uart_ifc_uart_wr_rx_thld_clear_D_IN, uart_ifc_uart_wr_rx_thld_clear_EN;

  // register uart_ifc_uart_wr_tx_thld_clear
  reg uart_ifc_uart_wr_tx_thld_clear;
  wire uart_ifc_uart_wr_tx_thld_clear_D_IN, uart_ifc_uart_wr_tx_thld_clear_EN;

  // register uart_s_xactor_ff_response_rv
  reg [33 : 0] uart_s_xactor_ff_response_rv;
  wire [33 : 0] uart_s_xactor_ff_response_rv_D_IN;
  wire uart_s_xactor_ff_response_rv_EN;

  // register uart_s_xactor_rg_pready
  reg uart_s_xactor_rg_pready;
  wire uart_s_xactor_rg_pready_D_IN, uart_s_xactor_rg_pready_EN;

  // register uart_s_xactor_rg_response
  reg [32 : 0] uart_s_xactor_rg_response;
  wire [32 : 0] uart_s_xactor_rg_response_D_IN;
  wire uart_s_xactor_rg_response_EN;

  // register uart_s_xactor_rg_wait
  reg uart_s_xactor_rg_wait;
  wire uart_s_xactor_rg_wait_D_IN, uart_s_xactor_rg_wait_EN;

  // ports of submodule uart_ifc_uart_baudGen_rBaudCounter
  wire [15 : 0] uart_ifc_uart_baudGen_rBaudCounter_DATA_A,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_B,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_C,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_F,
		uart_ifc_uart_baudGen_rBaudCounter_Q_OUT;
  wire uart_ifc_uart_baudGen_rBaudCounter_ADDA,
       uart_ifc_uart_baudGen_rBaudCounter_ADDB,
       uart_ifc_uart_baudGen_rBaudCounter_SETC,
       uart_ifc_uart_baudGen_rBaudCounter_SETF;

  // ports of submodule uart_ifc_uart_baudGen_rBaudTickCounter
  wire [2 : 0] uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F,
	       uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT;
  wire uart_ifc_uart_baudGen_rBaudTickCounter_ADDA,
       uart_ifc_uart_baudGen_rBaudTickCounter_ADDB,
       uart_ifc_uart_baudGen_rBaudTickCounter_SETC,
       uart_ifc_uart_baudGen_rBaudTickCounter_SETF;

  // ports of submodule uart_ifc_uart_fifoRecv
  wire [7 : 0] uart_ifc_uart_fifoRecv_D_IN, uart_ifc_uart_fifoRecv_D_OUT;
  wire uart_ifc_uart_fifoRecv_CLR,
       uart_ifc_uart_fifoRecv_DEQ,
       uart_ifc_uart_fifoRecv_EMPTY_N,
       uart_ifc_uart_fifoRecv_ENQ,
       uart_ifc_uart_fifoRecv_FULL_N;

  // ports of submodule uart_ifc_uart_fifoXmit
  wire [7 : 0] uart_ifc_uart_fifoXmit_D_IN, uart_ifc_uart_fifoXmit_D_OUT;
  wire uart_ifc_uart_fifoXmit_CLR,
       uart_ifc_uart_fifoXmit_DEQ,
       uart_ifc_uart_fifoXmit_EMPTY_N,
       uart_ifc_uart_fifoXmit_ENQ,
       uart_ifc_uart_fifoXmit_FULL_N;

  // ports of submodule uart_s_xactor_ff_request
  wire [71 : 0] uart_s_xactor_ff_request_D_IN, uart_s_xactor_ff_request_D_OUT;
  wire uart_s_xactor_ff_request_CLR,
       uart_s_xactor_ff_request_DEQ,
       uart_s_xactor_ff_request_EMPTY_N,
       uart_s_xactor_ff_request_ENQ,
       uart_s_xactor_ff_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_uart_ifc_rl_clear_status,
       CAN_FIRE_RL_uart_ifc_rl_connect_status,
       CAN_FIRE_RL_uart_ifc_rl_deq_rx,
       CAN_FIRE_RL_uart_ifc_rl_write_tx,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x,
       CAN_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter,
       CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter,
       CAN_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_uart_ifc_uart_receive_bit_counter,
       CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift,
       CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_sample_pin,
       CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear,
       CAN_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear,
       CAN_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_uart_ifc_uart_transmit_bit_counter,
       CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load,
       CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command,
       CAN_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update,
       CAN_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update,
       CAN_FIRE_RL_uart_rl_pop_apb_req,
       CAN_FIRE_RL_uart_s_xactor_rg_pready__dreg_update,
       CAN_FIRE_RL_uart_s_xactor_rl_capture_request,
       CAN_FIRE_RL_uart_s_xactor_rl_send_response,
       CAN_FIRE_device_io_sin,
       CAN_FIRE_slave_s_paddr,
       WILL_FIRE_RL_uart_ifc_rl_clear_status,
       WILL_FIRE_RL_uart_ifc_rl_connect_status,
       WILL_FIRE_RL_uart_ifc_rl_deq_rx,
       WILL_FIRE_RL_uart_ifc_rl_write_tx,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x,
       WILL_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter,
       WILL_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter,
       WILL_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_uart_ifc_uart_receive_bit_counter,
       WILL_FIRE_RL_uart_ifc_uart_receive_buffer_shift,
       WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin,
       WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear,
       WILL_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear,
       WILL_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_uart_ifc_uart_transmit_bit_counter,
       WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load,
       WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command,
       WILL_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update,
       WILL_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update,
       WILL_FIRE_RL_uart_rl_pop_apb_req,
       WILL_FIRE_RL_uart_s_xactor_rg_pready__dreg_update,
       WILL_FIRE_RL_uart_s_xactor_rl_capture_request,
       WILL_FIRE_RL_uart_s_xactor_rl_send_response,
       WILL_FIRE_device_io_sin,
       WILL_FIRE_slave_s_paddr;

  // inputs to muxes for submodule ports
  wire [2 : 0] MUX_uart_ifc_uart_rRecvState_write_1__VAL_1,
	       MUX_uart_ifc_uart_rRecvState_write_1__VAL_2,
	       MUX_uart_ifc_uart_rRecvState_write_1__VAL_3,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_1,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_2,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_3,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_4,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_5,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_6,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_7;
  wire MUX_uart_ifc_uart_rRecvState_write_1__SEL_5,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2,
       MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d99;
  reg TASK_testplusargs___d100;
  reg TASK_testplusargs___d101;
  reg [63 : 0] v__h9776;
  reg TASK_testplusargs___d324;
  reg TASK_testplusargs___d325;
  reg TASK_testplusargs___d326;
  reg [63 : 0] v__h17898;
  reg TASK_testplusargs___d436;
  reg TASK_testplusargs___d437;
  reg TASK_testplusargs___d438;
  reg [63 : 0] v__h24165;
  reg TASK_testplusargs___d474;
  reg TASK_testplusargs___d475;
  reg TASK_testplusargs___d476;
  reg [63 : 0] v__h25008;
  reg TASK_testplusargs_36_OR_TASK_testplusargs_37_A_ETC___d460;
  reg TASK_testplusargs_36_OR_TASK_testplusargs_37_A_ETC___d467;
  reg TASK_testplusargs_74_OR_TASK_testplusargs_75_A_ETC___d512;
  reg TASK_testplusargs_74_OR_TASK_testplusargs_75_A_ETC___d519;
  reg TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d334;
  reg TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d336;
  reg uart_s_xactor_ff_request_first__30_BIT_36_33_A_ETC___d441;
  reg NOT_uart_s_xactor_ff_request_first__30_BIT_36__ETC___d479;
  // synopsys translate_on

  // remaining internal signals
  wire [32 : 0] IF_uart_s_xactor_ff_request_first__30_BIT_36_3_ETC___d523;
  wire [31 : 0] addr__h18037,
		b__h24371,
		b__h24499,
		b__h24610,
		b__h24690,
		lv2__h25078,
		lv2__h25084,
		lv2__h25100,
		lv2__h25123,
		lv2__h25129,
		resp_prdata__h25069,
		temp_snd__h24505,
		x1_avValue_snd__h24540,
		x1_avValue_snd__h24620,
		x1_avValue_snd__h24826,
		x__h16433,
		x__h25455;
  wire [20 : 0] uart_s_xactor_ff_request_first__30_BITS_27_TO__ETC___d411;
  wire [7 : 0] _i_receive_char__h16323,
	       _t__h18183,
	       bitdata__h9699,
	       origdata__h20355,
	       origdata__h20877,
	       uart_s_xactor_ff_request_first__30_BITS_27_TO__ETC___d398,
	       x0368_OR_y0369__q1,
	       x8591_OR_y0881__q2,
	       x__h18201,
	       x__h18221,
	       x__h18591,
	       x__h18862,
	       x__h20368,
	       x__h20744,
	       y__h18592,
	       y__h18863,
	       y__h20369,
	       y__h20370,
	       y__h20647,
	       y__h20745,
	       y__h20746,
	       y__h20805,
	       y__h20881,
	       y__h20882,
	       y__h20941,
	       y__h21017,
	       y__h21018,
	       y__h21077,
	       y__h23206,
	       y__h23563,
	       y__h23700,
	       y__h23837;
  wire [4 : 0] x__h19911;
  wire [3 : 0] x__h10979,
	       x__h11664,
	       x__h11698,
	       x__h16502,
	       x__h7369,
	       x__h9094,
	       y__h15312,
	       y__h16503,
	       y__h9382,
	       y__h9404;
  wire [2 : 0] IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88;
  wire NOT_0_CONCAT_uart_s_xactor_ff_request_first__3_ETC___d356,
       NOT_uart_s_xactor_ff_request_first__30_BITS_71_ETC___d459,
       _0_CONCAT_uart_s_xactor_ff_request_first__30_BI_ETC___d446,
       _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset,
       _theResult_____1__h9708,
       _theResult_____2__h9707,
       _theResult_____3__h9706,
       _theResult____h9705,
       uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38,
       uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149,
       uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258,
       uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213,
       uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135,
       x__h15728,
       x__h16684,
       z__h11055,
       z__h11062,
       z__h11069,
       z__h11076,
       z__h11083,
       z__h11090,
       z__h11097,
       z__h13195,
       z__h13202,
       z__h13209,
       z__h13216,
       z__h13223,
       z__h13230;

  // action method slave_s_paddr
  assign CAN_FIRE_slave_s_paddr = 1'd1 ;
  assign WILL_FIRE_slave_s_paddr = 1'd1 ;

  // value method slave_s_pready
  assign PREADY = uart_s_xactor_rg_pready ;

  // value method slave_s_prdata
  assign PRDATA = uart_s_xactor_rg_response[32:1] ;

  // value method slave_s_pslverr
  assign PSLVERR = uart_s_xactor_rg_response[0] ;

  // action method device_io_sin
  assign CAN_FIRE_device_io_sin = 1'd1 ;
  assign WILL_FIRE_device_io_sin = 1'd1 ;

  // value method device_io_sout
  assign io_SOUT = uart_ifc_uart_rXmitDataOut ;

  // value method device_interrupt
  assign interrupt = x__h25455 != 32'd0 ;
  assign RDY_interrupt = 1'd1 ;

  // submodule uart_ifc_uart_baudGen_rBaudCounter
  Counter #(.width(32'd16),
	    .init(16'd0)) uart_ifc_uart_baudGen_rBaudCounter(.CLK(CLK),
							     .RST(RST_N),
							     .DATA_A(uart_ifc_uart_baudGen_rBaudCounter_DATA_A),
							     .DATA_B(uart_ifc_uart_baudGen_rBaudCounter_DATA_B),
							     .DATA_C(uart_ifc_uart_baudGen_rBaudCounter_DATA_C),
							     .DATA_F(uart_ifc_uart_baudGen_rBaudCounter_DATA_F),
							     .ADDA(uart_ifc_uart_baudGen_rBaudCounter_ADDA),
							     .ADDB(uart_ifc_uart_baudGen_rBaudCounter_ADDB),
							     .SETC(uart_ifc_uart_baudGen_rBaudCounter_SETC),
							     .SETF(uart_ifc_uart_baudGen_rBaudCounter_SETF),
							     .Q_OUT(uart_ifc_uart_baudGen_rBaudCounter_Q_OUT));

  // submodule uart_ifc_uart_baudGen_rBaudTickCounter
  Counter #(.width(32'd3),
	    .init(3'd0)) uart_ifc_uart_baudGen_rBaudTickCounter(.CLK(CLK),
								.RST(RST_N),
								.DATA_A(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A),
								.DATA_B(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B),
								.DATA_C(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C),
								.DATA_F(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F),
								.ADDA(uart_ifc_uart_baudGen_rBaudTickCounter_ADDA),
								.ADDB(uart_ifc_uart_baudGen_rBaudTickCounter_ADDB),
								.SETC(uart_ifc_uart_baudGen_rBaudTickCounter_SETC),
								.SETF(uart_ifc_uart_baudGen_rBaudTickCounter_SETF),
								.Q_OUT(uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT));

  // submodule uart_ifc_uart_fifoRecv
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_ifc_uart_fifoRecv(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(uart_ifc_uart_fifoRecv_D_IN),
						     .ENQ(uart_ifc_uart_fifoRecv_ENQ),
						     .DEQ(uart_ifc_uart_fifoRecv_DEQ),
						     .CLR(uart_ifc_uart_fifoRecv_CLR),
						     .D_OUT(uart_ifc_uart_fifoRecv_D_OUT),
						     .FULL_N(uart_ifc_uart_fifoRecv_FULL_N),
						     .EMPTY_N(uart_ifc_uart_fifoRecv_EMPTY_N));

  // submodule uart_ifc_uart_fifoXmit
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_ifc_uart_fifoXmit(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(uart_ifc_uart_fifoXmit_D_IN),
						     .ENQ(uart_ifc_uart_fifoXmit_ENQ),
						     .DEQ(uart_ifc_uart_fifoXmit_DEQ),
						     .CLR(uart_ifc_uart_fifoXmit_CLR),
						     .D_OUT(uart_ifc_uart_fifoXmit_D_OUT),
						     .FULL_N(uart_ifc_uart_fifoXmit_FULL_N),
						     .EMPTY_N(uart_ifc_uart_fifoXmit_EMPTY_N));

  // submodule uart_s_xactor_ff_request
  FIFOL1 #(.width(32'd72)) uart_s_xactor_ff_request(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(uart_s_xactor_ff_request_D_IN),
						    .ENQ(uart_s_xactor_ff_request_ENQ),
						    .DEQ(uart_s_xactor_ff_request_DEQ),
						    .CLR(uart_s_xactor_ff_request_CLR),
						    .D_OUT(uart_s_xactor_ff_request_D_OUT),
						    .FULL_N(uart_s_xactor_ff_request_FULL_N),
						    .EMPTY_N(uart_s_xactor_ff_request_EMPTY_N));

  // rule RL_uart_ifc_rl_connect_status
  assign CAN_FIRE_RL_uart_ifc_rl_connect_status = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_rl_connect_status = 1'd1 ;

  // rule RL_uart_ifc_uart_rl_rx_thld_clear
  assign CAN_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear = 1'd1 ;

  // rule RL_uart_ifc_uart_rl_tx_thld_clear
  assign CAN_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear = 1'd1 ;

  // rule RL_uart_ifc_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_uart_ifc_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_uart_ifc_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit =
	     uart_ifc_uart_rRecvState == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ;

  // rule RL_uart_ifc_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell =
	     uart_ifc_uart_rRecvState == 3'd1 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell ;

  // rule RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample =
	     uart_ifc_uart_rRecvState == 3'd2 &&
	     uart_ifc_uart_rRecvCellCount == 4'hF &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_uart_ifc_uart_receive_sample_pin
  assign CAN_FIRE_RL_uart_ifc_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // rule RL_uart_ifc_uart_receive_parity_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit =
	     uart_ifc_uart_rRecvState == 3'd4 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit ;

  // rule RL_uart_ifc_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit =
	     uart_ifc_uart_rRecvState == 3'd5 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ;

  // rule RL_uart_ifc_uart_receive_bit_counter
  assign CAN_FIRE_RL_uart_ifc_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_bit_counter = 1'd1 ;

  // rule RL_uart_ifc_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit =
	     uart_ifc_uart_rRecvState == 3'd6 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ;

  // rule RL_uart_ifc_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_receive_buffer_shift
  assign CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift =
	     uart_ifc_uart_rRecvState == 3'd3 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_buffer_shift =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // rule RL_uart_ifc_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command =
	     uart_ifc_uart_rXmitState == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;

  // rule RL_uart_ifc_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit =
	     uart_ifc_uart_rXmitState == 3'd1 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ;

  // rule RL_uart_ifc_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time =
	     uart_ifc_uart_rXmitState == 3'd2 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_uart_ifc_uart_transmit_bit_counter
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_uart_ifc_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit =
	     uart_ifc_uart_rXmitState == 3'd3 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;

  // rule RL_uart_ifc_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift =
	     !uart_ifc_uart_pwXmitLoadBuffer_whas &&
	     CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // rule RL_uart_ifc_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit =
	     uart_ifc_uart_rXmitState == 3'd7 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit =
	     uart_ifc_uart_rXmitState == 3'd4 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ;

  // rule RL_uart_rl_pop_apb_req
  assign CAN_FIRE_RL_uart_rl_pop_apb_req =
	     uart_s_xactor_ff_request_EMPTY_N &&
	     !uart_s_xactor_ff_response_rv[33] ;
  assign WILL_FIRE_RL_uart_rl_pop_apb_req = CAN_FIRE_RL_uart_rl_pop_apb_req ;

  // rule RL_uart_ifc_rl_write_tx
  assign CAN_FIRE_RL_uart_ifc_rl_write_tx =
	     WILL_FIRE_RL_uart_rl_pop_apb_req &&
	     uart_s_xactor_ff_request_D_OUT[36] &&
	     addr__h18037[31:2] == 30'd1 &&
	     addr__h18037[1:0] == 2'b0 ;
  assign WILL_FIRE_RL_uart_ifc_rl_write_tx =
	     CAN_FIRE_RL_uart_ifc_rl_write_tx ;

  // rule RL_uart_ifc_rl_clear_status
  assign CAN_FIRE_RL_uart_ifc_rl_clear_status =
	     WILL_FIRE_RL_uart_rl_pop_apb_req &&
	     uart_s_xactor_ff_request_D_OUT[36] &&
	     addr__h18037[31:2] == 30'd5 &&
	     addr__h18037[1:0] == 2'b0 ;
  assign WILL_FIRE_RL_uart_ifc_rl_clear_status =
	     CAN_FIRE_RL_uart_ifc_rl_clear_status ;

  // rule RL_uart_ifc_rl_deq_rx
  assign CAN_FIRE_RL_uart_ifc_rl_deq_rx =
	     WILL_FIRE_RL_uart_rl_pop_apb_req &&
	     !uart_s_xactor_ff_request_D_OUT[36] &&
	     addr__h18037[31:2] == 30'd2 &&
	     addr__h18037[1:0] == 2'b0 ;
  assign WILL_FIRE_RL_uart_ifc_rl_deq_rx = CAN_FIRE_RL_uart_ifc_rl_deq_rx ;

  // rule RL_uart_ifc_uart_transmit_buffer_load
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load =
	     uart_ifc_uart_fifoXmit_EMPTY_N &&
	     uart_ifc_uart_pwXmitLoadBuffer_whas ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 =
	     uart_ifc_uart_rXmitState == 3'd5 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 =
	     uart_ifc_uart_rXmitState == 3'd6 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ;

  // rule RL_uart_ifc_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_baudGen_baud_tick_count_wire
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire = 1'd1 ;

  // rule RL_uart_ifc_uart_baudGen_assert_2x_baud_tick
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick =
	     uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick ;

  // rule RL_uart_ifc_uart_baudGen_count_baudtick_16x
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x =
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_fifoRecv__updateLevelCounter
  assign CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter =
	     uart_ifc_uart_fifoRecv_r_enq_whas !=
	     CAN_FIRE_RL_uart_ifc_rl_deq_rx ;
  assign WILL_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter ;

  // rule RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update
  assign CAN_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update = 1'd1 ;

  // rule RL_uart_ifc_uart_fifoXmit__updateLevelCounter
  assign CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter =
	     uart_ifc_uart_fifoXmit_r_enq_whas !=
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;
  assign WILL_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter ;

  // rule RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update
  assign CAN_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update = 1'd1 ;

  // rule RL_uart_s_xactor_rl_capture_request
  assign CAN_FIRE_RL_uart_s_xactor_rl_capture_request =
	     uart_s_xactor_ff_request_FULL_N && !uart_s_xactor_rg_wait &&
	     PSEL &&
	     !PENABLE &&
	     uart_s_xactor_ff_request_FULL_N ;
  assign WILL_FIRE_RL_uart_s_xactor_rl_capture_request =
	     CAN_FIRE_RL_uart_s_xactor_rl_capture_request ;

  // rule RL_uart_s_xactor_rl_send_response
  assign CAN_FIRE_RL_uart_s_xactor_rl_send_response =
	     uart_s_xactor_ff_response_rv_port1__read[33] &&
	     uart_s_xactor_rg_wait &&
	     PSEL &&
	     PENABLE ;
  assign WILL_FIRE_RL_uart_s_xactor_rl_send_response =
	     CAN_FIRE_RL_uart_s_xactor_rl_send_response ;

  // rule RL_uart_s_xactor_rg_pready__dreg_update
  assign CAN_FIRE_RL_uart_s_xactor_rg_pready__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_s_xactor_rg_pready__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_uart_ifc_uart_rRecvState_write_1__SEL_5 =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4 =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;
  assign MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit &&
	     !uart_ifc_uart_rRecvData ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_1 =
	     uart_ifc_uart_rRecvData ? 3'd0 : 3'd1 ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_2 =
	     (uart_ifc_uart_rRecvCellCount == 4'h4) ?
	       (uart_ifc_uart_rRecvData ? 3'd0 : 3'd2) :
	       3'd1 ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_3 =
	     (uart_ifc_uart_rRecvBitCount ==
	      uart_ifc_rg_control_inner_reg[7:4]) ?
	       ((uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ?
		  ((uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
		     3'd6 :
		     3'd5) :
		  3'd4) :
	       IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88 ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2 =
	     (uart_ifc_rg_control_inner_reg[3:2] == 2'd1) ?
	       uart_ifc_uart_rXmitParity :
	       uart_ifc_rg_control_inner_reg[3:2] == 2'd2 && x__h15728 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_1 =
	     uart_ifc_uart_fifoXmit_EMPTY_N ? 3'd1 : 3'd0 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_2 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd2 : 3'd1 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_3 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ?
	       ((uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 &&
		 uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ?
		  3'd4 :
		  ((uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 &&
		    uart_ifc_rg_control_inner_reg[3:2] != 2'd0) ?
		     3'd7 :
		     3'd3)) :
	       3'd2 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_4 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd4 : 3'd7 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_5 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF &&
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
	       3'd0 :
	       ((uart_ifc_uart_rXmitCellCount == 4'hF &&
		 uart_ifc_rg_control_inner_reg[1:0] == 2'd2) ?
		  3'd6 :
		  ((uart_ifc_uart_rXmitCellCount == 4'hF &&
		    uart_ifc_rg_control_inner_reg[1:0] == 2'd1) ?
		     3'd5 :
		     3'd4)) ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_6 =
	     (uart_ifc_uart_rXmitCellCount == 4'h7) ? 3'd0 : 3'd5 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_7 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd6 ;

  // inlined wires
  assign uart_ifc_rg_baud_val_written_whas =
	     WILL_FIRE_RL_uart_rl_pop_apb_req &&
	     uart_s_xactor_ff_request_D_OUT[36] &&
	     addr__h18037[31:2] == 30'd0 &&
	     NOT_0_CONCAT_uart_s_xactor_ff_request_first__3_ETC___d356 ;
  assign uart_ifc_rg_control_written_whas =
	     WILL_FIRE_RL_uart_rl_pop_apb_req &&
	     uart_s_xactor_ff_request_D_OUT[36] &&
	     addr__h18037[31:2] == 30'd4 &&
	     addr__h18037[1:0] == 2'b0 ;
  assign uart_ifc_rg_intr_en_written_whas =
	     WILL_FIRE_RL_uart_rl_pop_apb_req &&
	     uart_s_xactor_ff_request_D_OUT[36] &&
	     addr__h18037[31:2] == 30'd6 &&
	     addr__h18037[1:0] == 2'b0 ;
  assign uart_ifc_uart_fifoRecv_r_enq_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	     uart_ifc_uart_rRecvData &&
	     !uart_ifc_uart_rg_stop_error ;
  assign uart_ifc_uart_pwRecvCellCountReset_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell &&
	     uart_ifc_uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ;
  assign uart_ifc_uart_pwRecvResetBitCount_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit &&
	     uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_fifoXmit_r_enq_whas =
	     WILL_FIRE_RL_uart_ifc_rl_write_tx &&
	     uart_ifc_uart_fifoXmit_FULL_N ;
  assign uart_ifc_uart_pwXmitCellCountReset_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command &&
	     uart_ifc_uart_fifoXmit_EMPTY_N ||
	     _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 &&
	     uart_ifc_uart_rXmitCellCount == 4'h7 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit &&
	     uart_ifc_uart_rXmitCellCount == 4'hF &&
	     (uart_ifc_rg_control_inner_reg[1:0] == 2'd0 ||
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd2 ||
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd1) ;
  assign uart_ifc_uart_pwXmitEnableBitCount_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time &&
	     uart_ifc_uart_rXmitCellCount == 4'hF &&
	     (!uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 ||
	      uart_ifc_rg_control_inner_reg[3:2] != 2'd0) &&
	     (!uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 ||
	      uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ;
  assign uart_ifc_uart_pwXmitLoadBuffer_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command &&
	     uart_ifc_uart_fifoXmit_EMPTY_N ;
  assign uart_s_xactor_wr_request_wget =
	     { PADDR, PROT, PWRITE, PWDATA, PSTRB } ;
  assign uart_ifc_uart_err_status_reg_port0__write_1 =
	     { _theResult_____2__h9707,
	       _theResult_____1__h9708,
	       _theResult_____3__h9706,
	       _theResult____h9705 } ;
  assign uart_ifc_uart_err_status_reg_port1__write_1 = x__h16502 & y__h16503 ;
  assign uart_ifc_uart_err_status_reg_port2__read =
	     CAN_FIRE_RL_uart_ifc_rl_clear_status ?
	       uart_ifc_uart_err_status_reg_port1__write_1 :
	       x__h16502 ;
  assign uart_s_xactor_ff_response_rv_port0__write_1 =
	     { 1'd1,
	       IF_uart_s_xactor_ff_request_first__30_BIT_36_3_ETC___d523 } ;
  assign uart_s_xactor_ff_response_rv_port1__read =
	     CAN_FIRE_RL_uart_rl_pop_apb_req ?
	       uart_s_xactor_ff_response_rv_port0__write_1 :
	       uart_s_xactor_ff_response_rv ;
  assign uart_s_xactor_ff_response_rv_port1__write_1 =
	     { 1'd0,
	       33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign uart_s_xactor_ff_response_rv_port2__read =
	     CAN_FIRE_RL_uart_s_xactor_rl_send_response ?
	       uart_s_xactor_ff_response_rv_port1__write_1 :
	       uart_s_xactor_ff_response_rv_port1__read ;

  // register uart_ifc_dummy
  assign uart_ifc_dummy_D_IN = !uart_ifc_dummy ;
  assign uart_ifc_dummy_EN =
	     WILL_FIRE_RL_uart_rl_pop_apb_req &&
	     !uart_s_xactor_ff_request_D_OUT[36] ;

  // register uart_ifc_rg_baud_val_inner_reg
  assign uart_ifc_rg_baud_val_inner_reg_D_IN =
	     { x__h18591 | y__h18592, x__h18862 | y__h18863 } ;
  assign uart_ifc_rg_baud_val_inner_reg_EN =
	     uart_ifc_rg_baud_val_written_whas ;

  // register uart_ifc_rg_control_inner_reg
  assign uart_ifc_rg_control_inner_reg_D_IN =
	     { 6'd0,
	       x__h19911,
	       uart_s_xactor_ff_request_first__30_BITS_27_TO__ETC___d411 } ;
  assign uart_ifc_rg_control_inner_reg_EN = uart_ifc_rg_control_written_whas ;

  // register uart_ifc_rg_intr_en_inner_reg
  assign uart_ifc_rg_intr_en_inner_reg_D_IN =
	     { x__h20368 | y__h23206,
	       x__h20744 | y__h23563,
	       x__h18591 | y__h23700,
	       x__h18862 | y__h23837 } ;
  assign uart_ifc_rg_intr_en_inner_reg_EN = uart_ifc_rg_intr_en_written_whas ;

  // register uart_ifc_uart_err_status_reg
  assign uart_ifc_uart_err_status_reg_D_IN =
	     uart_ifc_uart_err_status_reg_port2__read ;
  assign uart_ifc_uart_err_status_reg_EN = 1'b1 ;

  // register uart_ifc_uart_fifoRecv_countReg
  assign uart_ifc_uart_fifoRecv_countReg_D_IN =
	     uart_ifc_uart_fifoRecv_r_enq_whas ?
	       uart_ifc_uart_fifoRecv_countReg + 5'd1 :
	       uart_ifc_uart_fifoRecv_countReg - 5'd1 ;
  assign uart_ifc_uart_fifoRecv_countReg_EN =
	     CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter ;

  // register uart_ifc_uart_fifoXmit_countReg
  assign uart_ifc_uart_fifoXmit_countReg_D_IN =
	     uart_ifc_uart_fifoXmit_r_enq_whas ?
	       uart_ifc_uart_fifoXmit_countReg + 5'd1 :
	       uart_ifc_uart_fifoXmit_countReg - 5'd1 ;
  assign uart_ifc_uart_fifoXmit_countReg_EN =
	     CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter ;

  // register uart_ifc_uart_rRecvBitCount
  assign uart_ifc_uart_rRecvBitCount_D_IN =
	     uart_ifc_uart_pwRecvResetBitCount_whas ? 4'd0 : x__h9094 ;
  assign uart_ifc_uart_rRecvBitCount_EN =
	     uart_ifc_uart_pwRecvResetBitCount_whas ||
	     MUX_uart_ifc_uart_rRecvState_write_1__SEL_5 ;

  // register uart_ifc_uart_rRecvCellCount
  assign uart_ifc_uart_rRecvCellCount_D_IN =
	     uart_ifc_uart_pwRecvCellCountReset_whas ? 4'd0 : x__h7369 ;
  assign uart_ifc_uart_rRecvCellCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // register uart_ifc_uart_rRecvData
  assign uart_ifc_uart_rRecvData_D_IN = io_SIN ;
  assign uart_ifc_uart_rRecvData_EN = 1'd1 ;

  // register uart_ifc_uart_rRecvParity
  assign uart_ifc_uart_rRecvParity_D_IN = uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_rRecvParity_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit ;

  // register uart_ifc_uart_rRecvState
  always@(WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit or
	  MUX_uart_ifc_uart_rRecvState_write_1__SEL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_1;
      WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_3;
      WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit:
	  uart_ifc_uart_rRecvState_D_IN = 3'd0;
      MUX_uart_ifc_uart_rRecvState_write_1__SEL_5:
	  uart_ifc_uart_rRecvState_D_IN = 3'd2;
      default: uart_ifc_uart_rRecvState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rRecvState_EN =
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ;

  // register uart_ifc_uart_rXmitBitCount
  assign uart_ifc_uart_rXmitBitCount_D_IN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ?
	       4'd0 :
	       x__h11698 ;
  assign uart_ifc_uart_rXmitBitCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ||
	     uart_ifc_uart_pwXmitEnableBitCount_whas ;

  // register uart_ifc_uart_rXmitCellCount
  assign uart_ifc_uart_rXmitCellCount_D_IN =
	     uart_ifc_uart_pwXmitCellCountReset_whas ? 4'd0 : x__h11664 ;
  assign uart_ifc_uart_rXmitCellCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // register uart_ifc_uart_rXmitDataOut
  always@(MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1 or
	  uart_ifc_uart_vrXmitBuffer or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit or
	  MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit or
	  MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1:
	  uart_ifc_uart_rXmitDataOut_D_IN = uart_ifc_uart_vrXmitBuffer;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit:
	  uart_ifc_uart_rXmitDataOut_D_IN =
	      MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit:
	  uart_ifc_uart_rXmitDataOut_D_IN = 1'b0;
      MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4:
	  uart_ifc_uart_rXmitDataOut_D_IN = 1'b1;
      default: uart_ifc_uart_rXmitDataOut_D_IN =
		   1'bx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rXmitDataOut_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;

  // register uart_ifc_uart_rXmitParity
  assign uart_ifc_uart_rXmitParity_D_IN =
	     z__h13230 ^ uart_ifc_uart_fifoXmit_D_OUT[7] ;
  assign uart_ifc_uart_rXmitParity_EN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;

  // register uart_ifc_uart_rXmitState
  always@(WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_5 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_6 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_7 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_1;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_3;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_4;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_5;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_6;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_7;
      WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit:
	  uart_ifc_uart_rXmitState_D_IN = 3'd2;
      default: uart_ifc_uart_rXmitState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rXmitState_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;

  // register uart_ifc_uart_rg_stop_error
  assign uart_ifc_uart_rg_stop_error_D_IN =
	     MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1 ;
  assign uart_ifc_uart_rg_stop_error_EN =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit &&
	     !uart_ifc_uart_rRecvData ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ;

  // register uart_ifc_uart_rx_thld_triggered
  assign uart_ifc_uart_rx_thld_triggered_D_IN =
	     (!uart_ifc_rg_control_inner_reg[11] ||
	      uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	      !uart_ifc_rg_control_inner_reg[13] ||
	      !uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	      uart_ifc_rg_control_inner_reg[13]) &&
	     !uart_ifc_uart_wr_rx_thld_clear ;
  assign uart_ifc_uart_rx_thld_triggered_EN =
	     uart_ifc_rg_control_inner_reg[11] ||
	     uart_ifc_uart_wr_rx_thld_clear ||
	     uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	     !uart_ifc_rg_control_inner_reg[13] ||
	     !uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	     uart_ifc_rg_control_inner_reg[13] ;

  // register uart_ifc_uart_tx_thld_triggered
  assign uart_ifc_uart_tx_thld_triggered_D_IN =
	     (!uart_ifc_rg_control_inner_reg[10] ||
	      uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	      !uart_ifc_rg_control_inner_reg[12] ||
	      !uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	      uart_ifc_rg_control_inner_reg[12]) &&
	     !uart_ifc_uart_wr_tx_thld_clear ;
  assign uart_ifc_uart_tx_thld_triggered_EN =
	     uart_ifc_rg_control_inner_reg[10] ||
	     uart_ifc_uart_wr_tx_thld_clear ||
	     uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	     !uart_ifc_rg_control_inner_reg[12] ||
	     !uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	     uart_ifc_rg_control_inner_reg[12] ;

  // register uart_ifc_uart_vrRecvBuffer
  assign uart_ifc_uart_vrRecvBuffer_D_IN = uart_ifc_uart_vrRecvBuffer_1 ;
  assign uart_ifc_uart_vrRecvBuffer_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_1
  assign uart_ifc_uart_vrRecvBuffer_1_D_IN = uart_ifc_uart_vrRecvBuffer_2 ;
  assign uart_ifc_uart_vrRecvBuffer_1_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_2
  assign uart_ifc_uart_vrRecvBuffer_2_D_IN = uart_ifc_uart_vrRecvBuffer_3 ;
  assign uart_ifc_uart_vrRecvBuffer_2_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_3
  assign uart_ifc_uart_vrRecvBuffer_3_D_IN = uart_ifc_uart_vrRecvBuffer_4 ;
  assign uart_ifc_uart_vrRecvBuffer_3_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_4
  assign uart_ifc_uart_vrRecvBuffer_4_D_IN = uart_ifc_uart_vrRecvBuffer_5 ;
  assign uart_ifc_uart_vrRecvBuffer_4_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_5
  assign uart_ifc_uart_vrRecvBuffer_5_D_IN = uart_ifc_uart_vrRecvBuffer_6 ;
  assign uart_ifc_uart_vrRecvBuffer_5_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_6
  assign uart_ifc_uart_vrRecvBuffer_6_D_IN = uart_ifc_uart_vrRecvBuffer_7 ;
  assign uart_ifc_uart_vrRecvBuffer_6_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_7
  assign uart_ifc_uart_vrRecvBuffer_7_D_IN = uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_vrRecvBuffer_7_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer
  assign uart_ifc_uart_vrXmitBuffer_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[0] :
	       uart_ifc_uart_vrXmitBuffer_1 ;
  assign uart_ifc_uart_vrXmitBuffer_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_1
  assign uart_ifc_uart_vrXmitBuffer_1_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[1] :
	       uart_ifc_uart_vrXmitBuffer_2 ;
  assign uart_ifc_uart_vrXmitBuffer_1_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_2
  assign uart_ifc_uart_vrXmitBuffer_2_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[2] :
	       uart_ifc_uart_vrXmitBuffer_3 ;
  assign uart_ifc_uart_vrXmitBuffer_2_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_3
  assign uart_ifc_uart_vrXmitBuffer_3_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[3] :
	       uart_ifc_uart_vrXmitBuffer_4 ;
  assign uart_ifc_uart_vrXmitBuffer_3_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_4
  assign uart_ifc_uart_vrXmitBuffer_4_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[4] :
	       uart_ifc_uart_vrXmitBuffer_5 ;
  assign uart_ifc_uart_vrXmitBuffer_4_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_5
  assign uart_ifc_uart_vrXmitBuffer_5_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[5] :
	       uart_ifc_uart_vrXmitBuffer_6 ;
  assign uart_ifc_uart_vrXmitBuffer_5_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_6
  assign uart_ifc_uart_vrXmitBuffer_6_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[6] :
	       uart_ifc_uart_vrXmitBuffer_7 ;
  assign uart_ifc_uart_vrXmitBuffer_6_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_7
  assign uart_ifc_uart_vrXmitBuffer_7_D_IN =
	     !WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     uart_ifc_uart_fifoXmit_D_OUT[7] ;
  assign uart_ifc_uart_vrXmitBuffer_7_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_wr_rx_thld_clear
  assign uart_ifc_uart_wr_rx_thld_clear_D_IN =
	     CAN_FIRE_RL_uart_ifc_rl_clear_status && x__h16433[5] ;
  assign uart_ifc_uart_wr_rx_thld_clear_EN = 1'd1 ;

  // register uart_ifc_uart_wr_tx_thld_clear
  assign uart_ifc_uart_wr_tx_thld_clear_D_IN =
	     CAN_FIRE_RL_uart_ifc_rl_clear_status && x__h16433[4] ;
  assign uart_ifc_uart_wr_tx_thld_clear_EN = 1'd1 ;

  // register uart_s_xactor_ff_response_rv
  assign uart_s_xactor_ff_response_rv_D_IN =
	     uart_s_xactor_ff_response_rv_port2__read ;
  assign uart_s_xactor_ff_response_rv_EN = 1'b1 ;

  // register uart_s_xactor_rg_pready
  assign uart_s_xactor_rg_pready_D_IN =
	     CAN_FIRE_RL_uart_s_xactor_rl_send_response ;
  assign uart_s_xactor_rg_pready_EN = 1'd1 ;

  // register uart_s_xactor_rg_response
  assign uart_s_xactor_rg_response_D_IN =
	     uart_s_xactor_ff_response_rv_port1__read[32:0] ;
  assign uart_s_xactor_rg_response_EN =
	     CAN_FIRE_RL_uart_s_xactor_rl_send_response ;

  // register uart_s_xactor_rg_wait
  assign uart_s_xactor_rg_wait_D_IN =
	     !WILL_FIRE_RL_uart_s_xactor_rl_send_response ;
  assign uart_s_xactor_rg_wait_EN =
	     WILL_FIRE_RL_uart_s_xactor_rl_send_response ||
	     WILL_FIRE_RL_uart_s_xactor_rl_capture_request ;

  // submodule uart_ifc_uart_baudGen_rBaudCounter
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_A = 16'd1 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_B = 16'h0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_C = 16'h0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_F = 16'd0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_ADDA =
	     uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_ADDB = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_SETC = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_SETF =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // submodule uart_ifc_uart_baudGen_rBaudTickCounter
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A = 3'd1 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_ADDA =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_ADDB = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_SETC = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_SETF = 1'b0 ;

  // submodule uart_ifc_uart_fifoRecv
  assign uart_ifc_uart_fifoRecv_D_IN = bitdata__h9699 ;
  assign uart_ifc_uart_fifoRecv_ENQ = uart_ifc_uart_fifoRecv_r_enq_whas ;
  assign uart_ifc_uart_fifoRecv_DEQ = CAN_FIRE_RL_uart_ifc_rl_deq_rx ;
  assign uart_ifc_uart_fifoRecv_CLR = 1'b0 ;

  // submodule uart_ifc_uart_fifoXmit
  assign uart_ifc_uart_fifoXmit_D_IN = x__h18862 ;
  assign uart_ifc_uart_fifoXmit_ENQ = uart_ifc_uart_fifoXmit_r_enq_whas ;
  assign uart_ifc_uart_fifoXmit_DEQ =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;
  assign uart_ifc_uart_fifoXmit_CLR = 1'b0 ;

  // submodule uart_s_xactor_ff_request
  assign uart_s_xactor_ff_request_D_IN = uart_s_xactor_wr_request_wget ;
  assign uart_s_xactor_ff_request_ENQ =
	     CAN_FIRE_RL_uart_s_xactor_rl_capture_request ;
  assign uart_s_xactor_ff_request_DEQ = CAN_FIRE_RL_uart_rl_pop_apb_req ;
  assign uart_s_xactor_ff_request_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88 =
	     (uart_ifc_uart_rRecvBitCount == y__h9382) ?
	       ((uart_ifc_rg_control_inner_reg[3:2] == 2'd0 ||
		 uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
		  3'd6 :
		  3'd5) :
	       ((uart_ifc_uart_rRecvBitCount == y__h9404) ? 3'd6 : 3'd3) ;
  assign IF_uart_s_xactor_ff_request_first__30_BIT_36_3_ETC___d523 =
	     uart_s_xactor_ff_request_D_OUT[36] ?
	       { 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 NOT_uart_s_xactor_ff_request_first__30_BITS_71_ETC___d459 } :
	       { resp_prdata__h25069,
		 (addr__h18037[31:2] != 30'd0 || addr__h18037[1:0] != 2'b0) &&
		 (addr__h18037[31:2] != 30'd2 || addr__h18037[1:0] != 2'b0) &&
		 (addr__h18037[31:2] != 30'd3 || addr__h18037[1:0] != 2'b0) &&
		 (addr__h18037[31:2] != 30'd4 || addr__h18037[1:0] != 2'b0) &&
		 (addr__h18037[31:2] != 30'd6 ||
		  addr__h18037[1:0] != 2'b0) } ;
  assign NOT_0_CONCAT_uart_s_xactor_ff_request_first__3_ETC___d356 =
	     ((x__h18201 & _t__h18183) != 8'd0 ||
	      (x__h18221 & _t__h18183) != 8'd0) &&
	     addr__h18037[1:0] == 2'b0 ;
  assign NOT_uart_s_xactor_ff_request_first__30_BITS_71_ETC___d459 =
	     (addr__h18037[31:2] != 30'd0 ||
	      _0_CONCAT_uart_s_xactor_ff_request_first__30_BI_ETC___d446) &&
	     (addr__h18037[31:2] != 30'd1 || addr__h18037[1:0] != 2'b0) &&
	     (addr__h18037[31:2] != 30'd4 || addr__h18037[1:0] != 2'b0) &&
	     (addr__h18037[31:2] != 30'd5 || addr__h18037[1:0] != 2'b0) &&
	     (addr__h18037[31:2] != 30'd6 || addr__h18037[1:0] != 2'b0) ;
  assign _0_CONCAT_uart_s_xactor_ff_request_first__30_BI_ETC___d446 =
	     (x__h18201 & _t__h18183) == 8'd0 &&
	     (x__h18221 & _t__h18183) == 8'd0 ||
	     addr__h18037[1:0] != 2'b0 ;
  assign _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset =
	     (WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit) &&
	     uart_ifc_uart_rXmitCellCount == 4'hF ;
  assign _i_receive_char__h16323 =
	     uart_ifc_uart_fifoRecv_EMPTY_N ?
	       uart_ifc_uart_fifoRecv_D_OUT :
	       8'd0 ;
  assign _t__h18183 = { 4'd0, uart_s_xactor_ff_request_D_OUT[3:0] } ;
  assign _theResult_____1__h9708 =
	     !uart_ifc_uart_rRecvData || uart_ifc_uart_rg_stop_error ;
  assign _theResult_____2__h9707 =
	     bitdata__h9699 == 8'd0 && !uart_ifc_uart_rRecvData ;
  assign _theResult_____3__h9706 = !uart_ifc_uart_fifoRecv_FULL_N ;
  assign _theResult____h9705 =
	     uart_ifc_rg_control_inner_reg[3:2] == 2'd1 &&
	     !uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 ||
	     uart_ifc_rg_control_inner_reg[3:2] == 2'd2 &&
	     uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 ;
  assign addr__h18037 = uart_s_xactor_ff_request_D_OUT[71:40] - 32'h00011300 ;
  assign b__h24371 = { 16'd0, uart_ifc_rg_baud_val_inner_reg } ;
  assign b__h24499 =
	     { 24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       _i_receive_char__h16323 } ;
  assign b__h24610 =
	     { 20'd0,
	       uart_ifc_uart_err_status_reg,
	       2'd0,
	       uart_ifc_uart_rx_thld_triggered,
	       uart_ifc_uart_tx_thld_triggered,
	       uart_ifc_uart_fifoRecv_EMPTY_N,
	       uart_ifc_uart_fifoRecv_FULL_N,
	       uart_ifc_uart_fifoXmit_FULL_N,
	       x__h16684 } ;
  assign b__h24690 =
	     { 6'd0,
	       uart_ifc_rg_control_inner_reg[25:16],
	       2'd0,
	       uart_ifc_rg_control_inner_reg[13:10],
	       2'd0,
	       uart_ifc_rg_control_inner_reg[7:0] } ;
  assign bitdata__h9699 =
	     { uart_ifc_uart_vrRecvBuffer_7,
	       uart_ifc_uart_vrRecvBuffer_6,
	       uart_ifc_uart_vrRecvBuffer_5,
	       uart_ifc_uart_vrRecvBuffer_4,
	       uart_ifc_uart_vrRecvBuffer_3,
	       uart_ifc_uart_vrRecvBuffer_2,
	       uart_ifc_uart_vrRecvBuffer_1,
	       uart_ifc_uart_vrRecvBuffer } >>
	     x__h10979 ;
  assign lv2__h25078 = lv2__h25084 | lv2__h25100 ;
  assign lv2__h25084 =
	     (addr__h18037[31:2] == 30'd0) ?
	       ((addr__h18037[1:0] == 2'b0) ? b__h24371 : 32'd0) :
	       32'd0 ;
  assign lv2__h25100 = x1_avValue_snd__h24540 | x1_avValue_snd__h24620 ;
  assign lv2__h25123 = lv2__h25129 | x1_avValue_snd__h24826 ;
  assign lv2__h25129 =
	     (addr__h18037[31:2] == 30'd4) ?
	       ((addr__h18037[1:0] == 2'b0) ? b__h24690 : 32'd0) :
	       32'd0 ;
  assign origdata__h20355 = { 6'd0, uart_ifc_rg_control_inner_reg[25:24] } ;
  assign origdata__h20877 =
	     { 2'd0, uart_ifc_rg_control_inner_reg[13:10], 2'd0 } ;
  assign resp_prdata__h25069 = lv2__h25078 | lv2__h25123 ;
  assign temp_snd__h24505 = (addr__h18037[1:0] == 2'b0) ? b__h24499 : 32'd0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 =
	     uart_ifc_uart_baudGen_rBaudCounter_Q_OUT + 16'd1 <
	     uart_ifc_rg_baud_val_inner_reg ;
  assign uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 =
	     uart_ifc_uart_fifoRecv_countReg <=
	     uart_ifc_rg_control_inner_reg[25:21] ;
  assign uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 =
	     uart_ifc_uart_fifoXmit_countReg <=
	     uart_ifc_rg_control_inner_reg[20:16] ;
  assign uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 =
	     uart_ifc_uart_rXmitBitCount == y__h15312 ;
  assign uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 =
	     z__h11097 ^ uart_ifc_uart_rRecvParity ;
  assign uart_s_xactor_ff_request_first__30_BITS_27_TO__ETC___d398 =
	     x__h20744 | y__h20745 ;
  assign uart_s_xactor_ff_request_first__30_BITS_27_TO__ETC___d411 =
	     { uart_s_xactor_ff_request_first__30_BITS_27_TO__ETC___d398[4:0],
	       2'd0,
	       x8591_OR_y0881__q2[5:2],
	       2'd0,
	       x__h18862 | y__h21017 } ;
  assign x0368_OR_y0369__q1 = x__h20368 | y__h20369 ;
  assign x1_avValue_snd__h24540 =
	     (addr__h18037[31:2] == 30'd2) ? temp_snd__h24505 : 32'd0 ;
  assign x1_avValue_snd__h24620 =
	     (addr__h18037[31:2] == 30'd3) ?
	       ((addr__h18037[1:0] == 2'b0) ? b__h24610 : 32'd0) :
	       32'd0 ;
  assign x1_avValue_snd__h24826 =
	     (addr__h18037[31:2] == 30'd6) ?
	       ((addr__h18037[1:0] == 2'b0) ?
		  uart_ifc_rg_intr_en_inner_reg :
		  32'd0) :
	       32'd0 ;
  assign x8591_OR_y0881__q2 = x__h18591 | y__h20881 ;
  assign x__h10979 = 4'd8 - uart_ifc_rg_control_inner_reg[7:4] ;
  assign x__h11664 = uart_ifc_uart_rXmitCellCount + 4'd1 ;
  assign x__h11698 = uart_ifc_uart_rXmitBitCount + 4'd1 ;
  assign x__h15728 = ~uart_ifc_uart_rXmitParity ;
  assign x__h16433 = { x__h20368, x__h20744, x__h18591, x__h18862 } ;
  assign x__h16502 =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ?
	       uart_ifc_uart_err_status_reg_port0__write_1 :
	       uart_ifc_uart_err_status_reg ;
  assign x__h16684 =
	     !uart_ifc_uart_fifoXmit_EMPTY_N &&
	     uart_ifc_uart_rXmitState == 3'd0 ;
  assign x__h18201 = { 7'd0, uart_s_xactor_ff_request_D_OUT[3] } ;
  assign x__h18221 = { 5'd0, uart_s_xactor_ff_request_D_OUT[3:1] } ;
  assign x__h18591 = uart_s_xactor_ff_request_D_OUT[19:12] & y__h20882 ;
  assign x__h18862 = uart_s_xactor_ff_request_D_OUT[11:4] & y__h21018 ;
  assign x__h19911 =
	     { x0368_OR_y0369__q1[1:0],
	       uart_s_xactor_ff_request_first__30_BITS_27_TO__ETC___d398[7:5] } ;
  assign x__h20368 = uart_s_xactor_ff_request_D_OUT[35:28] & y__h20370 ;
  assign x__h20744 = uart_s_xactor_ff_request_D_OUT[27:20] & y__h20746 ;
  assign x__h25455 = b__h24610 & uart_ifc_rg_intr_en_inner_reg ;
  assign x__h7369 = uart_ifc_uart_rRecvCellCount + 4'd1 ;
  assign x__h9094 = uart_ifc_uart_rRecvBitCount + 4'd1 ;
  assign y__h15312 = uart_ifc_rg_control_inner_reg[7:4] - 4'd1 ;
  assign y__h16503 = ~x__h16433[3:0] ;
  assign y__h18592 = uart_ifc_rg_baud_val_inner_reg[15:8] & y__h20941 ;
  assign y__h18863 = uart_ifc_rg_baud_val_inner_reg[7:0] & y__h21077 ;
  assign y__h20369 = origdata__h20355 & y__h20647 ;
  assign y__h20370 = {8{uart_s_xactor_ff_request_D_OUT[3]}} ;
  assign y__h20647 = ~y__h20370 ;
  assign y__h20745 = uart_ifc_rg_control_inner_reg[23:16] & y__h20805 ;
  assign y__h20746 = {8{uart_s_xactor_ff_request_D_OUT[2]}} ;
  assign y__h20805 = ~y__h20746 ;
  assign y__h20881 = origdata__h20877 & y__h20941 ;
  assign y__h20882 = {8{uart_s_xactor_ff_request_D_OUT[1]}} ;
  assign y__h20941 = ~y__h20882 ;
  assign y__h21017 = uart_ifc_rg_control_inner_reg[7:0] & y__h21077 ;
  assign y__h21018 = {8{uart_s_xactor_ff_request_D_OUT[0]}} ;
  assign y__h21077 = ~y__h21018 ;
  assign y__h23206 = uart_ifc_rg_intr_en_inner_reg[31:24] & y__h20647 ;
  assign y__h23563 = uart_ifc_rg_intr_en_inner_reg[23:16] & y__h20805 ;
  assign y__h23700 = uart_ifc_rg_intr_en_inner_reg[15:8] & y__h20941 ;
  assign y__h23837 = uart_ifc_rg_intr_en_inner_reg[7:0] & y__h21077 ;
  assign y__h9382 = uart_ifc_rg_control_inner_reg[7:4] + 4'd1 ;
  assign y__h9404 = uart_ifc_rg_control_inner_reg[7:4] + 4'd2 ;
  assign z__h11055 = bitdata__h9699[0] ^ bitdata__h9699[1] ;
  assign z__h11062 = z__h11055 ^ bitdata__h9699[2] ;
  assign z__h11069 = z__h11062 ^ bitdata__h9699[3] ;
  assign z__h11076 = z__h11069 ^ bitdata__h9699[4] ;
  assign z__h11083 = z__h11076 ^ bitdata__h9699[5] ;
  assign z__h11090 = z__h11083 ^ bitdata__h9699[6] ;
  assign z__h11097 = z__h11090 ^ bitdata__h9699[7] ;
  assign z__h13195 =
	     uart_ifc_uart_fifoXmit_D_OUT[0] ^
	     uart_ifc_uart_fifoXmit_D_OUT[1] ;
  assign z__h13202 = z__h13195 ^ uart_ifc_uart_fifoXmit_D_OUT[2] ;
  assign z__h13209 = z__h13202 ^ uart_ifc_uart_fifoXmit_D_OUT[3] ;
  assign z__h13216 = z__h13209 ^ uart_ifc_uart_fifoXmit_D_OUT[4] ;
  assign z__h13223 = z__h13216 ^ uart_ifc_uart_fifoXmit_D_OUT[5] ;
  assign z__h13230 = z__h13223 ^ uart_ifc_uart_fifoXmit_D_OUT[6] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        uart_ifc_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_rg_baud_val_inner_reg <= `BSV_ASSIGNMENT_DELAY 16'd5;
	uart_ifc_rg_control_inner_reg <= `BSV_ASSIGNMENT_DELAY 32'd10368;
	uart_ifc_rg_intr_en_inner_reg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	uart_ifc_uart_err_status_reg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_ifc_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_ifc_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY 1'd1;
	uart_ifc_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	uart_ifc_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
	uart_ifc_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	uart_ifc_uart_rg_stop_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rx_thld_triggered <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_tx_thld_triggered <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_wr_rx_thld_clear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_wr_tx_thld_clear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_s_xactor_ff_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	uart_s_xactor_rg_pready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_s_xactor_rg_response <= `BSV_ASSIGNMENT_DELAY 33'd0;
	uart_s_xactor_rg_wait <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (uart_ifc_dummy_EN)
	  uart_ifc_dummy <= `BSV_ASSIGNMENT_DELAY uart_ifc_dummy_D_IN;
	if (uart_ifc_rg_baud_val_inner_reg_EN)
	  uart_ifc_rg_baud_val_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_baud_val_inner_reg_D_IN;
	if (uart_ifc_rg_control_inner_reg_EN)
	  uart_ifc_rg_control_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_control_inner_reg_D_IN;
	if (uart_ifc_rg_intr_en_inner_reg_EN)
	  uart_ifc_rg_intr_en_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_intr_en_inner_reg_D_IN;
	if (uart_ifc_uart_err_status_reg_EN)
	  uart_ifc_uart_err_status_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_err_status_reg_D_IN;
	if (uart_ifc_uart_fifoRecv_countReg_EN)
	  uart_ifc_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_fifoRecv_countReg_D_IN;
	if (uart_ifc_uart_fifoXmit_countReg_EN)
	  uart_ifc_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_fifoXmit_countReg_D_IN;
	if (uart_ifc_uart_rRecvBitCount_EN)
	  uart_ifc_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvBitCount_D_IN;
	if (uart_ifc_uart_rRecvCellCount_EN)
	  uart_ifc_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvCellCount_D_IN;
	if (uart_ifc_uart_rRecvData_EN)
	  uart_ifc_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvData_D_IN;
	if (uart_ifc_uart_rRecvParity_EN)
	  uart_ifc_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvParity_D_IN;
	if (uart_ifc_uart_rRecvState_EN)
	  uart_ifc_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvState_D_IN;
	if (uart_ifc_uart_rXmitBitCount_EN)
	  uart_ifc_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitBitCount_D_IN;
	if (uart_ifc_uart_rXmitCellCount_EN)
	  uart_ifc_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitCellCount_D_IN;
	if (uart_ifc_uart_rXmitDataOut_EN)
	  uart_ifc_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitDataOut_D_IN;
	if (uart_ifc_uart_rXmitParity_EN)
	  uart_ifc_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitParity_D_IN;
	if (uart_ifc_uart_rXmitState_EN)
	  uart_ifc_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitState_D_IN;
	if (uart_ifc_uart_rg_stop_error_EN)
	  uart_ifc_uart_rg_stop_error <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rg_stop_error_D_IN;
	if (uart_ifc_uart_rx_thld_triggered_EN)
	  uart_ifc_uart_rx_thld_triggered <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rx_thld_triggered_D_IN;
	if (uart_ifc_uart_tx_thld_triggered_EN)
	  uart_ifc_uart_tx_thld_triggered <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_tx_thld_triggered_D_IN;
	if (uart_ifc_uart_wr_rx_thld_clear_EN)
	  uart_ifc_uart_wr_rx_thld_clear <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_wr_rx_thld_clear_D_IN;
	if (uart_ifc_uart_wr_tx_thld_clear_EN)
	  uart_ifc_uart_wr_tx_thld_clear <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_wr_tx_thld_clear_D_IN;
	if (uart_s_xactor_ff_response_rv_EN)
	  uart_s_xactor_ff_response_rv <= `BSV_ASSIGNMENT_DELAY
	      uart_s_xactor_ff_response_rv_D_IN;
	if (uart_s_xactor_rg_pready_EN)
	  uart_s_xactor_rg_pready <= `BSV_ASSIGNMENT_DELAY
	      uart_s_xactor_rg_pready_D_IN;
	if (uart_s_xactor_rg_response_EN)
	  uart_s_xactor_rg_response <= `BSV_ASSIGNMENT_DELAY
	      uart_s_xactor_rg_response_D_IN;
	if (uart_s_xactor_rg_wait_EN)
	  uart_s_xactor_rg_wait <= `BSV_ASSIGNMENT_DELAY
	      uart_s_xactor_rg_wait_D_IN;
      end
    if (uart_ifc_uart_vrRecvBuffer_EN)
      uart_ifc_uart_vrRecvBuffer <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_1_EN)
      uart_ifc_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_1_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_2_EN)
      uart_ifc_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_2_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_3_EN)
      uart_ifc_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_3_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_4_EN)
      uart_ifc_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_4_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_5_EN)
      uart_ifc_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_5_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_6_EN)
      uart_ifc_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_6_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_7_EN)
      uart_ifc_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_7_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_EN)
      uart_ifc_uart_vrXmitBuffer <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_1_EN)
      uart_ifc_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_1_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_2_EN)
      uart_ifc_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_2_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_3_EN)
      uart_ifc_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_3_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_4_EN)
      uart_ifc_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_4_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_5_EN)
      uart_ifc_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_5_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_6_EN)
      uart_ifc_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_6_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_7_EN)
      uart_ifc_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_7_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    uart_ifc_dummy = 1'h0;
    uart_ifc_rg_baud_val_inner_reg = 16'hAAAA;
    uart_ifc_rg_control_inner_reg = 32'hAAAAAAAA;
    uart_ifc_rg_intr_en_inner_reg = 32'hAAAAAAAA;
    uart_ifc_uart_err_status_reg = 4'hA;
    uart_ifc_uart_fifoRecv_countReg = 5'h0A;
    uart_ifc_uart_fifoXmit_countReg = 5'h0A;
    uart_ifc_uart_rRecvBitCount = 4'hA;
    uart_ifc_uart_rRecvCellCount = 4'hA;
    uart_ifc_uart_rRecvData = 1'h0;
    uart_ifc_uart_rRecvParity = 1'h0;
    uart_ifc_uart_rRecvState = 3'h2;
    uart_ifc_uart_rXmitBitCount = 4'hA;
    uart_ifc_uart_rXmitCellCount = 4'hA;
    uart_ifc_uart_rXmitDataOut = 1'h0;
    uart_ifc_uart_rXmitParity = 1'h0;
    uart_ifc_uart_rXmitState = 3'h2;
    uart_ifc_uart_rg_stop_error = 1'h0;
    uart_ifc_uart_rx_thld_triggered = 1'h0;
    uart_ifc_uart_tx_thld_triggered = 1'h0;
    uart_ifc_uart_vrRecvBuffer = 1'h0;
    uart_ifc_uart_vrRecvBuffer_1 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_2 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_3 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_4 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_5 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_6 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_7 = 1'h0;
    uart_ifc_uart_vrXmitBuffer = 1'h0;
    uart_ifc_uart_vrXmitBuffer_1 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_2 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_3 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_4 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_5 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_6 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_7 = 1'h0;
    uart_ifc_uart_wr_rx_thld_clear = 1'h0;
    uart_ifc_uart_wr_tx_thld_clear = 1'h0;
    uart_s_xactor_ff_response_rv = 34'h2AAAAAAAA;
    uart_s_xactor_rg_pready = 1'h0;
    uart_s_xactor_rg_response = 33'h0AAAAAAAA;
    uart_s_xactor_rg_wait = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d99 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d100 = $test$plusargs("muart");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d101 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  v__h9776 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("[%10d", v__h9776, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("Received char 'h%h. break_error:%b frame_error:%b overrun:%b parity_error:%b ",
	       bitdata__h9699,
	       _theResult_____2__h9707,
	       _theResult_____1__h9708,
	       _theResult_____3__h9706,
	       _theResult____h9705);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d324 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d325 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d326 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d334 =
	(TASK_testplusargs___d324 ||
	 TASK_testplusargs___d325 && TASK_testplusargs___d326) &&
	uart_s_xactor_ff_request_D_OUT[36];
    TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d336 =
	(TASK_testplusargs___d324 ||
	 TASK_testplusargs___d325 && TASK_testplusargs___d326) &&
	!uart_s_xactor_ff_request_D_OUT[36];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req)
	begin
	  v__h17898 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write("[%10d", v__h17898, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write("DC2APB: Req:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write("{paddr:'h%0h,",
	       uart_s_xactor_ff_request_D_OUT[71:40],
	       "prot:%0d",
	       uart_s_xactor_ff_request_D_OUT[39:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d334)
	$write("write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d336)
	$write("read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d334)
	$write(",data:'h%0h",
	       uart_s_xactor_ff_request_D_OUT[35:4],
	       ",strb:%b",
	       uart_s_xactor_ff_request_D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  TASK_testplusargs_24_OR_TASK_testplusargs_25_A_ETC___d336)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d436 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d437 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d438 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_36_OR_TASK_testplusargs_37_A_ETC___d460 =
	(TASK_testplusargs___d436 ||
	 TASK_testplusargs___d437 && TASK_testplusargs___d438) &&
	NOT_uart_s_xactor_ff_request_first__30_BITS_71_ETC___d459;
    TASK_testplusargs_36_OR_TASK_testplusargs_37_A_ETC___d467 =
	(TASK_testplusargs___d436 ||
	 TASK_testplusargs___d437 && TASK_testplusargs___d438) &&
	(addr__h18037[31:2] == 30'd0 &&
	 NOT_0_CONCAT_uart_s_xactor_ff_request_first__3_ETC___d356 ||
	 (addr__h18037[31:2] == 30'd1 || addr__h18037[31:2] == 30'd4 ||
	  addr__h18037[31:2] == 30'd5 ||
	  addr__h18037[31:2] == 30'd6) &&
	 addr__h18037[1:0] == 2'b0);
    uart_s_xactor_ff_request_first__30_BIT_36_33_A_ETC___d441 =
	uart_s_xactor_ff_request_D_OUT[36] &&
	(TASK_testplusargs___d436 ||
	 TASK_testplusargs___d437 && TASK_testplusargs___d438);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_D_OUT[36])
	begin
	  v__h24165 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_first__30_BIT_36_33_A_ETC___d441)
	$write("[%10d", v__h24165, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_first__30_BIT_36_33_A_ETC___d441)
	$write("DC2APB: Write Resp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_first__30_BIT_36_33_A_ETC___d441)
	$write("{prdata:'h%0h pslverr:",
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_36_OR_TASK_testplusargs_37_A_ETC___d460)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_36_OR_TASK_testplusargs_37_A_ETC___d467)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_first__30_BIT_36_33_A_ETC___d441)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  uart_s_xactor_ff_request_first__30_BIT_36_33_A_ETC___d441)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  !uart_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d474 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  !uart_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d475 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  !uart_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d476 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_74_OR_TASK_testplusargs_75_A_ETC___d512 =
	(TASK_testplusargs___d474 ||
	 TASK_testplusargs___d475 && TASK_testplusargs___d476) &&
	(addr__h18037[31:2] != 30'd0 || addr__h18037[1:0] != 2'b0) &&
	(addr__h18037[31:2] != 30'd2 || addr__h18037[1:0] != 2'b0) &&
	(addr__h18037[31:2] != 30'd3 || addr__h18037[1:0] != 2'b0) &&
	(addr__h18037[31:2] != 30'd4 || addr__h18037[1:0] != 2'b0) &&
	(addr__h18037[31:2] != 30'd6 || addr__h18037[1:0] != 2'b0);
    TASK_testplusargs_74_OR_TASK_testplusargs_75_A_ETC___d519 =
	(TASK_testplusargs___d474 ||
	 TASK_testplusargs___d475 && TASK_testplusargs___d476) &&
	(addr__h18037[31:2] == 30'd0 || addr__h18037[31:2] == 30'd2 ||
	 addr__h18037[31:2] == 30'd3 ||
	 addr__h18037[31:2] == 30'd4 ||
	 addr__h18037[31:2] == 30'd6) &&
	addr__h18037[1:0] == 2'b0;
    NOT_uart_s_xactor_ff_request_first__30_BIT_36__ETC___d479 =
	!uart_s_xactor_ff_request_D_OUT[36] &&
	(TASK_testplusargs___d474 ||
	 TASK_testplusargs___d475 && TASK_testplusargs___d476);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  !uart_s_xactor_ff_request_D_OUT[36])
	begin
	  v__h25008 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  NOT_uart_s_xactor_ff_request_first__30_BIT_36__ETC___d479)
	$write("[%10d", v__h25008, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  NOT_uart_s_xactor_ff_request_first__30_BIT_36__ETC___d479)
	$write("DC2APB: Read Resp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  NOT_uart_s_xactor_ff_request_first__30_BIT_36__ETC___d479)
	$write("{prdata:'h%0h pslverr:", resp_prdata__h25069);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  !uart_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_74_OR_TASK_testplusargs_75_A_ETC___d512)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  !uart_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_74_OR_TASK_testplusargs_75_A_ETC___d519)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  NOT_uart_s_xactor_ff_request_first__30_BIT_36__ETC___d479)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rl_pop_apb_req &&
	  NOT_uart_s_xactor_ff_request_first__30_BIT_36__ETC___d479)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkuart


//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:36:14 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// AXI4_AWREADY                   O     1 reg
// AXI4_WREADY                    O     1 reg
// AXI4_BVALID                    O     1 reg
// AXI4_BID                       O     1 reg
// AXI4_BRESP                     O     2 reg
// AXI4_ARREADY                   O     1 reg
// AXI4_RVALID                    O     1 reg
// AXI4_RID                       O     1 reg
// AXI4_RDATA                     O    64 reg
// AXI4_RRESP                     O     2 reg
// AXI4_RLAST                     O     1 reg
// APB_PADDR                      O    32 reg
// APB_PROT                       O     3 reg
// APB_PENABLE                    O     1 reg
// APB_PWRITE                     O     1 reg
// APB_PWDATA                     O    32 reg
// APB_PSTRB                      O     4 reg
// APB_PSEL                       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// AXI4_AWVALID                   I     1
// AXI4_AWID                      I     1 reg
// AXI4_AWADDR                    I    32 reg
// AXI4_AWLEN                     I     8 reg
// AXI4_AWSIZE                    I     3 reg
// AXI4_AWBURST                   I     2 reg
// AXI4_AWLOCK                    I     1 reg
// AXI4_AWCACHE                   I     4 reg
// AXI4_AWPROT                    I     3 reg
// AXI4_AWQOS                     I     4 reg
// AXI4_AWREGION                  I     4 reg
// AXI4_WVALID                    I     1
// AXI4_WDATA                     I    64 reg
// AXI4_WSTRB                     I     8 reg
// AXI4_WLAST                     I     1 reg
// AXI4_BREADY                    I     1
// AXI4_ARVALID                   I     1
// AXI4_ARID                      I     1 reg
// AXI4_ARADDR                    I    32 reg
// AXI4_ARLEN                     I     8 reg
// AXI4_ARSIZE                    I     3 reg
// AXI4_ARBURST                   I     2 reg
// AXI4_ARLOCK                    I     1 reg
// AXI4_ARCACHE                   I     4 reg
// AXI4_ARPROT                    I     3 reg
// AXI4_ARQOS                     I     4 reg
// AXI4_ARREGION                  I     4 reg
// AXI4_RREADY                    I     1
// APB_PREADY                     I     1
// APB_PRDATA                     I    32 reg
// APB_PSLVERR                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkaxi2apb_bridge(CLK,
			RST_N,

			AXI4_AWVALID,
			AXI4_AWID,
			AXI4_AWADDR,
			AXI4_AWLEN,
			AXI4_AWSIZE,
			AXI4_AWBURST,
			AXI4_AWLOCK,
			AXI4_AWCACHE,
			AXI4_AWPROT,
			AXI4_AWQOS,
			AXI4_AWREGION,

			AXI4_AWREADY,

			AXI4_WVALID,
			AXI4_WDATA,
			AXI4_WSTRB,
			AXI4_WLAST,

			AXI4_WREADY,

			AXI4_BVALID,

			AXI4_BID,

			AXI4_BRESP,

			AXI4_BREADY,

			AXI4_ARVALID,
			AXI4_ARID,
			AXI4_ARADDR,
			AXI4_ARLEN,
			AXI4_ARSIZE,
			AXI4_ARBURST,
			AXI4_ARLOCK,
			AXI4_ARCACHE,
			AXI4_ARPROT,
			AXI4_ARQOS,
			AXI4_ARREGION,

			AXI4_ARREADY,

			AXI4_RVALID,

			AXI4_RID,

			AXI4_RDATA,

			AXI4_RRESP,

			AXI4_RLAST,

			AXI4_RREADY,

			APB_PADDR,

			APB_PROT,

			APB_PENABLE,

			APB_PWRITE,

			APB_PWDATA,

			APB_PSTRB,

			APB_PSEL,

			APB_PREADY,
			APB_PRDATA,
			APB_PSLVERR);
  input  CLK;
  input  RST_N;

  // action method axi4_side_m_awvalid
  input  AXI4_AWVALID;
  input  AXI4_AWID;
  input  [31 : 0] AXI4_AWADDR;
  input  [7 : 0] AXI4_AWLEN;
  input  [2 : 0] AXI4_AWSIZE;
  input  [1 : 0] AXI4_AWBURST;
  input  AXI4_AWLOCK;
  input  [3 : 0] AXI4_AWCACHE;
  input  [2 : 0] AXI4_AWPROT;
  input  [3 : 0] AXI4_AWQOS;
  input  [3 : 0] AXI4_AWREGION;

  // value method axi4_side_m_awready
  output AXI4_AWREADY;

  // action method axi4_side_m_wvalid
  input  AXI4_WVALID;
  input  [63 : 0] AXI4_WDATA;
  input  [7 : 0] AXI4_WSTRB;
  input  AXI4_WLAST;

  // value method axi4_side_m_wready
  output AXI4_WREADY;

  // value method axi4_side_m_bvalid
  output AXI4_BVALID;

  // value method axi4_side_m_bid
  output AXI4_BID;

  // value method axi4_side_m_bresp
  output [1 : 0] AXI4_BRESP;

  // value method axi4_side_m_buser

  // action method axi4_side_m_bready
  input  AXI4_BREADY;

  // action method axi4_side_m_arvalid
  input  AXI4_ARVALID;
  input  AXI4_ARID;
  input  [31 : 0] AXI4_ARADDR;
  input  [7 : 0] AXI4_ARLEN;
  input  [2 : 0] AXI4_ARSIZE;
  input  [1 : 0] AXI4_ARBURST;
  input  AXI4_ARLOCK;
  input  [3 : 0] AXI4_ARCACHE;
  input  [2 : 0] AXI4_ARPROT;
  input  [3 : 0] AXI4_ARQOS;
  input  [3 : 0] AXI4_ARREGION;

  // value method axi4_side_m_arready
  output AXI4_ARREADY;

  // value method axi4_side_m_rvalid
  output AXI4_RVALID;

  // value method axi4_side_m_rid
  output AXI4_RID;

  // value method axi4_side_m_rdata
  output [63 : 0] AXI4_RDATA;

  // value method axi4_side_m_rresp
  output [1 : 0] AXI4_RRESP;

  // value method axi4_side_m_rlast
  output AXI4_RLAST;

  // value method axi4_side_m_ruser

  // action method axi4_side_m_rready
  input  AXI4_RREADY;

  // value method apb_side_m_paddr
  output [31 : 0] APB_PADDR;

  // value method apb_side_m_prot
  output [2 : 0] APB_PROT;

  // value method apb_side_m_penable
  output APB_PENABLE;

  // value method apb_side_m_pwrite
  output APB_PWRITE;

  // value method apb_side_m_pwdata
  output [31 : 0] APB_PWDATA;

  // value method apb_side_m_pstrb
  output [3 : 0] APB_PSTRB;

  // value method apb_side_m_psel
  output APB_PSEL;

  // value method apb_side_m_puser

  // action method apb_side_m_pready
  input  APB_PREADY;
  input  [31 : 0] APB_PRDATA;
  input  APB_PSLVERR;

  // signals for module outputs
  wire [63 : 0] AXI4_RDATA;
  wire [31 : 0] APB_PADDR, APB_PWDATA;
  wire [3 : 0] APB_PSTRB;
  wire [2 : 0] APB_PROT;
  wire [1 : 0] AXI4_BRESP, AXI4_RRESP;
  wire APB_PENABLE,
       APB_PSEL,
       APB_PWRITE,
       AXI4_ARREADY,
       AXI4_AWREADY,
       AXI4_BID,
       AXI4_BVALID,
       AXI4_RID,
       AXI4_RLAST,
       AXI4_RVALID,
       AXI4_WREADY;

  // inlined wires
  reg [72 : 0] apb_xactor_ff_request_rv_port0__write_1;
  wire [72 : 0] apb_xactor_ff_request_rv_port1__read,
		apb_xactor_ff_request_rv_port1__write_1,
		apb_xactor_ff_request_rv_port2__read;
  wire apb_xactor_ff_request_rv_EN_port0__write;

  // register apb_xactor_ff_request_rv
  reg [72 : 0] apb_xactor_ff_request_rv;
  wire [72 : 0] apb_xactor_ff_request_rv_D_IN;
  wire apb_xactor_ff_request_rv_EN;

  // register apb_xactor_rg_enable
  reg apb_xactor_rg_enable;
  wire apb_xactor_rg_enable_D_IN, apb_xactor_rg_enable_EN;

  // register apb_xactor_rg_request
  reg [71 : 0] apb_xactor_rg_request;
  wire [71 : 0] apb_xactor_rg_request_D_IN;
  wire apb_xactor_rg_request_EN;

  // register apb_xactor_rg_sel
  reg apb_xactor_rg_sel;
  wire apb_xactor_rg_sel_D_IN, apb_xactor_rg_sel_EN;

  // register apb_xactor_rg_state
  reg [1 : 0] apb_xactor_rg_state;
  reg [1 : 0] apb_xactor_rg_state_D_IN;
  wire apb_xactor_rg_state_EN;

  // register rg_accum_data
  reg [63 : 0] rg_accum_data;
  wire [63 : 0] rg_accum_data_D_IN;
  wire rg_accum_data_EN;

  // register rg_accum_err
  reg rg_accum_err;
  wire rg_accum_err_D_IN, rg_accum_err_EN;

  // register rg_accum_mask
  reg [7 : 0] rg_accum_mask;
  reg [7 : 0] rg_accum_mask_D_IN;
  wire rg_accum_mask_EN;

  // register rg_child_burst
  reg [7 : 0] rg_child_burst;
  wire [7 : 0] rg_child_burst_D_IN;
  wire rg_child_burst_EN;

  // register rg_child_req_count
  reg [7 : 0] rg_child_req_count;
  reg [7 : 0] rg_child_req_count_D_IN;
  wire rg_child_req_count_EN;

  // register rg_child_res_count
  reg [7 : 0] rg_child_res_count;
  reg [7 : 0] rg_child_res_count_D_IN;
  wire rg_child_res_count_EN;

  // register rg_rd_request
  reg [61 : 0] rg_rd_request;
  wire [61 : 0] rg_rd_request_D_IN;
  wire rg_rd_request_EN;

  // register rg_req_beat
  reg [7 : 0] rg_req_beat;
  reg [7 : 0] rg_req_beat_D_IN;
  wire rg_req_beat_EN;

  // register rg_resp_beat
  reg [7 : 0] rg_resp_beat;
  reg [7 : 0] rg_resp_beat_D_IN;
  wire rg_resp_beat_EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state_D_IN;
  wire rg_state_EN;

  // register rg_wd_request
  reg [72 : 0] rg_wd_request;
  wire [72 : 0] rg_wd_request_D_IN;
  wire rg_wd_request_EN;

  // register rg_wr_request
  reg [61 : 0] rg_wr_request;
  wire [61 : 0] rg_wr_request_D_IN;
  wire rg_wr_request_EN;

  // ports of submodule apb_xactor_ff_response
  wire [32 : 0] apb_xactor_ff_response_D_IN, apb_xactor_ff_response_D_OUT;
  wire apb_xactor_ff_response_CLR,
       apb_xactor_ff_response_DEQ,
       apb_xactor_ff_response_EMPTY_N,
       apb_xactor_ff_response_ENQ,
       apb_xactor_ff_response_FULL_N;

  // ports of submodule axi_xactor_f_arfifo
  wire [61 : 0] axi_xactor_f_arfifo_D_IN, axi_xactor_f_arfifo_D_OUT;
  wire axi_xactor_f_arfifo_CLR,
       axi_xactor_f_arfifo_DEQ,
       axi_xactor_f_arfifo_EMPTY_N,
       axi_xactor_f_arfifo_ENQ,
       axi_xactor_f_arfifo_FULL_N;

  // ports of submodule axi_xactor_f_awfifo
  wire [61 : 0] axi_xactor_f_awfifo_D_IN, axi_xactor_f_awfifo_D_OUT;
  wire axi_xactor_f_awfifo_CLR,
       axi_xactor_f_awfifo_DEQ,
       axi_xactor_f_awfifo_EMPTY_N,
       axi_xactor_f_awfifo_ENQ,
       axi_xactor_f_awfifo_FULL_N;

  // ports of submodule axi_xactor_f_bfifo
  wire [2 : 0] axi_xactor_f_bfifo_D_IN, axi_xactor_f_bfifo_D_OUT;
  wire axi_xactor_f_bfifo_CLR,
       axi_xactor_f_bfifo_DEQ,
       axi_xactor_f_bfifo_EMPTY_N,
       axi_xactor_f_bfifo_ENQ,
       axi_xactor_f_bfifo_FULL_N;

  // ports of submodule axi_xactor_f_rfifo
  wire [67 : 0] axi_xactor_f_rfifo_D_IN, axi_xactor_f_rfifo_D_OUT;
  wire axi_xactor_f_rfifo_CLR,
       axi_xactor_f_rfifo_DEQ,
       axi_xactor_f_rfifo_EMPTY_N,
       axi_xactor_f_rfifo_ENQ,
       axi_xactor_f_rfifo_FULL_N;

  // ports of submodule axi_xactor_f_wfifo
  wire [72 : 0] axi_xactor_f_wfifo_D_IN, axi_xactor_f_wfifo_D_OUT;
  wire axi_xactor_f_wfifo_CLR,
       axi_xactor_f_wfifo_DEQ,
       axi_xactor_f_wfifo_EMPTY_N,
       axi_xactor_f_wfifo_ENQ,
       axi_xactor_f_wfifo_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_apb_xactor_rl_access_to_idle,
       CAN_FIRE_RL_apb_xactor_rl_access_to_setup,
       CAN_FIRE_RL_apb_xactor_rl_idle_to_setup,
       CAN_FIRE_RL_apb_xactor_rl_setup_state,
       CAN_FIRE_RL_rl_read_frm_axi,
       CAN_FIRE_RL_rl_read_response_to_axi,
       CAN_FIRE_RL_rl_send_rd_burst_req,
       CAN_FIRE_RL_rl_send_wr_burst_req,
       CAN_FIRE_RL_rl_write_frm_axi,
       CAN_FIRE_RL_rl_write_response_to_axi,
       CAN_FIRE_apb_side_m_pready,
       CAN_FIRE_axi4_side_m_arvalid,
       CAN_FIRE_axi4_side_m_awvalid,
       CAN_FIRE_axi4_side_m_bready,
       CAN_FIRE_axi4_side_m_rready,
       CAN_FIRE_axi4_side_m_wvalid,
       WILL_FIRE_RL_apb_xactor_rl_access_to_idle,
       WILL_FIRE_RL_apb_xactor_rl_access_to_setup,
       WILL_FIRE_RL_apb_xactor_rl_idle_to_setup,
       WILL_FIRE_RL_apb_xactor_rl_setup_state,
       WILL_FIRE_RL_rl_read_frm_axi,
       WILL_FIRE_RL_rl_read_response_to_axi,
       WILL_FIRE_RL_rl_send_rd_burst_req,
       WILL_FIRE_RL_rl_send_wr_burst_req,
       WILL_FIRE_RL_rl_write_frm_axi,
       WILL_FIRE_RL_rl_write_response_to_axi,
       WILL_FIRE_apb_side_m_pready,
       WILL_FIRE_axi4_side_m_arvalid,
       WILL_FIRE_axi4_side_m_awvalid,
       WILL_FIRE_axi4_side_m_bready,
       WILL_FIRE_axi4_side_m_rready,
       WILL_FIRE_axi4_side_m_wvalid;

  // inputs to muxes for submodule ports
  wire [72 : 0] MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_1,
		MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_2,
		MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_3,
		MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_4;
  wire [61 : 0] MUX_rg_rd_request_write_1__VAL_1,
		MUX_rg_wr_request_write_1__VAL_1;
  wire [7 : 0] MUX_rg_accum_mask_write_1__VAL_1,
	       MUX_rg_accum_mask_write_1__VAL_2,
	       MUX_rg_accum_mask_write_1__VAL_3,
	       MUX_rg_child_burst_write_1__VAL_1,
	       MUX_rg_child_burst_write_1__VAL_2,
	       MUX_rg_child_req_count_write_1__VAL_1,
	       MUX_rg_child_req_count_write_1__VAL_2,
	       MUX_rg_child_req_count_write_1__VAL_3,
	       MUX_rg_child_res_count_write_1__VAL_1,
	       MUX_rg_req_beat_write_1__VAL_1,
	       MUX_rg_req_beat_write_1__VAL_2,
	       MUX_rg_req_beat_write_1__VAL_3,
	       MUX_rg_resp_beat_write_1__VAL_1;
  wire MUX_apb_xactor_rg_enable_write_1__SEL_1,
       MUX_apb_xactor_rg_sel_write_1__SEL_2,
       MUX_rg_accum_err_write_1__VAL_1,
       MUX_rg_child_req_count_write_1__PSEL_1,
       MUX_rg_child_req_count_write_1__SEL_1,
       MUX_rg_child_res_count_write_1__PSEL_1,
       MUX_rg_child_res_count_write_1__SEL_1,
       MUX_rg_rd_request_write_1__SEL_1,
       MUX_rg_req_beat_write_1__SEL_1,
       MUX_rg_resp_beat_write_1__SEL_1,
       MUX_rg_state_write_1__SEL_1,
       MUX_rg_wr_request_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d98;
  reg TASK_testplusargs___d99;
  reg TASK_testplusargs___d100;
  reg [63 : 0] v__h3888;
  reg TASK_testplusargs___d147;
  reg TASK_testplusargs___d148;
  reg TASK_testplusargs___d149;
  reg [63 : 0] v__h4088;
  reg TASK_testplusargs___d313;
  reg TASK_testplusargs___d314;
  reg TASK_testplusargs___d315;
  reg [63 : 0] v__h9800;
  reg TASK_testplusargs___d327;
  reg TASK_testplusargs___d328;
  reg TASK_testplusargs___d329;
  reg [63 : 0] v__h10064;
  reg TASK_testplusargs___d345;
  reg TASK_testplusargs___d346;
  reg TASK_testplusargs___d347;
  reg [63 : 0] v__h10392;
  reg TASK_testplusargs___d354;
  reg TASK_testplusargs___d355;
  reg TASK_testplusargs___d356;
  reg [63 : 0] v__h10535;
  reg TASK_testplusargs___d211;
  reg TASK_testplusargs___d212;
  reg TASK_testplusargs___d213;
  reg [63 : 0] v__h5157;
  reg TASK_testplusargs___d217;
  reg TASK_testplusargs___d218;
  reg TASK_testplusargs___d219;
  reg [63 : 0] v__h5301;
  reg TASK_testplusargs___d223;
  reg TASK_testplusargs___d224;
  reg TASK_testplusargs___d225;
  reg [63 : 0] v__h5447;
  reg TASK_testplusargs___d389;
  reg TASK_testplusargs___d390;
  reg TASK_testplusargs___d391;
  reg [63 : 0] v__h11536;
  reg TASK_testplusargs___d436;
  reg TASK_testplusargs___d437;
  reg TASK_testplusargs___d438;
  reg [63 : 0] v__h11727;
  reg TASK_testplusargs___d524;
  reg TASK_testplusargs___d525;
  reg TASK_testplusargs___d526;
  reg [63 : 0] v__h13123;
  reg TASK_testplusargs___d533;
  reg TASK_testplusargs___d534;
  reg TASK_testplusargs___d535;
  reg [63 : 0] v__h13524;
  reg TASK_testplusargs___d472;
  reg TASK_testplusargs___d473;
  reg TASK_testplusargs___d474;
  reg [63 : 0] v__h12321;
  reg TASK_testplusargs___d498;
  reg TASK_testplusargs___d499;
  reg TASK_testplusargs___d500;
  reg [63 : 0] v__h12599;
  reg TASK_testplusargs___d506;
  reg TASK_testplusargs___d507;
  reg TASK_testplusargs___d508;
  reg [63 : 0] v__h12754;
  reg TASK_testplusargs___d512;
  reg TASK_testplusargs___d513;
  reg TASK_testplusargs___d514;
  reg [63 : 0] v__h12904;
  reg TASK_testplusargs___d8;
  reg TASK_testplusargs___d9;
  reg TASK_testplusargs___d10;
  reg [63 : 0] v__h1096;
  reg TASK_testplusargs___d14;
  reg TASK_testplusargs___d15;
  reg TASK_testplusargs___d16;
  reg [63 : 0] v__h1231;
  reg TASK_testplusargs___d29;
  reg TASK_testplusargs___d30;
  reg TASK_testplusargs___d31;
  reg [63 : 0] v__h1418;
  reg TASK_testplusargs___d45;
  reg TASK_testplusargs___d46;
  reg TASK_testplusargs___d47;
  reg [63 : 0] v__h1665;
  reg TASK_testplusargs___d51;
  reg TASK_testplusargs___d52;
  reg TASK_testplusargs___d53;
  reg [63 : 0] v__h1800;
  reg TASK_testplusargs___d62;
  reg TASK_testplusargs___d63;
  reg TASK_testplusargs___d64;
  reg [63 : 0] v__h2096;
  reg TASK_testplusargs___d68;
  reg TASK_testplusargs___d69;
  reg TASK_testplusargs___d70;
  reg [63 : 0] v__h2240;
  reg TASK_testplusargs___d76;
  reg TASK_testplusargs___d77;
  reg TASK_testplusargs___d78;
  reg [63 : 0] v__h2381;
  reg TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d334;
  reg TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d337;
  reg TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d339;
  reg TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d342;
  reg TASK_testplusargs_72_OR_TASK_testplusargs_73_A_ETC___d480;
  reg TASK_testplusargs_72_OR_TASK_testplusargs_73_A_ETC___d483;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d25;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d57;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d74;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d75;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d82;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d83;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d107;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d109;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d111;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d113;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d115;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d117;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d119;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d133;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d136;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d138;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d140;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d146;
  reg NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d318;
  reg rg_child_res_count_07_EQ_rg_child_burst_66_08__ETC___d332;
  reg TASK_testplusargs_45_OR_TASK_testplusargs_46_A_ETC___d352;
  reg TASK_testplusargs_45_OR_TASK_testplusargs_46_A_ETC___d353;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d396;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d398;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d400;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d402;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d404;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d406;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d408;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d422;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d425;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d427;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d429;
  reg TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d435;
  reg rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d477;
  reg rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d481;
  reg rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d484;
  reg TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d504;
  reg TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d505;
  reg NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d529;
  reg TASK_testplusargs_33_OR_TASK_testplusargs_34_A_ETC___d539;
  reg TASK_testplusargs_33_OR_TASK_testplusargs_34_A_ETC___d540;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] new_address__h11793, new_address__h4593;
  reg [2 : 0] CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1,
	      CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2;
  wire [63 : 0] v__h5543, x__h10704, x__h12471, y_avValue_snd_fst__h12472;
  wire [47 : 0] apb_xactor_ff_response_first__37_BITS_32_TO_25_ETC___d288;
  wire [31 : 0] apb_request_paddr__h12461,
		apb_xactor_ff_response_first__37_BITS_32_TO_25_ETC___d273,
		mask__h11937,
		mask__h4742,
		new_address__h11935,
		new_address__h4740,
		temp1__h11938,
		temp1__h4743,
		temp2__h11939,
		temp2__h4744,
		v__h4598,
		v__h4618,
		y__h12039,
		y__h4842,
		y_avValue_fst__h12139;
  wire [10 : 0] shift__h11854;
  wire [7 : 0] request_size__h10974,
	       request_size__h4178,
	       x__h10751,
	       x__h11041,
	       x__h11829,
	       x__h12498,
	       x__h13210,
	       x__h4234,
	       x__h6323,
	       x__h7131,
	       x__h7269,
	       x__h7407,
	       x__h7545,
	       x__h7683,
	       x__h7821,
	       x__h7959,
	       y__h12179,
	       y__h6324,
	       y__h6325,
	       y__h7054,
	       y__h7132,
	       y__h7133,
	       y__h7193,
	       y__h7270,
	       y__h7271,
	       y__h7331,
	       y__h7408,
	       y__h7409,
	       y__h7469,
	       y__h7546,
	       y__h7547,
	       y__h7607,
	       y__h7684,
	       y__h7685,
	       y__h7745,
	       y__h7822,
	       y__h7823,
	       y__h7883,
	       y__h7960,
	       y__h7961,
	       y__h8021,
	       y_avValue_snd_snd__h12473;
  wire [5 : 0] x__h10728;
  wire [2 : 0] x__h11980, x__h4783;
  wire [1 : 0] axi_response_rresp__h9978;
  wire _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154,
       _0b1_SL_axi_xactor_f_awfifo_first__65_BITS_20_T_ETC___d382,
       _dand1rg_req_beat_EN_write,
       _dand1rg_state_EN_write,
       _dand2axi_xactor_f_wfifo_EN_deq,
       rg_child_req_count_69_EQ_rg_child_burst_66___d170,
       rg_child_res_count_07_EQ_rg_child_burst_66___d308;

  // action method axi4_side_m_awvalid
  assign CAN_FIRE_axi4_side_m_awvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_awvalid = 1'd1 ;

  // value method axi4_side_m_awready
  assign AXI4_AWREADY = axi_xactor_f_awfifo_FULL_N ;

  // action method axi4_side_m_wvalid
  assign CAN_FIRE_axi4_side_m_wvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_wvalid = 1'd1 ;

  // value method axi4_side_m_wready
  assign AXI4_WREADY = axi_xactor_f_wfifo_FULL_N ;

  // value method axi4_side_m_bvalid
  assign AXI4_BVALID = axi_xactor_f_bfifo_EMPTY_N ;

  // value method axi4_side_m_bid
  assign AXI4_BID = axi_xactor_f_bfifo_D_OUT[2] ;

  // value method axi4_side_m_bresp
  assign AXI4_BRESP = axi_xactor_f_bfifo_D_OUT[1:0] ;

  // action method axi4_side_m_bready
  assign CAN_FIRE_axi4_side_m_bready = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_bready = 1'd1 ;

  // action method axi4_side_m_arvalid
  assign CAN_FIRE_axi4_side_m_arvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_arvalid = 1'd1 ;

  // value method axi4_side_m_arready
  assign AXI4_ARREADY = axi_xactor_f_arfifo_FULL_N ;

  // value method axi4_side_m_rvalid
  assign AXI4_RVALID = axi_xactor_f_rfifo_EMPTY_N ;

  // value method axi4_side_m_rid
  assign AXI4_RID = axi_xactor_f_rfifo_D_OUT[67] ;

  // value method axi4_side_m_rdata
  assign AXI4_RDATA = axi_xactor_f_rfifo_D_OUT[66:3] ;

  // value method axi4_side_m_rresp
  assign AXI4_RRESP = axi_xactor_f_rfifo_D_OUT[2:1] ;

  // value method axi4_side_m_rlast
  assign AXI4_RLAST = axi_xactor_f_rfifo_D_OUT[0] ;

  // action method axi4_side_m_rready
  assign CAN_FIRE_axi4_side_m_rready = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_rready = 1'd1 ;

  // value method apb_side_m_paddr
  assign APB_PADDR = apb_xactor_rg_request[71:40] ;

  // value method apb_side_m_prot
  assign APB_PROT = apb_xactor_rg_request[39:37] ;

  // value method apb_side_m_penable
  assign APB_PENABLE = apb_xactor_rg_enable ;

  // value method apb_side_m_pwrite
  assign APB_PWRITE = apb_xactor_rg_request[36] ;

  // value method apb_side_m_pwdata
  assign APB_PWDATA = apb_xactor_rg_request[35:4] ;

  // value method apb_side_m_pstrb
  assign APB_PSTRB = apb_xactor_rg_request[3:0] ;

  // value method apb_side_m_psel
  assign APB_PSEL = apb_xactor_rg_sel ;

  // action method apb_side_m_pready
  assign CAN_FIRE_apb_side_m_pready = 1'd1 ;
  assign WILL_FIRE_apb_side_m_pready = 1'd1 ;

  // submodule apb_xactor_ff_response
  FIFOL1 #(.width(32'd33)) apb_xactor_ff_response(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(apb_xactor_ff_response_D_IN),
						  .ENQ(apb_xactor_ff_response_ENQ),
						  .DEQ(apb_xactor_ff_response_DEQ),
						  .CLR(apb_xactor_ff_response_CLR),
						  .D_OUT(apb_xactor_ff_response_D_OUT),
						  .FULL_N(apb_xactor_ff_response_FULL_N),
						  .EMPTY_N(apb_xactor_ff_response_EMPTY_N));

  // submodule axi_xactor_f_arfifo
  FIFO2 #(.width(32'd62), .guarded(1'd1)) axi_xactor_f_arfifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(axi_xactor_f_arfifo_D_IN),
							      .ENQ(axi_xactor_f_arfifo_ENQ),
							      .DEQ(axi_xactor_f_arfifo_DEQ),
							      .CLR(axi_xactor_f_arfifo_CLR),
							      .D_OUT(axi_xactor_f_arfifo_D_OUT),
							      .FULL_N(axi_xactor_f_arfifo_FULL_N),
							      .EMPTY_N(axi_xactor_f_arfifo_EMPTY_N));

  // submodule axi_xactor_f_awfifo
  FIFO2 #(.width(32'd62), .guarded(1'd1)) axi_xactor_f_awfifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(axi_xactor_f_awfifo_D_IN),
							      .ENQ(axi_xactor_f_awfifo_ENQ),
							      .DEQ(axi_xactor_f_awfifo_DEQ),
							      .CLR(axi_xactor_f_awfifo_CLR),
							      .D_OUT(axi_xactor_f_awfifo_D_OUT),
							      .FULL_N(axi_xactor_f_awfifo_FULL_N),
							      .EMPTY_N(axi_xactor_f_awfifo_EMPTY_N));

  // submodule axi_xactor_f_bfifo
  FIFO2 #(.width(32'd3), .guarded(1'd1)) axi_xactor_f_bfifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(axi_xactor_f_bfifo_D_IN),
							    .ENQ(axi_xactor_f_bfifo_ENQ),
							    .DEQ(axi_xactor_f_bfifo_DEQ),
							    .CLR(axi_xactor_f_bfifo_CLR),
							    .D_OUT(axi_xactor_f_bfifo_D_OUT),
							    .FULL_N(axi_xactor_f_bfifo_FULL_N),
							    .EMPTY_N(axi_xactor_f_bfifo_EMPTY_N));

  // submodule axi_xactor_f_rfifo
  FIFO2 #(.width(32'd68), .guarded(1'd1)) axi_xactor_f_rfifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(axi_xactor_f_rfifo_D_IN),
							     .ENQ(axi_xactor_f_rfifo_ENQ),
							     .DEQ(axi_xactor_f_rfifo_DEQ),
							     .CLR(axi_xactor_f_rfifo_CLR),
							     .D_OUT(axi_xactor_f_rfifo_D_OUT),
							     .FULL_N(axi_xactor_f_rfifo_FULL_N),
							     .EMPTY_N(axi_xactor_f_rfifo_EMPTY_N));

  // submodule axi_xactor_f_wfifo
  FIFO2 #(.width(32'd73), .guarded(1'd1)) axi_xactor_f_wfifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(axi_xactor_f_wfifo_D_IN),
							     .ENQ(axi_xactor_f_wfifo_ENQ),
							     .DEQ(axi_xactor_f_wfifo_DEQ),
							     .CLR(axi_xactor_f_wfifo_CLR),
							     .D_OUT(axi_xactor_f_wfifo_D_OUT),
							     .FULL_N(axi_xactor_f_wfifo_FULL_N),
							     .EMPTY_N(axi_xactor_f_wfifo_EMPTY_N));

  // rule RL_rl_read_frm_axi
  assign CAN_FIRE_RL_rl_read_frm_axi =
	     axi_xactor_f_arfifo_EMPTY_N && !apb_xactor_ff_request_rv[72] &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_read_frm_axi = CAN_FIRE_RL_rl_read_frm_axi ;

  // rule RL_rl_read_response_to_axi
  assign CAN_FIRE_RL_rl_read_response_to_axi =
	     apb_xactor_ff_response_EMPTY_N && axi_xactor_f_rfifo_FULL_N &&
	     rg_state == 2'd1 &&
	     rg_resp_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_read_response_to_axi =
	     CAN_FIRE_RL_rl_read_response_to_axi ;

  // rule RL_rl_send_rd_burst_req
  assign CAN_FIRE_RL_rl_send_rd_burst_req =
	     !apb_xactor_ff_request_rv[72] && rg_state == 2'd1 &&
	     rg_req_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_send_rd_burst_req =
	     CAN_FIRE_RL_rl_send_rd_burst_req ;

  // rule RL_rl_write_frm_axi
  assign CAN_FIRE_RL_rl_write_frm_axi =
	     !apb_xactor_ff_request_rv[72] && axi_xactor_f_awfifo_EMPTY_N &&
	     axi_xactor_f_wfifo_EMPTY_N &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_write_frm_axi =
	     CAN_FIRE_RL_rl_write_frm_axi && !WILL_FIRE_RL_rl_read_frm_axi ;

  // rule RL_rl_write_response_to_axi
  assign CAN_FIRE_RL_rl_write_response_to_axi =
	     apb_xactor_ff_response_EMPTY_N && axi_xactor_f_bfifo_FULL_N &&
	     rg_state == 2'd2 &&
	     rg_resp_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_write_response_to_axi =
	     CAN_FIRE_RL_rl_write_response_to_axi ;

  // rule RL_rl_send_wr_burst_req
  assign CAN_FIRE_RL_rl_send_wr_burst_req =
	     !apb_xactor_ff_request_rv[72] && axi_xactor_f_wfifo_EMPTY_N &&
	     rg_state == 2'd2 &&
	     rg_req_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_send_wr_burst_req =
	     CAN_FIRE_RL_rl_send_wr_burst_req ;

  // rule RL_apb_xactor_rl_idle_to_setup
  assign CAN_FIRE_RL_apb_xactor_rl_idle_to_setup =
	     apb_xactor_ff_request_rv_port1__read[72] &&
	     apb_xactor_rg_state == 2'd0 ;
  assign WILL_FIRE_RL_apb_xactor_rl_idle_to_setup =
	     CAN_FIRE_RL_apb_xactor_rl_idle_to_setup ;

  // rule RL_apb_xactor_rl_setup_state
  assign CAN_FIRE_RL_apb_xactor_rl_setup_state = apb_xactor_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_apb_xactor_rl_setup_state =
	     CAN_FIRE_RL_apb_xactor_rl_setup_state ;

  // rule RL_apb_xactor_rl_access_to_idle
  assign CAN_FIRE_RL_apb_xactor_rl_access_to_idle =
	     apb_xactor_ff_response_FULL_N && apb_xactor_rg_state == 2'd2 &&
	     APB_PREADY &&
	     !apb_xactor_ff_request_rv_port1__read[72] ;
  assign WILL_FIRE_RL_apb_xactor_rl_access_to_idle =
	     CAN_FIRE_RL_apb_xactor_rl_access_to_idle ;

  // rule RL_apb_xactor_rl_access_to_setup
  assign CAN_FIRE_RL_apb_xactor_rl_access_to_setup =
	     apb_xactor_ff_request_rv_port1__read[72] &&
	     apb_xactor_ff_response_FULL_N &&
	     apb_xactor_rg_state == 2'd2 &&
	     APB_PREADY ;
  assign WILL_FIRE_RL_apb_xactor_rl_access_to_setup =
	     CAN_FIRE_RL_apb_xactor_rl_access_to_setup ;

  // inputs to muxes for submodule ports
  assign MUX_apb_xactor_rg_enable_write_1__SEL_1 =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ;
  assign MUX_apb_xactor_rg_sel_write_1__SEL_2 =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ;
  assign MUX_rg_child_req_count_write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_send_wr_burst_req ||
	     WILL_FIRE_RL_rl_send_rd_burst_req ;
  assign MUX_rg_child_req_count_write_1__SEL_1 =
	     MUX_rg_child_req_count_write_1__PSEL_1 &&
	     (rg_child_burst != 8'd0 ||
	      !rg_child_req_count_69_EQ_rg_child_burst_66___d170) ;
  assign MUX_rg_child_res_count_write_1__PSEL_1 =
	     WILL_FIRE_RL_rl_write_response_to_axi ||
	     WILL_FIRE_RL_rl_read_response_to_axi ;
  assign MUX_rg_child_res_count_write_1__SEL_1 =
	     MUX_rg_child_res_count_write_1__PSEL_1 &&
	     rg_child_burst != 8'd0 ;
  assign MUX_rg_rd_request_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_send_rd_burst_req &&
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ;
  assign MUX_rg_req_beat_write_1__SEL_1 =
	     MUX_rg_child_req_count_write_1__PSEL_1 &&
	     (rg_child_req_count == y__h12179 || rg_child_burst == 8'd0) ;
  assign MUX_rg_resp_beat_write_1__SEL_1 =
	     MUX_rg_child_res_count_write_1__PSEL_1 &&
	     (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	      rg_child_burst == 8'd0) ;
  assign MUX_rg_state_write_1__SEL_1 =
	     MUX_rg_child_res_count_write_1__PSEL_1 && rg_resp_beat == 8'd1 &&
	     (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	      rg_child_burst == 8'd0) ;
  assign MUX_rg_wr_request_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_send_wr_burst_req &&
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ;
  assign MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       axi_xactor_f_arfifo_D_OUT[60:29],
	       axi_xactor_f_arfifo_D_OUT[10:8],
	       1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       4'd0 } ;
  assign MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_2 =
	     { 1'd1,
	       v__h4598,
	       rg_rd_request[10:8],
	       1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       4'd0 } ;
  assign MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_3 =
	     { 1'd1,
	       axi_xactor_f_awfifo_D_OUT[60:29],
	       axi_xactor_f_awfifo_D_OUT[10:8],
	       1'd1,
	       x__h10704[31:0],
	       x__h10751[3:0] } ;
  assign MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_4 =
	     { 1'd1,
	       apb_request_paddr__h12461,
	       rg_wr_request[10:8],
	       1'd1,
	       x__h12471[31:0],
	       x__h12498[3:0] } ;
  assign MUX_rg_accum_err_write_1__VAL_1 =
	     rg_accum_err || apb_xactor_ff_response_D_OUT[0] ;
  assign MUX_rg_accum_mask_write_1__VAL_1 =
	     { rg_accum_mask[3:0], rg_accum_mask[7:4] } ;
  assign MUX_rg_accum_mask_write_1__VAL_2 =
	     _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 ?
	       8'd255 :
	       8'd15 ;
  assign MUX_rg_accum_mask_write_1__VAL_3 =
	     _0b1_SL_axi_xactor_f_awfifo_first__65_BITS_20_T_ETC___d382 ?
	       8'd255 :
	       8'd15 ;
  assign MUX_rg_child_burst_write_1__VAL_1 =
	     _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 ?
	       8'd0 :
	       request_size__h4178 ;
  assign MUX_rg_child_burst_write_1__VAL_2 =
	     _0b1_SL_axi_xactor_f_awfifo_first__65_BITS_20_T_ETC___d382 ?
	       8'd0 :
	       request_size__h10974 ;
  assign MUX_rg_child_req_count_write_1__VAL_1 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       8'd4 :
	       x__h11829 ;
  assign MUX_rg_child_req_count_write_1__VAL_2 =
	     _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 ?
	       8'd0 :
	       8'd4 ;
  assign MUX_rg_child_req_count_write_1__VAL_3 =
	     _0b1_SL_axi_xactor_f_awfifo_first__65_BITS_20_T_ETC___d382 ?
	       8'd0 :
	       8'd4 ;
  assign MUX_rg_child_res_count_write_1__VAL_1 =
	     rg_child_res_count_07_EQ_rg_child_burst_66___d308 ?
	       8'd4 :
	       x__h13210 ;
  assign MUX_rg_rd_request_write_1__VAL_1 =
	     { rg_rd_request[61], new_address__h4593, rg_rd_request[28:0] } ;
  assign MUX_rg_req_beat_write_1__VAL_1 = rg_req_beat - 8'd1 ;
  assign MUX_rg_req_beat_write_1__VAL_2 =
	     _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 ?
	       axi_xactor_f_arfifo_D_OUT[28:21] :
	       x__h4234 ;
  assign MUX_rg_req_beat_write_1__VAL_3 =
	     _0b1_SL_axi_xactor_f_awfifo_first__65_BITS_20_T_ETC___d382 ?
	       axi_xactor_f_awfifo_D_OUT[28:21] :
	       x__h11041 ;
  assign MUX_rg_resp_beat_write_1__VAL_1 = rg_resp_beat - 8'd1 ;
  assign MUX_rg_wr_request_write_1__VAL_1 =
	     { rg_wr_request[61], new_address__h11793, rg_wr_request[28:0] } ;

  // inlined wires
  assign apb_xactor_ff_request_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_send_rd_burst_req ||
	     WILL_FIRE_RL_rl_write_frm_axi ||
	     WILL_FIRE_RL_rl_send_wr_burst_req ;
  always@(WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_1 or
	  WILL_FIRE_RL_rl_send_rd_burst_req or
	  MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or
	  MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_3 or
	  WILL_FIRE_RL_rl_send_wr_burst_req or
	  MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_read_frm_axi:
	  apb_xactor_ff_request_rv_port0__write_1 =
	      MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_send_rd_burst_req:
	  apb_xactor_ff_request_rv_port0__write_1 =
	      MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  apb_xactor_ff_request_rv_port0__write_1 =
	      MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_3;
      WILL_FIRE_RL_rl_send_wr_burst_req:
	  apb_xactor_ff_request_rv_port0__write_1 =
	      MUX_apb_xactor_ff_request_rv_port0__write_1__VAL_4;
      default: apb_xactor_ff_request_rv_port0__write_1 =
		   73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign apb_xactor_ff_request_rv_port1__read =
	     apb_xactor_ff_request_rv_EN_port0__write ?
	       apb_xactor_ff_request_rv_port0__write_1 :
	       apb_xactor_ff_request_rv ;
  assign apb_xactor_ff_request_rv_port1__write_1 =
	     { 1'd0,
	       72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign apb_xactor_ff_request_rv_port2__read =
	     MUX_apb_xactor_rg_sel_write_1__SEL_2 ?
	       apb_xactor_ff_request_rv_port1__write_1 :
	       apb_xactor_ff_request_rv_port1__read ;

  // register apb_xactor_ff_request_rv
  assign apb_xactor_ff_request_rv_D_IN =
	     apb_xactor_ff_request_rv_port2__read ;
  assign apb_xactor_ff_request_rv_EN = 1'b1 ;

  // register apb_xactor_rg_enable
  assign apb_xactor_rg_enable_D_IN =
	     !MUX_apb_xactor_rg_enable_write_1__SEL_1 ;
  assign apb_xactor_rg_enable_EN =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_setup_state ;

  // register apb_xactor_rg_request
  assign apb_xactor_rg_request_D_IN =
	     apb_xactor_ff_request_rv_port1__read[71:0] ;
  assign apb_xactor_rg_request_EN = MUX_apb_xactor_rg_sel_write_1__SEL_2 ;

  // register apb_xactor_rg_sel
  assign apb_xactor_rg_sel_D_IN = !WILL_FIRE_RL_apb_xactor_rl_access_to_idle ;
  assign apb_xactor_rg_sel_EN =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ;

  // register apb_xactor_rg_state
  always@(WILL_FIRE_RL_apb_xactor_rl_access_to_idle or
	  MUX_apb_xactor_rg_sel_write_1__SEL_2 or
	  WILL_FIRE_RL_apb_xactor_rl_setup_state)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_apb_xactor_rl_access_to_idle:
	  apb_xactor_rg_state_D_IN = 2'd0;
      MUX_apb_xactor_rg_sel_write_1__SEL_2: apb_xactor_rg_state_D_IN = 2'd1;
      WILL_FIRE_RL_apb_xactor_rl_setup_state: apb_xactor_rg_state_D_IN = 2'd2;
      default: apb_xactor_rg_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign apb_xactor_rg_state_EN =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_idle_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_setup_state ;

  // register rg_accum_data
  assign rg_accum_data_D_IN = v__h5543 ;
  assign rg_accum_data_EN = CAN_FIRE_RL_rl_read_response_to_axi ;

  // register rg_accum_err
  assign rg_accum_err_D_IN =
	     WILL_FIRE_RL_rl_write_response_to_axi &&
	     MUX_rg_accum_err_write_1__VAL_1 ;
  assign rg_accum_err_EN =
	     WILL_FIRE_RL_rl_write_response_to_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_accum_mask
  always@(WILL_FIRE_RL_rl_read_response_to_axi or
	  MUX_rg_accum_mask_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_rg_accum_mask_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or MUX_rg_accum_mask_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_read_response_to_axi:
	  rg_accum_mask_D_IN = MUX_rg_accum_mask_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi:
	  rg_accum_mask_D_IN = MUX_rg_accum_mask_write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  rg_accum_mask_D_IN = MUX_rg_accum_mask_write_1__VAL_3;
      default: rg_accum_mask_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_accum_mask_EN =
	     WILL_FIRE_RL_rl_read_response_to_axi ||
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_child_burst
  assign rg_child_burst_D_IN =
	     WILL_FIRE_RL_rl_read_frm_axi ?
	       MUX_rg_child_burst_write_1__VAL_1 :
	       MUX_rg_child_burst_write_1__VAL_2 ;
  assign rg_child_burst_EN =
	     WILL_FIRE_RL_rl_read_frm_axi || WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_child_req_count
  always@(MUX_rg_child_req_count_write_1__SEL_1 or
	  MUX_rg_child_req_count_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_rg_child_req_count_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or
	  MUX_rg_child_req_count_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_child_req_count_write_1__SEL_1:
	  rg_child_req_count_D_IN = MUX_rg_child_req_count_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi:
	  rg_child_req_count_D_IN = MUX_rg_child_req_count_write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  rg_child_req_count_D_IN = MUX_rg_child_req_count_write_1__VAL_3;
      default: rg_child_req_count_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_child_req_count_EN =
	     (WILL_FIRE_RL_rl_send_wr_burst_req ||
	      WILL_FIRE_RL_rl_send_rd_burst_req) &&
	     (rg_child_burst != 8'd0 ||
	      !rg_child_req_count_69_EQ_rg_child_burst_66___d170) ||
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_child_res_count
  always@(MUX_rg_child_res_count_write_1__SEL_1 or
	  MUX_rg_child_res_count_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_rg_child_req_count_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or
	  MUX_rg_child_req_count_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_child_res_count_write_1__SEL_1:
	  rg_child_res_count_D_IN = MUX_rg_child_res_count_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi:
	  rg_child_res_count_D_IN = MUX_rg_child_req_count_write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  rg_child_res_count_D_IN = MUX_rg_child_req_count_write_1__VAL_3;
      default: rg_child_res_count_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_child_res_count_EN =
	     (WILL_FIRE_RL_rl_write_response_to_axi ||
	      WILL_FIRE_RL_rl_read_response_to_axi) &&
	     rg_child_burst != 8'd0 ||
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_rd_request
  assign rg_rd_request_D_IN =
	     MUX_rg_rd_request_write_1__SEL_1 ?
	       MUX_rg_rd_request_write_1__VAL_1 :
	       axi_xactor_f_arfifo_D_OUT ;
  assign rg_rd_request_EN =
	     WILL_FIRE_RL_rl_send_rd_burst_req &&
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ||
	     WILL_FIRE_RL_rl_read_frm_axi ;

  // register rg_req_beat
  always@(MUX_rg_req_beat_write_1__SEL_1 or
	  MUX_rg_req_beat_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  MUX_rg_req_beat_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_write_frm_axi or MUX_rg_req_beat_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_req_beat_write_1__SEL_1:
	  rg_req_beat_D_IN = MUX_rg_req_beat_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi:
	  rg_req_beat_D_IN = MUX_rg_req_beat_write_1__VAL_2;
      WILL_FIRE_RL_rl_write_frm_axi:
	  rg_req_beat_D_IN = MUX_rg_req_beat_write_1__VAL_3;
      default: rg_req_beat_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_req_beat_EN =
	     _dand1rg_req_beat_EN_write || WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_resp_beat
  always@(MUX_rg_resp_beat_write_1__SEL_1 or
	  MUX_rg_resp_beat_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or
	  x__h4234 or WILL_FIRE_RL_rl_write_frm_axi or x__h11041)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_resp_beat_write_1__SEL_1:
	  rg_resp_beat_D_IN = MUX_rg_resp_beat_write_1__VAL_1;
      WILL_FIRE_RL_rl_read_frm_axi: rg_resp_beat_D_IN = x__h4234;
      WILL_FIRE_RL_rl_write_frm_axi: rg_resp_beat_D_IN = x__h11041;
      default: rg_resp_beat_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_resp_beat_EN =
	     (WILL_FIRE_RL_rl_write_response_to_axi ||
	      WILL_FIRE_RL_rl_read_response_to_axi) &&
	     (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	      rg_child_burst == 8'd0) ||
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_state
  always@(MUX_rg_state_write_1__SEL_1 or
	  WILL_FIRE_RL_rl_read_frm_axi or WILL_FIRE_RL_rl_write_frm_axi)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state_write_1__SEL_1: rg_state_D_IN = 2'd0;
      WILL_FIRE_RL_rl_read_frm_axi: rg_state_D_IN = 2'd1;
      WILL_FIRE_RL_rl_write_frm_axi: rg_state_D_IN = 2'd2;
      default: rg_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_state_EN =
	     _dand1rg_state_EN_write || WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_wd_request
  assign rg_wd_request_D_IN = axi_xactor_f_wfifo_D_OUT ;
  assign rg_wd_request_EN = WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_wr_request
  assign rg_wr_request_D_IN =
	     MUX_rg_wr_request_write_1__SEL_1 ?
	       MUX_rg_wr_request_write_1__VAL_1 :
	       axi_xactor_f_awfifo_D_OUT ;
  assign rg_wr_request_EN =
	     WILL_FIRE_RL_rl_send_wr_burst_req &&
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // submodule apb_xactor_ff_response
  assign apb_xactor_ff_response_D_IN = { APB_PRDATA, APB_PSLVERR } ;
  assign apb_xactor_ff_response_ENQ =
	     WILL_FIRE_RL_apb_xactor_rl_access_to_setup ||
	     WILL_FIRE_RL_apb_xactor_rl_access_to_idle ;
  assign apb_xactor_ff_response_DEQ = MUX_rg_child_res_count_write_1__PSEL_1 ;
  assign apb_xactor_ff_response_CLR = 1'b0 ;

  // submodule axi_xactor_f_arfifo
  assign axi_xactor_f_arfifo_D_IN =
	     { AXI4_ARID,
	       AXI4_ARADDR,
	       AXI4_ARLEN,
	       AXI4_ARSIZE,
	       AXI4_ARBURST,
	       AXI4_ARLOCK,
	       AXI4_ARCACHE,
	       AXI4_ARPROT,
	       AXI4_ARQOS,
	       AXI4_ARREGION } ;
  assign axi_xactor_f_arfifo_ENQ =
	     AXI4_ARVALID && axi_xactor_f_arfifo_FULL_N ;
  assign axi_xactor_f_arfifo_DEQ = CAN_FIRE_RL_rl_read_frm_axi ;
  assign axi_xactor_f_arfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_awfifo
  assign axi_xactor_f_awfifo_D_IN =
	     { AXI4_AWID,
	       AXI4_AWADDR,
	       AXI4_AWLEN,
	       AXI4_AWSIZE,
	       AXI4_AWBURST,
	       AXI4_AWLOCK,
	       AXI4_AWCACHE,
	       AXI4_AWPROT,
	       AXI4_AWQOS,
	       AXI4_AWREGION } ;
  assign axi_xactor_f_awfifo_ENQ =
	     AXI4_AWVALID && axi_xactor_f_awfifo_FULL_N ;
  assign axi_xactor_f_awfifo_DEQ = WILL_FIRE_RL_rl_write_frm_axi ;
  assign axi_xactor_f_awfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_bfifo
  assign axi_xactor_f_bfifo_D_IN =
	     { rg_wr_request[61],
	       (rg_accum_err || apb_xactor_ff_response_D_OUT[0]) ?
		 2'b10 :
		 2'b0 } ;
  assign axi_xactor_f_bfifo_ENQ =
	     WILL_FIRE_RL_rl_write_response_to_axi && rg_resp_beat == 8'd1 &&
	     (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	      rg_child_burst == 8'd0) ;
  assign axi_xactor_f_bfifo_DEQ = AXI4_BREADY && axi_xactor_f_bfifo_EMPTY_N ;
  assign axi_xactor_f_bfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_rfifo
  assign axi_xactor_f_rfifo_D_IN =
	     { rg_rd_request[61],
	       v__h5543,
	       axi_response_rresp__h9978,
	       rg_resp_beat == 8'd1 } ;
  assign axi_xactor_f_rfifo_ENQ =
	     WILL_FIRE_RL_rl_read_response_to_axi &&
	     (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	      rg_child_burst == 8'd0) ;
  assign axi_xactor_f_rfifo_DEQ = AXI4_RREADY && axi_xactor_f_rfifo_EMPTY_N ;
  assign axi_xactor_f_rfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_wfifo
  assign axi_xactor_f_wfifo_D_IN = { AXI4_WDATA, AXI4_WSTRB, AXI4_WLAST } ;
  assign axi_xactor_f_wfifo_ENQ = AXI4_WVALID && axi_xactor_f_wfifo_FULL_N ;
  assign axi_xactor_f_wfifo_DEQ =
	     WILL_FIRE_RL_rl_write_frm_axi &&
	     _0b1_SL_axi_xactor_f_awfifo_first__65_BITS_20_T_ETC___d382 ||
	     _dand2axi_xactor_f_wfifo_EN_deq ;
  assign axi_xactor_f_wfifo_CLR = 1'b0 ;

  // remaining internal signals
  assign _0b1_SL_axi_xactor_f_arfifo_first__2_BITS_20_TO_ETC___d154 =
	     request_size__h4178 <= 8'd4 ;
  assign _0b1_SL_axi_xactor_f_awfifo_first__65_BITS_20_T_ETC___d382 =
	     request_size__h10974 <= 8'd4 ;
  assign _dand1rg_req_beat_EN_write =
	     (WILL_FIRE_RL_rl_send_wr_burst_req ||
	      WILL_FIRE_RL_rl_send_rd_burst_req) &&
	     (rg_child_req_count == y__h12179 || rg_child_burst == 8'd0) ;
  assign _dand1rg_state_EN_write =
	     (WILL_FIRE_RL_rl_write_response_to_axi ||
	      WILL_FIRE_RL_rl_read_response_to_axi) &&
	     rg_resp_beat == 8'd1 &&
	     (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	      rg_child_burst == 8'd0) ;
  assign _dand2axi_xactor_f_wfifo_EN_deq =
	     WILL_FIRE_RL_rl_send_wr_burst_req &&
	     (rg_child_req_count == y__h12179 || rg_child_burst == 8'd0) ;
  assign apb_request_paddr__h12461 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       new_address__h11793 :
	       y_avValue_fst__h12139 ;
  assign apb_xactor_ff_response_first__37_BITS_32_TO_25_ETC___d273 =
	     { x__h6323 | y__h6324,
	       x__h7131 | y__h7132,
	       x__h7269 | y__h7270,
	       x__h7407 | y__h7408 } ;
  assign apb_xactor_ff_response_first__37_BITS_32_TO_25_ETC___d288 =
	     { apb_xactor_ff_response_first__37_BITS_32_TO_25_ETC___d273,
	       x__h7545 | y__h7546,
	       x__h7683 | y__h7684 } ;
  assign axi_response_rresp__h9978 =
	     apb_xactor_ff_response_D_OUT[0] ? 2'b10 : 2'b0 ;
  assign mask__h11937 = 32'hFFFFFFFF << x__h11980 ;
  assign mask__h4742 = 32'hFFFFFFFF << x__h4783 ;
  assign new_address__h11935 =
	     rg_wr_request[60:29] +
	     (32'b00000000000000000000000000000001 << rg_wr_request[20:18]) ;
  assign new_address__h4740 =
	     rg_rd_request[60:29] +
	     (32'b00000000000000000000000000000001 << rg_rd_request[20:18]) ;
  assign request_size__h10974 =
	     8'b00000001 << axi_xactor_f_awfifo_D_OUT[20:18] ;
  assign request_size__h4178 =
	     8'b00000001 << axi_xactor_f_arfifo_D_OUT[20:18] ;
  assign rg_child_req_count_69_EQ_rg_child_burst_66___d170 =
	     rg_child_req_count == rg_child_burst ;
  assign rg_child_res_count_07_EQ_rg_child_burst_66___d308 =
	     rg_child_res_count == rg_child_burst ;
  assign shift__h11854 = { rg_child_req_count, 3'd0 } ;
  assign temp1__h11938 = rg_wr_request[60:29] & mask__h11937 ;
  assign temp1__h4743 = rg_rd_request[60:29] & mask__h4742 ;
  assign temp2__h11939 = new_address__h11935 & y__h12039 ;
  assign temp2__h4744 = new_address__h4740 & y__h4842 ;
  assign v__h4598 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       new_address__h4593 :
	       v__h4618 ;
  assign v__h4618 = rg_rd_request[60:29] + { 24'd0, rg_child_req_count } ;
  assign v__h5543 =
	     { apb_xactor_ff_response_first__37_BITS_32_TO_25_ETC___d288,
	       x__h7821 | y__h7822,
	       x__h7959 | y__h7960 } ;
  assign x__h10704 = axi_xactor_f_wfifo_D_OUT[72:9] >> x__h10728 ;
  assign x__h10728 = { axi_xactor_f_awfifo_D_OUT[31:29], 3'b0 } ;
  assign x__h10751 =
	     axi_xactor_f_wfifo_D_OUT[8:1] >>
	     axi_xactor_f_awfifo_D_OUT[31:29] ;
  assign x__h11041 = axi_xactor_f_awfifo_D_OUT[28:21] + 8'd1 ;
  assign x__h11829 = rg_child_req_count + 8'd4 ;
  assign x__h11980 =
	     rg_wr_request[20:18] +
	     CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 ;
  assign x__h12471 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       axi_xactor_f_wfifo_D_OUT[72:9] :
	       y_avValue_snd_fst__h12472 ;
  assign x__h12498 =
	     rg_child_req_count_69_EQ_rg_child_burst_66___d170 ?
	       axi_xactor_f_wfifo_D_OUT[8:1] :
	       y_avValue_snd_snd__h12473 ;
  assign x__h13210 = rg_child_res_count + 8'd4 ;
  assign x__h4234 = axi_xactor_f_arfifo_D_OUT[28:21] + 8'd1 ;
  assign x__h4783 =
	     rg_rd_request[20:18] +
	     CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 ;
  assign x__h6323 = apb_xactor_ff_response_D_OUT[32:25] & y__h6325 ;
  assign x__h7131 = apb_xactor_ff_response_D_OUT[24:17] & y__h7133 ;
  assign x__h7269 = apb_xactor_ff_response_D_OUT[16:9] & y__h7271 ;
  assign x__h7407 = apb_xactor_ff_response_D_OUT[8:1] & y__h7409 ;
  assign x__h7545 = apb_xactor_ff_response_D_OUT[32:25] & y__h7547 ;
  assign x__h7683 = apb_xactor_ff_response_D_OUT[24:17] & y__h7685 ;
  assign x__h7821 = apb_xactor_ff_response_D_OUT[16:9] & y__h7823 ;
  assign x__h7959 = apb_xactor_ff_response_D_OUT[8:1] & y__h7961 ;
  assign y__h12039 = ~mask__h11937 ;
  assign y__h12179 = rg_child_burst - 8'd4 ;
  assign y__h4842 = ~mask__h4742 ;
  assign y__h6324 = rg_accum_data[63:56] & y__h7054 ;
  assign y__h6325 = {8{rg_accum_mask[7]}} ;
  assign y__h7054 = ~y__h6325 ;
  assign y__h7132 = rg_accum_data[55:48] & y__h7193 ;
  assign y__h7133 = {8{rg_accum_mask[6]}} ;
  assign y__h7193 = ~y__h7133 ;
  assign y__h7270 = rg_accum_data[47:40] & y__h7331 ;
  assign y__h7271 = {8{rg_accum_mask[5]}} ;
  assign y__h7331 = ~y__h7271 ;
  assign y__h7408 = rg_accum_data[39:32] & y__h7469 ;
  assign y__h7409 = {8{rg_accum_mask[4]}} ;
  assign y__h7469 = ~y__h7409 ;
  assign y__h7546 = rg_accum_data[31:24] & y__h7607 ;
  assign y__h7547 = {8{rg_accum_mask[3]}} ;
  assign y__h7607 = ~y__h7547 ;
  assign y__h7684 = rg_accum_data[23:16] & y__h7745 ;
  assign y__h7685 = {8{rg_accum_mask[2]}} ;
  assign y__h7745 = ~y__h7685 ;
  assign y__h7822 = rg_accum_data[15:8] & y__h7883 ;
  assign y__h7823 = {8{rg_accum_mask[1]}} ;
  assign y__h7883 = ~y__h7823 ;
  assign y__h7960 = rg_accum_data[7:0] & y__h8021 ;
  assign y__h7961 = {8{rg_accum_mask[0]}} ;
  assign y__h8021 = ~y__h7961 ;
  assign y_avValue_fst__h12139 =
	     rg_wr_request[60:29] + { 24'd0, rg_child_req_count } ;
  assign y_avValue_snd_fst__h12472 =
	     axi_xactor_f_wfifo_D_OUT[72:9] >> shift__h11854 ;
  assign y_avValue_snd_snd__h12473 =
	     axi_xactor_f_wfifo_D_OUT[8:1] >> rg_child_req_count ;
  always@(rg_rd_request)
  begin
    case (rg_rd_request[28:21])
      8'd3: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd2;
      8'd7: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd3;
      8'd15: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd4;
      default: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd1;
    endcase
  end
  always@(rg_rd_request or temp1__h4743 or temp2__h4744 or new_address__h4740)
  begin
    case (rg_rd_request[17:16])
      2'b0: new_address__h4593 = rg_rd_request[60:29];
      2'b01: new_address__h4593 = new_address__h4740;
      default: new_address__h4593 = temp1__h4743 | temp2__h4744;
    endcase
  end
  always@(rg_wr_request)
  begin
    case (rg_wr_request[28:21])
      8'd3: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd2;
      8'd7: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd3;
      8'd15: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd4;
      default: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd1;
    endcase
  end
  always@(rg_wr_request or
	  temp1__h11938 or temp2__h11939 or new_address__h11935)
  begin
    case (rg_wr_request[17:16])
      2'b0: new_address__h11793 = rg_wr_request[60:29];
      2'b01: new_address__h11793 = new_address__h11935;
      default: new_address__h11793 = temp1__h11938 | temp2__h11939;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        apb_xactor_ff_request_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	apb_xactor_rg_enable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	apb_xactor_rg_request <= `BSV_ASSIGNMENT_DELAY 72'd0;
	apb_xactor_rg_sel <= `BSV_ASSIGNMENT_DELAY 1'd0;
	apb_xactor_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_accum_data <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_accum_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_accum_mask <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_burst <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_req_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_res_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_rd_request <= `BSV_ASSIGNMENT_DELAY 62'd0;
	rg_req_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_resp_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_wd_request <= `BSV_ASSIGNMENT_DELAY 73'd0;
	rg_wr_request <= `BSV_ASSIGNMENT_DELAY 62'd0;
      end
    else
      begin
        if (apb_xactor_ff_request_rv_EN)
	  apb_xactor_ff_request_rv <= `BSV_ASSIGNMENT_DELAY
	      apb_xactor_ff_request_rv_D_IN;
	if (apb_xactor_rg_enable_EN)
	  apb_xactor_rg_enable <= `BSV_ASSIGNMENT_DELAY
	      apb_xactor_rg_enable_D_IN;
	if (apb_xactor_rg_request_EN)
	  apb_xactor_rg_request <= `BSV_ASSIGNMENT_DELAY
	      apb_xactor_rg_request_D_IN;
	if (apb_xactor_rg_sel_EN)
	  apb_xactor_rg_sel <= `BSV_ASSIGNMENT_DELAY apb_xactor_rg_sel_D_IN;
	if (apb_xactor_rg_state_EN)
	  apb_xactor_rg_state <= `BSV_ASSIGNMENT_DELAY
	      apb_xactor_rg_state_D_IN;
	if (rg_accum_data_EN)
	  rg_accum_data <= `BSV_ASSIGNMENT_DELAY rg_accum_data_D_IN;
	if (rg_accum_err_EN)
	  rg_accum_err <= `BSV_ASSIGNMENT_DELAY rg_accum_err_D_IN;
	if (rg_accum_mask_EN)
	  rg_accum_mask <= `BSV_ASSIGNMENT_DELAY rg_accum_mask_D_IN;
	if (rg_child_burst_EN)
	  rg_child_burst <= `BSV_ASSIGNMENT_DELAY rg_child_burst_D_IN;
	if (rg_child_req_count_EN)
	  rg_child_req_count <= `BSV_ASSIGNMENT_DELAY rg_child_req_count_D_IN;
	if (rg_child_res_count_EN)
	  rg_child_res_count <= `BSV_ASSIGNMENT_DELAY rg_child_res_count_D_IN;
	if (rg_rd_request_EN)
	  rg_rd_request <= `BSV_ASSIGNMENT_DELAY rg_rd_request_D_IN;
	if (rg_req_beat_EN)
	  rg_req_beat <= `BSV_ASSIGNMENT_DELAY rg_req_beat_D_IN;
	if (rg_resp_beat_EN)
	  rg_resp_beat <= `BSV_ASSIGNMENT_DELAY rg_resp_beat_D_IN;
	if (rg_state_EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state_D_IN;
	if (rg_wd_request_EN)
	  rg_wd_request <= `BSV_ASSIGNMENT_DELAY rg_wd_request_D_IN;
	if (rg_wr_request_EN)
	  rg_wr_request <= `BSV_ASSIGNMENT_DELAY rg_wr_request_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    apb_xactor_ff_request_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    apb_xactor_rg_enable = 1'h0;
    apb_xactor_rg_request = 72'hAAAAAAAAAAAAAAAAAA;
    apb_xactor_rg_sel = 1'h0;
    apb_xactor_rg_state = 2'h2;
    rg_accum_data = 64'hAAAAAAAAAAAAAAAA;
    rg_accum_err = 1'h0;
    rg_accum_mask = 8'hAA;
    rg_child_burst = 8'hAA;
    rg_child_req_count = 8'hAA;
    rg_child_res_count = 8'hAA;
    rg_rd_request = 62'h2AAAAAAAAAAAAAAA;
    rg_req_beat = 8'hAA;
    rg_resp_beat = 8'hAA;
    rg_state = 2'h2;
    rg_wd_request = 73'h0AAAAAAAAAAAAAAAAAA;
    rg_wr_request = 62'h2AAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d98 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d99 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d100 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d107 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b0;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d109 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b001;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d111 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b010;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d113 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b011;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d115 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b100;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d117 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b101;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d119 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b110;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d133 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b0 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b001 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b010 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b011 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b100 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b101 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b110;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d136 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b0;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d138 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b01;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d140 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b10;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d146 =
	(TASK_testplusargs___d98 ||
	 TASK_testplusargs___d99 && TASK_testplusargs___d100) &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b0 &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b01 &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  v__h3888 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$write("[%10d", v__h3888, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$write("Axi2Apb: Axi4-Read:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$write("{araddr:%0h",
	       axi_xactor_f_arfifo_D_OUT[60:29],
	       ",arlen:%0d",
	       axi_xactor_f_arfifo_D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d107)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d109)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d111)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d113)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d115)
	$write("sz16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d117)
	$write("sz32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d119)
	$write("sz64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d133)
	$write("sz128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d136)
	$write("fixed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d138)
	$write("incr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d140)
	$write("wrap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d146)
	$write("burst:%0d", axi_xactor_f_arfifo_D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d98 ||
	   TASK_testplusargs___d99 && TASK_testplusargs___d100))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d147 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d148 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d149 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  v__h4088 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("[%10d", v__h4088, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("Axi2Apb: APB-Req  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("{paddr:'h%0h,",
	       axi_xactor_f_arfifo_D_OUT[60:29],
	       "prot:%0d",
	       axi_xactor_f_arfifo_D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  !rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d313 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  !rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d314 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  !rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d315 = $test$plusargs("l0");
	  #0;
	end
    NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d318 =
	!rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	rg_child_burst != 8'd0 &&
	(TASK_testplusargs___d313 ||
	 TASK_testplusargs___d314 && TASK_testplusargs___d315);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  !rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	  rg_child_burst != 8'd0)
	begin
	  v__h9800 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d318)
	$write("[%10d", v__h9800, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d318)
	$write("Axi2Apb: Accumulate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d318)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	   rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d327 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	   rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d328 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	   rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d329 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d334 =
	(TASK_testplusargs___d327 ||
	 TASK_testplusargs___d328 && TASK_testplusargs___d329) &&
	apb_xactor_ff_response_D_OUT[0];
    TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d337 =
	(TASK_testplusargs___d327 ||
	 TASK_testplusargs___d328 && TASK_testplusargs___d329) &&
	!apb_xactor_ff_response_D_OUT[0];
    TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d339 =
	(TASK_testplusargs___d327 ||
	 TASK_testplusargs___d328 && TASK_testplusargs___d329) &&
	rg_resp_beat == 8'd1;
    TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d342 =
	(TASK_testplusargs___d327 ||
	 TASK_testplusargs___d328 && TASK_testplusargs___d329) &&
	rg_resp_beat != 8'd1;
    rg_child_res_count_07_EQ_rg_child_burst_66_08__ETC___d332 =
	(rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	 rg_child_burst == 8'd0) &&
	(TASK_testplusargs___d327 ||
	 TASK_testplusargs___d328 && TASK_testplusargs___d329);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	   rg_child_burst == 8'd0))
	begin
	  v__h10064 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_07_EQ_rg_child_burst_66_08__ETC___d332)
	$write("[%10d", v__h10064, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_07_EQ_rg_child_burst_66_08__ETC___d332)
	$write("Axi2Apb: AXI-RdResp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_07_EQ_rg_child_burst_66_08__ETC___d332)
	$write("{rresp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	   rg_child_burst == 8'd0) &&
	  TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d334)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	   rg_child_burst == 8'd0) &&
	  TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d337)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_07_EQ_rg_child_burst_66_08__ETC___d332)
	$write(",rdata:%0h", v__h5543);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	   rg_child_burst == 8'd0) &&
	  TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d339)
	$write(",rlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (rg_child_res_count_07_EQ_rg_child_burst_66___d308 ||
	   rg_child_burst == 8'd0) &&
	  TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d342)
	$write(",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_07_EQ_rg_child_burst_66_08__ETC___d332)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  rg_child_res_count_07_EQ_rg_child_burst_66_08__ETC___d332)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d345 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d346 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d347 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_45_OR_TASK_testplusargs_46_A_ETC___d352 =
	(TASK_testplusargs___d345 ||
	 TASK_testplusargs___d346 && TASK_testplusargs___d347) &&
	apb_xactor_ff_response_D_OUT[0];
    TASK_testplusargs_45_OR_TASK_testplusargs_46_A_ETC___d353 =
	(TASK_testplusargs___d345 ||
	 TASK_testplusargs___d346 && TASK_testplusargs___d347) &&
	!apb_xactor_ff_response_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  v__h10392 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d345 ||
	   TASK_testplusargs___d346 && TASK_testplusargs___d347))
	$write("[%10d", v__h10392, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d345 ||
	   TASK_testplusargs___d346 && TASK_testplusargs___d347))
	$write("Axi2Apb: APB-Resp: Count:%2d", rg_resp_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d345 ||
	   TASK_testplusargs___d346 && TASK_testplusargs___d347))
	$write("{prdata:'h%0h pslverr:", apb_xactor_ff_response_D_OUT[32:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_45_OR_TASK_testplusargs_46_A_ETC___d352)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_45_OR_TASK_testplusargs_46_A_ETC___d353)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d345 ||
	   TASK_testplusargs___d346 && TASK_testplusargs___d347))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d345 ||
	   TASK_testplusargs___d346 && TASK_testplusargs___d347))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d354 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d355 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d356 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  v__h10535 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d354 ||
	   TASK_testplusargs___d355 && TASK_testplusargs___d356))
	$write("[%10d", v__h10535, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d354 ||
	   TASK_testplusargs___d355 && TASK_testplusargs___d356))
	$write("Axi2Apb: Child:%d ChildRes:%d Mask:%b Accum:%h",
	       rg_child_burst,
	       rg_child_res_count,
	       rg_accum_mask,
	       rg_accum_data);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d354 ||
	   TASK_testplusargs___d355 && TASK_testplusargs___d356))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d211 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d212 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d213 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h5157 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d211 ||
	   TASK_testplusargs___d212 && TASK_testplusargs___d213))
	$write("[%10d", v__h5157, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d211 ||
	   TASK_testplusargs___d212 && TASK_testplusargs___d213))
	$write("Axi2Apb: Axi4-RdBurst Addr:%h Count:%d",
	       v__h4598,
	       rg_req_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d211 ||
	   TASK_testplusargs___d212 && TASK_testplusargs___d213))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d217 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d218 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d219 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h5301 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$write("[%10d", v__h5301, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$write("Axi2Apb: New APB-Req  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$write("{paddr:'h%0h,", v__h4598, "prot:%0d", rg_rd_request[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$write("read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d217 ||
	   TASK_testplusargs___d218 && TASK_testplusargs___d219))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d223 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d224 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d225 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h5447 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d223 ||
	   TASK_testplusargs___d224 && TASK_testplusargs___d225))
	$write("[%10d", v__h5447, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d223 ||
	   TASK_testplusargs___d224 && TASK_testplusargs___d225))
	$write("Axi2Apb: Child:%d ChildReq:%d",
	       rg_child_burst,
	       rg_child_req_count);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d223 ||
	   TASK_testplusargs___d224 && TASK_testplusargs___d225))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d389 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d390 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d391 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d396 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b0;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d398 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b001;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d400 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b010;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d402 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b011;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d404 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b100;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d406 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b101;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d408 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b110;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d422 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b0 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b001 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b010 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b011 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b100 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b101 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b110;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d425 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b0;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d427 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b01;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d429 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b10;
    TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d435 =
	(TASK_testplusargs___d389 ||
	 TASK_testplusargs___d390 && TASK_testplusargs___d391) &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b0 &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b01 &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h11536 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d389 ||
	   TASK_testplusargs___d390 && TASK_testplusargs___d391))
	$write("[%10d", v__h11536, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d389 ||
	   TASK_testplusargs___d390 && TASK_testplusargs___d391))
	$write("Axi2Apb: Axi4-Write:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d389 ||
	   TASK_testplusargs___d390 && TASK_testplusargs___d391))
	$write("{awaddr:%0h,",
	       axi_xactor_f_awfifo_D_OUT[60:29],
	       "awlen:%0d",
	       axi_xactor_f_awfifo_D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d389 ||
	   TASK_testplusargs___d390 && TASK_testplusargs___d391))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d396)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d398)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d400)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d402)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d404)
	$write("sz16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d406)
	$write("sz32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d408)
	$write("sz64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d422)
	$write("sz128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d389 ||
	   TASK_testplusargs___d390 && TASK_testplusargs___d391))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d425)
	$write("fixed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d427)
	$write("incr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d429)
	$write("wrap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_89_OR_TASK_testplusargs_90_A_ETC___d435)
	$write("burst:%0d", axi_xactor_f_awfifo_D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d389 ||
	   TASK_testplusargs___d390 && TASK_testplusargs___d391))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d389 ||
	   TASK_testplusargs___d390 && TASK_testplusargs___d391))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d436 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d437 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d438 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h11727 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d436 ||
	   TASK_testplusargs___d437 && TASK_testplusargs___d438))
	$write("[%10d", v__h11727, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d436 ||
	   TASK_testplusargs___d437 && TASK_testplusargs___d438))
	$write("Axi2Apb: APB-Req  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d436 ||
	   TASK_testplusargs___d437 && TASK_testplusargs___d438))
	$write("{paddr:'h%0h,",
	       axi_xactor_f_awfifo_D_OUT[60:29],
	       "prot:%0d",
	       axi_xactor_f_awfifo_D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d436 ||
	   TASK_testplusargs___d437 && TASK_testplusargs___d438))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d436 ||
	   TASK_testplusargs___d437 && TASK_testplusargs___d438))
	$write("write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d436 ||
	   TASK_testplusargs___d437 && TASK_testplusargs___d438))
	$write(",data:'h%0h", x__h10704[31:0], ",strb:%b", x__h10751[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d436 ||
	   TASK_testplusargs___d437 && TASK_testplusargs___d438))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d436 ||
	   TASK_testplusargs___d437 && TASK_testplusargs___d438))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  !rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d524 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  !rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d525 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  !rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	  rg_child_burst != 8'd0)
	begin
	  TASK_testplusargs___d526 = $test$plusargs("l0");
	  #0;
	end
    NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d529 =
	!rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	rg_child_burst != 8'd0 &&
	(TASK_testplusargs___d524 ||
	 TASK_testplusargs___d525 && TASK_testplusargs___d526);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  !rg_child_res_count_07_EQ_rg_child_burst_66___d308 &&
	  rg_child_burst != 8'd0)
	begin
	  v__h13123 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d529)
	$write("[%10d", v__h13123, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d529)
	$write("Axi2Apb: Accumulate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  NOT_rg_child_res_count_07_EQ_rg_child_burst_66_ETC___d529)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d533 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d534 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d535 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_33_OR_TASK_testplusargs_34_A_ETC___d539 =
	(TASK_testplusargs___d533 ||
	 TASK_testplusargs___d534 && TASK_testplusargs___d535) &&
	apb_xactor_ff_response_D_OUT[0];
    TASK_testplusargs_33_OR_TASK_testplusargs_34_A_ETC___d540 =
	(TASK_testplusargs___d533 ||
	 TASK_testplusargs___d534 && TASK_testplusargs___d535) &&
	!apb_xactor_ff_response_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  v__h13524 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d533 ||
	   TASK_testplusargs___d534 && TASK_testplusargs___d535))
	$write("[%10d", v__h13524, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d533 ||
	   TASK_testplusargs___d534 && TASK_testplusargs___d535))
	$write("Axi2Apb: APB-Resp: Count:%2d", rg_resp_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d533 ||
	   TASK_testplusargs___d534 && TASK_testplusargs___d535))
	$write("{prdata:'h%0h pslverr:", apb_xactor_ff_response_D_OUT[32:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  TASK_testplusargs_33_OR_TASK_testplusargs_34_A_ETC___d539)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  TASK_testplusargs_33_OR_TASK_testplusargs_34_A_ETC___d540)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d533 ||
	   TASK_testplusargs___d534 && TASK_testplusargs___d535))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d533 ||
	   TASK_testplusargs___d534 && TASK_testplusargs___d535))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (rg_child_req_count == y__h12179 || rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d472 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (rg_child_req_count == y__h12179 || rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d473 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (rg_child_req_count == y__h12179 || rg_child_burst == 8'd0))
	begin
	  TASK_testplusargs___d474 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_72_OR_TASK_testplusargs_73_A_ETC___d480 =
	(TASK_testplusargs___d472 ||
	 TASK_testplusargs___d473 && TASK_testplusargs___d474) &&
	axi_xactor_f_wfifo_D_OUT[0];
    TASK_testplusargs_72_OR_TASK_testplusargs_73_A_ETC___d483 =
	(TASK_testplusargs___d472 ||
	 TASK_testplusargs___d473 && TASK_testplusargs___d474) &&
	!axi_xactor_f_wfifo_D_OUT[0];
    rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d477 =
	(rg_child_req_count == y__h12179 || rg_child_burst == 8'd0) &&
	(TASK_testplusargs___d472 ||
	 TASK_testplusargs___d473 && TASK_testplusargs___d474);
    rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d481 =
	(rg_child_req_count == y__h12179 || rg_child_burst == 8'd0) &&
	TASK_testplusargs_72_OR_TASK_testplusargs_73_A_ETC___d480;
    rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d484 =
	(rg_child_req_count == y__h12179 || rg_child_burst == 8'd0) &&
	TASK_testplusargs_72_OR_TASK_testplusargs_73_A_ETC___d483;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (rg_child_req_count == y__h12179 || rg_child_burst == 8'd0))
	begin
	  v__h12321 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d477)
	$write("[%10d", v__h12321, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d477)
	$write("Axi2Apb: Axi4-Wr Poping Wd Request:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d477)
	$write("{wdata:%0h,wstrb:%0h",
	       axi_xactor_f_wfifo_D_OUT[72:9],
	       axi_xactor_f_wfifo_D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d481)
	$write(",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d484)
	$write(",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d477)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  rg_child_req_count_69_EQ_rg_child_burst_66_MIN_ETC___d477)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d498 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d499 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d500 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d504 =
	(TASK_testplusargs___d498 ||
	 TASK_testplusargs___d499 && TASK_testplusargs___d500) &&
	axi_xactor_f_wfifo_D_OUT[0];
    TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d505 =
	(TASK_testplusargs___d498 ||
	 TASK_testplusargs___d499 && TASK_testplusargs___d500) &&
	!axi_xactor_f_wfifo_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h12599 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d498 ||
	   TASK_testplusargs___d499 && TASK_testplusargs___d500))
	$write("[%10d", v__h12599, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d498 ||
	   TASK_testplusargs___d499 && TASK_testplusargs___d500))
	$write("Axi2Apb: New Axi4-Write Count:%d:", rg_req_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d498 ||
	   TASK_testplusargs___d499 && TASK_testplusargs___d500))
	$write("{wdata:%0h,wstrb:%0h",
	       axi_xactor_f_wfifo_D_OUT[72:9],
	       axi_xactor_f_wfifo_D_OUT[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d504)
	$write(",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d505)
	$write(",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d498 ||
	   TASK_testplusargs___d499 && TASK_testplusargs___d500))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d498 ||
	   TASK_testplusargs___d499 && TASK_testplusargs___d500))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d506 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d507 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d508 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h12754 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d506 ||
	   TASK_testplusargs___d507 && TASK_testplusargs___d508))
	$write("[%10d", v__h12754, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d506 ||
	   TASK_testplusargs___d507 && TASK_testplusargs___d508))
	$write("Axi2Apb: APB-Req  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d506 ||
	   TASK_testplusargs___d507 && TASK_testplusargs___d508))
	$write("{paddr:'h%0h,",
	       apb_request_paddr__h12461,
	       "prot:%0d",
	       rg_wr_request[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d506 ||
	   TASK_testplusargs___d507 && TASK_testplusargs___d508))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d506 ||
	   TASK_testplusargs___d507 && TASK_testplusargs___d508))
	$write("write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d506 ||
	   TASK_testplusargs___d507 && TASK_testplusargs___d508))
	$write(",data:'h%0h", x__h12471[31:0], ",strb:%b", x__h12498[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d506 ||
	   TASK_testplusargs___d507 && TASK_testplusargs___d508))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d506 ||
	   TASK_testplusargs___d507 && TASK_testplusargs___d508))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d512 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d513 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d514 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h12904 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("[%10d", v__h12904, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("Axi2Apb: Child:%d ChildReq:%d",
	       rg_child_burst,
	       rg_child_req_count);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d8 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d9 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d10 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  v__h1096 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$write("[%10d", v__h1096, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$write("APB_M: Idle -> Setup");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d14 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d15 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  TASK_testplusargs___d16 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	apb_xactor_ff_request_rv_port1__read[36];
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d25 =
	(TASK_testplusargs___d14 ||
	 TASK_testplusargs___d15 && TASK_testplusargs___d16) &&
	!apb_xactor_ff_request_rv_port1__read[36];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup)
	begin
	  v__h1231 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write("[%10d", v__h1231, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write("APB_M: Req from master: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write("{paddr:'h%0h,",
	       apb_xactor_ff_request_rv_port1__read[71:40],
	       "prot:%0d",
	       apb_xactor_ff_request_rv_port1__read[39:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23)
	$write("write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d25)
	$write("read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d23)
	$write(",data:'h%0h",
	       apb_xactor_ff_request_rv_port1__read[35:4],
	       ",strb:%b",
	       apb_xactor_ff_request_rv_port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d25)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_idle_to_setup &&
	  (TASK_testplusargs___d14 ||
	   TASK_testplusargs___d15 && TASK_testplusargs___d16))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state)
	begin
	  TASK_testplusargs___d29 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state)
	begin
	  TASK_testplusargs___d31 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state)
	begin
	  v__h1418 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state &&
	  (TASK_testplusargs___d29 ||
	   TASK_testplusargs___d30 && TASK_testplusargs___d31))
	$write("[%10d", v__h1418, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state &&
	  (TASK_testplusargs___d29 ||
	   TASK_testplusargs___d30 && TASK_testplusargs___d31))
	$write("APB_M: Setup -> Access");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_setup_state &&
	  (TASK_testplusargs___d29 ||
	   TASK_testplusargs___d30 && TASK_testplusargs___d31))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d45 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d46 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d47 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  v__h1665 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$write("[%10d", v__h1665, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$write("APB_M: Access -> Idle");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d51 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d52 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  TASK_testplusargs___d53 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d57 =
	(TASK_testplusargs___d51 ||
	 TASK_testplusargs___d52 && TASK_testplusargs___d53) &&
	APB_PSLVERR;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59 =
	(TASK_testplusargs___d51 ||
	 TASK_testplusargs___d52 && TASK_testplusargs___d53) &&
	!APB_PSLVERR;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle)
	begin
	  v__h1800 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$write("[%10d", v__h1800, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$write("APB_M: Res from slave: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$write("{prdata:'h%0h pslverr:", APB_PRDATA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d57)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_idle &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d62 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d63 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d64 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  v__h2096 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("[%10d", v__h2096, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("APB_M: Access -> Setup");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d68 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d69 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d70 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d74 =
	(TASK_testplusargs___d68 ||
	 TASK_testplusargs___d69 && TASK_testplusargs___d70) &&
	APB_PSLVERR;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d75 =
	(TASK_testplusargs___d68 ||
	 TASK_testplusargs___d69 && TASK_testplusargs___d70) &&
	!APB_PSLVERR;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  v__h2240 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$write("[%10d", v__h2240, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$write("APB_M: Res from slave: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$write("{prdata:'h%0h pslverr:", APB_PRDATA);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d74)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d75)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d76 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d77 = $test$plusargs("mfabric");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  TASK_testplusargs___d78 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d82 =
	(TASK_testplusargs___d76 ||
	 TASK_testplusargs___d77 && TASK_testplusargs___d78) &&
	apb_xactor_ff_request_rv_port1__read[36];
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d83 =
	(TASK_testplusargs___d76 ||
	 TASK_testplusargs___d77 && TASK_testplusargs___d78) &&
	!apb_xactor_ff_request_rv_port1__read[36];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup)
	begin
	  v__h2381 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write("[%10d", v__h2381, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write("APB_M: Req from master: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write("{paddr:'h%0h,",
	       apb_xactor_ff_request_rv_port1__read[71:40],
	       "prot:%0d",
	       apb_xactor_ff_request_rv_port1__read[39:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d82)
	$write("write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d83)
	$write("read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d82)
	$write(",data:'h%0h",
	       apb_xactor_ff_request_rv_port1__read[35:4],
	       ",strb:%b",
	       apb_xactor_ff_request_rv_port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d83)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_apb_xactor_rl_access_to_setup &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkaxi2apb_bridge


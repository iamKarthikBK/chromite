//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:35:52 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_receive_core_req_put       O     1
// send_core_cache_resp_get       O    76
// RDY_send_core_cache_resp_get   O     1
// send_core_io_resp              O    77 reg
// RDY_send_core_io_resp          O     1 const
// send_mem_rd_req_get            O    43 reg
// RDY_send_mem_rd_req_get        O     1 reg
// RDY_receive_mem_rd_resp_put    O     1
// send_mem_wr_req                O   555 reg
// RDY_send_mem_wr_req            O     1 reg
// RDY_deq_mem_wr_req             O     1 reg
// RDY_receive_mem_wr_resp_put    O     1
// send_mem_io_req_get            O   100 reg
// RDY_send_mem_io_req_get        O     1 reg
// RDY_receive_mem_io_resp_put    O     1 reg
// RDY_ma_curr_priv               O     1 const
// RDY_ma_cache_enable            O     1 const
// mv_storebuffer_empty           O     1
// RDY_mv_storebuffer_empty       O     1 const
// mv_cache_available             O     1
// RDY_mv_cache_available         O     1 const
// RDY_ma_commit_store            O     1 const
// RDY_ma_commit_io               O     1 const
// get_ptw_resp_get               O    76
// RDY_get_ptw_resp_get           O     1
// RDY_put_pa_from_tlb_put        O     1
// get_hold_req_get               O   141
// RDY_get_hold_req_get           O     1
// pmp_cfg_0                      I     8
// pmp_cfg_1                      I     8
// pmp_cfg_2                      I     8
// pmp_cfg_3                      I     8
// pmp_addr_0                     I    32
// pmp_addr_1                     I    32
// pmp_addr_2                     I    32
// pmp_addr_3                     I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// receive_core_req_put           I   141
// receive_mem_rd_resp_put        I    66
// receive_mem_wr_resp_put        I     1
// receive_mem_io_resp_put        I    65 reg
// ma_curr_priv_c                 I     2
// ma_cache_enable_c              I     1
// ma_commit_store_c              I     2
// ma_commit_io_currepoch         I     1
// put_pa_from_tlb_put            I    41
// EN_receive_core_req_put        I     1
// EN_receive_mem_rd_resp_put     I     1
// EN_deq_mem_wr_req              I     1
// EN_receive_mem_wr_resp_put     I     1
// EN_receive_mem_io_resp_put     I     1
// EN_ma_curr_priv                I     1
// EN_ma_cache_enable             I     1
// EN_ma_commit_store             I     1
// EN_ma_commit_io                I     1
// EN_put_pa_from_tlb_put         I     1
// EN_send_core_cache_resp_get    I     1
// EN_send_mem_rd_req_get         I     1
// EN_send_mem_io_req_get         I     1
// EN_get_ptw_resp_get            I     1
// EN_get_hold_req_get            I     1
//
// Combinational paths from inputs to outputs:
//   (receive_mem_rd_resp_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_receive_core_req_put,
//    EN_receive_mem_rd_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_ma_commit_io,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_send_core_cache_resp_get
//   (receive_mem_rd_resp_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_receive_core_req_put,
//    EN_receive_mem_rd_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_ma_commit_io,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_ptw_resp_get
//   (receive_mem_rd_resp_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_receive_core_req_put,
//    EN_receive_mem_rd_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_ma_commit_io,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> send_core_cache_resp_get
//   (receive_mem_rd_resp_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_receive_core_req_put,
//    EN_receive_mem_rd_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_ma_commit_io,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_ptw_resp_get
//   (put_pa_from_tlb_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_ma_commit_io,
//    EN_put_pa_from_tlb_put) -> RDY_get_hold_req_get
//   (put_pa_from_tlb_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_ma_commit_io,
//    EN_put_pa_from_tlb_put) -> get_hold_req_get
//   EN_ma_cache_enable -> RDY_receive_core_req_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache(pmp_cfg_0,
		pmp_cfg_1,
		pmp_cfg_2,
		pmp_cfg_3,
		pmp_addr_0,
		pmp_addr_1,
		pmp_addr_2,
		pmp_addr_3,
		CLK,
		RST_N,

		receive_core_req_put,
		EN_receive_core_req_put,
		RDY_receive_core_req_put,

		EN_send_core_cache_resp_get,
		send_core_cache_resp_get,
		RDY_send_core_cache_resp_get,

		send_core_io_resp,
		RDY_send_core_io_resp,

		EN_send_mem_rd_req_get,
		send_mem_rd_req_get,
		RDY_send_mem_rd_req_get,

		receive_mem_rd_resp_put,
		EN_receive_mem_rd_resp_put,
		RDY_receive_mem_rd_resp_put,

		send_mem_wr_req,
		RDY_send_mem_wr_req,

		EN_deq_mem_wr_req,
		RDY_deq_mem_wr_req,

		receive_mem_wr_resp_put,
		EN_receive_mem_wr_resp_put,
		RDY_receive_mem_wr_resp_put,

		EN_send_mem_io_req_get,
		send_mem_io_req_get,
		RDY_send_mem_io_req_get,

		receive_mem_io_resp_put,
		EN_receive_mem_io_resp_put,
		RDY_receive_mem_io_resp_put,

		ma_curr_priv_c,
		EN_ma_curr_priv,
		RDY_ma_curr_priv,

		ma_cache_enable_c,
		EN_ma_cache_enable,
		RDY_ma_cache_enable,

		mv_storebuffer_empty,
		RDY_mv_storebuffer_empty,

		mv_cache_available,
		RDY_mv_cache_available,

		ma_commit_store_c,
		EN_ma_commit_store,
		RDY_ma_commit_store,

		ma_commit_io_currepoch,
		EN_ma_commit_io,
		RDY_ma_commit_io,

		EN_get_ptw_resp_get,
		get_ptw_resp_get,
		RDY_get_ptw_resp_get,

		put_pa_from_tlb_put,
		EN_put_pa_from_tlb_put,
		RDY_put_pa_from_tlb_put,

		EN_get_hold_req_get,
		get_hold_req_get,
		RDY_get_hold_req_get);
  parameter [31 : 0] id = 32'b0;
  input  [7 : 0] pmp_cfg_0;
  input  [7 : 0] pmp_cfg_1;
  input  [7 : 0] pmp_cfg_2;
  input  [7 : 0] pmp_cfg_3;
  input  [31 : 0] pmp_addr_0;
  input  [31 : 0] pmp_addr_1;
  input  [31 : 0] pmp_addr_2;
  input  [31 : 0] pmp_addr_3;
  input  CLK;
  input  RST_N;

  // action method receive_core_req_put
  input  [140 : 0] receive_core_req_put;
  input  EN_receive_core_req_put;
  output RDY_receive_core_req_put;

  // actionvalue method send_core_cache_resp_get
  input  EN_send_core_cache_resp_get;
  output [75 : 0] send_core_cache_resp_get;
  output RDY_send_core_cache_resp_get;

  // value method send_core_io_resp
  output [76 : 0] send_core_io_resp;
  output RDY_send_core_io_resp;

  // actionvalue method send_mem_rd_req_get
  input  EN_send_mem_rd_req_get;
  output [42 : 0] send_mem_rd_req_get;
  output RDY_send_mem_rd_req_get;

  // action method receive_mem_rd_resp_put
  input  [65 : 0] receive_mem_rd_resp_put;
  input  EN_receive_mem_rd_resp_put;
  output RDY_receive_mem_rd_resp_put;

  // value method send_mem_wr_req
  output [554 : 0] send_mem_wr_req;
  output RDY_send_mem_wr_req;

  // action method deq_mem_wr_req
  input  EN_deq_mem_wr_req;
  output RDY_deq_mem_wr_req;

  // action method receive_mem_wr_resp_put
  input  receive_mem_wr_resp_put;
  input  EN_receive_mem_wr_resp_put;
  output RDY_receive_mem_wr_resp_put;

  // actionvalue method send_mem_io_req_get
  input  EN_send_mem_io_req_get;
  output [99 : 0] send_mem_io_req_get;
  output RDY_send_mem_io_req_get;

  // action method receive_mem_io_resp_put
  input  [64 : 0] receive_mem_io_resp_put;
  input  EN_receive_mem_io_resp_put;
  output RDY_receive_mem_io_resp_put;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // action method ma_cache_enable
  input  ma_cache_enable_c;
  input  EN_ma_cache_enable;
  output RDY_ma_cache_enable;

  // value method mv_storebuffer_empty
  output mv_storebuffer_empty;
  output RDY_mv_storebuffer_empty;

  // value method mv_cache_available
  output mv_cache_available;
  output RDY_mv_cache_available;

  // action method ma_commit_store
  input  [1 : 0] ma_commit_store_c;
  input  EN_ma_commit_store;
  output RDY_ma_commit_store;

  // action method ma_commit_io
  input  ma_commit_io_currepoch;
  input  EN_ma_commit_io;
  output RDY_ma_commit_io;

  // actionvalue method get_ptw_resp_get
  input  EN_get_ptw_resp_get;
  output [75 : 0] get_ptw_resp_get;
  output RDY_get_ptw_resp_get;

  // action method put_pa_from_tlb_put
  input  [40 : 0] put_pa_from_tlb_put;
  input  EN_put_pa_from_tlb_put;
  output RDY_put_pa_from_tlb_put;

  // actionvalue method get_hold_req_get
  input  EN_get_hold_req_get;
  output [140 : 0] get_hold_req_get;
  output RDY_get_hold_req_get;

  // signals for module outputs
  wire [554 : 0] send_mem_wr_req;
  wire [140 : 0] get_hold_req_get;
  wire [99 : 0] send_mem_io_req_get;
  wire [76 : 0] send_core_io_resp;
  wire [75 : 0] get_ptw_resp_get, send_core_cache_resp_get;
  wire [42 : 0] send_mem_rd_req_get;
  wire RDY_deq_mem_wr_req,
       RDY_get_hold_req_get,
       RDY_get_ptw_resp_get,
       RDY_ma_cache_enable,
       RDY_ma_commit_io,
       RDY_ma_commit_store,
       RDY_ma_curr_priv,
       RDY_mv_cache_available,
       RDY_mv_storebuffer_empty,
       RDY_put_pa_from_tlb_put,
       RDY_receive_core_req_put,
       RDY_receive_mem_io_resp_put,
       RDY_receive_mem_rd_resp_put,
       RDY_receive_mem_wr_resp_put,
       RDY_send_core_cache_resp_get,
       RDY_send_core_io_resp,
       RDY_send_mem_io_req_get,
       RDY_send_mem_rd_req_get,
       RDY_send_mem_wr_req,
       mv_cache_available,
       mv_storebuffer_empty;

  // inlined wires
  reg [76 : 0] ff_ptw_response_rv_port0__write_1;
  reg [75 : 0] ff_core_response_enqw_wget;
  reg [5 : 0] wr_read_set_index_wget;
  wire [141 : 0] ff_hold_request_rv_port0__write_1,
		 ff_hold_request_rv_port1__read,
		 ff_hold_request_rv_port1__write_1,
		 ff_hold_request_rv_port2__read;
  wire [76 : 0] ff_ptw_response_rv_port1__read,
		ff_ptw_response_rv_port1__write_1,
		ff_ptw_response_rv_port2__read;
  wire [66 : 0] ff_mem_rd_resp_rv_port0__write_1,
		ff_mem_rd_resp_rv_port1__read,
		ff_mem_rd_resp_rv_port1__write_1,
		ff_mem_rd_resp_rv_port2__read;
  wire [41 : 0] ff_from_tlb_rv_port0__write_1,
		ff_from_tlb_rv_port1__read,
		ff_from_tlb_rv_port1__write_1,
		ff_from_tlb_rv_port2__read;
  wire [1 : 0] ff_mem_wr_resp_rv_port0__write_1,
	       ff_mem_wr_resp_rv_port1__read,
	       ff_mem_wr_resp_rv_port1__write_1,
	       ff_mem_wr_resp_rv_port2__read;
  wire _ma_allocate_io_RL_rl_ram_check_EN_m_iobuffer_wget,
       _port0__write_RL_rl_ram_check_EN_ff_ptw_response_rv_wget,
       ff_core_response_enqw_whas,
       ff_hold_request_rv_EN_port0__write,
       ff_ptw_response_rv_EN_port0__write,
       rg_core_io_response_1_whas,
       rg_performing_replay_EN_port1__write,
       rg_store_eviction_1_whas;

  // register ff_from_tlb_rv
  reg [41 : 0] ff_from_tlb_rv;
  wire [41 : 0] ff_from_tlb_rv_D_IN;
  wire ff_from_tlb_rv_EN;

  // register ff_hold_request_rv
  reg [141 : 0] ff_hold_request_rv;
  wire [141 : 0] ff_hold_request_rv_D_IN;
  wire ff_hold_request_rv_EN;

  // register ff_mem_rd_resp_rv
  reg [66 : 0] ff_mem_rd_resp_rv;
  wire [66 : 0] ff_mem_rd_resp_rv_D_IN;
  wire ff_mem_rd_resp_rv_EN;

  // register ff_mem_wr_resp_rv
  reg [1 : 0] ff_mem_wr_resp_rv;
  wire [1 : 0] ff_mem_wr_resp_rv_D_IN;
  wire ff_mem_wr_resp_rv_EN;

  // register ff_ptw_response_rv
  reg [76 : 0] ff_ptw_response_rv;
  wire [76 : 0] ff_ptw_response_rv_D_IN;
  wire ff_ptw_response_rv_EN;

  // register m_data_v_data_0_rg_output_0
  reg [511 : 0] m_data_v_data_0_rg_output_0;
  wire [511 : 0] m_data_v_data_0_rg_output_0_D_IN;
  wire m_data_v_data_0_rg_output_0_EN;

  // register m_data_v_data_0_rg_read_index
  reg [5 : 0] m_data_v_data_0_rg_read_index;
  wire [5 : 0] m_data_v_data_0_rg_read_index_D_IN;
  wire m_data_v_data_0_rg_read_index_EN;

  // register m_data_v_data_0_rg_write_data_0
  reg [511 : 0] m_data_v_data_0_rg_write_data_0;
  wire [511 : 0] m_data_v_data_0_rg_write_data_0_D_IN;
  wire m_data_v_data_0_rg_write_data_0_EN;

  // register m_data_v_data_0_rg_write_index
  reg [5 : 0] m_data_v_data_0_rg_write_index;
  wire [5 : 0] m_data_v_data_0_rg_write_index_D_IN;
  wire m_data_v_data_0_rg_write_index_EN;

  // register m_data_v_data_1_rg_output_0
  reg [511 : 0] m_data_v_data_1_rg_output_0;
  wire [511 : 0] m_data_v_data_1_rg_output_0_D_IN;
  wire m_data_v_data_1_rg_output_0_EN;

  // register m_data_v_data_1_rg_read_index
  reg [5 : 0] m_data_v_data_1_rg_read_index;
  wire [5 : 0] m_data_v_data_1_rg_read_index_D_IN;
  wire m_data_v_data_1_rg_read_index_EN;

  // register m_data_v_data_1_rg_write_data_0
  reg [511 : 0] m_data_v_data_1_rg_write_data_0;
  wire [511 : 0] m_data_v_data_1_rg_write_data_0_D_IN;
  wire m_data_v_data_1_rg_write_data_0_EN;

  // register m_data_v_data_1_rg_write_index
  reg [5 : 0] m_data_v_data_1_rg_write_index;
  wire [5 : 0] m_data_v_data_1_rg_write_index_D_IN;
  wire m_data_v_data_1_rg_write_index_EN;

  // register m_data_v_data_2_rg_output_0
  reg [511 : 0] m_data_v_data_2_rg_output_0;
  wire [511 : 0] m_data_v_data_2_rg_output_0_D_IN;
  wire m_data_v_data_2_rg_output_0_EN;

  // register m_data_v_data_2_rg_read_index
  reg [5 : 0] m_data_v_data_2_rg_read_index;
  wire [5 : 0] m_data_v_data_2_rg_read_index_D_IN;
  wire m_data_v_data_2_rg_read_index_EN;

  // register m_data_v_data_2_rg_write_data_0
  reg [511 : 0] m_data_v_data_2_rg_write_data_0;
  wire [511 : 0] m_data_v_data_2_rg_write_data_0_D_IN;
  wire m_data_v_data_2_rg_write_data_0_EN;

  // register m_data_v_data_2_rg_write_index
  reg [5 : 0] m_data_v_data_2_rg_write_index;
  wire [5 : 0] m_data_v_data_2_rg_write_index_D_IN;
  wire m_data_v_data_2_rg_write_index_EN;

  // register m_data_v_data_3_rg_output_0
  reg [511 : 0] m_data_v_data_3_rg_output_0;
  wire [511 : 0] m_data_v_data_3_rg_output_0_D_IN;
  wire m_data_v_data_3_rg_output_0_EN;

  // register m_data_v_data_3_rg_read_index
  reg [5 : 0] m_data_v_data_3_rg_read_index;
  wire [5 : 0] m_data_v_data_3_rg_read_index_D_IN;
  wire m_data_v_data_3_rg_read_index_EN;

  // register m_data_v_data_3_rg_write_data_0
  reg [511 : 0] m_data_v_data_3_rg_write_data_0;
  wire [511 : 0] m_data_v_data_3_rg_write_data_0_D_IN;
  wire m_data_v_data_3_rg_write_data_0_EN;

  // register m_data_v_data_3_rg_write_index
  reg [5 : 0] m_data_v_data_3_rg_write_index;
  wire [5 : 0] m_data_v_data_3_rg_write_index_D_IN;
  wire m_data_v_data_3_rg_write_index_EN;

  // register m_tag_v_tags_0_rg_output_0
  reg [19 : 0] m_tag_v_tags_0_rg_output_0;
  wire [19 : 0] m_tag_v_tags_0_rg_output_0_D_IN;
  wire m_tag_v_tags_0_rg_output_0_EN;

  // register m_tag_v_tags_0_rg_read_index
  reg [5 : 0] m_tag_v_tags_0_rg_read_index;
  wire [5 : 0] m_tag_v_tags_0_rg_read_index_D_IN;
  wire m_tag_v_tags_0_rg_read_index_EN;

  // register m_tag_v_tags_0_rg_write_data_0
  reg [19 : 0] m_tag_v_tags_0_rg_write_data_0;
  wire [19 : 0] m_tag_v_tags_0_rg_write_data_0_D_IN;
  wire m_tag_v_tags_0_rg_write_data_0_EN;

  // register m_tag_v_tags_0_rg_write_index
  reg [5 : 0] m_tag_v_tags_0_rg_write_index;
  wire [5 : 0] m_tag_v_tags_0_rg_write_index_D_IN;
  wire m_tag_v_tags_0_rg_write_index_EN;

  // register m_tag_v_tags_1_rg_output_0
  reg [19 : 0] m_tag_v_tags_1_rg_output_0;
  wire [19 : 0] m_tag_v_tags_1_rg_output_0_D_IN;
  wire m_tag_v_tags_1_rg_output_0_EN;

  // register m_tag_v_tags_1_rg_read_index
  reg [5 : 0] m_tag_v_tags_1_rg_read_index;
  wire [5 : 0] m_tag_v_tags_1_rg_read_index_D_IN;
  wire m_tag_v_tags_1_rg_read_index_EN;

  // register m_tag_v_tags_1_rg_write_data_0
  reg [19 : 0] m_tag_v_tags_1_rg_write_data_0;
  wire [19 : 0] m_tag_v_tags_1_rg_write_data_0_D_IN;
  wire m_tag_v_tags_1_rg_write_data_0_EN;

  // register m_tag_v_tags_1_rg_write_index
  reg [5 : 0] m_tag_v_tags_1_rg_write_index;
  wire [5 : 0] m_tag_v_tags_1_rg_write_index_D_IN;
  wire m_tag_v_tags_1_rg_write_index_EN;

  // register m_tag_v_tags_2_rg_output_0
  reg [19 : 0] m_tag_v_tags_2_rg_output_0;
  wire [19 : 0] m_tag_v_tags_2_rg_output_0_D_IN;
  wire m_tag_v_tags_2_rg_output_0_EN;

  // register m_tag_v_tags_2_rg_read_index
  reg [5 : 0] m_tag_v_tags_2_rg_read_index;
  wire [5 : 0] m_tag_v_tags_2_rg_read_index_D_IN;
  wire m_tag_v_tags_2_rg_read_index_EN;

  // register m_tag_v_tags_2_rg_write_data_0
  reg [19 : 0] m_tag_v_tags_2_rg_write_data_0;
  wire [19 : 0] m_tag_v_tags_2_rg_write_data_0_D_IN;
  wire m_tag_v_tags_2_rg_write_data_0_EN;

  // register m_tag_v_tags_2_rg_write_index
  reg [5 : 0] m_tag_v_tags_2_rg_write_index;
  wire [5 : 0] m_tag_v_tags_2_rg_write_index_D_IN;
  wire m_tag_v_tags_2_rg_write_index_EN;

  // register m_tag_v_tags_3_rg_output_0
  reg [19 : 0] m_tag_v_tags_3_rg_output_0;
  wire [19 : 0] m_tag_v_tags_3_rg_output_0_D_IN;
  wire m_tag_v_tags_3_rg_output_0_EN;

  // register m_tag_v_tags_3_rg_read_index
  reg [5 : 0] m_tag_v_tags_3_rg_read_index;
  wire [5 : 0] m_tag_v_tags_3_rg_read_index_D_IN;
  wire m_tag_v_tags_3_rg_read_index_EN;

  // register m_tag_v_tags_3_rg_write_data_0
  reg [19 : 0] m_tag_v_tags_3_rg_write_data_0;
  wire [19 : 0] m_tag_v_tags_3_rg_write_data_0_D_IN;
  wire m_tag_v_tags_3_rg_write_data_0_EN;

  // register m_tag_v_tags_3_rg_write_index
  reg [5 : 0] m_tag_v_tags_3_rg_write_index;
  wire [5 : 0] m_tag_v_tags_3_rg_write_index_D_IN;
  wire m_tag_v_tags_3_rg_write_index_EN;

  // register replacement_v_count_0
  reg [1 : 0] replacement_v_count_0;
  reg [1 : 0] replacement_v_count_0_D_IN;
  wire replacement_v_count_0_EN;

  // register replacement_v_count_1
  reg [1 : 0] replacement_v_count_1;
  reg [1 : 0] replacement_v_count_1_D_IN;
  wire replacement_v_count_1_EN;

  // register replacement_v_count_10
  reg [1 : 0] replacement_v_count_10;
  reg [1 : 0] replacement_v_count_10_D_IN;
  wire replacement_v_count_10_EN;

  // register replacement_v_count_11
  reg [1 : 0] replacement_v_count_11;
  reg [1 : 0] replacement_v_count_11_D_IN;
  wire replacement_v_count_11_EN;

  // register replacement_v_count_12
  reg [1 : 0] replacement_v_count_12;
  reg [1 : 0] replacement_v_count_12_D_IN;
  wire replacement_v_count_12_EN;

  // register replacement_v_count_13
  reg [1 : 0] replacement_v_count_13;
  reg [1 : 0] replacement_v_count_13_D_IN;
  wire replacement_v_count_13_EN;

  // register replacement_v_count_14
  reg [1 : 0] replacement_v_count_14;
  reg [1 : 0] replacement_v_count_14_D_IN;
  wire replacement_v_count_14_EN;

  // register replacement_v_count_15
  reg [1 : 0] replacement_v_count_15;
  reg [1 : 0] replacement_v_count_15_D_IN;
  wire replacement_v_count_15_EN;

  // register replacement_v_count_16
  reg [1 : 0] replacement_v_count_16;
  reg [1 : 0] replacement_v_count_16_D_IN;
  wire replacement_v_count_16_EN;

  // register replacement_v_count_17
  reg [1 : 0] replacement_v_count_17;
  reg [1 : 0] replacement_v_count_17_D_IN;
  wire replacement_v_count_17_EN;

  // register replacement_v_count_18
  reg [1 : 0] replacement_v_count_18;
  reg [1 : 0] replacement_v_count_18_D_IN;
  wire replacement_v_count_18_EN;

  // register replacement_v_count_19
  reg [1 : 0] replacement_v_count_19;
  reg [1 : 0] replacement_v_count_19_D_IN;
  wire replacement_v_count_19_EN;

  // register replacement_v_count_2
  reg [1 : 0] replacement_v_count_2;
  reg [1 : 0] replacement_v_count_2_D_IN;
  wire replacement_v_count_2_EN;

  // register replacement_v_count_20
  reg [1 : 0] replacement_v_count_20;
  reg [1 : 0] replacement_v_count_20_D_IN;
  wire replacement_v_count_20_EN;

  // register replacement_v_count_21
  reg [1 : 0] replacement_v_count_21;
  reg [1 : 0] replacement_v_count_21_D_IN;
  wire replacement_v_count_21_EN;

  // register replacement_v_count_22
  reg [1 : 0] replacement_v_count_22;
  reg [1 : 0] replacement_v_count_22_D_IN;
  wire replacement_v_count_22_EN;

  // register replacement_v_count_23
  reg [1 : 0] replacement_v_count_23;
  reg [1 : 0] replacement_v_count_23_D_IN;
  wire replacement_v_count_23_EN;

  // register replacement_v_count_24
  reg [1 : 0] replacement_v_count_24;
  reg [1 : 0] replacement_v_count_24_D_IN;
  wire replacement_v_count_24_EN;

  // register replacement_v_count_25
  reg [1 : 0] replacement_v_count_25;
  reg [1 : 0] replacement_v_count_25_D_IN;
  wire replacement_v_count_25_EN;

  // register replacement_v_count_26
  reg [1 : 0] replacement_v_count_26;
  reg [1 : 0] replacement_v_count_26_D_IN;
  wire replacement_v_count_26_EN;

  // register replacement_v_count_27
  reg [1 : 0] replacement_v_count_27;
  reg [1 : 0] replacement_v_count_27_D_IN;
  wire replacement_v_count_27_EN;

  // register replacement_v_count_28
  reg [1 : 0] replacement_v_count_28;
  reg [1 : 0] replacement_v_count_28_D_IN;
  wire replacement_v_count_28_EN;

  // register replacement_v_count_29
  reg [1 : 0] replacement_v_count_29;
  reg [1 : 0] replacement_v_count_29_D_IN;
  wire replacement_v_count_29_EN;

  // register replacement_v_count_3
  reg [1 : 0] replacement_v_count_3;
  reg [1 : 0] replacement_v_count_3_D_IN;
  wire replacement_v_count_3_EN;

  // register replacement_v_count_30
  reg [1 : 0] replacement_v_count_30;
  reg [1 : 0] replacement_v_count_30_D_IN;
  wire replacement_v_count_30_EN;

  // register replacement_v_count_31
  reg [1 : 0] replacement_v_count_31;
  reg [1 : 0] replacement_v_count_31_D_IN;
  wire replacement_v_count_31_EN;

  // register replacement_v_count_32
  reg [1 : 0] replacement_v_count_32;
  reg [1 : 0] replacement_v_count_32_D_IN;
  wire replacement_v_count_32_EN;

  // register replacement_v_count_33
  reg [1 : 0] replacement_v_count_33;
  reg [1 : 0] replacement_v_count_33_D_IN;
  wire replacement_v_count_33_EN;

  // register replacement_v_count_34
  reg [1 : 0] replacement_v_count_34;
  reg [1 : 0] replacement_v_count_34_D_IN;
  wire replacement_v_count_34_EN;

  // register replacement_v_count_35
  reg [1 : 0] replacement_v_count_35;
  reg [1 : 0] replacement_v_count_35_D_IN;
  wire replacement_v_count_35_EN;

  // register replacement_v_count_36
  reg [1 : 0] replacement_v_count_36;
  reg [1 : 0] replacement_v_count_36_D_IN;
  wire replacement_v_count_36_EN;

  // register replacement_v_count_37
  reg [1 : 0] replacement_v_count_37;
  reg [1 : 0] replacement_v_count_37_D_IN;
  wire replacement_v_count_37_EN;

  // register replacement_v_count_38
  reg [1 : 0] replacement_v_count_38;
  reg [1 : 0] replacement_v_count_38_D_IN;
  wire replacement_v_count_38_EN;

  // register replacement_v_count_39
  reg [1 : 0] replacement_v_count_39;
  reg [1 : 0] replacement_v_count_39_D_IN;
  wire replacement_v_count_39_EN;

  // register replacement_v_count_4
  reg [1 : 0] replacement_v_count_4;
  reg [1 : 0] replacement_v_count_4_D_IN;
  wire replacement_v_count_4_EN;

  // register replacement_v_count_40
  reg [1 : 0] replacement_v_count_40;
  reg [1 : 0] replacement_v_count_40_D_IN;
  wire replacement_v_count_40_EN;

  // register replacement_v_count_41
  reg [1 : 0] replacement_v_count_41;
  reg [1 : 0] replacement_v_count_41_D_IN;
  wire replacement_v_count_41_EN;

  // register replacement_v_count_42
  reg [1 : 0] replacement_v_count_42;
  reg [1 : 0] replacement_v_count_42_D_IN;
  wire replacement_v_count_42_EN;

  // register replacement_v_count_43
  reg [1 : 0] replacement_v_count_43;
  reg [1 : 0] replacement_v_count_43_D_IN;
  wire replacement_v_count_43_EN;

  // register replacement_v_count_44
  reg [1 : 0] replacement_v_count_44;
  reg [1 : 0] replacement_v_count_44_D_IN;
  wire replacement_v_count_44_EN;

  // register replacement_v_count_45
  reg [1 : 0] replacement_v_count_45;
  reg [1 : 0] replacement_v_count_45_D_IN;
  wire replacement_v_count_45_EN;

  // register replacement_v_count_46
  reg [1 : 0] replacement_v_count_46;
  reg [1 : 0] replacement_v_count_46_D_IN;
  wire replacement_v_count_46_EN;

  // register replacement_v_count_47
  reg [1 : 0] replacement_v_count_47;
  reg [1 : 0] replacement_v_count_47_D_IN;
  wire replacement_v_count_47_EN;

  // register replacement_v_count_48
  reg [1 : 0] replacement_v_count_48;
  reg [1 : 0] replacement_v_count_48_D_IN;
  wire replacement_v_count_48_EN;

  // register replacement_v_count_49
  reg [1 : 0] replacement_v_count_49;
  reg [1 : 0] replacement_v_count_49_D_IN;
  wire replacement_v_count_49_EN;

  // register replacement_v_count_5
  reg [1 : 0] replacement_v_count_5;
  reg [1 : 0] replacement_v_count_5_D_IN;
  wire replacement_v_count_5_EN;

  // register replacement_v_count_50
  reg [1 : 0] replacement_v_count_50;
  reg [1 : 0] replacement_v_count_50_D_IN;
  wire replacement_v_count_50_EN;

  // register replacement_v_count_51
  reg [1 : 0] replacement_v_count_51;
  reg [1 : 0] replacement_v_count_51_D_IN;
  wire replacement_v_count_51_EN;

  // register replacement_v_count_52
  reg [1 : 0] replacement_v_count_52;
  reg [1 : 0] replacement_v_count_52_D_IN;
  wire replacement_v_count_52_EN;

  // register replacement_v_count_53
  reg [1 : 0] replacement_v_count_53;
  reg [1 : 0] replacement_v_count_53_D_IN;
  wire replacement_v_count_53_EN;

  // register replacement_v_count_54
  reg [1 : 0] replacement_v_count_54;
  reg [1 : 0] replacement_v_count_54_D_IN;
  wire replacement_v_count_54_EN;

  // register replacement_v_count_55
  reg [1 : 0] replacement_v_count_55;
  reg [1 : 0] replacement_v_count_55_D_IN;
  wire replacement_v_count_55_EN;

  // register replacement_v_count_56
  reg [1 : 0] replacement_v_count_56;
  reg [1 : 0] replacement_v_count_56_D_IN;
  wire replacement_v_count_56_EN;

  // register replacement_v_count_57
  reg [1 : 0] replacement_v_count_57;
  reg [1 : 0] replacement_v_count_57_D_IN;
  wire replacement_v_count_57_EN;

  // register replacement_v_count_58
  reg [1 : 0] replacement_v_count_58;
  reg [1 : 0] replacement_v_count_58_D_IN;
  wire replacement_v_count_58_EN;

  // register replacement_v_count_59
  reg [1 : 0] replacement_v_count_59;
  reg [1 : 0] replacement_v_count_59_D_IN;
  wire replacement_v_count_59_EN;

  // register replacement_v_count_6
  reg [1 : 0] replacement_v_count_6;
  reg [1 : 0] replacement_v_count_6_D_IN;
  wire replacement_v_count_6_EN;

  // register replacement_v_count_60
  reg [1 : 0] replacement_v_count_60;
  reg [1 : 0] replacement_v_count_60_D_IN;
  wire replacement_v_count_60_EN;

  // register replacement_v_count_61
  reg [1 : 0] replacement_v_count_61;
  reg [1 : 0] replacement_v_count_61_D_IN;
  wire replacement_v_count_61_EN;

  // register replacement_v_count_62
  reg [1 : 0] replacement_v_count_62;
  reg [1 : 0] replacement_v_count_62_D_IN;
  wire replacement_v_count_62_EN;

  // register replacement_v_count_63
  reg [1 : 0] replacement_v_count_63;
  reg [1 : 0] replacement_v_count_63_D_IN;
  wire replacement_v_count_63_EN;

  // register replacement_v_count_7
  reg [1 : 0] replacement_v_count_7;
  reg [1 : 0] replacement_v_count_7_D_IN;
  wire replacement_v_count_7_EN;

  // register replacement_v_count_8
  reg [1 : 0] replacement_v_count_8;
  reg [1 : 0] replacement_v_count_8_D_IN;
  wire replacement_v_count_8_EN;

  // register replacement_v_count_9
  reg [1 : 0] replacement_v_count_9;
  reg [1 : 0] replacement_v_count_9_D_IN;
  wire replacement_v_count_9_EN;

  // register rg_atomic_rd_data
  reg [63 : 0] rg_atomic_rd_data;
  wire [63 : 0] rg_atomic_rd_data_D_IN;
  wire rg_atomic_rd_data_EN;

  // register rg_block_count
  reg [7 : 0] rg_block_count;
  wire [7 : 0] rg_block_count_D_IN;
  wire rg_block_count_EN;

  // register rg_core_io_response
  reg [76 : 0] rg_core_io_response;
  wire [76 : 0] rg_core_io_response_D_IN;
  wire rg_core_io_response_EN;

  // register rg_evict_addr
  reg [31 : 0] rg_evict_addr;
  reg [31 : 0] rg_evict_addr_D_IN;
  wire rg_evict_addr_EN;

  // register rg_evicted_line
  reg [511 : 0] rg_evicted_line;
  reg [511 : 0] rg_evicted_line_D_IN;
  wire rg_evicted_line_EN;

  // register rg_eviction_required
  reg rg_eviction_required;
  wire rg_eviction_required_D_IN, rg_eviction_required_EN;

  // register rg_fence_set
  reg [5 : 0] rg_fence_set;
  wire [5 : 0] rg_fence_set_D_IN;
  wire rg_fence_set_EN;

  // register rg_fence_stall
  reg rg_fence_stall;
  wire rg_fence_stall_D_IN, rg_fence_stall_EN;

  // register rg_fence_way
  reg [3 : 0] rg_fence_way;
  wire [3 : 0] rg_fence_way_D_IN;
  wire rg_fence_way_EN;

  // register rg_fill_err
  reg rg_fill_err;
  wire rg_fill_err_D_IN, rg_fill_err_EN;

  // register rg_fill_eviction
  reg rg_fill_eviction;
  wire rg_fill_eviction_D_IN, rg_fill_eviction_EN;

  // register rg_fill_release
  reg rg_fill_release;
  wire rg_fill_release_D_IN, rg_fill_release_EN;

  // register rg_fill_set
  reg [5 : 0] rg_fill_set;
  wire [5 : 0] rg_fill_set_D_IN;
  wire rg_fill_set_EN;

  // register rg_fill_tag
  reg [19 : 0] rg_fill_tag;
  wire [19 : 0] rg_fill_tag_D_IN;
  wire rg_fill_tag_EN;

  // register rg_fill_way
  reg [1 : 0] rg_fill_way;
  wire [1 : 0] rg_fill_way_D_IN;
  wire rg_fill_way_EN;

  // register rg_first
  reg rg_first;
  wire rg_first_D_IN, rg_first_EN;

  // register rg_global_dirty
  reg rg_global_dirty;
  wire rg_global_dirty_D_IN, rg_global_dirty_EN;

  // register rg_io_atomic_done
  reg rg_io_atomic_done;
  wire rg_io_atomic_done_D_IN, rg_io_atomic_done_EN;

  // register rg_io_busy
  reg rg_io_busy;
  wire rg_io_busy_D_IN, rg_io_busy_EN;

  // register rg_miss_handling
  reg rg_miss_handling;
  wire rg_miss_handling_D_IN, rg_miss_handling_EN;

  // register rg_miss_meta
  reg [172 : 0] rg_miss_meta;
  wire [172 : 0] rg_miss_meta_D_IN;
  wire rg_miss_meta_EN;

  // register rg_performing_replay
  reg rg_performing_replay;
  wire rg_performing_replay_D_IN, rg_performing_replay_EN;

  // register rg_recent_req
  reg [5 : 0] rg_recent_req;
  wire [5 : 0] rg_recent_req_D_IN;
  wire rg_recent_req_EN;

  // register rg_reservation_address
  reg [64 : 0] rg_reservation_address;
  wire [64 : 0] rg_reservation_address_D_IN;
  wire rg_reservation_address_EN;

  // register rg_store_eviction
  reg rg_store_eviction;
  wire rg_store_eviction_D_IN, rg_store_eviction_EN;

  // register v_fill_line_0
  reg [63 : 0] v_fill_line_0;
  wire [63 : 0] v_fill_line_0_D_IN;
  wire v_fill_line_0_EN;

  // register v_fill_line_1
  reg [63 : 0] v_fill_line_1;
  wire [63 : 0] v_fill_line_1_D_IN;
  wire v_fill_line_1_EN;

  // register v_fill_line_2
  reg [63 : 0] v_fill_line_2;
  wire [63 : 0] v_fill_line_2_D_IN;
  wire v_fill_line_2_EN;

  // register v_fill_line_3
  reg [63 : 0] v_fill_line_3;
  wire [63 : 0] v_fill_line_3_D_IN;
  wire v_fill_line_3_EN;

  // register v_fill_line_4
  reg [63 : 0] v_fill_line_4;
  wire [63 : 0] v_fill_line_4_D_IN;
  wire v_fill_line_4_EN;

  // register v_fill_line_5
  reg [63 : 0] v_fill_line_5;
  wire [63 : 0] v_fill_line_5_D_IN;
  wire v_fill_line_5_EN;

  // register v_fill_line_6
  reg [63 : 0] v_fill_line_6;
  wire [63 : 0] v_fill_line_6_D_IN;
  wire v_fill_line_6_EN;

  // register v_fill_line_7
  reg [63 : 0] v_fill_line_7;
  wire [63 : 0] v_fill_line_7_D_IN;
  wire v_fill_line_7_EN;

  // register v_reg_dirty_0
  reg [63 : 0] v_reg_dirty_0;
  reg [63 : 0] v_reg_dirty_0_D_IN;
  wire v_reg_dirty_0_EN;

  // register v_reg_dirty_1
  reg [63 : 0] v_reg_dirty_1;
  reg [63 : 0] v_reg_dirty_1_D_IN;
  wire v_reg_dirty_1_EN;

  // register v_reg_dirty_2
  reg [63 : 0] v_reg_dirty_2;
  reg [63 : 0] v_reg_dirty_2_D_IN;
  wire v_reg_dirty_2_EN;

  // register v_reg_dirty_3
  reg [63 : 0] v_reg_dirty_3;
  reg [63 : 0] v_reg_dirty_3_D_IN;
  wire v_reg_dirty_3_EN;

  // register v_reg_valid_0
  reg [63 : 0] v_reg_valid_0;
  reg [63 : 0] v_reg_valid_0_D_IN;
  wire v_reg_valid_0_EN;

  // register v_reg_valid_1
  reg [63 : 0] v_reg_valid_1;
  reg [63 : 0] v_reg_valid_1_D_IN;
  wire v_reg_valid_1_EN;

  // register v_reg_valid_2
  reg [63 : 0] v_reg_valid_2;
  reg [63 : 0] v_reg_valid_2_D_IN;
  wire v_reg_valid_2_EN;

  // register v_reg_valid_3
  reg [63 : 0] v_reg_valid_3;
  reg [63 : 0] v_reg_valid_3_D_IN;
  wire v_reg_valid_3_EN;

  // ports of submodule ff_core_request
  wire [140 : 0] ff_core_request_D_IN, ff_core_request_D_OUT;
  wire ff_core_request_CLR,
       ff_core_request_DEQ,
       ff_core_request_EMPTY_N,
       ff_core_request_ENQ,
       ff_core_request_FULL_N;

  // ports of submodule ff_core_response_ff
  wire [75 : 0] ff_core_response_ff_D_IN, ff_core_response_ff_D_OUT;
  wire ff_core_response_ff_CLR,
       ff_core_response_ff_DEQ,
       ff_core_response_ff_EMPTY_N,
       ff_core_response_ff_ENQ,
       ff_core_response_ff_FULL_N;

  // ports of submodule ff_core_response_firstValid
  wire ff_core_response_firstValid_D_IN,
       ff_core_response_firstValid_EN,
       ff_core_response_firstValid_Q_OUT;

  // ports of submodule ff_mem_io_request
  wire [99 : 0] ff_mem_io_request_D_IN, ff_mem_io_request_D_OUT;
  wire ff_mem_io_request_CLR,
       ff_mem_io_request_DEQ,
       ff_mem_io_request_EMPTY_N,
       ff_mem_io_request_ENQ,
       ff_mem_io_request_FULL_N;

  // ports of submodule ff_mem_io_resp
  wire [64 : 0] ff_mem_io_resp_D_IN, ff_mem_io_resp_D_OUT;
  wire ff_mem_io_resp_CLR,
       ff_mem_io_resp_DEQ,
       ff_mem_io_resp_EMPTY_N,
       ff_mem_io_resp_ENQ,
       ff_mem_io_resp_FULL_N;

  // ports of submodule ff_mem_rd_request
  wire [42 : 0] ff_mem_rd_request_D_IN, ff_mem_rd_request_D_OUT;
  wire ff_mem_rd_request_CLR,
       ff_mem_rd_request_DEQ,
       ff_mem_rd_request_EMPTY_N,
       ff_mem_rd_request_ENQ,
       ff_mem_rd_request_FULL_N;

  // ports of submodule ff_mem_wr_request
  wire [554 : 0] ff_mem_wr_request_D_IN, ff_mem_wr_request_D_OUT;
  wire ff_mem_wr_request_CLR,
       ff_mem_wr_request_DEQ,
       ff_mem_wr_request_EMPTY_N,
       ff_mem_wr_request_ENQ,
       ff_mem_wr_request_FULL_N;

  // ports of submodule m_data_v_data_0_ram_double_0
  wire [511 : 0] m_data_v_data_0_ram_double_0_dina,
		 m_data_v_data_0_ram_double_0_doutb;
  wire [5 : 0] m_data_v_data_0_ram_double_0_addra,
	       m_data_v_data_0_ram_double_0_addrb;
  wire m_data_v_data_0_ram_double_0_ena,
       m_data_v_data_0_ram_double_0_enb,
       m_data_v_data_0_ram_double_0_wea;

  // ports of submodule m_data_v_data_1_ram_double_0
  wire [511 : 0] m_data_v_data_1_ram_double_0_dina,
		 m_data_v_data_1_ram_double_0_doutb;
  wire [5 : 0] m_data_v_data_1_ram_double_0_addra,
	       m_data_v_data_1_ram_double_0_addrb;
  wire m_data_v_data_1_ram_double_0_ena,
       m_data_v_data_1_ram_double_0_enb,
       m_data_v_data_1_ram_double_0_wea;

  // ports of submodule m_data_v_data_2_ram_double_0
  wire [511 : 0] m_data_v_data_2_ram_double_0_dina,
		 m_data_v_data_2_ram_double_0_doutb;
  wire [5 : 0] m_data_v_data_2_ram_double_0_addra,
	       m_data_v_data_2_ram_double_0_addrb;
  wire m_data_v_data_2_ram_double_0_ena,
       m_data_v_data_2_ram_double_0_enb,
       m_data_v_data_2_ram_double_0_wea;

  // ports of submodule m_data_v_data_3_ram_double_0
  wire [511 : 0] m_data_v_data_3_ram_double_0_dina,
		 m_data_v_data_3_ram_double_0_doutb;
  wire [5 : 0] m_data_v_data_3_ram_double_0_addra,
	       m_data_v_data_3_ram_double_0_addrb;
  wire m_data_v_data_3_ram_double_0_ena,
       m_data_v_data_3_ram_double_0_enb,
       m_data_v_data_3_ram_double_0_wea;

  // ports of submodule m_iobuffer
  wire [171 : 0] m_iobuffer_ma_allocate_io_entry, m_iobuffer_mv_io_head;
  wire m_iobuffer_EN_ma_allocate_io,
       m_iobuffer_EN_ma_commit_io,
       m_iobuffer_EN_ma_increment_head,
       m_iobuffer_mv_io_empty,
       m_iobuffer_mv_io_full,
       m_iobuffer_mv_io_head_valid;

  // ports of submodule m_storebuffer
  wire [544 : 0] m_storebuffer_mv_release_head;
  wire [511 : 0] m_storebuffer_ma_allocate_line_line;
  wire [66 : 0] m_storebuffer_mav_core_lookup;
  wire [63 : 0] m_storebuffer_ma_allocate_store_data,
		m_storebuffer_ma_perform_atomic_rdata,
		m_storebuffer_ma_perform_atomic_wdata;
  wire [31 : 0] m_storebuffer_ma_allocate_line_address,
		m_storebuffer_ma_allocate_store_address,
		m_storebuffer_mav_core_lookup_address;
  wire [4 : 0] m_storebuffer_ma_perform_atomic_atomic_op;
  wire [1 : 0] m_storebuffer_ma_allocate_store_lbindex,
	       m_storebuffer_ma_allocate_store_size,
	       m_storebuffer_ma_commit_store_c,
	       m_storebuffer_mv_lb_head,
	       m_storebuffer_mv_lb_tail;
  wire m_storebuffer_EN_ma_allocate_line,
       m_storebuffer_EN_ma_allocate_store,
       m_storebuffer_EN_ma_commit_store,
       m_storebuffer_EN_ma_perform_atomic,
       m_storebuffer_EN_ma_release,
       m_storebuffer_EN_mav_core_lookup,
       m_storebuffer_RDY_ma_allocate_line,
       m_storebuffer_RDY_ma_allocate_store,
       m_storebuffer_RDY_ma_perform_atomic,
       m_storebuffer_ma_allocate_store_epochs,
       m_storebuffer_ma_perform_atomic_sbindex,
       m_storebuffer_mv_line_empty,
       m_storebuffer_mv_line_full,
       m_storebuffer_mv_sb_busy,
       m_storebuffer_mv_sb_empty,
       m_storebuffer_mv_sb_full,
       m_storebuffer_mv_sb_tail;

  // ports of submodule m_tag_v_tags_0_ram_double_0
  wire [19 : 0] m_tag_v_tags_0_ram_double_0_dina,
		m_tag_v_tags_0_ram_double_0_doutb;
  wire [5 : 0] m_tag_v_tags_0_ram_double_0_addra,
	       m_tag_v_tags_0_ram_double_0_addrb;
  wire m_tag_v_tags_0_ram_double_0_ena,
       m_tag_v_tags_0_ram_double_0_enb,
       m_tag_v_tags_0_ram_double_0_wea;

  // ports of submodule m_tag_v_tags_1_ram_double_0
  wire [19 : 0] m_tag_v_tags_1_ram_double_0_dina,
		m_tag_v_tags_1_ram_double_0_doutb;
  wire [5 : 0] m_tag_v_tags_1_ram_double_0_addra,
	       m_tag_v_tags_1_ram_double_0_addrb;
  wire m_tag_v_tags_1_ram_double_0_ena,
       m_tag_v_tags_1_ram_double_0_enb,
       m_tag_v_tags_1_ram_double_0_wea;

  // ports of submodule m_tag_v_tags_2_ram_double_0
  wire [19 : 0] m_tag_v_tags_2_ram_double_0_dina,
		m_tag_v_tags_2_ram_double_0_doutb;
  wire [5 : 0] m_tag_v_tags_2_ram_double_0_addra,
	       m_tag_v_tags_2_ram_double_0_addrb;
  wire m_tag_v_tags_2_ram_double_0_ena,
       m_tag_v_tags_2_ram_double_0_enb,
       m_tag_v_tags_2_ram_double_0_wea;

  // ports of submodule m_tag_v_tags_3_ram_double_0
  wire [19 : 0] m_tag_v_tags_3_ram_double_0_dina,
		m_tag_v_tags_3_ram_double_0_doutb;
  wire [5 : 0] m_tag_v_tags_3_ram_double_0_addra,
	       m_tag_v_tags_3_ram_double_0_addrb;
  wire m_tag_v_tags_3_ram_double_0_ena,
       m_tag_v_tags_3_ram_double_0_enb,
       m_tag_v_tags_3_ram_double_0_wea;

  // rule scheduling signals
  wire CAN_FIRE_RL_ff_core_response_dequeue,
       CAN_FIRE_RL_ff_core_response_enqueue,
       CAN_FIRE_RL_m_data_v_data_0_capture_output,
       CAN_FIRE_RL_m_data_v_data_1_capture_output,
       CAN_FIRE_RL_m_data_v_data_2_capture_output,
       CAN_FIRE_RL_m_data_v_data_3_capture_output,
       CAN_FIRE_RL_m_tag_v_tags_0_capture_output,
       CAN_FIRE_RL_m_tag_v_tags_1_capture_output,
       CAN_FIRE_RL_m_tag_v_tags_2_capture_output,
       CAN_FIRE_RL_m_tag_v_tags_3_capture_output,
       CAN_FIRE_RL_rg_core_io_response__dreg_update,
       CAN_FIRE_RL_rg_store_eviction__dreg_update,
       CAN_FIRE_RL_rl_deq_mem_wr_resp,
       CAN_FIRE_RL_rl_drive_ram_read_port,
       CAN_FIRE_RL_rl_fence_operation,
       CAN_FIRE_RL_rl_fill_from_memory,
       CAN_FIRE_RL_rl_fill_release,
       CAN_FIRE_RL_rl_initiate_io,
       CAN_FIRE_RL_rl_io_response,
       CAN_FIRE_RL_rl_line_eviction,
       CAN_FIRE_RL_rl_perform_replay,
       CAN_FIRE_RL_rl_ram_check,
       CAN_FIRE_RL_rl_store_release,
       CAN_FIRE_deq_mem_wr_req,
       CAN_FIRE_get_hold_req_get,
       CAN_FIRE_get_ptw_resp_get,
       CAN_FIRE_ma_cache_enable,
       CAN_FIRE_ma_commit_io,
       CAN_FIRE_ma_commit_store,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_put_pa_from_tlb_put,
       CAN_FIRE_receive_core_req_put,
       CAN_FIRE_receive_mem_io_resp_put,
       CAN_FIRE_receive_mem_rd_resp_put,
       CAN_FIRE_receive_mem_wr_resp_put,
       CAN_FIRE_send_core_cache_resp_get,
       CAN_FIRE_send_mem_io_req_get,
       CAN_FIRE_send_mem_rd_req_get,
       WILL_FIRE_RL_ff_core_response_dequeue,
       WILL_FIRE_RL_ff_core_response_enqueue,
       WILL_FIRE_RL_m_data_v_data_0_capture_output,
       WILL_FIRE_RL_m_data_v_data_1_capture_output,
       WILL_FIRE_RL_m_data_v_data_2_capture_output,
       WILL_FIRE_RL_m_data_v_data_3_capture_output,
       WILL_FIRE_RL_m_tag_v_tags_0_capture_output,
       WILL_FIRE_RL_m_tag_v_tags_1_capture_output,
       WILL_FIRE_RL_m_tag_v_tags_2_capture_output,
       WILL_FIRE_RL_m_tag_v_tags_3_capture_output,
       WILL_FIRE_RL_rg_core_io_response__dreg_update,
       WILL_FIRE_RL_rg_store_eviction__dreg_update,
       WILL_FIRE_RL_rl_deq_mem_wr_resp,
       WILL_FIRE_RL_rl_drive_ram_read_port,
       WILL_FIRE_RL_rl_fence_operation,
       WILL_FIRE_RL_rl_fill_from_memory,
       WILL_FIRE_RL_rl_fill_release,
       WILL_FIRE_RL_rl_initiate_io,
       WILL_FIRE_RL_rl_io_response,
       WILL_FIRE_RL_rl_line_eviction,
       WILL_FIRE_RL_rl_perform_replay,
       WILL_FIRE_RL_rl_ram_check,
       WILL_FIRE_RL_rl_store_release,
       WILL_FIRE_deq_mem_wr_req,
       WILL_FIRE_get_hold_req_get,
       WILL_FIRE_get_ptw_resp_get,
       WILL_FIRE_ma_cache_enable,
       WILL_FIRE_ma_commit_io,
       WILL_FIRE_ma_commit_store,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_put_pa_from_tlb_put,
       WILL_FIRE_receive_core_req_put,
       WILL_FIRE_receive_mem_io_resp_put,
       WILL_FIRE_receive_mem_rd_resp_put,
       WILL_FIRE_receive_mem_wr_resp_put,
       WILL_FIRE_send_core_cache_resp_get,
       WILL_FIRE_send_mem_io_req_get,
       WILL_FIRE_send_mem_rd_req_get;

  // inputs to muxes for submodule ports
  reg [511 : 0] MUX_m_storebuffer_ma_allocate_line_2__VAL_1,
		MUX_rg_evicted_line_write_1__VAL_2;
  wire [511 : 0] MUX_m_storebuffer_ma_allocate_line_2__VAL_2;
  wire [99 : 0] MUX_ff_mem_io_request_enq_1__VAL_1,
		MUX_ff_mem_io_request_enq_1__VAL_2;
  wire [76 : 0] MUX_ff_ptw_response_rv_port0__write_1__VAL_1,
		MUX_ff_ptw_response_rv_port0__write_1__VAL_2,
		MUX_ff_ptw_response_rv_port0__write_1__VAL_3;
  wire [75 : 0] MUX_ff_core_response_enqw_wset_1__VAL_1,
		MUX_ff_core_response_enqw_wset_1__VAL_2,
		MUX_ff_core_response_enqw_wset_1__VAL_3;
  wire [63 : 0] MUX_v_reg_dirty_0_write_1__VAL_1,
		MUX_v_reg_dirty_0_write_1__VAL_2,
		MUX_v_reg_dirty_0_write_1__VAL_3,
		MUX_v_reg_valid_0_write_1__VAL_1,
		MUX_v_reg_valid_0_write_1__VAL_2,
		MUX_v_reg_valid_0_write_1__VAL_3;
  wire [31 : 0] MUX_rg_evict_addr_write_1__VAL_2;
  wire [7 : 0] MUX_rg_block_count_write_1__VAL_1;
  wire [1 : 0] MUX_replacement_v_count_0_write_1__VAL_2,
	       MUX_replacement_v_count_0_write_1__VAL_3;
  wire MUX_ff_core_response_enqw_wset_1__SEL_1,
       MUX_ff_core_response_enqw_wset_1__SEL_2,
       MUX_ff_core_response_enqw_wset_1__SEL_3,
       MUX_ff_mem_io_request_enq_1__SEL_1,
       MUX_ff_ptw_response_rv_port0__write_1__SEL_1,
       MUX_ff_ptw_response_rv_port0__write_1__SEL_2,
       MUX_ff_ptw_response_rv_port0__write_1__SEL_3,
       MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1,
       MUX_m_data_v_data_0_ram_double_0_write_1__SEL_2,
       MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1,
       MUX_m_data_v_data_1_ram_double_0_write_1__SEL_2,
       MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1,
       MUX_m_data_v_data_2_ram_double_0_write_1__SEL_2,
       MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1,
       MUX_m_data_v_data_3_ram_double_0_write_1__SEL_2,
       MUX_m_storebuffer_ma_allocate_line_1__SEL_1,
       MUX_m_storebuffer_ma_allocate_line_1__SEL_2,
       MUX_m_storebuffer_ma_perform_atomic_1__SEL_1,
       MUX_replacement_v_count_0_write_1__SEL_2,
       MUX_replacement_v_count_0_write_1__SEL_3,
       MUX_replacement_v_count_1_write_1__SEL_2,
       MUX_replacement_v_count_1_write_1__SEL_3,
       MUX_replacement_v_count_10_write_1__SEL_2,
       MUX_replacement_v_count_10_write_1__SEL_3,
       MUX_replacement_v_count_11_write_1__SEL_2,
       MUX_replacement_v_count_11_write_1__SEL_3,
       MUX_replacement_v_count_12_write_1__SEL_2,
       MUX_replacement_v_count_12_write_1__SEL_3,
       MUX_replacement_v_count_13_write_1__SEL_2,
       MUX_replacement_v_count_13_write_1__SEL_3,
       MUX_replacement_v_count_14_write_1__SEL_2,
       MUX_replacement_v_count_14_write_1__SEL_3,
       MUX_replacement_v_count_15_write_1__SEL_2,
       MUX_replacement_v_count_15_write_1__SEL_3,
       MUX_replacement_v_count_16_write_1__SEL_2,
       MUX_replacement_v_count_16_write_1__SEL_3,
       MUX_replacement_v_count_17_write_1__SEL_2,
       MUX_replacement_v_count_17_write_1__SEL_3,
       MUX_replacement_v_count_18_write_1__SEL_2,
       MUX_replacement_v_count_18_write_1__SEL_3,
       MUX_replacement_v_count_19_write_1__SEL_2,
       MUX_replacement_v_count_19_write_1__SEL_3,
       MUX_replacement_v_count_2_write_1__SEL_2,
       MUX_replacement_v_count_2_write_1__SEL_3,
       MUX_replacement_v_count_20_write_1__SEL_2,
       MUX_replacement_v_count_20_write_1__SEL_3,
       MUX_replacement_v_count_21_write_1__SEL_2,
       MUX_replacement_v_count_21_write_1__SEL_3,
       MUX_replacement_v_count_22_write_1__SEL_2,
       MUX_replacement_v_count_22_write_1__SEL_3,
       MUX_replacement_v_count_23_write_1__SEL_2,
       MUX_replacement_v_count_23_write_1__SEL_3,
       MUX_replacement_v_count_24_write_1__SEL_2,
       MUX_replacement_v_count_24_write_1__SEL_3,
       MUX_replacement_v_count_25_write_1__SEL_2,
       MUX_replacement_v_count_25_write_1__SEL_3,
       MUX_replacement_v_count_26_write_1__SEL_2,
       MUX_replacement_v_count_26_write_1__SEL_3,
       MUX_replacement_v_count_27_write_1__SEL_2,
       MUX_replacement_v_count_27_write_1__SEL_3,
       MUX_replacement_v_count_28_write_1__SEL_2,
       MUX_replacement_v_count_28_write_1__SEL_3,
       MUX_replacement_v_count_29_write_1__SEL_2,
       MUX_replacement_v_count_29_write_1__SEL_3,
       MUX_replacement_v_count_3_write_1__SEL_2,
       MUX_replacement_v_count_3_write_1__SEL_3,
       MUX_replacement_v_count_30_write_1__SEL_2,
       MUX_replacement_v_count_30_write_1__SEL_3,
       MUX_replacement_v_count_31_write_1__SEL_2,
       MUX_replacement_v_count_31_write_1__SEL_3,
       MUX_replacement_v_count_32_write_1__SEL_2,
       MUX_replacement_v_count_32_write_1__SEL_3,
       MUX_replacement_v_count_33_write_1__SEL_2,
       MUX_replacement_v_count_33_write_1__SEL_3,
       MUX_replacement_v_count_34_write_1__SEL_2,
       MUX_replacement_v_count_34_write_1__SEL_3,
       MUX_replacement_v_count_35_write_1__SEL_2,
       MUX_replacement_v_count_35_write_1__SEL_3,
       MUX_replacement_v_count_36_write_1__SEL_2,
       MUX_replacement_v_count_36_write_1__SEL_3,
       MUX_replacement_v_count_37_write_1__SEL_2,
       MUX_replacement_v_count_37_write_1__SEL_3,
       MUX_replacement_v_count_38_write_1__SEL_2,
       MUX_replacement_v_count_38_write_1__SEL_3,
       MUX_replacement_v_count_39_write_1__SEL_2,
       MUX_replacement_v_count_39_write_1__SEL_3,
       MUX_replacement_v_count_4_write_1__SEL_2,
       MUX_replacement_v_count_4_write_1__SEL_3,
       MUX_replacement_v_count_40_write_1__SEL_2,
       MUX_replacement_v_count_40_write_1__SEL_3,
       MUX_replacement_v_count_41_write_1__SEL_2,
       MUX_replacement_v_count_41_write_1__SEL_3,
       MUX_replacement_v_count_42_write_1__SEL_2,
       MUX_replacement_v_count_42_write_1__SEL_3,
       MUX_replacement_v_count_43_write_1__SEL_2,
       MUX_replacement_v_count_43_write_1__SEL_3,
       MUX_replacement_v_count_44_write_1__SEL_2,
       MUX_replacement_v_count_44_write_1__SEL_3,
       MUX_replacement_v_count_45_write_1__SEL_2,
       MUX_replacement_v_count_45_write_1__SEL_3,
       MUX_replacement_v_count_46_write_1__SEL_2,
       MUX_replacement_v_count_46_write_1__SEL_3,
       MUX_replacement_v_count_47_write_1__SEL_2,
       MUX_replacement_v_count_47_write_1__SEL_3,
       MUX_replacement_v_count_48_write_1__SEL_2,
       MUX_replacement_v_count_48_write_1__SEL_3,
       MUX_replacement_v_count_49_write_1__SEL_2,
       MUX_replacement_v_count_49_write_1__SEL_3,
       MUX_replacement_v_count_5_write_1__SEL_2,
       MUX_replacement_v_count_5_write_1__SEL_3,
       MUX_replacement_v_count_50_write_1__SEL_2,
       MUX_replacement_v_count_50_write_1__SEL_3,
       MUX_replacement_v_count_51_write_1__SEL_2,
       MUX_replacement_v_count_51_write_1__SEL_3,
       MUX_replacement_v_count_52_write_1__SEL_2,
       MUX_replacement_v_count_52_write_1__SEL_3,
       MUX_replacement_v_count_53_write_1__SEL_2,
       MUX_replacement_v_count_53_write_1__SEL_3,
       MUX_replacement_v_count_54_write_1__SEL_2,
       MUX_replacement_v_count_54_write_1__SEL_3,
       MUX_replacement_v_count_55_write_1__SEL_2,
       MUX_replacement_v_count_55_write_1__SEL_3,
       MUX_replacement_v_count_56_write_1__SEL_2,
       MUX_replacement_v_count_56_write_1__SEL_3,
       MUX_replacement_v_count_57_write_1__SEL_2,
       MUX_replacement_v_count_57_write_1__SEL_3,
       MUX_replacement_v_count_58_write_1__SEL_2,
       MUX_replacement_v_count_58_write_1__SEL_3,
       MUX_replacement_v_count_59_write_1__SEL_2,
       MUX_replacement_v_count_59_write_1__SEL_3,
       MUX_replacement_v_count_6_write_1__SEL_2,
       MUX_replacement_v_count_6_write_1__SEL_3,
       MUX_replacement_v_count_60_write_1__SEL_2,
       MUX_replacement_v_count_60_write_1__SEL_3,
       MUX_replacement_v_count_61_write_1__SEL_2,
       MUX_replacement_v_count_61_write_1__SEL_3,
       MUX_replacement_v_count_62_write_1__SEL_2,
       MUX_replacement_v_count_62_write_1__SEL_3,
       MUX_replacement_v_count_63_write_1__SEL_2,
       MUX_replacement_v_count_63_write_1__SEL_3,
       MUX_replacement_v_count_7_write_1__SEL_2,
       MUX_replacement_v_count_7_write_1__SEL_3,
       MUX_replacement_v_count_8_write_1__SEL_2,
       MUX_replacement_v_count_8_write_1__SEL_3,
       MUX_replacement_v_count_9_write_1__SEL_2,
       MUX_replacement_v_count_9_write_1__SEL_3,
       MUX_rg_evict_addr_write_1__SEL_1,
       MUX_rg_evict_addr_write_1__SEL_2,
       MUX_rg_fill_err_write_1__VAL_2,
       MUX_rg_fill_eviction_write_1__SEL_2,
       MUX_rg_fill_release_write_1__SEL_1,
       MUX_rg_first_write_1__SEL_1,
       MUX_rg_first_write_1__SEL_2,
       MUX_rg_global_dirty_write_1__SEL_2,
       MUX_rg_io_busy_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_3,
       MUX_v_reg_dirty_1_write_1__SEL_3,
       MUX_v_reg_dirty_2_write_1__SEL_3,
       MUX_v_reg_dirty_3_write_1__SEL_3,
       MUX_wr_read_set_index_wset_1__SEL_1,
       MUX_wr_read_set_index_wset_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d1642;
  reg TASK_testplusargs___d1643;
  reg TASK_testplusargs___d1644;
  reg [63 : 0] v__h123559;
  reg TASK_testplusargs___d740;
  reg TASK_testplusargs___d741;
  reg TASK_testplusargs___d742;
  reg [63 : 0] v__h62638;
  reg TASK_testplusargs___d1140;
  reg TASK_testplusargs___d1141;
  reg TASK_testplusargs___d1142;
  reg [63 : 0] v__h94062;
  reg TASK_testplusargs___d1160;
  reg TASK_testplusargs___d1161;
  reg TASK_testplusargs___d1162;
  reg [63 : 0] v__h94264;
  reg TASK_testplusargs___d53;
  reg TASK_testplusargs___d54;
  reg TASK_testplusargs___d55;
  reg [63 : 0] v__h15448;
  reg TASK_testplusargs___d61;
  reg TASK_testplusargs___d62;
  reg TASK_testplusargs___d63;
  reg [63 : 0] v__h15592;
  reg TASK_testplusargs___d104;
  reg TASK_testplusargs___d105;
  reg TASK_testplusargs___d106;
  reg [63 : 0] v__h25484;
  reg TASK_testplusargs___d1746;
  reg TASK_testplusargs___d1747;
  reg TASK_testplusargs___d1748;
  reg [63 : 0] v__h125064;
  reg TASK_testplusargs___d1756;
  reg TASK_testplusargs___d1757;
  reg TASK_testplusargs___d1758;
  reg [63 : 0] v__h125234;
  reg TASK_testplusargs___d183;
  reg TASK_testplusargs___d184;
  reg TASK_testplusargs___d185;
  reg [63 : 0] v__h35382;
  reg TASK_testplusargs___d255;
  reg TASK_testplusargs___d256;
  reg TASK_testplusargs___d257;
  reg [63 : 0] v__h35898;
  reg TASK_testplusargs___d299;
  reg TASK_testplusargs___d300;
  reg TASK_testplusargs___d301;
  reg [63 : 0] v__h36275;
  reg TASK_testplusargs___d315;
  reg TASK_testplusargs___d316;
  reg TASK_testplusargs___d317;
  reg [63 : 0] v__h36554;
  reg TASK_testplusargs___d327;
  reg TASK_testplusargs___d328;
  reg TASK_testplusargs___d329;
  reg [63 : 0] v__h36716;
  reg TASK_testplusargs___d336;
  reg TASK_testplusargs___d337;
  reg TASK_testplusargs___d338;
  reg [63 : 0] v__h36971;
  reg TASK_testplusargs___d343;
  reg TASK_testplusargs___d344;
  reg TASK_testplusargs___d345;
  reg [63 : 0] v__h37584;
  reg TASK_testplusargs___d357;
  reg TASK_testplusargs___d358;
  reg TASK_testplusargs___d359;
  reg [63 : 0] v__h37947;
  reg TASK_testplusargs___d374;
  reg TASK_testplusargs___d375;
  reg TASK_testplusargs___d376;
  reg [63 : 0] v__h38457;
  reg TASK_testplusargs___d419;
  reg TASK_testplusargs___d420;
  reg TASK_testplusargs___d421;
  reg [63 : 0] v__h40044;
  reg TASK_testplusargs___d565;
  reg TASK_testplusargs___d566;
  reg TASK_testplusargs___d567;
  reg [63 : 0] v__h59224;
  reg TASK_testplusargs___d576;
  reg TASK_testplusargs___d577;
  reg TASK_testplusargs___d578;
  reg [63 : 0] v__h59499;
  reg TASK_testplusargs___d588;
  reg TASK_testplusargs___d589;
  reg TASK_testplusargs___d590;
  reg [63 : 0] v__h59828;
  reg TASK_testplusargs___d618;
  reg TASK_testplusargs___d619;
  reg TASK_testplusargs___d620;
  reg [63 : 0] v__h60180;
  reg TASK_testplusargs___d680;
  reg TASK_testplusargs___d681;
  reg TASK_testplusargs___d682;
  reg [63 : 0] v__h60463;
  reg TASK_testplusargs___d704;
  reg TASK_testplusargs___d705;
  reg TASK_testplusargs___d706;
  reg [63 : 0] v__h61850;
  reg TASK_testplusargs___d712;
  reg TASK_testplusargs___d713;
  reg TASK_testplusargs___d714;
  reg [63 : 0] v__h62015;
  reg TASK_testplusargs___d726;
  reg TASK_testplusargs___d727;
  reg TASK_testplusargs___d728;
  reg [63 : 0] v__h62410;
  reg TASK_testplusargs___d754;
  reg TASK_testplusargs___d755;
  reg TASK_testplusargs___d756;
  reg [63 : 0] v__h62899;
  reg TASK_testplusargs___d776;
  reg TASK_testplusargs___d777;
  reg TASK_testplusargs___d778;
  reg [63 : 0] v__h64212;
  reg TASK_testplusargs___d791;
  reg TASK_testplusargs___d792;
  reg TASK_testplusargs___d793;
  reg [63 : 0] v__h66229;
  reg TASK_testplusargs___d813;
  reg TASK_testplusargs___d814;
  reg TASK_testplusargs___d815;
  reg [63 : 0] v__h75271;
  reg TASK_testplusargs___d837;
  reg TASK_testplusargs___d838;
  reg TASK_testplusargs___d839;
  reg [63 : 0] v__h75496;
  reg TASK_testplusargs___d845;
  reg TASK_testplusargs___d846;
  reg TASK_testplusargs___d847;
  reg [63 : 0] v__h82319;
  reg TASK_testplusargs___d962;
  reg TASK_testplusargs___d963;
  reg TASK_testplusargs___d964;
  reg [63 : 0] v__h86510;
  reg TASK_testplusargs___d981;
  reg TASK_testplusargs___d982;
  reg TASK_testplusargs___d983;
  reg [63 : 0] v__h86907;
  reg TASK_testplusargs___d989;
  reg TASK_testplusargs___d990;
  reg TASK_testplusargs___d991;
  reg [63 : 0] v__h87968;
  reg TASK_testplusargs___d997;
  reg TASK_testplusargs___d998;
  reg TASK_testplusargs___d999;
  reg [63 : 0] v__h89041;
  reg TASK_testplusargs___d1179;
  reg TASK_testplusargs___d1180;
  reg TASK_testplusargs___d1181;
  reg [63 : 0] v__h94395;
  reg TASK_testplusargs___d1274;
  reg TASK_testplusargs___d1275;
  reg TASK_testplusargs___d1276;
  reg [63 : 0] v__h95430;
  reg TASK_testplusargs___d1284;
  reg TASK_testplusargs___d1285;
  reg TASK_testplusargs___d1286;
  reg [63 : 0] v__h95605;
  reg TASK_testplusargs___d1300;
  reg TASK_testplusargs___d1301;
  reg TASK_testplusargs___d1302;
  reg [63 : 0] v__h95837;
  reg TASK_testplusargs___d1326;
  reg TASK_testplusargs___d1327;
  reg TASK_testplusargs___d1328;
  reg [63 : 0] v__h99116;
  reg TASK_testplusargs___d1633;
  reg TASK_testplusargs___d1634;
  reg TASK_testplusargs___d1635;
  reg [63 : 0] v__h123162;
  reg rg_reservation_address_07_BIT_64_08_AND_IF_rg__ETC___d320;
  reg NOT_rg_reservation_address_07_BIT_64_08_23_OR__ETC___d332;
  reg NOT_m_storebuffer_mav_core_lookup_80_BIT_66_81_ETC___d570;
  reg NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d623;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d626;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d649;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d653;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d657;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d663;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d669;
  reg m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d685;
  reg m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d709;
  reg m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1279;
  reg m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1289;
  reg TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1333;
  reg TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1398;
  reg TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1405;
  reg NOT_v_reg_dirty_3_3_BIT_rg_fence_set_9_7_AND_v_ETC___d109;
  reg TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d196;
  reg TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d215;
  reg TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d248;
  reg TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d249;
  reg TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d251;
  reg TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d253;
  reg TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d254;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d263;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d284;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d286;
  reg TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d288;
  reg ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d304;
  reg NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d424;
  reg NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d581;
  reg ff_from_tlb_rv_port1__read__39_BIT_0_85_AND_TA_ETC___d593;
  reg TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d732;
  reg TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d733;
  reg TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d734;
  reg TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d735;
  reg TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d736;
  reg TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d737;
  reg NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d759;
  reg NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d781;
  reg NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d796;
  reg rg_fill_eviction_read__06_AND_TASK_testplusarg_ETC___d818;
  reg rg_store_eviction_44_AND_TASK_testplusargs_45__ETC___d850;
  reg v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d967;
  reg NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d986;
  reg NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d994;
  reg NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1002;
  reg TASK_testplusargs_160_OR_TASK_testplusargs_161_ETC___d1172;
  reg TASK_testplusargs_160_OR_TASK_testplusargs_161_ETC___d1174;
  reg TASK_testplusargs_179_OR_TASK_testplusargs_180_ETC___d1188;
  reg TASK_testplusargs_179_OR_TASK_testplusargs_180_ETC___d1190;
  reg TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1308;
  reg TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1310;
  reg TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1312;
  reg TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1314;
  reg rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1331;
  reg rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1334;
  reg rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1399;
  reg rg_miss_meta_316_BITS_37_TO_36_317_EQ_1_320_AN_ETC___d1406;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1648;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1651;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1659;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1679;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1713;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1714;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1716;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1718;
  reg TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1719;
  reg TASK_testplusargs_746_OR_TASK_testplusargs_747_ETC___d1752;
  reg TASK_testplusargs_746_OR_TASK_testplusargs_747_ETC___d1753;
  reg NOT_m_iobuffer_mv_io_head__154_BIT_72_168_EQ_m_ETC___d1761;
  reg __duses557;
  reg __duses578;
  reg __duses581;
  reg __duses585;
  reg __duses588;
  reg __duses629;
  reg __duses632;
  reg __duses633;
  reg __duses634;
  reg __duses635;
  reg __duses668;
  reg __duses677;
  reg __duses679;
  reg __duses671;
  reg __duses681;
  reg __duses685;
  reg __duses698;
  reg __duses699;
  reg __duses700;
  reg __duses702;
  reg __duses703;
  reg __duses704;
  reg __duses705;
  reg __duses796;
  reg __duses826;
  reg __duses835;
  reg __duses837;
  reg __duses839;
  reg __duses843;
  reg __duses856;
  reg __duses857;
  reg __duses858;
  reg __duses860;
  reg __duses861;
  reg __duses862;
  reg __duses863;
  reg __duses954;
  reg __duses992;
  reg __duses1017;
  reg __duses1019;
  reg __duses1021;
  reg __duses1025;
  reg __duses1030;
  reg __duses1031;
  reg __duses1034;
  reg __duses1035;
  reg __duses1036;
  reg __duses1037;
  reg __duses1061;
  reg __duses1090;
  reg __duses1089;
  reg __duses1093;
  reg __duses1094;
  reg __duses1095;
  reg __duses1096;
  reg __duses1121;
  reg __duses1150;
  reg __duses1149;
  reg __duses1153;
  reg __duses1154;
  reg __duses1155;
  reg __duses1156;
  reg __duses1181;
  reg __duses1210;
  reg __duses1209;
  reg __duses1213;
  reg __duses1214;
  reg __duses1215;
  reg __duses1216;
  reg __duses1241;
  reg __duses1270;
  reg __duses1269;
  reg __duses1273;
  reg __duses1274;
  reg __duses1275;
  reg __duses1276;
  reg __duses1301;
  reg __duses1330;
  reg __duses1329;
  reg __duses1333;
  reg __duses1334;
  reg __duses1335;
  reg __duses1336;
  reg __duses1361;
  reg __duses1390;
  reg __duses1389;
  reg __duses1393;
  reg __duses1394;
  reg __duses1395;
  reg __duses1396;
  reg __duses1421;
  reg __duses1450;
  reg __duses1449;
  reg __duses1453;
  reg __duses1454;
  reg __duses1455;
  reg __duses1456;
  reg __duses1481;
  reg __duses1510;
  reg __duses1509;
  reg __duses1513;
  reg __duses1514;
  reg __duses1515;
  reg __duses1516;
  reg __duses1541;
  reg __duses1570;
  reg __duses1569;
  reg __duses1573;
  reg __duses1574;
  reg __duses1575;
  reg __duses1576;
  reg __duses1601;
  reg __duses1630;
  reg __duses1629;
  reg __duses1633;
  reg __duses1634;
  reg __duses1635;
  reg __duses1636;
  reg __duses1660;
  reg __duses1659;
  reg __duses1661;
  reg __duses1663;
  reg __duses1664;
  reg __duses1665;
  reg __duses1666;
  // synopsys translate_on

  // remaining internal signals
  reg [511 : 0] lv_line__h78633, x__h29001;
  reg [63 : 0] CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10,
	       CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7,
	       CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8,
	       CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9,
	       _new_store__h94542,
	       bs__h15653,
	       bs__h18506,
	       mask__h40285,
	       mask__h99254,
	       mem_response_data__h94535,
	       response_word__h37880,
	       w__h56025,
	       w__h58978,
	       w__h67373,
	       w__h67646,
	       w__h86272,
	       w__h86637,
	       x__h45031,
	       x__h99389;
  reg [19 : 0] v__h21368, v__h67850, v__h78637;
  reg [1 : 0] SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438,
	      SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935;
  reg lv_sign__h40283, lv_sign__h99252;
  wire [511 : 0] x1__h65298;
  wire [63 : 0] IF_ff_core_request_first__2_BITS_74_TO_73_90_E_ETC___d544,
		_theResult_____1_word__h99196,
		_theResult_____2_word__h99189,
		block__h40279,
		lv_response_word__h40245,
		lv_response_word__h40260,
		lv_response_word__h94594,
		lv_response_word__h99183,
		mem_response_data__h94537,
		op1___1__h95078,
		op1__h95020,
		op2___1__h95079,
		op2__h95021,
		rdata__h40211,
		signmask__h40286,
		signmask__h99255,
		word__h40282,
		word__h99251,
		x__h40299,
		x__h56027,
		x__h67768,
		x__h86274,
		x__h99268,
		y__h45032,
		y__h56042,
		y__h67783,
		y__h99390;
  wire [31 : 0] _theResult_____1__h82252,
		lv_address__h24743,
		m_iobuffermv_io_head_BITS_107_TO_76__q5,
		mem_response_data4535_BITS_31_TO_0__q4,
		mem_response_data4537_BITS_31_TO_0__q3,
		phyaddr__h35828,
		x_address__h60353;
  wire [15 : 0] mem_response_data4537_BITS_15_TO_0__q2;
  wire [7 : 0] fn_pmp_lookup___d407,
	       mem_response_data4537_BITS_7_TO_0__q1,
	       rotator__h120747;
  wire [6 : 0] _theResult_____1_cause__h40255,
	       _theResult_____1_cause__h99198,
	       lv_cause__h35831,
	       lv_cause__h94520;
  wire [5 : 0] _theResult_____2__h28945,
	       _theResult____h123294,
	       shiftamt__h40281,
	       shiftamt__h99250,
	       x__h94650;
  wire [3 : 0] IF_m_tag_v_tags_0_ram_double_0doutb_EQ_ff_fro_ETC__q6,
	       lv_hitmask__h37878,
	       lv_hitvector__h36904,
	       lv_set_dirty__h36893,
	       lv_set_dirty__h75582,
	       lv_set_dirty__h95975,
	       lv_set_valid__h36892,
	       lv_set_valid__h75581,
	       lv_set_valid__h95974,
	       x__h24767,
	       x__h24778,
	       x__h34409;
  wire [2 : 0] x__h107912,
	       x__h38564,
	       x__h38576,
	       x__h38588,
	       y__h38565,
	       y__h38577,
	       y__h38589;
  wire [1 : 0] IF_v_reg_dirty_2_2_BIT_m_storebuffer_mv_releas_ETC___d940,
	       IF_v_reg_dirty_2_2_BIT_rg_miss_meta_316_BITS_1_ETC___d1443,
	       IF_v_reg_valid_2_9_BIT_m_storebuffer_mv_releas_ETC___d944,
	       IF_v_reg_valid_2_9_BIT_rg_miss_meta_316_BITS_1_ETC___d1447,
	       IF_v_reg_valid_3_0_BIT_m_storebuffer_mv_releas_ETC___d946,
	       IF_v_reg_valid_3_0_BIT_rg_miss_meta_316_BITS_1_ETC___d1449,
	       pmp_access__h36111,
	       v__h75586,
	       v__h95979,
	       v_reg_dirty_1_1_BIT_rg_fence_set_9_3_AND_v_reg_ETC___d99,
	       wayindex__h40303,
	       x1_avValue_fst_access__h38902,
	       x1_avValue_fst_access__h38910,
	       x__h25555,
	       x__h38897,
	       x__h71536,
	       x__h78647;
  wire IF_ff_core_request_first__2_BITS_71_TO_70_26_E_ETC___d508,
       IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1254,
       IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1259,
       IF_rg_miss_meta_316_BITS_2_TO_1_343_EQ_0b0_344_ETC___d1361,
       IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312,
       NOT_0_CONCAT_m_tag_v_tags_3_rg_output_0_port1__ETC___d390,
       NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417,
       NOT_ff_core_request_first__2_BITS_74_TO_73_90__ETC___d660,
       NOT_ff_core_request_first__2_BIT_76_3_62_AND_N_ETC___d172,
       NOT_m_iobuffer_mv_io_head__154_BIT_0_171_173_A_ETC___d1235,
       NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d393,
       NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d596,
       NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597,
       NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d647,
       NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d655,
       NOT_rg_performing_replay_port0__read__3_4_AND__ETC___d1723,
       NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011,
       NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574,
       _0_OR_NOT_ff_core_request_first__2_BITS_74_TO_7_ETC___d610,
       __duses1038,
       __duses412,
       __duses420,
       __duses421,
       __duses437,
       __duses444,
       __duses445,
       __duses453,
       __duses461,
       __duses471,
       __duses481,
       __duses491,
       __duses501,
       __duses509,
       b__h38560,
       b__h38572,
       b__h38584,
       ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d666,
       ff_core_response_ff_i_notFull__0_AND_ff_core_r_ETC___d1740,
       ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414,
       ff_from_tlb_rv_port1__read__39_BIT_8_62_OR_NOT_ETC___d435,
       m_iobuffer_mv_io_head__154_BIT_0_171_OR_NOT_m__ETC___d1196,
       m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754,
       m_storebuffer_RDY_ma_allocate_store__43_AND_m__ETC___d158,
       m_storebuffer_mv_line_full__64_OR_m_storebuffe_ETC___d829,
       m_storebuffer_mv_release_head__24_BIT_544_25_A_ETC___d833,
       m_tag_v_tags_1_rg_output_0_port1__read__12_EQ__ETC___d351,
       m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d350,
       m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d552,
       m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d558,
       m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d560,
       m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d562,
       m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d349,
       m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d365,
       m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d674,
       m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675,
       rg_fence_stall_1_AND_ff_core_request_first__2__ETC___d40,
       rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1408,
       rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1417,
       rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1498,
       rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501,
       rg_recent_req_read__20_EQ_m_storebuffer_mv_rel_ETC___d1008,
       rg_recent_req_read__20_EQ_rg_fill_set_read__62_ETC___d823,
       v_reg_dirty_0_0_BIT_m_storebuffer_mv_release_h_ETC___d863,
       v_reg_dirty_0_0_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1431,
       v_reg_dirty_1_1_BIT_m_storebuffer_mv_release_h_ETC___d862,
       v_reg_dirty_1_1_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1430,
       v_reg_dirty_2_2_BIT_m_storebuffer_mv_release_h_ETC___d861,
       v_reg_dirty_2_2_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1429,
       v_reg_dirty_3_3_BIT_m_storebuffer_mv_release_h_ETC___d860,
       v_reg_dirty_3_3_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1428,
       v_reg_valid_0_7_BIT_ff_from_tlb_rv_port1__read_ETC___d370,
       v_reg_valid_0_7_BIT_m_storebuffer_mv_release_h_ETC___d856,
       v_reg_valid_0_7_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1424,
       v_reg_valid_1_8_BIT_ff_from_tlb_rv_port1__read_ETC___d368,
       v_reg_valid_1_8_BIT_m_storebuffer_mv_release_h_ETC___d855,
       v_reg_valid_1_8_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1423,
       v_reg_valid_2_9_BIT_ff_from_tlb_rv_port1__read_ETC___d366,
       v_reg_valid_2_9_BIT_m_storebuffer_mv_release_h_ETC___d854,
       v_reg_valid_2_9_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1422,
       v_reg_valid_3_0_BIT_ff_from_tlb_rv_port1__read_ETC___d364,
       v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d853,
       v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959,
       v_reg_valid_3_0_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1421,
       x__h114847,
       x__h38803,
       x__h86137,
       y__h104425,
       y__h114848,
       y__h50067,
       y__h86138;

  // action method receive_core_req_put
  assign RDY_receive_core_req_put =
	     NOT_rg_performing_replay_port0__read__3_4_AND__ETC___d1723 &&
	     !ff_mem_wr_request_EMPTY_N &&
	     EN_ma_cache_enable ;
  assign CAN_FIRE_receive_core_req_put =
	     NOT_rg_performing_replay_port0__read__3_4_AND__ETC___d1723 &&
	     !ff_mem_wr_request_EMPTY_N &&
	     EN_ma_cache_enable ;
  assign WILL_FIRE_receive_core_req_put = EN_receive_core_req_put ;

  // actionvalue method send_core_cache_resp_get
  assign send_core_cache_resp_get =
	     ff_core_response_ff_EMPTY_N ?
	       ff_core_response_ff_D_OUT :
	       ff_core_response_enqw_wget ;
  assign RDY_send_core_cache_resp_get =
	     ff_core_response_firstValid_Q_OUT &&
	     (ff_core_response_ff_EMPTY_N || ff_core_response_enqw_whas) ;
  assign CAN_FIRE_send_core_cache_resp_get =
	     ff_core_response_firstValid_Q_OUT &&
	     (ff_core_response_ff_EMPTY_N || ff_core_response_enqw_whas) ;
  assign WILL_FIRE_send_core_cache_resp_get = EN_send_core_cache_resp_get ;

  // value method send_core_io_resp
  assign send_core_io_resp = rg_core_io_response ;
  assign RDY_send_core_io_resp = 1'd1 ;

  // actionvalue method send_mem_rd_req_get
  assign send_mem_rd_req_get = ff_mem_rd_request_D_OUT ;
  assign RDY_send_mem_rd_req_get = ff_mem_rd_request_EMPTY_N ;
  assign CAN_FIRE_send_mem_rd_req_get = ff_mem_rd_request_EMPTY_N ;
  assign WILL_FIRE_send_mem_rd_req_get = EN_send_mem_rd_req_get ;

  // action method receive_mem_rd_resp_put
  assign RDY_receive_mem_rd_resp_put = !ff_mem_rd_resp_rv[66] ;
  assign CAN_FIRE_receive_mem_rd_resp_put = !ff_mem_rd_resp_rv[66] ;
  assign WILL_FIRE_receive_mem_rd_resp_put = EN_receive_mem_rd_resp_put ;

  // value method send_mem_wr_req
  assign send_mem_wr_req = ff_mem_wr_request_D_OUT ;
  assign RDY_send_mem_wr_req = ff_mem_wr_request_EMPTY_N ;

  // action method deq_mem_wr_req
  assign RDY_deq_mem_wr_req = ff_mem_wr_request_EMPTY_N ;
  assign CAN_FIRE_deq_mem_wr_req = ff_mem_wr_request_EMPTY_N ;
  assign WILL_FIRE_deq_mem_wr_req = EN_deq_mem_wr_req ;

  // action method receive_mem_wr_resp_put
  assign RDY_receive_mem_wr_resp_put = !ff_mem_wr_resp_rv[1] ;
  assign CAN_FIRE_receive_mem_wr_resp_put = !ff_mem_wr_resp_rv[1] ;
  assign WILL_FIRE_receive_mem_wr_resp_put = EN_receive_mem_wr_resp_put ;

  // actionvalue method send_mem_io_req_get
  assign send_mem_io_req_get = ff_mem_io_request_D_OUT ;
  assign RDY_send_mem_io_req_get = ff_mem_io_request_EMPTY_N ;
  assign CAN_FIRE_send_mem_io_req_get = ff_mem_io_request_EMPTY_N ;
  assign WILL_FIRE_send_mem_io_req_get = EN_send_mem_io_req_get ;

  // action method receive_mem_io_resp_put
  assign RDY_receive_mem_io_resp_put = ff_mem_io_resp_FULL_N ;
  assign CAN_FIRE_receive_mem_io_resp_put = ff_mem_io_resp_FULL_N ;
  assign WILL_FIRE_receive_mem_io_resp_put = EN_receive_mem_io_resp_put ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // action method ma_cache_enable
  assign RDY_ma_cache_enable = 1'd1 ;
  assign CAN_FIRE_ma_cache_enable = 1'd1 ;
  assign WILL_FIRE_ma_cache_enable = EN_ma_cache_enable ;

  // value method mv_storebuffer_empty
  assign mv_storebuffer_empty =
	     m_storebuffer_mv_line_empty && m_storebuffer_mv_sb_empty ;
  assign RDY_mv_storebuffer_empty = 1'd1 ;

  // value method mv_cache_available
  assign mv_cache_available =
	     ff_core_response_ff_i_notFull__0_AND_ff_core_r_ETC___d1740 &&
	     !rg_eviction_required &&
	     !rg_miss_handling &&
	     !rg_performing_replay &&
	     !m_storebuffer_mv_sb_busy &&
	     !m_iobuffer_mv_io_full &&
	     !ff_mem_wr_request_EMPTY_N ;
  assign RDY_mv_cache_available = 1'd1 ;

  // action method ma_commit_store
  assign RDY_ma_commit_store = 1'd1 ;
  assign CAN_FIRE_ma_commit_store = 1'd1 ;
  assign WILL_FIRE_ma_commit_store = EN_ma_commit_store ;

  // action method ma_commit_io
  assign RDY_ma_commit_io = 1'd1 ;
  assign CAN_FIRE_ma_commit_io = 1'd1 ;
  assign WILL_FIRE_ma_commit_io = EN_ma_commit_io ;

  // actionvalue method get_ptw_resp_get
  assign get_ptw_resp_get = ff_ptw_response_rv_port1__read[75:0] ;
  assign RDY_get_ptw_resp_get = ff_ptw_response_rv_port1__read[76] ;
  assign CAN_FIRE_get_ptw_resp_get = ff_ptw_response_rv_port1__read[76] ;
  assign WILL_FIRE_get_ptw_resp_get = EN_get_ptw_resp_get ;

  // action method put_pa_from_tlb_put
  assign RDY_put_pa_from_tlb_put = !ff_from_tlb_rv[41] ;
  assign CAN_FIRE_put_pa_from_tlb_put = !ff_from_tlb_rv[41] ;
  assign WILL_FIRE_put_pa_from_tlb_put = EN_put_pa_from_tlb_put ;

  // actionvalue method get_hold_req_get
  assign get_hold_req_get = ff_hold_request_rv_port1__read[140:0] ;
  assign RDY_get_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign CAN_FIRE_get_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign WILL_FIRE_get_hold_req_get = EN_get_hold_req_get ;

  // submodule ff_core_request
  FIFO2 #(.width(32'd141), .guarded(1'd0)) ff_core_request(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ff_core_request_D_IN),
							   .ENQ(ff_core_request_ENQ),
							   .DEQ(ff_core_request_DEQ),
							   .CLR(ff_core_request_CLR),
							   .D_OUT(ff_core_request_D_OUT),
							   .FULL_N(ff_core_request_FULL_N),
							   .EMPTY_N(ff_core_request_EMPTY_N));

  // submodule ff_core_response_ff
  FIFO2 #(.width(32'd76), .guarded(1'd0)) ff_core_response_ff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ff_core_response_ff_D_IN),
							      .ENQ(ff_core_response_ff_ENQ),
							      .DEQ(ff_core_response_ff_DEQ),
							      .CLR(ff_core_response_ff_CLR),
							      .D_OUT(ff_core_response_ff_D_OUT),
							      .FULL_N(ff_core_response_ff_FULL_N),
							      .EMPTY_N(ff_core_response_ff_EMPTY_N));

  // submodule ff_core_response_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ff_core_response_firstValid(.CLK(CLK),
						       .D_IN(ff_core_response_firstValid_D_IN),
						       .EN(ff_core_response_firstValid_EN),
						       .Q_OUT(ff_core_response_firstValid_Q_OUT));

  // submodule ff_mem_io_request
  FIFO1 #(.width(32'd100), .guarded(1'd1)) ff_mem_io_request(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ff_mem_io_request_D_IN),
							     .ENQ(ff_mem_io_request_ENQ),
							     .DEQ(ff_mem_io_request_DEQ),
							     .CLR(ff_mem_io_request_CLR),
							     .D_OUT(ff_mem_io_request_D_OUT),
							     .FULL_N(ff_mem_io_request_FULL_N),
							     .EMPTY_N(ff_mem_io_request_EMPTY_N));

  // submodule ff_mem_io_resp
  FIFO1 #(.width(32'd65), .guarded(1'd1)) ff_mem_io_resp(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_mem_io_resp_D_IN),
							 .ENQ(ff_mem_io_resp_ENQ),
							 .DEQ(ff_mem_io_resp_DEQ),
							 .CLR(ff_mem_io_resp_CLR),
							 .D_OUT(ff_mem_io_resp_D_OUT),
							 .FULL_N(ff_mem_io_resp_FULL_N),
							 .EMPTY_N(ff_mem_io_resp_EMPTY_N));

  // submodule ff_mem_rd_request
  FIFO2 #(.width(32'd43), .guarded(1'd1)) ff_mem_rd_request(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ff_mem_rd_request_D_IN),
							    .ENQ(ff_mem_rd_request_ENQ),
							    .DEQ(ff_mem_rd_request_DEQ),
							    .CLR(ff_mem_rd_request_CLR),
							    .D_OUT(ff_mem_rd_request_D_OUT),
							    .FULL_N(ff_mem_rd_request_FULL_N),
							    .EMPTY_N(ff_mem_rd_request_EMPTY_N));

  // submodule ff_mem_wr_request
  FIFO1 #(.width(32'd555), .guarded(1'd1)) ff_mem_wr_request(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ff_mem_wr_request_D_IN),
							     .ENQ(ff_mem_wr_request_ENQ),
							     .DEQ(ff_mem_wr_request_DEQ),
							     .CLR(ff_mem_wr_request_CLR),
							     .D_OUT(ff_mem_wr_request_D_OUT),
							     .FULL_N(ff_mem_wr_request_FULL_N),
							     .EMPTY_N(ff_mem_wr_request_EMPTY_N));

  // submodule m_data_v_data_0_ram_double_0
  bram_1r1w #(.ADDR_WIDTH(32'd6),
	      .DATA_WIDTH(32'd512),
	      .MEMSIZE(32'd64)) m_data_v_data_0_ram_double_0(.clka(CLK),
							     .clkb(CLK),
							     .addra(m_data_v_data_0_ram_double_0_addra),
							     .addrb(m_data_v_data_0_ram_double_0_addrb),
							     .dina(m_data_v_data_0_ram_double_0_dina),
							     .wea(m_data_v_data_0_ram_double_0_wea),
							     .ena(m_data_v_data_0_ram_double_0_ena),
							     .enb(m_data_v_data_0_ram_double_0_enb),
							     .doutb(m_data_v_data_0_ram_double_0_doutb));

  // submodule m_data_v_data_1_ram_double_0
  bram_1r1w #(.ADDR_WIDTH(32'd6),
	      .DATA_WIDTH(32'd512),
	      .MEMSIZE(32'd64)) m_data_v_data_1_ram_double_0(.clka(CLK),
							     .clkb(CLK),
							     .addra(m_data_v_data_1_ram_double_0_addra),
							     .addrb(m_data_v_data_1_ram_double_0_addrb),
							     .dina(m_data_v_data_1_ram_double_0_dina),
							     .wea(m_data_v_data_1_ram_double_0_wea),
							     .ena(m_data_v_data_1_ram_double_0_ena),
							     .enb(m_data_v_data_1_ram_double_0_enb),
							     .doutb(m_data_v_data_1_ram_double_0_doutb));

  // submodule m_data_v_data_2_ram_double_0
  bram_1r1w #(.ADDR_WIDTH(32'd6),
	      .DATA_WIDTH(32'd512),
	      .MEMSIZE(32'd64)) m_data_v_data_2_ram_double_0(.clka(CLK),
							     .clkb(CLK),
							     .addra(m_data_v_data_2_ram_double_0_addra),
							     .addrb(m_data_v_data_2_ram_double_0_addrb),
							     .dina(m_data_v_data_2_ram_double_0_dina),
							     .wea(m_data_v_data_2_ram_double_0_wea),
							     .ena(m_data_v_data_2_ram_double_0_ena),
							     .enb(m_data_v_data_2_ram_double_0_enb),
							     .doutb(m_data_v_data_2_ram_double_0_doutb));

  // submodule m_data_v_data_3_ram_double_0
  bram_1r1w #(.ADDR_WIDTH(32'd6),
	      .DATA_WIDTH(32'd512),
	      .MEMSIZE(32'd64)) m_data_v_data_3_ram_double_0(.clka(CLK),
							     .clkb(CLK),
							     .addra(m_data_v_data_3_ram_double_0_addra),
							     .addrb(m_data_v_data_3_ram_double_0_addrb),
							     .dina(m_data_v_data_3_ram_double_0_dina),
							     .wea(m_data_v_data_3_ram_double_0_wea),
							     .ena(m_data_v_data_3_ram_double_0_ena),
							     .enb(m_data_v_data_3_ram_double_0_enb),
							     .doutb(m_data_v_data_3_ram_double_0_doutb));

  // submodule m_iobuffer
  mkiobuffer #(.id(id)) m_iobuffer(.CLK(CLK),
				   .RST_N(RST_N),
				   .ma_allocate_io_entry(m_iobuffer_ma_allocate_io_entry),
				   .EN_ma_increment_head(m_iobuffer_EN_ma_increment_head),
				   .EN_ma_commit_io(m_iobuffer_EN_ma_commit_io),
				   .EN_ma_allocate_io(m_iobuffer_EN_ma_allocate_io),
				   .mv_io_full(m_iobuffer_mv_io_full),
				   .RDY_mv_io_full(),
				   .mv_io_empty(m_iobuffer_mv_io_empty),
				   .RDY_mv_io_empty(),
				   .mv_io_head_valid(m_iobuffer_mv_io_head_valid),
				   .RDY_mv_io_head_valid(),
				   .RDY_ma_increment_head(),
				   .RDY_ma_commit_io(),
				   .mv_io_head(m_iobuffer_mv_io_head),
				   .RDY_mv_io_head(),
				   .RDY_ma_allocate_io());

  // submodule m_storebuffer
  mkstorebuffer #(.id(id)) m_storebuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_allocate_line_address(m_storebuffer_ma_allocate_line_address),
					 .ma_allocate_line_line(m_storebuffer_ma_allocate_line_line),
					 .ma_allocate_store_address(m_storebuffer_ma_allocate_store_address),
					 .ma_allocate_store_data(m_storebuffer_ma_allocate_store_data),
					 .ma_allocate_store_epochs(m_storebuffer_ma_allocate_store_epochs),
					 .ma_allocate_store_lbindex(m_storebuffer_ma_allocate_store_lbindex),
					 .ma_allocate_store_size(m_storebuffer_ma_allocate_store_size),
					 .ma_commit_store_c(m_storebuffer_ma_commit_store_c),
					 .ma_perform_atomic_atomic_op(m_storebuffer_ma_perform_atomic_atomic_op),
					 .ma_perform_atomic_rdata(m_storebuffer_ma_perform_atomic_rdata),
					 .ma_perform_atomic_sbindex(m_storebuffer_ma_perform_atomic_sbindex),
					 .ma_perform_atomic_wdata(m_storebuffer_ma_perform_atomic_wdata),
					 .mav_core_lookup_address(m_storebuffer_mav_core_lookup_address),
					 .EN_ma_allocate_line(m_storebuffer_EN_ma_allocate_line),
					 .EN_ma_allocate_store(m_storebuffer_EN_ma_allocate_store),
					 .EN_mav_core_lookup(m_storebuffer_EN_mav_core_lookup),
					 .EN_ma_commit_store(m_storebuffer_EN_ma_commit_store),
					 .EN_ma_release(m_storebuffer_EN_ma_release),
					 .EN_ma_perform_atomic(m_storebuffer_EN_ma_perform_atomic),
					 .RDY_ma_allocate_line(m_storebuffer_RDY_ma_allocate_line),
					 .RDY_ma_allocate_store(m_storebuffer_RDY_ma_allocate_store),
					 .mav_core_lookup(m_storebuffer_mav_core_lookup),
					 .RDY_mav_core_lookup(),
					 .mv_sb_empty(m_storebuffer_mv_sb_empty),
					 .RDY_mv_sb_empty(),
					 .mv_sb_full(m_storebuffer_mv_sb_full),
					 .RDY_mv_sb_full(),
					 .mv_line_empty(m_storebuffer_mv_line_empty),
					 .RDY_mv_line_empty(),
					 .mv_line_full(m_storebuffer_mv_line_full),
					 .RDY_mv_line_full(),
					 .mv_sb_busy(m_storebuffer_mv_sb_busy),
					 .RDY_mv_sb_busy(),
					 .RDY_ma_commit_store(),
					 .mv_lb_tail(m_storebuffer_mv_lb_tail),
					 .RDY_mv_lb_tail(),
					 .mv_lb_head(m_storebuffer_mv_lb_head),
					 .RDY_mv_lb_head(),
					 .mv_sb_tail(m_storebuffer_mv_sb_tail),
					 .RDY_mv_sb_tail(),
					 .mv_release_head(m_storebuffer_mv_release_head),
					 .RDY_mv_release_head(),
					 .RDY_ma_release(),
					 .RDY_ma_perform_atomic(m_storebuffer_RDY_ma_perform_atomic));

  // submodule m_tag_v_tags_0_ram_double_0
  bram_1r1w #(.ADDR_WIDTH(32'd6),
	      .DATA_WIDTH(32'd20),
	      .MEMSIZE(32'd64)) m_tag_v_tags_0_ram_double_0(.clka(CLK),
							    .clkb(CLK),
							    .addra(m_tag_v_tags_0_ram_double_0_addra),
							    .addrb(m_tag_v_tags_0_ram_double_0_addrb),
							    .dina(m_tag_v_tags_0_ram_double_0_dina),
							    .wea(m_tag_v_tags_0_ram_double_0_wea),
							    .ena(m_tag_v_tags_0_ram_double_0_ena),
							    .enb(m_tag_v_tags_0_ram_double_0_enb),
							    .doutb(m_tag_v_tags_0_ram_double_0_doutb));

  // submodule m_tag_v_tags_1_ram_double_0
  bram_1r1w #(.ADDR_WIDTH(32'd6),
	      .DATA_WIDTH(32'd20),
	      .MEMSIZE(32'd64)) m_tag_v_tags_1_ram_double_0(.clka(CLK),
							    .clkb(CLK),
							    .addra(m_tag_v_tags_1_ram_double_0_addra),
							    .addrb(m_tag_v_tags_1_ram_double_0_addrb),
							    .dina(m_tag_v_tags_1_ram_double_0_dina),
							    .wea(m_tag_v_tags_1_ram_double_0_wea),
							    .ena(m_tag_v_tags_1_ram_double_0_ena),
							    .enb(m_tag_v_tags_1_ram_double_0_enb),
							    .doutb(m_tag_v_tags_1_ram_double_0_doutb));

  // submodule m_tag_v_tags_2_ram_double_0
  bram_1r1w #(.ADDR_WIDTH(32'd6),
	      .DATA_WIDTH(32'd20),
	      .MEMSIZE(32'd64)) m_tag_v_tags_2_ram_double_0(.clka(CLK),
							    .clkb(CLK),
							    .addra(m_tag_v_tags_2_ram_double_0_addra),
							    .addrb(m_tag_v_tags_2_ram_double_0_addrb),
							    .dina(m_tag_v_tags_2_ram_double_0_dina),
							    .wea(m_tag_v_tags_2_ram_double_0_wea),
							    .ena(m_tag_v_tags_2_ram_double_0_ena),
							    .enb(m_tag_v_tags_2_ram_double_0_enb),
							    .doutb(m_tag_v_tags_2_ram_double_0_doutb));

  // submodule m_tag_v_tags_3_ram_double_0
  bram_1r1w #(.ADDR_WIDTH(32'd6),
	      .DATA_WIDTH(32'd20),
	      .MEMSIZE(32'd64)) m_tag_v_tags_3_ram_double_0(.clka(CLK),
							    .clkb(CLK),
							    .addra(m_tag_v_tags_3_ram_double_0_addra),
							    .addrb(m_tag_v_tags_3_ram_double_0_addrb),
							    .dina(m_tag_v_tags_3_ram_double_0_dina),
							    .wea(m_tag_v_tags_3_ram_double_0_wea),
							    .ena(m_tag_v_tags_3_ram_double_0_ena),
							    .enb(m_tag_v_tags_3_ram_double_0_enb),
							    .doutb(m_tag_v_tags_3_ram_double_0_doutb));

  // rule RL_rl_deq_mem_wr_resp
  assign CAN_FIRE_RL_rl_deq_mem_wr_resp = ff_mem_wr_resp_rv_port1__read[1] ;
  assign WILL_FIRE_RL_rl_deq_mem_wr_resp = CAN_FIRE_RL_rl_deq_mem_wr_resp ;

  // rule RL_rl_line_eviction
  assign CAN_FIRE_RL_rl_line_eviction =
	     ff_mem_wr_request_FULL_N && rg_eviction_required ;
  assign WILL_FIRE_RL_rl_line_eviction = CAN_FIRE_RL_rl_line_eviction ;

  // rule RL_rl_perform_replay
  assign CAN_FIRE_RL_rl_perform_replay = rg_performing_replay ;
  assign WILL_FIRE_RL_rl_perform_replay = rg_performing_replay ;

  // rule RL_rl_initiate_io
  assign CAN_FIRE_RL_rl_initiate_io =
	     ff_mem_io_request_FULL_N && m_iobuffer_mv_io_head_valid &&
	     !m_iobuffer_mv_io_empty &&
	     !rg_io_busy ;
  assign WILL_FIRE_RL_rl_initiate_io = CAN_FIRE_RL_rl_initiate_io ;

  // rule RL_m_data_v_data_0_capture_output
  assign CAN_FIRE_RL_m_data_v_data_0_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_m_data_v_data_0_capture_output = 1'd1 ;

  // rule RL_m_data_v_data_1_capture_output
  assign CAN_FIRE_RL_m_data_v_data_1_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_m_data_v_data_1_capture_output = 1'd1 ;

  // rule RL_m_data_v_data_2_capture_output
  assign CAN_FIRE_RL_m_data_v_data_2_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_m_data_v_data_2_capture_output = 1'd1 ;

  // rule RL_m_data_v_data_3_capture_output
  assign CAN_FIRE_RL_m_data_v_data_3_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_m_data_v_data_3_capture_output = 1'd1 ;

  // rule RL_m_tag_v_tags_0_capture_output
  assign CAN_FIRE_RL_m_tag_v_tags_0_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_m_tag_v_tags_0_capture_output = 1'd1 ;

  // rule RL_m_tag_v_tags_1_capture_output
  assign CAN_FIRE_RL_m_tag_v_tags_1_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_m_tag_v_tags_1_capture_output = 1'd1 ;

  // rule RL_m_tag_v_tags_2_capture_output
  assign CAN_FIRE_RL_m_tag_v_tags_2_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_m_tag_v_tags_2_capture_output = 1'd1 ;

  // rule RL_m_tag_v_tags_3_capture_output
  assign CAN_FIRE_RL_m_tag_v_tags_3_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_m_tag_v_tags_3_capture_output = 1'd1 ;

  // rule RL_rl_fence_operation
  assign CAN_FIRE_RL_rl_fence_operation =
	     ff_core_response_ff_FULL_N &&
	     rg_fence_stall_1_AND_ff_core_request_first__2__ETC___d40 &&
	     ff_core_request_EMPTY_N &&
	     !rg_performing_replay &&
	     !rg_miss_handling &&
	     !rg_eviction_required ;
  assign WILL_FIRE_RL_rl_fence_operation = CAN_FIRE_RL_rl_fence_operation ;

  // rule RL_rl_ram_check
  assign CAN_FIRE_RL_rl_ram_check =
	     ff_from_tlb_rv_port1__read[41] && EN_ma_cache_enable &&
	     EN_ma_curr_priv &&
	     m_storebuffer_RDY_ma_allocate_store__43_AND_m__ETC___d158 &&
	     NOT_ff_core_request_first__2_BIT_76_3_62_AND_N_ETC___d172 &&
	     !m_storebuffer_mv_sb_busy &&
	     !rg_eviction_required &&
	     !rg_performing_replay &&
	     ff_core_request_EMPTY_N &&
	     !ff_mem_wr_request_EMPTY_N ;
  assign WILL_FIRE_RL_rl_ram_check =
	     CAN_FIRE_RL_rl_ram_check && !EN_ma_commit_io ;

  // rule RL_rl_fill_release
  assign CAN_FIRE_RL_rl_fill_release =
	     rg_fill_release && rg_miss_handling && !rg_eviction_required ;
  assign WILL_FIRE_RL_rl_fill_release = CAN_FIRE_RL_rl_fill_release ;

  // rule RL_rl_store_release
  assign CAN_FIRE_RL_rl_store_release =
	     m_storebuffer_mv_release_head__24_BIT_544_25_A_ETC___d833 ;
  assign WILL_FIRE_RL_rl_store_release =
	     m_storebuffer_mv_release_head__24_BIT_544_25_A_ETC___d833 &&
	     !rg_performing_replay &&
	     !WILL_FIRE_RL_rl_fill_release &&
	     !EN_receive_core_req_put ;

  // rule RL_rl_io_response
  assign CAN_FIRE_RL_rl_io_response =
	     ff_mem_io_resp_EMPTY_N && !ff_ptw_response_rv[76] &&
	     ff_mem_io_request_FULL_N &&
	     rg_io_busy ;
  assign WILL_FIRE_RL_rl_io_response = CAN_FIRE_RL_rl_io_response ;

  // rule RL_rl_fill_from_memory
  assign CAN_FIRE_RL_rl_fill_from_memory =
	     ff_mem_rd_resp_rv_port1__read[66] && !ff_ptw_response_rv[76] &&
	     ff_core_response_ff_FULL_N &&
	     m_storebuffer_RDY_ma_perform_atomic &&
	     m_storebuffer_RDY_ma_allocate_line &&
	     rg_miss_handling &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_fill_from_memory =
	     CAN_FIRE_RL_rl_fill_from_memory &&
	     !WILL_FIRE_RL_rl_store_release &&
	     !WILL_FIRE_RL_rl_io_response &&
	     !WILL_FIRE_RL_rl_fill_release ;

  // rule RL_rl_drive_ram_read_port
  assign CAN_FIRE_RL_rl_drive_ram_read_port =
	     MUX_wr_read_set_index_wset_1__SEL_1 ||
	     MUX_wr_read_set_index_wset_1__SEL_2 ||
	     MUX_rg_fill_eviction_write_1__SEL_2 ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;
  assign WILL_FIRE_RL_rl_drive_ram_read_port =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // rule RL_ff_core_response_enqueue
  assign CAN_FIRE_RL_ff_core_response_enqueue =
	     ff_core_response_enqw_whas &&
	     (!EN_send_core_cache_resp_get || ff_core_response_ff_EMPTY_N) ;
  assign WILL_FIRE_RL_ff_core_response_enqueue =
	     CAN_FIRE_RL_ff_core_response_enqueue ;

  // rule RL_ff_core_response_dequeue
  assign CAN_FIRE_RL_ff_core_response_dequeue =
	     EN_send_core_cache_resp_get && ff_core_response_ff_EMPTY_N ;
  assign WILL_FIRE_RL_ff_core_response_dequeue =
	     CAN_FIRE_RL_ff_core_response_dequeue ;

  // rule RL_rg_core_io_response__dreg_update
  assign CAN_FIRE_RL_rg_core_io_response__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_core_io_response__dreg_update = 1'd1 ;

  // rule RL_rg_store_eviction__dreg_update
  assign CAN_FIRE_RL_rg_store_eviction__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_store_eviction__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_ff_core_response_enqw_wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation &&
	     (!rg_global_dirty || rg_fence_set == 6'd63 && rg_fence_way[3]) ;
  assign MUX_ff_core_response_enqw_wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597 &&
	     !ff_core_request_D_OUT[0] ;
  assign MUX_ff_core_response_enqw_wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1417 ;
  assign MUX_ff_mem_io_request_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_response &&
	     NOT_m_iobuffer_mv_io_head__154_BIT_0_171_173_A_ETC___d1235 ;
  assign MUX_ff_ptw_response_rv_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1408 ;
  assign MUX_ff_ptw_response_rv_port0__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_response && m_iobuffer_mv_io_head[0] ;
  assign MUX_ff_ptw_response_rv_port0__write_1__SEL_3 =
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597 &&
	     ff_core_request_D_OUT[0] ;
  assign MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ;
  assign MUX_m_data_v_data_0_ram_double_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ;
  assign MUX_m_data_v_data_1_ram_double_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ;
  assign MUX_m_data_v_data_2_ram_double_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ;
  assign MUX_m_data_v_data_3_ram_double_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign MUX_m_storebuffer_ma_allocate_line_1__SEL_1 =
	     WILL_FIRE_RL_rl_ram_check &&
	     NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     !m_storebuffer_mav_core_lookup[66] &&
	     x__h38803 ;
  assign MUX_m_storebuffer_ma_allocate_line_1__SEL_2 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta[37:36] != 2'd0 &&
	     !rg_fill_err &&
	     !ff_mem_rd_resp_rv_port1__read[0] ;
  assign MUX_m_storebuffer_ma_perform_atomic_1__SEL_1 =
	     WILL_FIRE_RL_rl_fill_from_memory && rg_first &&
	     rg_miss_meta[37:36] == 2'd2 ;
  assign MUX_replacement_v_count_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd0 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_0_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd0 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_1_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd1 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_1_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd1 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_10_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd10 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_10_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd10 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_11_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd11 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_11_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd11 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_12_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd12 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_12_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd12 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_13_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd13 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_13_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd13 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_14_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd14 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_14_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd14 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_15_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd15 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_15_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd15 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_16_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd16 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_16_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd16 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_17_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd17 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_17_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd17 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_18_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd18 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_18_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd18 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_19_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd19 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_19_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd19 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_2_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd2 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_2_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd2 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_20_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd20 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_20_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd20 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_21_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd21 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_21_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd21 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_22_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd22 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_22_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd22 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_23_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd23 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_23_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd23 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_24_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd24 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_24_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd24 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_25_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd25 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_25_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd25 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_26_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd26 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_26_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd26 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_27_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd27 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_27_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd27 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_28_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd28 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_28_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd28 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_29_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd29 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_29_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd29 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_3_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd3 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_3_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd3 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_30_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd30 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_30_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd30 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_31_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd31 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_31_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd31 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_32_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd32 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_32_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd32 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_33_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd33 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_33_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd33 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_34_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd34 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_34_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd34 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_35_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd35 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_35_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd35 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_36_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd36 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_36_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd36 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_37_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd37 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_37_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd37 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_38_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd38 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_38_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd38 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_39_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd39 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_39_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd39 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_4_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd4 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_4_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd4 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_40_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd40 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_40_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd40 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_41_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd41 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_41_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd41 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_42_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd42 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_42_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd42 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_43_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd43 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_43_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd43 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_44_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd44 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_44_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd44 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_45_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd45 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_45_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd45 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_46_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd46 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_46_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd46 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_47_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd47 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_47_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd47 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_48_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd48 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_48_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd48 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_49_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd49 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_49_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd49 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_5_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd5 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_5_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd5 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_50_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd50 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_50_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd50 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_51_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd51 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_51_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd51 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_52_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd52 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_52_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd52 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_53_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd53 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_53_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd53 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_54_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd54 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_54_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd54 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_55_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd55 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_55_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd55 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_56_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd56 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_56_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd56 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_57_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd57 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_57_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd57 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_58_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd58 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_58_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd58 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_59_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd59 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_59_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd59 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_6_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd6 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_6_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd6 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_60_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd60 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_60_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd60 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_61_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd61 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_61_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd61 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_62_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd62 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_62_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd62 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_63_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd63 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_63_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd63 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_7_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd7 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_7_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd7 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_8_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd8 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_8_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd8 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_replacement_v_count_9_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd9 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ;
  assign MUX_replacement_v_count_9_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd9 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;
  assign MUX_rg_evict_addr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_store_release && rg_store_eviction ;
  assign MUX_rg_evict_addr_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_eviction ;
  assign MUX_rg_fill_eviction_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1498 ;
  assign MUX_rg_fill_release_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     (rg_miss_meta[37:36] == 2'd0 || rg_fill_err ||
	      ff_mem_rd_resp_rv_port1__read[0]) ;
  assign MUX_rg_first_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     (rg_first && rg_miss_meta[37:36] == 2'd0 ||
	      rg_miss_meta[37:36] == 2'd1 &&
	      ff_mem_rd_resp_rv_port1__read[1] ||
	      rg_first && rg_miss_meta[37:36] == 2'd2) ;
  assign MUX_rg_first_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675 ;
  assign MUX_rg_global_dirty_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign MUX_rg_io_busy_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_response &&
	     m_iobuffer_mv_io_head__154_BIT_0_171_OR_NOT_m__ETC___d1196 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d552 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d558 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d560 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d562 ;
  assign MUX_wr_read_set_index_wset_1__SEL_1 =
	     EN_receive_core_req_put && ma_cache_enable_c ;
  assign MUX_wr_read_set_index_wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_store_release &&
	     v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 &&
	     !rg_store_eviction ;
  assign MUX_ff_core_response_enqw_wset_1__VAL_1 =
	     { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       1'd0,
	       7'bxxxxxxx /* unspecified value */ ,
	       ff_core_request_D_OUT[75],
	       2'd0,
	       1'bx /* unspecified value */  } ;
  assign MUX_ff_core_response_enqw_wset_1__VAL_2 =
	     { rdata__h40211,
	       fn_pmp_lookup___d407[7] || ff_from_tlb_rv_port1__read[8],
	       _theResult_____1_cause__h40255,
	       ff_core_request_D_OUT[75],
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414,
	       _0_OR_NOT_ff_core_request_first__2_BITS_74_TO_7_ETC___d610,
	       m_storebuffer_mv_sb_tail } ;
  assign MUX_ff_core_response_enqw_wset_1__VAL_3 =
	     { _theResult_____1_word__h99196,
	       ff_mem_rd_resp_rv_port1__read[0],
	       _theResult_____1_cause__h99198,
	       rg_miss_meta[0],
	       1'd0,
	       rg_miss_meta[37:36] != 2'd0,
	       rg_miss_meta[38] } ;
  assign MUX_ff_mem_io_request_enq_1__VAL_1 =
	     { m_iobuffer_mv_io_head[171:140],
	       1'd1,
	       _new_store__h94542,
	       m_iobuffer_mv_io_head[75:73] } ;
  assign MUX_ff_mem_io_request_enq_1__VAL_2 =
	     { m_iobuffer_mv_io_head[171:140],
	       m_iobuffer_mv_io_head[71:70] == 2'd1,
	       m_iobuffer_mv_io_head[139:73] } ;
  assign MUX_ff_ptw_response_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       _theResult_____1_word__h99196,
	       ff_mem_rd_resp_rv_port1__read[0],
	       _theResult_____1_cause__h99198,
	       rg_miss_meta[0],
	       1'd0,
	       rg_miss_meta[37:36] != 2'd0,
	       rg_miss_meta[38] } ;
  assign MUX_ff_ptw_response_rv_port0__write_1__VAL_2 =
	     { 1'd1,
	       lv_response_word__h94594,
	       ff_mem_io_resp_D_OUT[0],
	       lv_cause__h94520,
	       m_iobuffer_mv_io_head[72],
	       2'd0,
	       1'bx /* unspecified value */  } ;
  assign MUX_ff_ptw_response_rv_port0__write_1__VAL_3 =
	     { 1'd1,
	       rdata__h40211,
	       fn_pmp_lookup___d407[7] || ff_from_tlb_rv_port1__read[8],
	       _theResult_____1_cause__h40255,
	       ff_core_request_D_OUT[75],
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414,
	       _0_OR_NOT_ff_core_request_first__2_BITS_74_TO_7_ETC___d610,
	       m_storebuffer_mv_sb_tail } ;
  always@(wayindex__h40303 or
	  m_data_v_data_0_ram_double_0_doutb or
	  m_data_v_data_1_ram_double_0_doutb or
	  m_data_v_data_2_ram_double_0_doutb or
	  m_data_v_data_3_ram_double_0_doutb)
  begin
    case (wayindex__h40303)
      2'd0:
	  MUX_m_storebuffer_ma_allocate_line_2__VAL_1 =
	      m_data_v_data_0_ram_double_0_doutb;
      2'd1:
	  MUX_m_storebuffer_ma_allocate_line_2__VAL_1 =
	      m_data_v_data_1_ram_double_0_doutb;
      2'd2:
	  MUX_m_storebuffer_ma_allocate_line_2__VAL_1 =
	      m_data_v_data_2_ram_double_0_doutb;
      2'd3:
	  MUX_m_storebuffer_ma_allocate_line_2__VAL_1 =
	      m_data_v_data_3_ram_double_0_doutb;
    endcase
  end
  assign MUX_m_storebuffer_ma_allocate_line_2__VAL_2 =
	     { (x__h107912 == 3'd7) ?
		 ff_mem_rd_resp_rv_port1__read[65:2] :
		 v_fill_line_7,
	       (x__h107912 == 3'd6) ?
		 ff_mem_rd_resp_rv_port1__read[65:2] :
		 v_fill_line_6,
	       (x__h107912 == 3'd5) ?
		 ff_mem_rd_resp_rv_port1__read[65:2] :
		 v_fill_line_5,
	       (x__h107912 == 3'd4) ?
		 ff_mem_rd_resp_rv_port1__read[65:2] :
		 v_fill_line_4,
	       (x__h107912 == 3'd3) ?
		 ff_mem_rd_resp_rv_port1__read[65:2] :
		 v_fill_line_3,
	       (x__h107912 == 3'd2) ?
		 ff_mem_rd_resp_rv_port1__read[65:2] :
		 v_fill_line_2,
	       (x__h107912 == 3'd1) ?
		 ff_mem_rd_resp_rv_port1__read[65:2] :
		 v_fill_line_1,
	       (x__h107912 == 3'd0) ?
		 ff_mem_rd_resp_rv_port1__read[65:2] :
		 v_fill_line_0 } ;
  assign MUX_replacement_v_count_0_write_1__VAL_2 =
	     SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 -
	     2'd1 ;
  assign MUX_replacement_v_count_0_write_1__VAL_3 =
	     SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 -
	     2'd1 ;
  assign MUX_rg_block_count_write_1__VAL_1 =
	     { ff_from_tlb_rv_port1__read[14:12] == 3'd7,
	       ff_from_tlb_rv_port1__read[14:12] == 3'd6,
	       ff_from_tlb_rv_port1__read[14:12] == 3'd5,
	       ff_from_tlb_rv_port1__read[14:12] == 3'd4,
	       ff_from_tlb_rv_port1__read[14:12] == 3'd3,
	       ff_from_tlb_rv_port1__read[14:12] == 3'd2,
	       ff_from_tlb_rv_port1__read[14:12] == 3'd1,
	       ff_from_tlb_rv_port1__read[14:12] == 3'd0 } ;
  assign MUX_rg_evict_addr_write_1__VAL_2 = { v__h67850, rg_fill_set, 6'd0 } ;
  always@(x__h71536 or
	  m_data_v_data_0_ram_double_0_doutb or
	  m_data_v_data_1_ram_double_0_doutb or
	  m_data_v_data_2_ram_double_0_doutb or
	  m_data_v_data_3_ram_double_0_doutb)
  begin
    case (x__h71536)
      2'd0:
	  MUX_rg_evicted_line_write_1__VAL_2 =
	      m_data_v_data_0_ram_double_0_doutb;
      2'd1:
	  MUX_rg_evicted_line_write_1__VAL_2 =
	      m_data_v_data_1_ram_double_0_doutb;
      2'd2:
	  MUX_rg_evicted_line_write_1__VAL_2 =
	      m_data_v_data_2_ram_double_0_doutb;
      2'd3:
	  MUX_rg_evicted_line_write_1__VAL_2 =
	      m_data_v_data_3_ram_double_0_doutb;
    endcase
  end
  assign MUX_rg_fill_err_write_1__VAL_2 =
	     rg_fill_err || ff_mem_rd_resp_rv_port1__read[0] ;
  assign MUX_v_reg_dirty_0_write_1__VAL_1 = w__h86637 | x__h86274 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_2 = w__h67646 & y__h67783 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_3 = w__h58978 & y__h56042 ;
  assign MUX_v_reg_valid_0_write_1__VAL_1 = w__h86272 | x__h86274 ;
  assign MUX_v_reg_valid_0_write_1__VAL_2 =
	     rg_fill_err ? w__h67373 & y__h67783 : w__h67373 | x__h67768 ;
  assign MUX_v_reg_valid_0_write_1__VAL_3 = w__h56025 & y__h56042 ;

  // inlined wires
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_ff_core_response_enqw_wset_1__VAL_1 or
	  MUX_ff_core_response_enqw_wset_1__SEL_2 or
	  MUX_ff_core_response_enqw_wset_1__VAL_2 or
	  MUX_ff_core_response_enqw_wset_1__SEL_3 or
	  MUX_ff_core_response_enqw_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  ff_core_response_enqw_wget =
	      MUX_ff_core_response_enqw_wset_1__VAL_1;
      MUX_ff_core_response_enqw_wset_1__SEL_2:
	  ff_core_response_enqw_wget =
	      MUX_ff_core_response_enqw_wset_1__VAL_2;
      MUX_ff_core_response_enqw_wset_1__SEL_3:
	  ff_core_response_enqw_wget =
	      MUX_ff_core_response_enqw_wset_1__VAL_3;
      default: ff_core_response_enqw_wget =
		   76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ff_core_response_enqw_whas =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597 &&
	     !ff_core_request_D_OUT[0] ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1417 ;
  assign rg_core_io_response_1_whas =
	     WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	     (m_iobuffer_mv_io_head[71:70] != 2'd2 || rg_io_atomic_done ||
	      ff_mem_io_resp_D_OUT[0]) ;
  assign rg_store_eviction_1_whas =
	     WILL_FIRE_RL_rl_store_release &&
	     (rg_store_eviction ||
	      v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959) ;
  always@(MUX_wr_read_set_index_wset_1__SEL_1 or
	  _theResult____h123294 or
	  MUX_wr_read_set_index_wset_1__SEL_2 or
	  m_storebuffer_mv_release_head or
	  MUX_rg_fill_eviction_write_1__SEL_2 or
	  rg_miss_meta or
	  rg_performing_replay or
	  rg_recent_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult_____2__h28945)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wr_read_set_index_wset_1__SEL_1:
	  wr_read_set_index_wget = _theResult____h123294;
      MUX_wr_read_set_index_wset_1__SEL_2:
	  wr_read_set_index_wget = m_storebuffer_mv_release_head[11:6];
      MUX_rg_fill_eviction_write_1__SEL_2:
	  wr_read_set_index_wget = rg_miss_meta[15:10];
      rg_performing_replay: wr_read_set_index_wget = rg_recent_req;
      WILL_FIRE_RL_rl_fence_operation:
	  wr_read_set_index_wget = _theResult_____2__h28945;
      default: wr_read_set_index_wget = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign _ma_allocate_io_RL_rl_ram_check_EN_m_iobuffer_wget =
	     NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574 &&
	     !ff_from_tlb_rv_port1__read[0] ;
  assign _port0__write_RL_rl_ram_check_EN_ff_ptw_response_rv_wget =
	     !ff_from_tlb_rv_port1__read[0] &&
	     NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597 &&
	     ff_core_request_D_OUT[0] ;
  assign ff_ptw_response_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_io_response && m_iobuffer_mv_io_head[0] ||
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597 &&
	     ff_core_request_D_OUT[0] ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1408 ;
  always@(MUX_ff_ptw_response_rv_port0__write_1__SEL_1 or
	  MUX_ff_ptw_response_rv_port0__write_1__VAL_1 or
	  MUX_ff_ptw_response_rv_port0__write_1__SEL_2 or
	  MUX_ff_ptw_response_rv_port0__write_1__VAL_2 or
	  MUX_ff_ptw_response_rv_port0__write_1__SEL_3 or
	  MUX_ff_ptw_response_rv_port0__write_1__VAL_3)
  case (1'b1)
    MUX_ff_ptw_response_rv_port0__write_1__SEL_1:
	ff_ptw_response_rv_port0__write_1 =
	    MUX_ff_ptw_response_rv_port0__write_1__VAL_1;
    MUX_ff_ptw_response_rv_port0__write_1__SEL_2:
	ff_ptw_response_rv_port0__write_1 =
	    MUX_ff_ptw_response_rv_port0__write_1__VAL_2;
    MUX_ff_ptw_response_rv_port0__write_1__SEL_3:
	ff_ptw_response_rv_port0__write_1 =
	    MUX_ff_ptw_response_rv_port0__write_1__VAL_3;
    default: ff_ptw_response_rv_port0__write_1 =
		 77'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign ff_ptw_response_rv_port1__read =
	     ff_ptw_response_rv_EN_port0__write ?
	       ff_ptw_response_rv_port0__write_1 :
	       ff_ptw_response_rv ;
  assign ff_ptw_response_rv_port1__write_1 =
	     { 1'd0,
	       76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_ptw_response_rv_port2__read =
	     EN_get_ptw_resp_get ?
	       ff_ptw_response_rv_port1__write_1 :
	       ff_ptw_response_rv_port1__read ;
  assign ff_mem_rd_resp_rv_port0__write_1 =
	     { 1'd1, receive_mem_rd_resp_put } ;
  assign ff_mem_rd_resp_rv_port1__read =
	     EN_receive_mem_rd_resp_put ?
	       ff_mem_rd_resp_rv_port0__write_1 :
	       ff_mem_rd_resp_rv ;
  assign ff_mem_rd_resp_rv_port1__write_1 =
	     { 1'd0,
	       66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_mem_rd_resp_rv_port2__read =
	     WILL_FIRE_RL_rl_fill_from_memory ?
	       ff_mem_rd_resp_rv_port1__write_1 :
	       ff_mem_rd_resp_rv_port1__read ;
  assign ff_mem_wr_resp_rv_port0__write_1 =
	     { 1'd1, receive_mem_wr_resp_put } ;
  assign ff_mem_wr_resp_rv_port1__read =
	     EN_receive_mem_wr_resp_put ?
	       ff_mem_wr_resp_rv_port0__write_1 :
	       ff_mem_wr_resp_rv ;
  assign ff_mem_wr_resp_rv_port1__write_1 =
	     { 1'd0, 1'bx /* unspecified value */  } ;
  assign ff_mem_wr_resp_rv_port2__read =
	     ff_mem_wr_resp_rv_port1__read[1] ?
	       ff_mem_wr_resp_rv_port1__write_1 :
	       ff_mem_wr_resp_rv_port1__read ;
  assign ff_hold_request_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_ram_check && ff_from_tlb_rv_port1__read[0] ;
  assign ff_hold_request_rv_port0__write_1 = { 1'd1, ff_core_request_D_OUT } ;
  assign ff_hold_request_rv_port1__read =
	     ff_hold_request_rv_EN_port0__write ?
	       ff_hold_request_rv_port0__write_1 :
	       ff_hold_request_rv ;
  assign ff_hold_request_rv_port1__write_1 =
	     { 1'd0,
	       141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_hold_request_rv_port2__read =
	     EN_get_hold_req_get ?
	       ff_hold_request_rv_port1__write_1 :
	       ff_hold_request_rv_port1__read ;
  assign ff_from_tlb_rv_port0__write_1 = { 1'd1, put_pa_from_tlb_put } ;
  assign ff_from_tlb_rv_port1__read =
	     EN_put_pa_from_tlb_put ?
	       ff_from_tlb_rv_port0__write_1 :
	       ff_from_tlb_rv ;
  assign ff_from_tlb_rv_port1__write_1 =
	     { 1'd0,
	       41'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_from_tlb_rv_port2__read =
	     WILL_FIRE_RL_rl_ram_check ?
	       ff_from_tlb_rv_port1__write_1 :
	       ff_from_tlb_rv_port1__read ;
  assign rg_performing_replay_EN_port1__write =
	     WILL_FIRE_RL_rl_fill_release &&
	     rg_recent_req_read__20_EQ_rg_fill_set_read__62_ETC___d823 ||
	     WILL_FIRE_RL_rl_store_release &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     rg_recent_req_read__20_EQ_m_storebuffer_mv_rel_ETC___d1008 ;

  // register ff_from_tlb_rv
  assign ff_from_tlb_rv_D_IN = ff_from_tlb_rv_port2__read ;
  assign ff_from_tlb_rv_EN = 1'b1 ;

  // register ff_hold_request_rv
  assign ff_hold_request_rv_D_IN = ff_hold_request_rv_port2__read ;
  assign ff_hold_request_rv_EN = 1'b1 ;

  // register ff_mem_rd_resp_rv
  assign ff_mem_rd_resp_rv_D_IN = ff_mem_rd_resp_rv_port2__read ;
  assign ff_mem_rd_resp_rv_EN = 1'b1 ;

  // register ff_mem_wr_resp_rv
  assign ff_mem_wr_resp_rv_D_IN = ff_mem_wr_resp_rv_port2__read ;
  assign ff_mem_wr_resp_rv_EN = 1'b1 ;

  // register ff_ptw_response_rv
  assign ff_ptw_response_rv_D_IN = ff_ptw_response_rv_port2__read ;
  assign ff_ptw_response_rv_EN = 1'b1 ;

  // register m_data_v_data_0_rg_output_0
  assign m_data_v_data_0_rg_output_0_D_IN =
	     m_data_v_data_0_ram_double_0_doutb ;
  assign m_data_v_data_0_rg_output_0_EN = 1'b1 ;

  // register m_data_v_data_0_rg_read_index
  assign m_data_v_data_0_rg_read_index_D_IN = wr_read_set_index_wget ;
  assign m_data_v_data_0_rg_read_index_EN =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // register m_data_v_data_0_rg_write_data_0
  assign m_data_v_data_0_rg_write_data_0_D_IN =
	     MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 ?
	       x1__h65298 :
	       m_storebuffer_mv_release_head[543:32] ;
  assign m_data_v_data_0_rg_write_data_0_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_data_v_data_0_rg_write_index
  assign m_data_v_data_0_rg_write_index_D_IN =
	     MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_data_v_data_0_rg_write_index_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_data_v_data_1_rg_output_0
  assign m_data_v_data_1_rg_output_0_D_IN =
	     m_data_v_data_1_ram_double_0_doutb ;
  assign m_data_v_data_1_rg_output_0_EN = 1'b1 ;

  // register m_data_v_data_1_rg_read_index
  assign m_data_v_data_1_rg_read_index_D_IN = wr_read_set_index_wget ;
  assign m_data_v_data_1_rg_read_index_EN =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // register m_data_v_data_1_rg_write_data_0
  assign m_data_v_data_1_rg_write_data_0_D_IN =
	     MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 ?
	       x1__h65298 :
	       m_storebuffer_mv_release_head[543:32] ;
  assign m_data_v_data_1_rg_write_data_0_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_data_v_data_1_rg_write_index
  assign m_data_v_data_1_rg_write_index_D_IN =
	     MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_data_v_data_1_rg_write_index_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_data_v_data_2_rg_output_0
  assign m_data_v_data_2_rg_output_0_D_IN =
	     m_data_v_data_2_ram_double_0_doutb ;
  assign m_data_v_data_2_rg_output_0_EN = 1'b1 ;

  // register m_data_v_data_2_rg_read_index
  assign m_data_v_data_2_rg_read_index_D_IN = wr_read_set_index_wget ;
  assign m_data_v_data_2_rg_read_index_EN =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // register m_data_v_data_2_rg_write_data_0
  assign m_data_v_data_2_rg_write_data_0_D_IN =
	     MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 ?
	       x1__h65298 :
	       m_storebuffer_mv_release_head[543:32] ;
  assign m_data_v_data_2_rg_write_data_0_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_data_v_data_2_rg_write_index
  assign m_data_v_data_2_rg_write_index_D_IN =
	     MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_data_v_data_2_rg_write_index_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_data_v_data_3_rg_output_0
  assign m_data_v_data_3_rg_output_0_D_IN =
	     m_data_v_data_3_ram_double_0_doutb ;
  assign m_data_v_data_3_rg_output_0_EN = 1'b1 ;

  // register m_data_v_data_3_rg_read_index
  assign m_data_v_data_3_rg_read_index_D_IN = wr_read_set_index_wget ;
  assign m_data_v_data_3_rg_read_index_EN =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // register m_data_v_data_3_rg_write_data_0
  assign m_data_v_data_3_rg_write_data_0_D_IN =
	     MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 ?
	       x1__h65298 :
	       m_storebuffer_mv_release_head[543:32] ;
  assign m_data_v_data_3_rg_write_data_0_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_data_v_data_3_rg_write_index
  assign m_data_v_data_3_rg_write_index_D_IN =
	     MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_data_v_data_3_rg_write_index_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_tag_v_tags_0_rg_output_0
  assign m_tag_v_tags_0_rg_output_0_D_IN = m_tag_v_tags_0_ram_double_0_doutb ;
  assign m_tag_v_tags_0_rg_output_0_EN = 1'b1 ;

  // register m_tag_v_tags_0_rg_read_index
  assign m_tag_v_tags_0_rg_read_index_D_IN = wr_read_set_index_wget ;
  assign m_tag_v_tags_0_rg_read_index_EN =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // register m_tag_v_tags_0_rg_write_data_0
  assign m_tag_v_tags_0_rg_write_data_0_D_IN =
	     MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 ?
	       rg_fill_tag :
	       m_storebuffer_mv_release_head[31:12] ;
  assign m_tag_v_tags_0_rg_write_data_0_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_tag_v_tags_0_rg_write_index
  assign m_tag_v_tags_0_rg_write_index_D_IN =
	     MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_tag_v_tags_0_rg_write_index_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_tag_v_tags_1_rg_output_0
  assign m_tag_v_tags_1_rg_output_0_D_IN = m_tag_v_tags_1_ram_double_0_doutb ;
  assign m_tag_v_tags_1_rg_output_0_EN = 1'b1 ;

  // register m_tag_v_tags_1_rg_read_index
  assign m_tag_v_tags_1_rg_read_index_D_IN = wr_read_set_index_wget ;
  assign m_tag_v_tags_1_rg_read_index_EN =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // register m_tag_v_tags_1_rg_write_data_0
  assign m_tag_v_tags_1_rg_write_data_0_D_IN =
	     MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 ?
	       rg_fill_tag :
	       m_storebuffer_mv_release_head[31:12] ;
  assign m_tag_v_tags_1_rg_write_data_0_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_tag_v_tags_1_rg_write_index
  assign m_tag_v_tags_1_rg_write_index_D_IN =
	     MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_tag_v_tags_1_rg_write_index_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_tag_v_tags_2_rg_output_0
  assign m_tag_v_tags_2_rg_output_0_D_IN = m_tag_v_tags_2_ram_double_0_doutb ;
  assign m_tag_v_tags_2_rg_output_0_EN = 1'b1 ;

  // register m_tag_v_tags_2_rg_read_index
  assign m_tag_v_tags_2_rg_read_index_D_IN = wr_read_set_index_wget ;
  assign m_tag_v_tags_2_rg_read_index_EN =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // register m_tag_v_tags_2_rg_write_data_0
  assign m_tag_v_tags_2_rg_write_data_0_D_IN =
	     MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 ?
	       rg_fill_tag :
	       m_storebuffer_mv_release_head[31:12] ;
  assign m_tag_v_tags_2_rg_write_data_0_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_tag_v_tags_2_rg_write_index
  assign m_tag_v_tags_2_rg_write_index_D_IN =
	     MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_tag_v_tags_2_rg_write_index_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_tag_v_tags_3_rg_output_0
  assign m_tag_v_tags_3_rg_output_0_D_IN = m_tag_v_tags_3_ram_double_0_doutb ;
  assign m_tag_v_tags_3_rg_output_0_EN = 1'b1 ;

  // register m_tag_v_tags_3_rg_read_index
  assign m_tag_v_tags_3_rg_read_index_D_IN = wr_read_set_index_wget ;
  assign m_tag_v_tags_3_rg_read_index_EN =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // register m_tag_v_tags_3_rg_write_data_0
  assign m_tag_v_tags_3_rg_write_data_0_D_IN =
	     MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 ?
	       rg_fill_tag :
	       m_storebuffer_mv_release_head[31:12] ;
  assign m_tag_v_tags_3_rg_write_data_0_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register m_tag_v_tags_3_rg_write_index
  assign m_tag_v_tags_3_rg_write_index_D_IN =
	     MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_tag_v_tags_3_rg_write_index_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register replacement_v_count_0
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_0_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_0_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_0_D_IN = 2'd3;
      MUX_replacement_v_count_0_write_1__SEL_2:
	  replacement_v_count_0_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_0_write_1__SEL_3:
	  replacement_v_count_0_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_0_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_0_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd0 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd0 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_1
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_1_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_1_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_1_D_IN = 2'd3;
      MUX_replacement_v_count_1_write_1__SEL_2:
	  replacement_v_count_1_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_1_write_1__SEL_3:
	  replacement_v_count_1_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_1_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_1_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd1 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd1 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_10
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_10_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_10_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_10_D_IN = 2'd3;
      MUX_replacement_v_count_10_write_1__SEL_2:
	  replacement_v_count_10_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_10_write_1__SEL_3:
	  replacement_v_count_10_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_10_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_10_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd10 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd10 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_11
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_11_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_11_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_11_D_IN = 2'd3;
      MUX_replacement_v_count_11_write_1__SEL_2:
	  replacement_v_count_11_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_11_write_1__SEL_3:
	  replacement_v_count_11_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_11_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_11_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd11 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd11 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_12
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_12_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_12_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_12_D_IN = 2'd3;
      MUX_replacement_v_count_12_write_1__SEL_2:
	  replacement_v_count_12_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_12_write_1__SEL_3:
	  replacement_v_count_12_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_12_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_12_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd12 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd12 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_13
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_13_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_13_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_13_D_IN = 2'd3;
      MUX_replacement_v_count_13_write_1__SEL_2:
	  replacement_v_count_13_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_13_write_1__SEL_3:
	  replacement_v_count_13_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_13_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_13_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd13 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd13 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_14
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_14_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_14_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_14_D_IN = 2'd3;
      MUX_replacement_v_count_14_write_1__SEL_2:
	  replacement_v_count_14_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_14_write_1__SEL_3:
	  replacement_v_count_14_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_14_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_14_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd14 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd14 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_15
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_15_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_15_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_15_D_IN = 2'd3;
      MUX_replacement_v_count_15_write_1__SEL_2:
	  replacement_v_count_15_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_15_write_1__SEL_3:
	  replacement_v_count_15_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_15_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_15_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd15 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd15 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_16
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_16_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_16_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_16_D_IN = 2'd3;
      MUX_replacement_v_count_16_write_1__SEL_2:
	  replacement_v_count_16_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_16_write_1__SEL_3:
	  replacement_v_count_16_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_16_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_16_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd16 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd16 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_17
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_17_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_17_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_17_D_IN = 2'd3;
      MUX_replacement_v_count_17_write_1__SEL_2:
	  replacement_v_count_17_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_17_write_1__SEL_3:
	  replacement_v_count_17_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_17_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_17_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd17 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd17 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_18
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_18_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_18_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_18_D_IN = 2'd3;
      MUX_replacement_v_count_18_write_1__SEL_2:
	  replacement_v_count_18_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_18_write_1__SEL_3:
	  replacement_v_count_18_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_18_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_18_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd18 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd18 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_19
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_19_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_19_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_19_D_IN = 2'd3;
      MUX_replacement_v_count_19_write_1__SEL_2:
	  replacement_v_count_19_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_19_write_1__SEL_3:
	  replacement_v_count_19_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_19_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_19_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd19 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd19 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_2
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_2_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_2_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_2_D_IN = 2'd3;
      MUX_replacement_v_count_2_write_1__SEL_2:
	  replacement_v_count_2_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_2_write_1__SEL_3:
	  replacement_v_count_2_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_2_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_2_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd2 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd2 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_20
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_20_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_20_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_20_D_IN = 2'd3;
      MUX_replacement_v_count_20_write_1__SEL_2:
	  replacement_v_count_20_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_20_write_1__SEL_3:
	  replacement_v_count_20_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_20_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_20_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd20 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd20 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_21
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_21_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_21_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_21_D_IN = 2'd3;
      MUX_replacement_v_count_21_write_1__SEL_2:
	  replacement_v_count_21_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_21_write_1__SEL_3:
	  replacement_v_count_21_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_21_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_21_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd21 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd21 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_22
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_22_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_22_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_22_D_IN = 2'd3;
      MUX_replacement_v_count_22_write_1__SEL_2:
	  replacement_v_count_22_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_22_write_1__SEL_3:
	  replacement_v_count_22_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_22_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_22_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd22 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd22 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_23
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_23_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_23_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_23_D_IN = 2'd3;
      MUX_replacement_v_count_23_write_1__SEL_2:
	  replacement_v_count_23_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_23_write_1__SEL_3:
	  replacement_v_count_23_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_23_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_23_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd23 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd23 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_24
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_24_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_24_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_24_D_IN = 2'd3;
      MUX_replacement_v_count_24_write_1__SEL_2:
	  replacement_v_count_24_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_24_write_1__SEL_3:
	  replacement_v_count_24_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_24_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_24_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd24 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd24 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_25
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_25_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_25_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_25_D_IN = 2'd3;
      MUX_replacement_v_count_25_write_1__SEL_2:
	  replacement_v_count_25_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_25_write_1__SEL_3:
	  replacement_v_count_25_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_25_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_25_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd25 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd25 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_26
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_26_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_26_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_26_D_IN = 2'd3;
      MUX_replacement_v_count_26_write_1__SEL_2:
	  replacement_v_count_26_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_26_write_1__SEL_3:
	  replacement_v_count_26_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_26_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_26_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd26 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd26 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_27
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_27_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_27_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_27_D_IN = 2'd3;
      MUX_replacement_v_count_27_write_1__SEL_2:
	  replacement_v_count_27_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_27_write_1__SEL_3:
	  replacement_v_count_27_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_27_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_27_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd27 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd27 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_28
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_28_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_28_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_28_D_IN = 2'd3;
      MUX_replacement_v_count_28_write_1__SEL_2:
	  replacement_v_count_28_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_28_write_1__SEL_3:
	  replacement_v_count_28_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_28_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_28_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd28 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd28 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_29
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_29_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_29_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_29_D_IN = 2'd3;
      MUX_replacement_v_count_29_write_1__SEL_2:
	  replacement_v_count_29_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_29_write_1__SEL_3:
	  replacement_v_count_29_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_29_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_29_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd29 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd29 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_3
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_3_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_3_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_3_D_IN = 2'd3;
      MUX_replacement_v_count_3_write_1__SEL_2:
	  replacement_v_count_3_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_3_write_1__SEL_3:
	  replacement_v_count_3_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_3_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_3_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd3 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd3 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_30
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_30_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_30_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_30_D_IN = 2'd3;
      MUX_replacement_v_count_30_write_1__SEL_2:
	  replacement_v_count_30_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_30_write_1__SEL_3:
	  replacement_v_count_30_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_30_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_30_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd30 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd30 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_31
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_31_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_31_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_31_D_IN = 2'd3;
      MUX_replacement_v_count_31_write_1__SEL_2:
	  replacement_v_count_31_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_31_write_1__SEL_3:
	  replacement_v_count_31_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_31_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_31_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd31 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd31 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_32
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_32_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_32_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_32_D_IN = 2'd3;
      MUX_replacement_v_count_32_write_1__SEL_2:
	  replacement_v_count_32_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_32_write_1__SEL_3:
	  replacement_v_count_32_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_32_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_32_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd32 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd32 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_33
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_33_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_33_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_33_D_IN = 2'd3;
      MUX_replacement_v_count_33_write_1__SEL_2:
	  replacement_v_count_33_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_33_write_1__SEL_3:
	  replacement_v_count_33_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_33_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_33_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd33 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd33 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_34
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_34_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_34_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_34_D_IN = 2'd3;
      MUX_replacement_v_count_34_write_1__SEL_2:
	  replacement_v_count_34_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_34_write_1__SEL_3:
	  replacement_v_count_34_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_34_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_34_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd34 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd34 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_35
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_35_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_35_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_35_D_IN = 2'd3;
      MUX_replacement_v_count_35_write_1__SEL_2:
	  replacement_v_count_35_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_35_write_1__SEL_3:
	  replacement_v_count_35_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_35_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_35_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd35 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd35 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_36
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_36_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_36_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_36_D_IN = 2'd3;
      MUX_replacement_v_count_36_write_1__SEL_2:
	  replacement_v_count_36_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_36_write_1__SEL_3:
	  replacement_v_count_36_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_36_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_36_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd36 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd36 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_37
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_37_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_37_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_37_D_IN = 2'd3;
      MUX_replacement_v_count_37_write_1__SEL_2:
	  replacement_v_count_37_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_37_write_1__SEL_3:
	  replacement_v_count_37_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_37_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_37_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd37 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd37 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_38
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_38_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_38_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_38_D_IN = 2'd3;
      MUX_replacement_v_count_38_write_1__SEL_2:
	  replacement_v_count_38_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_38_write_1__SEL_3:
	  replacement_v_count_38_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_38_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_38_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd38 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd38 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_39
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_39_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_39_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_39_D_IN = 2'd3;
      MUX_replacement_v_count_39_write_1__SEL_2:
	  replacement_v_count_39_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_39_write_1__SEL_3:
	  replacement_v_count_39_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_39_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_39_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd39 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd39 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_4
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_4_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_4_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_4_D_IN = 2'd3;
      MUX_replacement_v_count_4_write_1__SEL_2:
	  replacement_v_count_4_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_4_write_1__SEL_3:
	  replacement_v_count_4_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_4_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_4_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd4 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd4 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_40
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_40_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_40_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_40_D_IN = 2'd3;
      MUX_replacement_v_count_40_write_1__SEL_2:
	  replacement_v_count_40_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_40_write_1__SEL_3:
	  replacement_v_count_40_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_40_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_40_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd40 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd40 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_41
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_41_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_41_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_41_D_IN = 2'd3;
      MUX_replacement_v_count_41_write_1__SEL_2:
	  replacement_v_count_41_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_41_write_1__SEL_3:
	  replacement_v_count_41_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_41_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_41_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd41 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd41 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_42
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_42_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_42_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_42_D_IN = 2'd3;
      MUX_replacement_v_count_42_write_1__SEL_2:
	  replacement_v_count_42_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_42_write_1__SEL_3:
	  replacement_v_count_42_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_42_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_42_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd42 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd42 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_43
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_43_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_43_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_43_D_IN = 2'd3;
      MUX_replacement_v_count_43_write_1__SEL_2:
	  replacement_v_count_43_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_43_write_1__SEL_3:
	  replacement_v_count_43_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_43_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_43_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd43 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd43 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_44
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_44_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_44_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_44_D_IN = 2'd3;
      MUX_replacement_v_count_44_write_1__SEL_2:
	  replacement_v_count_44_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_44_write_1__SEL_3:
	  replacement_v_count_44_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_44_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_44_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd44 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd44 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_45
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_45_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_45_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_45_D_IN = 2'd3;
      MUX_replacement_v_count_45_write_1__SEL_2:
	  replacement_v_count_45_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_45_write_1__SEL_3:
	  replacement_v_count_45_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_45_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_45_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd45 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd45 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_46
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_46_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_46_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_46_D_IN = 2'd3;
      MUX_replacement_v_count_46_write_1__SEL_2:
	  replacement_v_count_46_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_46_write_1__SEL_3:
	  replacement_v_count_46_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_46_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_46_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd46 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd46 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_47
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_47_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_47_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_47_D_IN = 2'd3;
      MUX_replacement_v_count_47_write_1__SEL_2:
	  replacement_v_count_47_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_47_write_1__SEL_3:
	  replacement_v_count_47_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_47_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_47_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd47 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd47 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_48
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_48_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_48_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_48_D_IN = 2'd3;
      MUX_replacement_v_count_48_write_1__SEL_2:
	  replacement_v_count_48_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_48_write_1__SEL_3:
	  replacement_v_count_48_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_48_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_48_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd48 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd48 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_49
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_49_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_49_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_49_D_IN = 2'd3;
      MUX_replacement_v_count_49_write_1__SEL_2:
	  replacement_v_count_49_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_49_write_1__SEL_3:
	  replacement_v_count_49_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_49_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_49_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd49 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd49 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_5
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_5_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_5_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_5_D_IN = 2'd3;
      MUX_replacement_v_count_5_write_1__SEL_2:
	  replacement_v_count_5_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_5_write_1__SEL_3:
	  replacement_v_count_5_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_5_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_5_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd5 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd5 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_50
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_50_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_50_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_50_D_IN = 2'd3;
      MUX_replacement_v_count_50_write_1__SEL_2:
	  replacement_v_count_50_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_50_write_1__SEL_3:
	  replacement_v_count_50_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_50_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_50_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd50 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd50 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_51
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_51_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_51_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_51_D_IN = 2'd3;
      MUX_replacement_v_count_51_write_1__SEL_2:
	  replacement_v_count_51_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_51_write_1__SEL_3:
	  replacement_v_count_51_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_51_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_51_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd51 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd51 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_52
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_52_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_52_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_52_D_IN = 2'd3;
      MUX_replacement_v_count_52_write_1__SEL_2:
	  replacement_v_count_52_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_52_write_1__SEL_3:
	  replacement_v_count_52_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_52_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_52_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd52 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd52 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_53
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_53_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_53_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_53_D_IN = 2'd3;
      MUX_replacement_v_count_53_write_1__SEL_2:
	  replacement_v_count_53_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_53_write_1__SEL_3:
	  replacement_v_count_53_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_53_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_53_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd53 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd53 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_54
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_54_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_54_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_54_D_IN = 2'd3;
      MUX_replacement_v_count_54_write_1__SEL_2:
	  replacement_v_count_54_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_54_write_1__SEL_3:
	  replacement_v_count_54_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_54_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_54_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd54 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd54 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_55
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_55_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_55_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_55_D_IN = 2'd3;
      MUX_replacement_v_count_55_write_1__SEL_2:
	  replacement_v_count_55_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_55_write_1__SEL_3:
	  replacement_v_count_55_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_55_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_55_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd55 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd55 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_56
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_56_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_56_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_56_D_IN = 2'd3;
      MUX_replacement_v_count_56_write_1__SEL_2:
	  replacement_v_count_56_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_56_write_1__SEL_3:
	  replacement_v_count_56_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_56_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_56_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd56 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd56 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_57
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_57_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_57_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_57_D_IN = 2'd3;
      MUX_replacement_v_count_57_write_1__SEL_2:
	  replacement_v_count_57_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_57_write_1__SEL_3:
	  replacement_v_count_57_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_57_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_57_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd57 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd57 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_58
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_58_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_58_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_58_D_IN = 2'd3;
      MUX_replacement_v_count_58_write_1__SEL_2:
	  replacement_v_count_58_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_58_write_1__SEL_3:
	  replacement_v_count_58_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_58_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_58_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd58 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd58 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_59
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_59_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_59_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_59_D_IN = 2'd3;
      MUX_replacement_v_count_59_write_1__SEL_2:
	  replacement_v_count_59_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_59_write_1__SEL_3:
	  replacement_v_count_59_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_59_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_59_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd59 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd59 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_6
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_6_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_6_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_6_D_IN = 2'd3;
      MUX_replacement_v_count_6_write_1__SEL_2:
	  replacement_v_count_6_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_6_write_1__SEL_3:
	  replacement_v_count_6_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_6_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_6_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd6 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd6 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_60
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_60_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_60_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_60_D_IN = 2'd3;
      MUX_replacement_v_count_60_write_1__SEL_2:
	  replacement_v_count_60_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_60_write_1__SEL_3:
	  replacement_v_count_60_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_60_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_60_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd60 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd60 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_61
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_61_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_61_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_61_D_IN = 2'd3;
      MUX_replacement_v_count_61_write_1__SEL_2:
	  replacement_v_count_61_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_61_write_1__SEL_3:
	  replacement_v_count_61_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_61_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_61_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd61 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd61 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_62
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_62_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_62_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_62_D_IN = 2'd3;
      MUX_replacement_v_count_62_write_1__SEL_2:
	  replacement_v_count_62_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_62_write_1__SEL_3:
	  replacement_v_count_62_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_62_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_62_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd62 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd62 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_63
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_63_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_63_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_63_D_IN = 2'd3;
      MUX_replacement_v_count_63_write_1__SEL_2:
	  replacement_v_count_63_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_63_write_1__SEL_3:
	  replacement_v_count_63_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_63_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_63_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd63 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd63 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_7
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_7_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_7_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_7_D_IN = 2'd3;
      MUX_replacement_v_count_7_write_1__SEL_2:
	  replacement_v_count_7_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_7_write_1__SEL_3:
	  replacement_v_count_7_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_7_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_7_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd7 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd7 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_8
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_8_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_8_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_8_D_IN = 2'd3;
      MUX_replacement_v_count_8_write_1__SEL_2:
	  replacement_v_count_8_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_8_write_1__SEL_3:
	  replacement_v_count_8_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_8_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_8_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd8 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd8 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register replacement_v_count_9
  always@(MUX_ff_core_response_enqw_wset_1__SEL_1 or
	  MUX_replacement_v_count_9_write_1__SEL_2 or
	  MUX_replacement_v_count_0_write_1__VAL_2 or
	  MUX_replacement_v_count_9_write_1__SEL_3 or
	  MUX_replacement_v_count_0_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_core_response_enqw_wset_1__SEL_1:
	  replacement_v_count_9_D_IN = 2'd3;
      MUX_replacement_v_count_9_write_1__SEL_2:
	  replacement_v_count_9_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_2;
      MUX_replacement_v_count_9_write_1__SEL_3:
	  replacement_v_count_9_D_IN =
	      MUX_replacement_v_count_0_write_1__VAL_3;
      default: replacement_v_count_9_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign replacement_v_count_9_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     m_storebuffer_mv_release_head[11:6] == 6'd9 &&
	     NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     rg_miss_meta[15:10] == 6'd9 &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 ;

  // register rg_atomic_rd_data
  assign rg_atomic_rd_data_D_IN = mem_response_data__h94535 ;
  assign rg_atomic_rd_data_EN = MUX_ff_mem_io_request_enq_1__SEL_1 ;

  // register rg_block_count
  assign rg_block_count_D_IN =
	     MUX_rg_first_write_1__SEL_2 ?
	       MUX_rg_block_count_write_1__VAL_1 :
	       rotator__h120747 ;
  assign rg_block_count_EN =
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675 ||
	     WILL_FIRE_RL_rl_fill_from_memory ;

  // register rg_core_io_response
  assign rg_core_io_response_D_IN =
	     rg_core_io_response_1_whas ?
	       MUX_ff_ptw_response_rv_port0__write_1__VAL_2 :
	       { 1'd0,
		 76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign rg_core_io_response_EN = 1'd1 ;

  // register rg_evict_addr
  always@(MUX_rg_evict_addr_write_1__SEL_1 or
	  _theResult_____1__h82252 or
	  MUX_rg_evict_addr_write_1__SEL_2 or
	  MUX_rg_evict_addr_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_fence_operation or lv_address__h24743)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_evict_addr_write_1__SEL_1:
	  rg_evict_addr_D_IN = _theResult_____1__h82252;
      MUX_rg_evict_addr_write_1__SEL_2:
	  rg_evict_addr_D_IN = MUX_rg_evict_addr_write_1__VAL_2;
      WILL_FIRE_RL_rl_fence_operation:
	  rg_evict_addr_D_IN = lv_address__h24743;
      default: rg_evict_addr_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_evict_addr_EN =
	     WILL_FIRE_RL_rl_store_release && rg_store_eviction ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_eviction ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register rg_evicted_line
  always@(MUX_rg_evict_addr_write_1__SEL_1 or
	  lv_line__h78633 or
	  MUX_rg_evict_addr_write_1__SEL_2 or
	  MUX_rg_evicted_line_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_fence_operation or x__h29001)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_evict_addr_write_1__SEL_1:
	  rg_evicted_line_D_IN = lv_line__h78633;
      MUX_rg_evict_addr_write_1__SEL_2:
	  rg_evicted_line_D_IN = MUX_rg_evicted_line_write_1__VAL_2;
      WILL_FIRE_RL_rl_fence_operation: rg_evicted_line_D_IN = x__h29001;
      default: rg_evicted_line_D_IN =
		   512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign rg_evicted_line_EN =
	     WILL_FIRE_RL_rl_store_release && rg_store_eviction ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_eviction ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register rg_eviction_required
  assign rg_eviction_required_D_IN = !WILL_FIRE_RL_rl_line_eviction ;
  assign rg_eviction_required_EN =
	     WILL_FIRE_RL_rl_store_release && rg_store_eviction ||
	     WILL_FIRE_RL_rl_fence_operation && x__h24767 != 4'd0 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_eviction ||
	     WILL_FIRE_RL_rl_line_eviction ;

  // register rg_fence_set
  assign rg_fence_set_D_IN =
	     (!rg_global_dirty || rg_fence_set == 6'd63 && rg_fence_way[3]) ?
	       6'd0 :
	       _theResult_____2__h28945 ;
  assign rg_fence_set_EN = CAN_FIRE_RL_rl_fence_operation ;

  // register rg_fence_stall
  assign rg_fence_stall_D_IN =
	     !MUX_ff_core_response_enqw_wset_1__SEL_1 &&
	     receive_core_req_put[76] ;
  assign rg_fence_stall_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     EN_receive_core_req_put ;

  // register rg_fence_way
  assign rg_fence_way_D_IN =
	     (!rg_global_dirty || rg_fence_set == 6'd63 && rg_fence_way[3]) ?
	       4'd1 :
	       x__h34409 ;
  assign rg_fence_way_EN = CAN_FIRE_RL_rl_fence_operation ;

  // register rg_fill_err
  assign rg_fill_err_D_IN =
	     !MUX_rg_first_write_1__SEL_2 && MUX_rg_fill_err_write_1__VAL_2 ;
  assign rg_fill_err_EN =
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675 ||
	     WILL_FIRE_RL_rl_fill_from_memory ;

  // register rg_fill_eviction
  assign rg_fill_eviction_D_IN = !MUX_rg_evict_addr_write_1__SEL_2 ;
  assign rg_fill_eviction_EN =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_eviction ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1498 ;

  // register rg_fill_release
  assign rg_fill_release_D_IN = MUX_rg_fill_release_write_1__SEL_1 ;
  assign rg_fill_release_EN =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     (rg_miss_meta[37:36] == 2'd0 || rg_fill_err ||
	      ff_mem_rd_resp_rv_port1__read[0]) ||
	     WILL_FIRE_RL_rl_fill_release ;

  // register rg_fill_set
  assign rg_fill_set_D_IN = rg_miss_meta[15:10] ;
  assign rg_fill_set_EN =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] ;

  // register rg_fill_tag
  assign rg_fill_tag_D_IN = rg_miss_meta[35:16] ;
  assign rg_fill_tag_EN =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] ;

  // register rg_fill_way
  assign rg_fill_way_D_IN = v__h95979 ;
  assign rg_fill_way_EN =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] ;

  // register rg_first
  assign rg_first_D_IN = !MUX_rg_first_write_1__SEL_1 ;
  assign rg_first_EN =
	     MUX_rg_first_write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675 ;

  // register rg_global_dirty
  assign rg_global_dirty_D_IN = !MUX_ff_core_response_enqw_wset_1__SEL_1 ;
  assign rg_global_dirty_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_store_release &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register rg_io_atomic_done
  assign rg_io_atomic_done_D_IN =
	     m_iobuffer_mv_io_head[71:70] == 2'd2 && !rg_io_atomic_done &&
	     !ff_mem_io_resp_D_OUT[0] ;
  assign rg_io_atomic_done_EN =
	     WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	     m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	     (!ff_mem_io_resp_D_OUT[0] || rg_io_atomic_done) ;

  // register rg_io_busy
  assign rg_io_busy_D_IN = !MUX_rg_io_busy_write_1__SEL_1 ;
  assign rg_io_busy_EN =
	     WILL_FIRE_RL_rl_io_response &&
	     m_iobuffer_mv_io_head__154_BIT_0_171_OR_NOT_m__ETC___d1196 ||
	     WILL_FIRE_RL_rl_initiate_io ;

  // register rg_miss_handling
  assign rg_miss_handling_D_IN =
	     !MUX_m_storebuffer_ma_allocate_line_1__SEL_2 &&
	     !WILL_FIRE_RL_rl_fill_release ;
  assign rg_miss_handling_EN =
	     WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	     m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta[37:36] != 2'd0 &&
	     !rg_fill_err &&
	     !ff_mem_rd_resp_rv_port1__read[0] ||
	     WILL_FIRE_RL_rl_fill_release ;

  // register rg_miss_meta
  assign rg_miss_meta_D_IN =
	     { ff_core_request_D_OUT[0],
	       ff_core_request_D_OUT[140:77],
	       ff_core_request_D_OUT[5:1],
	       ff_core_request_D_OUT[69:6],
	       m_storebuffer_mv_sb_tail,
	       x__h38897,
	       ff_from_tlb_rv_port1__read[40:9],
	       ff_core_request_D_OUT[72:70],
	       ff_core_request_D_OUT[75] } ;
  assign rg_miss_meta_EN = MUX_rg_first_write_1__SEL_2 ;

  // register rg_performing_replay
  assign rg_performing_replay_D_IN = rg_performing_replay_EN_port1__write ;
  assign rg_performing_replay_EN = 1'b1 ;

  // register rg_recent_req
  assign rg_recent_req_D_IN = _theResult____h123294 ;
  assign rg_recent_req_EN = EN_receive_core_req_put ;

  // register rg_reservation_address
  assign rg_reservation_address_D_IN =
	     (ff_core_request_D_OUT[5:1] == 5'b00101) ?
	       { 62'h2000000000000000, ff_core_request_D_OUT[79:77] } :
	       { 1'd0,
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign rg_reservation_address_EN =
	     WILL_FIRE_RL_rl_ram_check &&
	     ff_core_request_D_OUT[74:73] == 2'd2 &&
	     (ff_core_request_D_OUT[5:1] == 5'b00101 ||
	      ff_core_request_D_OUT[5:1] == 5'b00111) ;

  // register rg_store_eviction
  assign rg_store_eviction_D_IN =
	     rg_store_eviction_1_whas && !rg_store_eviction ;
  assign rg_store_eviction_EN = 1'd1 ;

  // register v_fill_line_0
  assign v_fill_line_0_D_IN =
	     (x__h107912 == 3'd0) ?
	       ff_mem_rd_resp_rv_port1__read[65:2] :
	       v_fill_line_0 ;
  assign v_fill_line_0_EN = WILL_FIRE_RL_rl_fill_from_memory ;

  // register v_fill_line_1
  assign v_fill_line_1_D_IN =
	     (x__h107912 == 3'd1) ?
	       ff_mem_rd_resp_rv_port1__read[65:2] :
	       v_fill_line_1 ;
  assign v_fill_line_1_EN = WILL_FIRE_RL_rl_fill_from_memory ;

  // register v_fill_line_2
  assign v_fill_line_2_D_IN =
	     (x__h107912 == 3'd2) ?
	       ff_mem_rd_resp_rv_port1__read[65:2] :
	       v_fill_line_2 ;
  assign v_fill_line_2_EN = WILL_FIRE_RL_rl_fill_from_memory ;

  // register v_fill_line_3
  assign v_fill_line_3_D_IN =
	     (x__h107912 == 3'd3) ?
	       ff_mem_rd_resp_rv_port1__read[65:2] :
	       v_fill_line_3 ;
  assign v_fill_line_3_EN = WILL_FIRE_RL_rl_fill_from_memory ;

  // register v_fill_line_4
  assign v_fill_line_4_D_IN =
	     (x__h107912 == 3'd4) ?
	       ff_mem_rd_resp_rv_port1__read[65:2] :
	       v_fill_line_4 ;
  assign v_fill_line_4_EN = WILL_FIRE_RL_rl_fill_from_memory ;

  // register v_fill_line_5
  assign v_fill_line_5_D_IN =
	     (x__h107912 == 3'd5) ?
	       ff_mem_rd_resp_rv_port1__read[65:2] :
	       v_fill_line_5 ;
  assign v_fill_line_5_EN = WILL_FIRE_RL_rl_fill_from_memory ;

  // register v_fill_line_6
  assign v_fill_line_6_D_IN =
	     (x__h107912 == 3'd6) ?
	       ff_mem_rd_resp_rv_port1__read[65:2] :
	       v_fill_line_6 ;
  assign v_fill_line_6_EN = WILL_FIRE_RL_rl_fill_from_memory ;

  // register v_fill_line_7
  assign v_fill_line_7_D_IN =
	     (x__h107912 == 3'd7) ?
	       ff_mem_rd_resp_rv_port1__read[65:2] :
	       v_fill_line_7 ;
  assign v_fill_line_7_EN = WILL_FIRE_RL_rl_fill_from_memory ;

  // register v_reg_dirty_0
  always@(MUX_m_data_v_data_0_ram_double_0_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_v_reg_dirty_0_write_1__SEL_3 or
	  MUX_v_reg_dirty_0_write_1__VAL_3 or
	  MUX_ff_core_response_enqw_wset_1__SEL_1)
  case (1'b1)
    MUX_m_data_v_data_0_ram_double_0_write_1__SEL_2:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_v_reg_dirty_0_write_1__SEL_3:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_3;
    MUX_ff_core_response_enqw_wset_1__SEL_1: v_reg_dirty_0_D_IN = 64'd0;
    default: v_reg_dirty_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_0_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d552 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register v_reg_dirty_1
  always@(MUX_m_data_v_data_1_ram_double_0_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_v_reg_dirty_1_write_1__SEL_3 or
	  MUX_v_reg_dirty_0_write_1__VAL_3 or
	  MUX_ff_core_response_enqw_wset_1__SEL_1)
  case (1'b1)
    MUX_m_data_v_data_1_ram_double_0_write_1__SEL_2:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_v_reg_dirty_1_write_1__SEL_3:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_3;
    MUX_ff_core_response_enqw_wset_1__SEL_1: v_reg_dirty_1_D_IN = 64'd0;
    default: v_reg_dirty_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_1_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d558 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register v_reg_dirty_2
  always@(MUX_m_data_v_data_2_ram_double_0_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_v_reg_dirty_2_write_1__SEL_3 or
	  MUX_v_reg_dirty_0_write_1__VAL_3 or
	  MUX_ff_core_response_enqw_wset_1__SEL_1)
  case (1'b1)
    MUX_m_data_v_data_2_ram_double_0_write_1__SEL_2:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_v_reg_dirty_2_write_1__SEL_3:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_3;
    MUX_ff_core_response_enqw_wset_1__SEL_1: v_reg_dirty_2_D_IN = 64'd0;
    default: v_reg_dirty_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_2_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d560 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register v_reg_dirty_3
  always@(MUX_m_data_v_data_3_ram_double_0_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_v_reg_dirty_3_write_1__SEL_3 or
	  MUX_v_reg_dirty_0_write_1__VAL_3 or
	  MUX_ff_core_response_enqw_wset_1__SEL_1)
  case (1'b1)
    MUX_m_data_v_data_3_ram_double_0_write_1__SEL_2:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_v_reg_dirty_3_write_1__SEL_3:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_3;
    MUX_ff_core_response_enqw_wset_1__SEL_1: v_reg_dirty_3_D_IN = 64'd0;
    default: v_reg_dirty_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_3_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d562 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register v_reg_valid_0
  always@(MUX_m_data_v_data_0_ram_double_0_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_v_reg_dirty_0_write_1__SEL_3 or
	  MUX_v_reg_valid_0_write_1__VAL_3 or
	  MUX_ff_core_response_enqw_wset_1__SEL_1)
  case (1'b1)
    MUX_m_data_v_data_0_ram_double_0_write_1__SEL_2:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_v_reg_dirty_0_write_1__SEL_3:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_3;
    MUX_ff_core_response_enqw_wset_1__SEL_1: v_reg_valid_0_D_IN = 64'd0;
    default: v_reg_valid_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_0_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d552 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register v_reg_valid_1
  always@(MUX_m_data_v_data_1_ram_double_0_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_v_reg_dirty_1_write_1__SEL_3 or
	  MUX_v_reg_valid_0_write_1__VAL_3 or
	  MUX_ff_core_response_enqw_wset_1__SEL_1)
  case (1'b1)
    MUX_m_data_v_data_1_ram_double_0_write_1__SEL_2:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_v_reg_dirty_1_write_1__SEL_3:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_3;
    MUX_ff_core_response_enqw_wset_1__SEL_1: v_reg_valid_1_D_IN = 64'd0;
    default: v_reg_valid_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_1_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d558 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register v_reg_valid_2
  always@(MUX_m_data_v_data_2_ram_double_0_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_v_reg_dirty_2_write_1__SEL_3 or
	  MUX_v_reg_valid_0_write_1__VAL_3 or
	  MUX_ff_core_response_enqw_wset_1__SEL_1)
  case (1'b1)
    MUX_m_data_v_data_2_ram_double_0_write_1__SEL_2:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_v_reg_dirty_2_write_1__SEL_3:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_3;
    MUX_ff_core_response_enqw_wset_1__SEL_1: v_reg_valid_2_D_IN = 64'd0;
    default: v_reg_valid_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_2_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d560 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // register v_reg_valid_3
  always@(MUX_m_data_v_data_3_ram_double_0_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_v_reg_dirty_3_write_1__SEL_3 or
	  MUX_v_reg_valid_0_write_1__VAL_3 or
	  MUX_ff_core_response_enqw_wset_1__SEL_1)
  case (1'b1)
    MUX_m_data_v_data_3_ram_double_0_write_1__SEL_2:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_v_reg_dirty_3_write_1__SEL_3:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_3;
    MUX_ff_core_response_enqw_wset_1__SEL_1: v_reg_valid_3_D_IN = 64'd0;
    default: v_reg_valid_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_3_EN =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d562 ||
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;

  // submodule ff_core_request
  assign ff_core_request_D_IN = receive_core_req_put ;
  assign ff_core_request_ENQ = EN_receive_core_req_put ;
  assign ff_core_request_DEQ =
	     MUX_ff_core_response_enqw_wset_1__SEL_1 ||
	     WILL_FIRE_RL_rl_ram_check ;
  assign ff_core_request_CLR = 1'b0 ;

  // submodule ff_core_response_ff
  assign ff_core_response_ff_D_IN = ff_core_response_enqw_wget ;
  assign ff_core_response_ff_ENQ = CAN_FIRE_RL_ff_core_response_enqueue ;
  assign ff_core_response_ff_DEQ = CAN_FIRE_RL_ff_core_response_dequeue ;
  assign ff_core_response_ff_CLR = 1'b0 ;

  // submodule ff_core_response_firstValid
  assign ff_core_response_firstValid_D_IN = 1'd1 ;
  assign ff_core_response_firstValid_EN = EN_send_core_cache_resp_get ;

  // submodule ff_mem_io_request
  assign ff_mem_io_request_D_IN =
	     MUX_ff_mem_io_request_enq_1__SEL_1 ?
	       MUX_ff_mem_io_request_enq_1__VAL_1 :
	       MUX_ff_mem_io_request_enq_1__VAL_2 ;
  assign ff_mem_io_request_ENQ =
	     WILL_FIRE_RL_rl_io_response &&
	     NOT_m_iobuffer_mv_io_head__154_BIT_0_171_173_A_ETC___d1235 ||
	     WILL_FIRE_RL_rl_initiate_io ;
  assign ff_mem_io_request_DEQ = EN_send_mem_io_req_get ;
  assign ff_mem_io_request_CLR = 1'b0 ;

  // submodule ff_mem_io_resp
  assign ff_mem_io_resp_D_IN = receive_mem_io_resp_put ;
  assign ff_mem_io_resp_ENQ = EN_receive_mem_io_resp_put ;
  assign ff_mem_io_resp_DEQ = CAN_FIRE_RL_rl_io_response ;
  assign ff_mem_io_resp_CLR = 1'b0 ;

  // submodule ff_mem_rd_request
  assign ff_mem_rd_request_D_IN = { x_address__h60353, 11'd59 } ;
  assign ff_mem_rd_request_ENQ = MUX_rg_first_write_1__SEL_2 ;
  assign ff_mem_rd_request_DEQ = EN_send_mem_rd_req_get ;
  assign ff_mem_rd_request_CLR = 1'b0 ;

  // submodule ff_mem_wr_request
  assign ff_mem_wr_request_D_IN = { rg_evict_addr, rg_evicted_line, 11'd59 } ;
  assign ff_mem_wr_request_ENQ = CAN_FIRE_RL_rl_line_eviction ;
  assign ff_mem_wr_request_DEQ = EN_deq_mem_wr_req ;
  assign ff_mem_wr_request_CLR = 1'b0 ;

  // submodule m_data_v_data_0_ram_double_0
  assign m_data_v_data_0_ram_double_0_addra =
	     MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_data_v_data_0_ram_double_0_addrb = wr_read_set_index_wget ;
  assign m_data_v_data_0_ram_double_0_dina =
	     MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 ?
	       x1__h65298 :
	       m_storebuffer_mv_release_head[543:32] ;
  assign m_data_v_data_0_ram_double_0_wea = 1'd1 ;
  assign m_data_v_data_0_ram_double_0_ena =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign m_data_v_data_0_ram_double_0_enb =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // submodule m_data_v_data_1_ram_double_0
  assign m_data_v_data_1_ram_double_0_addra =
	     MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_data_v_data_1_ram_double_0_addrb = wr_read_set_index_wget ;
  assign m_data_v_data_1_ram_double_0_dina =
	     MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 ?
	       x1__h65298 :
	       m_storebuffer_mv_release_head[543:32] ;
  assign m_data_v_data_1_ram_double_0_wea = 1'd1 ;
  assign m_data_v_data_1_ram_double_0_ena =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign m_data_v_data_1_ram_double_0_enb =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // submodule m_data_v_data_2_ram_double_0
  assign m_data_v_data_2_ram_double_0_addra =
	     MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_data_v_data_2_ram_double_0_addrb = wr_read_set_index_wget ;
  assign m_data_v_data_2_ram_double_0_dina =
	     MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 ?
	       x1__h65298 :
	       m_storebuffer_mv_release_head[543:32] ;
  assign m_data_v_data_2_ram_double_0_wea = 1'd1 ;
  assign m_data_v_data_2_ram_double_0_ena =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign m_data_v_data_2_ram_double_0_enb =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // submodule m_data_v_data_3_ram_double_0
  assign m_data_v_data_3_ram_double_0_addra =
	     MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_data_v_data_3_ram_double_0_addrb = wr_read_set_index_wget ;
  assign m_data_v_data_3_ram_double_0_dina =
	     MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 ?
	       x1__h65298 :
	       m_storebuffer_mv_release_head[543:32] ;
  assign m_data_v_data_3_ram_double_0_wea = 1'd1 ;
  assign m_data_v_data_3_ram_double_0_ena =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign m_data_v_data_3_ram_double_0_enb =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // submodule m_iobuffer
  assign m_iobuffer_ma_allocate_io_entry =
	     { ff_from_tlb_rv_port1__read[40:9],
	       ff_core_request_D_OUT[69:6],
	       ff_core_request_D_OUT[72:70],
	       ff_core_request_D_OUT[75],
	       x__h38897,
	       ff_core_request_D_OUT[5:1],
	       ff_core_request_D_OUT[140:77],
	       ff_core_request_D_OUT[0] } ;
  assign m_iobuffer_EN_ma_increment_head =
	     EN_ma_commit_io &&
	     !m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754 ||
	     WILL_FIRE_RL_rl_io_response &&
	     m_iobuffer_mv_io_head__154_BIT_0_171_OR_NOT_m__ETC___d1196 ;
  assign m_iobuffer_EN_ma_commit_io =
	     EN_ma_commit_io &&
	     m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754 ;
  assign m_iobuffer_EN_ma_allocate_io =
	     WILL_FIRE_RL_rl_ram_check &&
	     NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574 &&
	     !ff_from_tlb_rv_port1__read[0] ;

  // submodule m_storebuffer
  assign m_storebuffer_ma_allocate_line_address =
	     MUX_m_storebuffer_ma_allocate_line_1__SEL_1 ?
	       ff_from_tlb_rv_port1__read[40:9] :
	       rg_miss_meta[35:4] ;
  assign m_storebuffer_ma_allocate_line_line =
	     MUX_m_storebuffer_ma_allocate_line_1__SEL_1 ?
	       MUX_m_storebuffer_ma_allocate_line_2__VAL_1 :
	       MUX_m_storebuffer_ma_allocate_line_2__VAL_2 ;
  assign m_storebuffer_ma_allocate_store_address = phyaddr__h35828 ;
  assign m_storebuffer_ma_allocate_store_data = ff_core_request_D_OUT[69:6] ;
  assign m_storebuffer_ma_allocate_store_epochs = ff_core_request_D_OUT[75] ;
  assign m_storebuffer_ma_allocate_store_lbindex =
	     m_storebuffer_mav_core_lookup[66] ?
	       m_storebuffer_mav_core_lookup[1:0] :
	       m_storebuffer_mv_lb_tail ;
  assign m_storebuffer_ma_allocate_store_size = ff_core_request_D_OUT[71:70] ;
  assign m_storebuffer_ma_commit_store_c = ma_commit_store_c ;
  assign m_storebuffer_ma_perform_atomic_atomic_op =
	     MUX_m_storebuffer_ma_perform_atomic_1__SEL_1 ?
	       rg_miss_meta[107:103] :
	       ff_core_request_D_OUT[5:1] ;
  assign m_storebuffer_ma_perform_atomic_rdata =
	     MUX_m_storebuffer_ma_perform_atomic_1__SEL_1 ?
	       _theResult_____1_word__h99196 :
	       rdata__h40211 ;
  assign m_storebuffer_ma_perform_atomic_sbindex =
	     MUX_m_storebuffer_ma_perform_atomic_1__SEL_1 ?
	       rg_miss_meta[38] :
	       m_storebuffer_mv_sb_tail ;
  assign m_storebuffer_ma_perform_atomic_wdata =
	     MUX_m_storebuffer_ma_perform_atomic_1__SEL_1 ?
	       rg_miss_meta[102:39] :
	       ff_core_request_D_OUT[69:6] ;
  assign m_storebuffer_mav_core_lookup_address = phyaddr__h35828 ;
  assign m_storebuffer_EN_ma_allocate_line =
	     MUX_m_storebuffer_ma_allocate_line_1__SEL_1 ||
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] &&
	     rg_miss_meta[37:36] != 2'd0 &&
	     !rg_fill_err &&
	     !ff_mem_rd_resp_rv_port1__read[0] ;
  assign m_storebuffer_EN_ma_allocate_store =
	     WILL_FIRE_RL_rl_ram_check &&
	     NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	     !ff_from_tlb_rv_port1__read[0] ;
  assign m_storebuffer_EN_mav_core_lookup = WILL_FIRE_RL_rl_ram_check ;
  assign m_storebuffer_EN_ma_commit_store = EN_ma_commit_store ;
  assign m_storebuffer_EN_ma_release = MUX_rg_global_dirty_write_1__SEL_2 ;
  assign m_storebuffer_EN_ma_perform_atomic =
	     WILL_FIRE_RL_rl_fill_from_memory && rg_first &&
	     rg_miss_meta[37:36] == 2'd2 ||
	     WILL_FIRE_RL_rl_ram_check &&
	     ff_from_tlb_rv_port1__read__39_BIT_8_62_OR_NOT_ETC___d435 ;

  // submodule m_tag_v_tags_0_ram_double_0
  assign m_tag_v_tags_0_ram_double_0_addra =
	     MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_tag_v_tags_0_ram_double_0_addrb = wr_read_set_index_wget ;
  assign m_tag_v_tags_0_ram_double_0_dina =
	     MUX_m_data_v_data_0_ram_double_0_write_1__SEL_1 ?
	       rg_fill_tag :
	       m_storebuffer_mv_release_head[31:12] ;
  assign m_tag_v_tags_0_ram_double_0_wea = 1'd1 ;
  assign m_tag_v_tags_0_ram_double_0_ena =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd0 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign m_tag_v_tags_0_ram_double_0_enb =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // submodule m_tag_v_tags_1_ram_double_0
  assign m_tag_v_tags_1_ram_double_0_addra =
	     MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_tag_v_tags_1_ram_double_0_addrb = wr_read_set_index_wget ;
  assign m_tag_v_tags_1_ram_double_0_dina =
	     MUX_m_data_v_data_1_ram_double_0_write_1__SEL_1 ?
	       rg_fill_tag :
	       m_storebuffer_mv_release_head[31:12] ;
  assign m_tag_v_tags_1_ram_double_0_wea = 1'd1 ;
  assign m_tag_v_tags_1_ram_double_0_ena =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd1 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign m_tag_v_tags_1_ram_double_0_enb =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // submodule m_tag_v_tags_2_ram_double_0
  assign m_tag_v_tags_2_ram_double_0_addra =
	     MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_tag_v_tags_2_ram_double_0_addrb = wr_read_set_index_wget ;
  assign m_tag_v_tags_2_ram_double_0_dina =
	     MUX_m_data_v_data_2_ram_double_0_write_1__SEL_1 ?
	       rg_fill_tag :
	       m_storebuffer_mv_release_head[31:12] ;
  assign m_tag_v_tags_2_ram_double_0_wea = 1'd1 ;
  assign m_tag_v_tags_2_ram_double_0_ena =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd2 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign m_tag_v_tags_2_ram_double_0_enb =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // submodule m_tag_v_tags_3_ram_double_0
  assign m_tag_v_tags_3_ram_double_0_addra =
	     MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 ?
	       rg_fill_set :
	       m_storebuffer_mv_release_head[11:6] ;
  assign m_tag_v_tags_3_ram_double_0_addrb = wr_read_set_index_wget ;
  assign m_tag_v_tags_3_ram_double_0_dina =
	     MUX_m_data_v_data_3_ram_double_0_write_1__SEL_1 ?
	       rg_fill_tag :
	       m_storebuffer_mv_release_head[31:12] ;
  assign m_tag_v_tags_3_ram_double_0_wea = 1'd1 ;
  assign m_tag_v_tags_3_ram_double_0_ena =
	     WILL_FIRE_RL_rl_fill_release && rg_fill_way == 2'd3 &&
	     !rg_fill_err ||
	     WILL_FIRE_RL_rl_store_release && v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) ;
  assign m_tag_v_tags_3_ram_double_0_enb =
	     CAN_FIRE_RL_rl_drive_ram_read_port ;

  // remaining internal signals
  module_fn_pmp_lookup instance_fn_pmp_lookup_0(.fn_pmp_lookup_req({ phyaddr__h35828,
								     pmp_access__h36111 }),
						.fn_pmp_lookup_priv(ma_curr_priv_c),
						.fn_pmp_lookup_pmpcfg({ { pmp_cfg_3,
									  pmp_cfg_2 },
									pmp_cfg_1,
									pmp_cfg_0 }),
						.fn_pmp_lookup_pmpaddr({ { pmp_addr_3,
									   pmp_addr_2 },
									 pmp_addr_1,
									 pmp_addr_0 }),
						.fn_pmp_lookup(fn_pmp_lookup___d407));
  assign IF_ff_core_request_first__2_BITS_71_TO_70_26_E_ETC___d508 =
	     lv_sign__h40283 & y__h50067 ;
  assign IF_ff_core_request_first__2_BITS_74_TO_73_90_E_ETC___d544 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[5:1] == 5'b00111 &&
	      rg_reservation_address[64] &&
	      IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) ?
	       64'd0 :
	       lv_response_word__h40245 ;
  assign IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1254 =
	     op1__h95020 <= op2__h95021 ;
  assign IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1259 =
	     (op1__h95020 ^ 64'h8000000000000000) <=
	     (op2__h95021 ^ 64'h8000000000000000) ;
  assign IF_m_tag_v_tags_0_ram_double_0doutb_EQ_ff_fro_ETC__q6 =
	     (m_tag_v_tags_0_ram_double_0_doutb ==
	      ff_from_tlb_rv_port1__read[40:21]) ?
	       4'd1 :
	       4'd0 ;
  assign IF_rg_miss_meta_316_BITS_2_TO_1_343_EQ_0b0_344_ETC___d1361 =
	     lv_sign__h99252 & y__h104425 ;
  assign IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312 =
	     rg_reservation_address[63:0] ==
	     { 61'd0, ff_core_request_D_OUT[79:77] } ;
  assign IF_v_reg_dirty_2_2_BIT_m_storebuffer_mv_releas_ETC___d940 =
	     v_reg_dirty_2_2_BIT_m_storebuffer_mv_release_h_ETC___d861 ?
	       (v_reg_dirty_1_1_BIT_m_storebuffer_mv_release_h_ETC___d862 ?
		  (v_reg_dirty_0_0_BIT_m_storebuffer_mv_release_h_ETC___d863 ?
		     2'd3 :
		     2'd0) :
		  2'd1) :
	       2'd2 ;
  assign IF_v_reg_dirty_2_2_BIT_rg_miss_meta_316_BITS_1_ETC___d1443 =
	     v_reg_dirty_2_2_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1429 ?
	       (v_reg_dirty_1_1_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1430 ?
		  (v_reg_dirty_0_0_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1431 ?
		     2'd3 :
		     2'd0) :
		  2'd1) :
	       2'd2 ;
  assign IF_v_reg_valid_2_9_BIT_m_storebuffer_mv_releas_ETC___d944 =
	     v_reg_valid_2_9_BIT_m_storebuffer_mv_release_h_ETC___d854 ?
	       (v_reg_valid_1_8_BIT_m_storebuffer_mv_release_h_ETC___d855 ?
		  (v_reg_valid_0_7_BIT_m_storebuffer_mv_release_h_ETC___d856 ?
		     2'd3 :
		     2'd0) :
		  2'd1) :
	       2'd2 ;
  assign IF_v_reg_valid_2_9_BIT_rg_miss_meta_316_BITS_1_ETC___d1447 =
	     v_reg_valid_2_9_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1422 ?
	       (v_reg_valid_1_8_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1423 ?
		  (v_reg_valid_0_7_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1424 ?
		     2'd3 :
		     2'd0) :
		  2'd1) :
	       2'd2 ;
  assign IF_v_reg_valid_3_0_BIT_m_storebuffer_mv_releas_ETC___d946 =
	     (lv_set_valid__h75581 == 4'd15 &&
	      lv_set_dirty__h75582 != 4'd15) ?
	       (v_reg_dirty_3_3_BIT_m_storebuffer_mv_release_h_ETC___d860 ?
		  IF_v_reg_dirty_2_2_BIT_m_storebuffer_mv_releas_ETC___d940 :
		  2'd3) :
	       (v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d853 ?
		  IF_v_reg_valid_2_9_BIT_m_storebuffer_mv_releas_ETC___d944 :
		  2'd3) ;
  assign IF_v_reg_valid_3_0_BIT_rg_miss_meta_316_BITS_1_ETC___d1449 =
	     (lv_set_valid__h95974 == 4'd15 &&
	      lv_set_dirty__h95975 != 4'd15) ?
	       (v_reg_dirty_3_3_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1428 ?
		  IF_v_reg_dirty_2_2_BIT_rg_miss_meta_316_BITS_1_ETC___d1443 :
		  2'd3) :
	       (v_reg_valid_3_0_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1421 ?
		  IF_v_reg_valid_2_9_BIT_rg_miss_meta_316_BITS_1_ETC___d1447 :
		  2'd3) ;
  assign NOT_0_CONCAT_m_tag_v_tags_3_rg_output_0_port1__ETC___d390 =
	     x__h38564 + y__h38565 > 3'd1 ;
  assign NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 =
	     x__h38897 != 2'd0 && !fn_pmp_lookup___d407[7] &&
	     !ff_from_tlb_rv_port1__read[8] &&
	     ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414 ;
  assign NOT_ff_core_request_first__2_BITS_74_TO_73_90__ETC___d660 =
	     (ff_core_request_D_OUT[74:73] != 2'd2 ||
	      ff_core_request_D_OUT[5:1] != 5'b00111 ||
	      rg_reservation_address[64] &&
	      IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) &&
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414) ;
  assign NOT_ff_core_request_first__2_BIT_76_3_62_AND_N_ETC___d172 =
	     !ff_core_request_D_OUT[76] && !rg_miss_handling &&
	     !m_storebuffer_mv_line_full &&
	     !m_storebuffer_mv_sb_full &&
	     !m_iobuffer_mv_io_full ;
  assign NOT_m_iobuffer_mv_io_head__154_BIT_0_171_173_A_ETC___d1235 =
	     !m_iobuffer_mv_io_head[0] &&
	     m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	     !rg_io_atomic_done &&
	     !ff_mem_io_resp_D_OUT[0] ;
  assign NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d393 =
	     x__h38803 & m_storebuffer_mav_core_lookup[66] ;
  assign NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d596 =
	     x__h38803 || m_storebuffer_mav_core_lookup[66] ||
	     fn_pmp_lookup___d407[7] ||
	     ff_from_tlb_rv_port1__read[8] ||
	     !ma_cache_enable_c ||
	     ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414 ;
  assign NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597 =
	     NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d596 ||
	     ff_core_request_D_OUT[74:73] == 2'd2 &&
	     ff_core_request_D_OUT[5:1] == 5'b00111 &&
	     (!rg_reservation_address[64] ||
	      !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) ;
  assign NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d647 =
	     x__h38803 || m_storebuffer_mav_core_lookup[66] ||
	     !ma_cache_enable_c ||
	     ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414 ||
	     ff_core_request_D_OUT[74:73] == 2'd2 &&
	     ff_core_request_D_OUT[5:1] == 5'b00111 &&
	     (!rg_reservation_address[64] ||
	      !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) ;
  assign NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d655 =
	     x__h38803 || m_storebuffer_mav_core_lookup[66] ||
	     ff_core_request_D_OUT[74:73] == 2'd2 &&
	     ff_core_request_D_OUT[5:1] == 5'b00111 &&
	     (!rg_reservation_address[64] ||
	      !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) ;
  assign NOT_rg_performing_replay_port0__read__3_4_AND__ETC___d1723 =
	     !rg_performing_replay && !rg_miss_handling && !rg_fence_stall &&
	     !m_storebuffer_mv_line_full &&
	     !m_storebuffer_mv_sb_full ;
  assign NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1011 =
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     lv_set_valid__h75581 == 4'd15 &&
	     (lv_set_dirty__h75582 == 4'd15 || lv_set_dirty__h75582 == 4'd0) ;
  assign NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414) &&
	     !fn_pmp_lookup___d407[7] &&
	     !ff_from_tlb_rv_port1__read[8] ;
  assign _0_OR_NOT_ff_core_request_first__2_BITS_74_TO_7_ETC___d610 =
	     (ff_core_request_D_OUT[74:73] != 2'd2 ||
	      ff_core_request_D_OUT[5:1] != 5'b00111 ||
	      rg_reservation_address[64] &&
	      IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) &&
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414) ||
	     x__h38897 != 2'd0 ;
  assign __duses1038 =
	     !rg_store_eviction && ff_core_request_EMPTY_N &&
	     rg_recent_req == m_storebuffer_mv_release_head[11:6] ;
  assign __duses412 =
	     (lv_set_valid__h75581 != 4'd15 ||
	      lv_set_dirty__h75582 == 4'd15) &&
	     v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d853 &&
	     v_reg_valid_2_9_BIT_m_storebuffer_mv_release_h_ETC___d854 ||
	     lv_set_dirty__h75582 != 4'd15 ;
  assign __duses420 =
	     __duses412 &&
	     (lv_set_valid__h75581 != 4'd15 ||
	      lv_set_dirty__h75582 != 4'd15 &&
	      lv_set_dirty__h75582 != 4'd0) ||
	     lv_set_dirty__h75582 == 4'd15 ||
	     lv_set_dirty__h75582 == 4'd0 ;
  assign __duses421 =
	     (v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d853 &&
	      (lv_set_valid__h75581 != 4'd15 ||
	       lv_set_dirty__h75582 == 4'd15) ||
	      lv_set_dirty__h75582 != 4'd15) &&
	     (lv_set_valid__h75581 != 4'd15 ||
	      lv_set_dirty__h75582 != 4'd15 && lv_set_dirty__h75582 != 4'd0) ;
  assign __duses437 =
	     v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd2 || __duses421 ||
	      lv_set_dirty__h75582 == 4'd15 ||
	      lv_set_dirty__h75582 == 4'd0) ;
  assign __duses444 =
	     v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd1 || __duses420) ||
	     __duses420 ;
  assign __duses445 =
	     v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd2 || __duses421 ||
	      lv_set_dirty__h75582 == 4'd15 ||
	      lv_set_dirty__h75582 == 4'd0) ;
  assign __duses453 =
	     v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd2 || __duses421 ||
	      lv_set_dirty__h75582 == 4'd15 ||
	      lv_set_dirty__h75582 == 4'd0) ;
  assign __duses461 =
	     v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd2 || __duses421 ||
	      lv_set_dirty__h75582 == 4'd15 ||
	      lv_set_dirty__h75582 == 4'd0) ;
  assign __duses471 =
	     v__h75586 == 2'd0 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd0 || lv_set_valid__h75581 == 4'd15) ||
	     lv_set_valid__h75581 == 4'd15 ;
  assign __duses481 =
	     v__h75586 == 2'd1 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd1 || lv_set_valid__h75581 == 4'd15) ||
	     lv_set_valid__h75581 == 4'd15 ;
  assign __duses491 =
	     v__h75586 == 2'd2 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd2 || lv_set_valid__h75581 == 4'd15) ||
	     lv_set_valid__h75581 == 4'd15 ;
  assign __duses501 =
	     v__h75586 == 2'd3 &&
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (v__h75586 == 2'd3 || lv_set_valid__h75581 == 4'd15) ||
	     lv_set_valid__h75581 == 4'd15 ;
  assign __duses509 =
	     (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	      rg_store_eviction) &&
	     (__duses421 || lv_set_dirty__h75582 == 4'd15 ||
	      lv_set_dirty__h75582 == 4'd0) ;
  assign _theResult_____1__h82252 =
	     { v__h78637, m_storebuffer_mv_release_head[11:6], 6'd0 } ;
  assign _theResult_____1_cause__h40255 =
	     (!ff_from_tlb_rv_port1__read[8] && fn_pmp_lookup___d407[7]) ?
	       fn_pmp_lookup___d407[6:0] :
	       lv_cause__h35831 ;
  assign _theResult_____1_cause__h99198 =
	     (rg_miss_meta[37:36] == 2'd0) ? 7'd5 : 7'd7 ;
  assign _theResult_____1_word__h99196 =
	     (rg_miss_meta[37:36] == 2'd2 &&
	      rg_miss_meta[107:103] == 5'b00111) ?
	       64'd0 :
	       _theResult_____2_word__h99189 ;
  assign _theResult_____2__h28945 = rg_fence_set + { 5'd0, rg_fence_way[3] } ;
  assign _theResult_____2_word__h99189 =
	     ff_mem_rd_resp_rv_port1__read[0] ?
	       rg_miss_meta[171:108] :
	       lv_response_word__h99183 ;
  assign _theResult____h123294 =
	     receive_core_req_put[76] ? 6'd0 : receive_core_req_put[88:83] ;
  assign b__h38560 =
	     IF_m_tag_v_tags_0_ram_double_0doutb_EQ_ff_fro_ETC__q6[0] &
	     v_reg_valid_0_7_BIT_ff_from_tlb_rv_port1__read_ETC___d370 ;
  assign b__h38572 =
	     m_tag_v_tags_1_rg_output_0_port1__read__12_EQ__ETC___d351 &
	     v_reg_valid_1_8_BIT_ff_from_tlb_rv_port1__read_ETC___d368 ;
  assign b__h38584 =
	     m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d350 &
	     v_reg_valid_2_9_BIT_ff_from_tlb_rv_port1__read_ETC___d366 ;
  assign block__h40279 =
	     m_storebuffer_mav_core_lookup[66] ?
	       m_storebuffer_mav_core_lookup[65:2] :
	       response_word__h37880 ;
  assign ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d666 =
	     ff_core_request_D_OUT[74:73] == 2'd2 &&
	     ff_core_request_D_OUT[5:1] == 5'b00111 &&
	     (!rg_reservation_address[64] ||
	      !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) ||
	     ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414 ;
  assign ff_core_response_ff_i_notFull__0_AND_ff_core_r_ETC___d1740 =
	     ff_core_response_ff_FULL_N && ff_core_request_FULL_N &&
	     !rg_fence_stall &&
	     !m_storebuffer_mv_line_full &&
	     !m_storebuffer_mv_sb_full ;
  assign ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414 =
	     ff_from_tlb_rv_port1__read[40:9] < 32'h80000000 ;
  assign ff_from_tlb_rv_port1__read__39_BIT_8_62_OR_NOT_ETC___d435 =
	     !fn_pmp_lookup___d407[7] && !ff_from_tlb_rv_port1__read[8] &&
	     ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414 &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     (x__h38803 || m_storebuffer_mav_core_lookup[66]) &&
	     x__h38897 == 2'd2 ;
  assign lv_address__h24743 = { v__h21368, rg_fence_set, 6'd0 } ;
  assign lv_cause__h35831 =
	     ff_from_tlb_rv_port1__read[8] ?
	       ff_from_tlb_rv_port1__read[7:1] :
	       ((ff_core_request_D_OUT[74:73] == 2'd0) ? 7'd5 : 7'd7) ;
  assign lv_cause__h94520 =
	     (m_iobuffer_mv_io_head[71:70] == 2'd0) ? 7'd5 : 7'd7 ;
  assign lv_hitmask__h37878 =
	     { m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d365,
	       b__h38584,
	       b__h38572,
	       b__h38560 } ;
  assign lv_hitvector__h36904 =
	     { m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d349,
	       m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d350,
	       m_tag_v_tags_1_rg_output_0_port1__read__12_EQ__ETC___d351,
	       IF_m_tag_v_tags_0_ram_double_0doutb_EQ_ff_fro_ETC__q6[0] } ;
  assign lv_response_word__h40245 =
	     (fn_pmp_lookup___d407[7] || ff_from_tlb_rv_port1__read[8] ||
	      !ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414) ?
	       ff_core_request_D_OUT[140:77] :
	       lv_response_word__h40260 ;
  assign lv_response_word__h40260 = x__h40299 | signmask__h40286 ;
  assign lv_response_word__h94594 =
	     ff_mem_io_resp_D_OUT[0] ?
	       m_iobuffer_mv_io_head[64:1] :
	       ((m_iobuffer_mv_io_head[71:70] == 2'd2) ?
		  rg_atomic_rd_data :
		  mem_response_data__h94535) ;
  assign lv_response_word__h99183 = x__h99268 | signmask__h99255 ;
  assign lv_set_dirty__h36893 =
	     { v_reg_dirty_3[ff_from_tlb_rv_port1__read[20:15]],
	       v_reg_dirty_2[ff_from_tlb_rv_port1__read[20:15]],
	       v_reg_dirty_1[ff_from_tlb_rv_port1__read[20:15]],
	       v_reg_dirty_0[ff_from_tlb_rv_port1__read[20:15]] } ;
  assign lv_set_dirty__h75582 =
	     { v_reg_dirty_3_3_BIT_m_storebuffer_mv_release_h_ETC___d860,
	       v_reg_dirty_2_2_BIT_m_storebuffer_mv_release_h_ETC___d861,
	       v_reg_dirty_1_1_BIT_m_storebuffer_mv_release_h_ETC___d862,
	       v_reg_dirty_0_0_BIT_m_storebuffer_mv_release_h_ETC___d863 } ;
  assign lv_set_dirty__h95975 =
	     { v_reg_dirty_3_3_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1428,
	       v_reg_dirty_2_2_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1429,
	       v_reg_dirty_1_1_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1430,
	       v_reg_dirty_0_0_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1431 } ;
  assign lv_set_valid__h36892 =
	     { v_reg_valid_3_0_BIT_ff_from_tlb_rv_port1__read_ETC___d364,
	       v_reg_valid_2_9_BIT_ff_from_tlb_rv_port1__read_ETC___d366,
	       v_reg_valid_1_8_BIT_ff_from_tlb_rv_port1__read_ETC___d368,
	       v_reg_valid_0_7_BIT_ff_from_tlb_rv_port1__read_ETC___d370 } ;
  assign lv_set_valid__h75581 =
	     { v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d853,
	       v_reg_valid_2_9_BIT_m_storebuffer_mv_release_h_ETC___d854,
	       v_reg_valid_1_8_BIT_m_storebuffer_mv_release_h_ETC___d855,
	       v_reg_valid_0_7_BIT_m_storebuffer_mv_release_h_ETC___d856 } ;
  assign lv_set_valid__h95974 =
	     { v_reg_valid_3_0_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1421,
	       v_reg_valid_2_9_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1422,
	       v_reg_valid_1_8_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1423,
	       v_reg_valid_0_7_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1424 } ;
  assign m_iobuffer_mv_io_head__154_BIT_0_171_OR_NOT_m__ETC___d1196 =
	     m_iobuffer_mv_io_head[0] ||
	     m_iobuffer_mv_io_head[71:70] != 2'd2 ||
	     rg_io_atomic_done ||
	     ff_mem_io_resp_D_OUT[0] ;
  assign m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754 =
	     m_iobuffer_mv_io_head[72] == ma_commit_io_currepoch ;
  assign m_iobuffermv_io_head_BITS_107_TO_76__q5 =
	     m_iobuffer_mv_io_head[107:76] ;
  assign m_storebuffer_RDY_ma_allocate_store__43_AND_m__ETC___d158 =
	     m_storebuffer_RDY_ma_allocate_store &&
	     m_storebuffer_RDY_ma_perform_atomic &&
	     m_storebuffer_RDY_ma_allocate_line &&
	     !ff_hold_request_rv[141] &&
	     !ff_ptw_response_rv[76] &&
	     ff_core_response_ff_FULL_N &&
	     ff_mem_rd_request_FULL_N ;
  assign m_storebuffer_mv_line_full__64_OR_m_storebuffe_ETC___d829 =
	     m_storebuffer_mv_line_full || m_storebuffer_mv_sb_full ||
	     rg_fence_stall ||
	     !ff_core_request_EMPTY_N ;
  assign m_storebuffer_mv_release_head__24_BIT_544_25_A_ETC___d833 =
	     m_storebuffer_mv_release_head[544] &&
	     m_storebuffer_mv_line_full__64_OR_m_storebuffe_ETC___d829 &&
	     !m_storebuffer_mv_line_empty &&
	     !rg_eviction_required ;
  assign m_tag_v_tags_1_rg_output_0_port1__read__12_EQ__ETC___d351 =
	     m_tag_v_tags_1_ram_double_0_doutb ==
	     ff_from_tlb_rv_port1__read[40:21] ;
  assign m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d350 =
	     m_tag_v_tags_2_ram_double_0_doutb ==
	     ff_from_tlb_rv_port1__read[40:21] ;
  assign m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d552 =
	     wayindex__h40303 == 2'd0 &&
	     NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     !m_storebuffer_mav_core_lookup[66] &&
	     x__h38803 ;
  assign m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d558 =
	     wayindex__h40303 == 2'd1 &&
	     NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     !m_storebuffer_mav_core_lookup[66] &&
	     x__h38803 ;
  assign m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d560 =
	     wayindex__h40303 == 2'd2 &&
	     NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     !m_storebuffer_mav_core_lookup[66] &&
	     x__h38803 ;
  assign m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d562 =
	     wayindex__h40303 == 2'd3 &&
	     NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     !m_storebuffer_mav_core_lookup[66] &&
	     x__h38803 ;
  assign m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d349 =
	     m_tag_v_tags_3_ram_double_0_doutb ==
	     ff_from_tlb_rv_port1__read[40:21] ;
  assign m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d365 =
	     m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d349 &
	     v_reg_valid_3_0_BIT_ff_from_tlb_rv_port1__read_ETC___d364 ;
  assign m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d674 =
	     lv_hitmask__h37878 == 4'd0 &&
	     !m_storebuffer_mav_core_lookup[66] &&
	     !fn_pmp_lookup___d407[7] &&
	     !ff_from_tlb_rv_port1__read[8] &&
	     ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414 ;
  assign m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675 =
	     m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d674 &&
	     (ff_core_request_D_OUT[74:73] != 2'd2 ||
	      ff_core_request_D_OUT[5:1] != 5'b00111 ||
	      rg_reservation_address[64] &&
	      IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) ;
  assign mem_response_data4535_BITS_31_TO_0__q4 =
	     mem_response_data__h94535[31:0] ;
  assign mem_response_data4537_BITS_15_TO_0__q2 =
	     mem_response_data__h94537[15:0] ;
  assign mem_response_data4537_BITS_31_TO_0__q3 =
	     mem_response_data__h94537[31:0] ;
  assign mem_response_data4537_BITS_7_TO_0__q1 =
	     mem_response_data__h94537[7:0] ;
  assign mem_response_data__h94537 = ff_mem_io_resp_D_OUT[64:1] >> x__h94650 ;
  assign op1___1__h95078 =
	     { {32{mem_response_data4535_BITS_31_TO_0__q4[31]}},
	       mem_response_data4535_BITS_31_TO_0__q4 } ;
  assign op1__h95020 =
	     m_iobuffer_mv_io_head[69] ?
	       mem_response_data__h94535 :
	       op1___1__h95078 ;
  assign op2___1__h95079 =
	     { {32{m_iobuffermv_io_head_BITS_107_TO_76__q5[31]}},
	       m_iobuffermv_io_head_BITS_107_TO_76__q5 } ;
  assign op2__h95021 =
	     m_iobuffer_mv_io_head[69] ?
	       m_iobuffer_mv_io_head[139:76] :
	       op2___1__h95079 ;
  assign phyaddr__h35828 = ff_from_tlb_rv_port1__read[40:9] ;
  assign pmp_access__h36111 =
	     (ff_core_request_D_OUT[74:73] == 2'd0) ?
	       ff_core_request_D_OUT[74:73] :
	       2'd1 ;
  assign rdata__h40211 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[5:1] == 5'b00111 &&
	      (!rg_reservation_address[64] ||
	       !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312)) ?
	       64'd1 :
	       IF_ff_core_request_first__2_BITS_74_TO_73_90_E_ETC___d544 ;
  assign rg_fence_stall_1_AND_ff_core_request_first__2__ETC___d40 =
	     rg_fence_stall && ff_core_request_D_OUT[76] &&
	     m_storebuffer_mv_line_empty &&
	     m_storebuffer_mv_sb_empty &&
	     m_iobuffer_mv_io_empty ;
  assign rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1408 =
	     (rg_first && rg_miss_meta[37:36] == 2'd0 ||
	      rg_miss_meta[37:36] == 2'd1 &&
	      ff_mem_rd_resp_rv_port1__read[1] ||
	      rg_first && rg_miss_meta[37:36] == 2'd2) &&
	     rg_miss_meta[172] ;
  assign rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1417 =
	     (rg_first && rg_miss_meta[37:36] == 2'd0 ||
	      rg_miss_meta[37:36] == 2'd1 &&
	      ff_mem_rd_resp_rv_port1__read[1] ||
	      rg_first && rg_miss_meta[37:36] == 2'd2) &&
	     !rg_miss_meta[172] ;
  assign rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1498 =
	     (rg_miss_meta[37:36] == 2'd0 || rg_fill_err ||
	      ff_mem_rd_resp_rv_port1__read[0]) &&
	     x__h114847 & y__h114848 ;
  assign rg_miss_meta_316_BITS_37_TO_36_317_EQ_0_318_OR_ETC___d1501 =
	     (rg_miss_meta[37:36] == 2'd0 || rg_fill_err ||
	      ff_mem_rd_resp_rv_port1__read[0]) &&
	     lv_set_valid__h95974 == 4'd15 &&
	     (lv_set_dirty__h95975 == 4'd15 || lv_set_dirty__h95975 == 4'd0) ;
  assign rg_recent_req_read__20_EQ_m_storebuffer_mv_rel_ETC___d1008 =
	     (rg_recent_req == m_storebuffer_mv_release_head[11:6] ||
	      rg_store_eviction) &&
	     ff_core_request_EMPTY_N ;
  assign rg_recent_req_read__20_EQ_rg_fill_set_read__62_ETC___d823 =
	     (rg_recent_req == rg_fill_set || rg_fill_eviction) &&
	     ff_core_request_EMPTY_N ;
  assign rotator__h120747 = { rg_block_count[6:0], rg_block_count[7] } ;
  assign shiftamt__h40281 = { ff_from_tlb_rv_port1__read[11:9], 3'd0 } ;
  assign shiftamt__h99250 = { rg_miss_meta[6:4], 3'd0 } ;
  assign signmask__h40286 = x__h45031 & y__h45032 ;
  assign signmask__h99255 = x__h99389 & y__h99390 ;
  assign v__h75586 =
	     (lv_set_valid__h75581 == 4'd15 &&
	      (lv_set_dirty__h75582 == 4'd15 ||
	       lv_set_dirty__h75582 == 4'd0)) ?
	       SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 :
	       IF_v_reg_valid_3_0_BIT_m_storebuffer_mv_releas_ETC___d946 ;
  assign v__h95979 =
	     (lv_set_valid__h95974 == 4'd15 &&
	      (lv_set_dirty__h95975 == 4'd15 ||
	       lv_set_dirty__h95975 == 4'd0)) ?
	       SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 :
	       IF_v_reg_valid_3_0_BIT_rg_miss_meta_316_BITS_1_ETC___d1449 ;
  assign v_reg_dirty_0_0_BIT_m_storebuffer_mv_release_h_ETC___d863 =
	     v_reg_dirty_0[m_storebuffer_mv_release_head[11:6]] ;
  assign v_reg_dirty_0_0_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1431 =
	     v_reg_dirty_0[rg_miss_meta[15:10]] ;
  assign v_reg_dirty_1_1_BIT_m_storebuffer_mv_release_h_ETC___d862 =
	     v_reg_dirty_1[m_storebuffer_mv_release_head[11:6]] ;
  assign v_reg_dirty_1_1_BIT_rg_fence_set_9_3_AND_v_reg_ETC___d99 =
	     { v_reg_dirty_1[rg_fence_set] & v_reg_valid_1[rg_fence_set],
	       v_reg_dirty_0[rg_fence_set] & v_reg_valid_0[rg_fence_set] } ;
  assign v_reg_dirty_1_1_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1430 =
	     v_reg_dirty_1[rg_miss_meta[15:10]] ;
  assign v_reg_dirty_2_2_BIT_m_storebuffer_mv_release_h_ETC___d861 =
	     v_reg_dirty_2[m_storebuffer_mv_release_head[11:6]] ;
  assign v_reg_dirty_2_2_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1429 =
	     v_reg_dirty_2[rg_miss_meta[15:10]] ;
  assign v_reg_dirty_3_3_BIT_m_storebuffer_mv_release_h_ETC___d860 =
	     v_reg_dirty_3[m_storebuffer_mv_release_head[11:6]] ;
  assign v_reg_dirty_3_3_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1428 =
	     v_reg_dirty_3[rg_miss_meta[15:10]] ;
  assign v_reg_valid_0_7_BIT_ff_from_tlb_rv_port1__read_ETC___d370 =
	     v_reg_valid_0[ff_from_tlb_rv_port1__read[20:15]] ;
  assign v_reg_valid_0_7_BIT_m_storebuffer_mv_release_h_ETC___d856 =
	     v_reg_valid_0[m_storebuffer_mv_release_head[11:6]] ;
  assign v_reg_valid_0_7_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1424 =
	     v_reg_valid_0[rg_miss_meta[15:10]] ;
  assign v_reg_valid_1_8_BIT_ff_from_tlb_rv_port1__read_ETC___d368 =
	     v_reg_valid_1[ff_from_tlb_rv_port1__read[20:15]] ;
  assign v_reg_valid_1_8_BIT_m_storebuffer_mv_release_h_ETC___d855 =
	     v_reg_valid_1[m_storebuffer_mv_release_head[11:6]] ;
  assign v_reg_valid_1_8_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1423 =
	     v_reg_valid_1[rg_miss_meta[15:10]] ;
  assign v_reg_valid_2_9_BIT_ff_from_tlb_rv_port1__read_ETC___d366 =
	     v_reg_valid_2[ff_from_tlb_rv_port1__read[20:15]] ;
  assign v_reg_valid_2_9_BIT_m_storebuffer_mv_release_h_ETC___d854 =
	     v_reg_valid_2[m_storebuffer_mv_release_head[11:6]] ;
  assign v_reg_valid_2_9_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1422 =
	     v_reg_valid_2[rg_miss_meta[15:10]] ;
  assign v_reg_valid_3_0_BIT_ff_from_tlb_rv_port1__read_ETC___d364 =
	     v_reg_valid_3[ff_from_tlb_rv_port1__read[20:15]] ;
  assign v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d853 =
	     v_reg_valid_3[m_storebuffer_mv_release_head[11:6]] ;
  assign v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 =
	     x__h86137 & y__h86138 ;
  assign v_reg_valid_3_0_BIT_rg_miss_meta_316_BITS_15_T_ETC___d1421 =
	     v_reg_valid_3[rg_miss_meta[15:10]] ;
  assign wayindex__h40303 =
	     { b__h38584 ||
	       m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d365,
	       b__h38572 ||
	       m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d365 } ;
  assign word__h40282 = block__h40279 >> shiftamt__h40281 ;
  assign word__h99251 =
	     ff_mem_rd_resp_rv_port1__read[65:2] >> shiftamt__h99250 ;
  assign x1__h65298 =
	     { v_fill_line_7,
	       v_fill_line_6,
	       v_fill_line_5,
	       v_fill_line_4,
	       v_fill_line_3,
	       v_fill_line_2,
	       v_fill_line_1,
	       v_fill_line_0 } ;
  assign x1_avValue_fst_access__h38902 =
	     (rg_reservation_address[64] &&
	      IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) ?
	       2'd2 :
	       2'd0 ;
  assign x1_avValue_fst_access__h38910 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[5:1] == 5'b00111) ?
	       x1_avValue_fst_access__h38902 :
	       ff_core_request_D_OUT[74:73] ;
  assign x__h107912 =
	     { rg_block_count[4] || rg_block_count[5] || rg_block_count[6] ||
	       rg_block_count[7],
	       rg_block_count[2] || rg_block_count[3] || rg_block_count[6] ||
	       rg_block_count[7],
	       rg_block_count[1] || rg_block_count[3] || rg_block_count[5] ||
	       rg_block_count[7] } ;
  assign x__h114847 = lv_set_valid__h95974[v__h95979] ;
  assign x__h24767 = x__h24778 & rg_fence_way ;
  assign x__h24778 =
	     { v_reg_dirty_3[rg_fence_set] & v_reg_valid_3[rg_fence_set],
	       v_reg_dirty_2[rg_fence_set] & v_reg_valid_2[rg_fence_set],
	       v_reg_dirty_1_1_BIT_rg_fence_set_9_3_AND_v_reg_ETC___d99 } ;
  assign x__h25555 =
	     { rg_fence_way[2] || rg_fence_way[3],
	       rg_fence_way[1] || rg_fence_way[3] } ;
  assign x__h34409 = { rg_fence_way[2:0], rg_fence_way[3] } ;
  assign x__h38564 = x__h38576 + y__h38577 ;
  assign x__h38576 = x__h38588 + y__h38589 ;
  assign x__h38588 =
	     { 2'd0,
	       m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d365 } ;
  assign x__h38803 = lv_hitmask__h37878 != 4'd0 ;
  assign x__h38897 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[5:1] == 5'b00101) ?
	       2'd0 :
	       x1_avValue_fst_access__h38910 ;
  assign x__h40299 = word__h40282 & mask__h40285 ;
  assign x__h56027 = 64'd1 << ff_from_tlb_rv_port1__read[20:15] ;
  assign x__h67768 = 64'd1 << rg_fill_set ;
  assign x__h71536 =
	     { rg_fill_way == 2'd2 || rg_fill_way == 2'd3,
	       rg_fill_way == 2'd1 || rg_fill_way == 2'd3 } ;
  assign x__h78647 =
	     { v__h75586 == 2'd2 || v__h75586 == 2'd3,
	       v__h75586 == 2'd1 || v__h75586 == 2'd3 } ;
  assign x__h86137 = lv_set_valid__h75581[v__h75586] ;
  assign x__h86274 = 64'd1 << m_storebuffer_mv_release_head[11:6] ;
  assign x__h94650 = { m_iobuffer_mv_io_head[142:140], 3'b0 } ;
  assign x__h99268 = word__h99251 & mask__h99254 ;
  assign x_address__h60353 = { ff_from_tlb_rv_port1__read[40:12], 3'd0 } ;
  assign y__h104425 = ~rg_miss_meta[3] ;
  assign y__h114848 = lv_set_dirty__h95975[v__h95979] ;
  assign y__h38565 = { 2'd0, b__h38560 } ;
  assign y__h38577 = { 2'd0, b__h38572 } ;
  assign y__h38589 = { 2'd0, b__h38584 } ;
  assign y__h45032 =
	     {64{IF_ff_core_request_first__2_BITS_71_TO_70_26_E_ETC___d508}} ;
  assign y__h50067 = ~ff_core_request_D_OUT[72] ;
  assign y__h56042 = ~x__h56027 ;
  assign y__h67783 = ~x__h67768 ;
  assign y__h86138 = lv_set_dirty__h75582[v__h75586] ;
  assign y__h99390 =
	     {64{IF_rg_miss_meta_316_BITS_2_TO_1_343_EQ_0b0_344_ETC___d1361}} ;
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: mask__h40285 = 64'h00000000000000FF;
      2'b01: mask__h40285 = 64'h000000000000FFFF;
      2'b10: mask__h40285 = 64'h00000000FFFFFFFF;
      2'd3: mask__h40285 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: x__h45031 = 64'hFFFFFFFFFFFFFF00;
      2'b01: x__h45031 = 64'hFFFFFFFFFFFF0000;
      2'b10: x__h45031 = 64'hFFFFFFFF00000000;
      2'd3: x__h45031 = 64'd0;
    endcase
  end
  always@(rg_fill_way or
	  v_reg_valid_0 or v_reg_valid_1 or v_reg_valid_2 or v_reg_valid_3)
  begin
    case (rg_fill_way)
      2'd0: w__h67373 = v_reg_valid_0;
      2'd1: w__h67373 = v_reg_valid_1;
      2'd2: w__h67373 = v_reg_valid_2;
      2'd3: w__h67373 = v_reg_valid_3;
    endcase
  end
  always@(rg_fill_way or
	  v_reg_dirty_0 or v_reg_dirty_1 or v_reg_dirty_2 or v_reg_dirty_3)
  begin
    case (rg_fill_way)
      2'd0: w__h67646 = v_reg_dirty_0;
      2'd1: w__h67646 = v_reg_dirty_1;
      2'd2: w__h67646 = v_reg_dirty_2;
      2'd3: w__h67646 = v_reg_dirty_3;
    endcase
  end
  always@(rg_miss_meta)
  begin
    case (rg_miss_meta[2:1])
      2'b0: mask__h99254 = 64'h00000000000000FF;
      2'b01: mask__h99254 = 64'h000000000000FFFF;
      2'b10: mask__h99254 = 64'h00000000FFFFFFFF;
      2'd3: mask__h99254 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(rg_miss_meta)
  begin
    case (rg_miss_meta[2:1])
      2'b0: x__h99389 = 64'hFFFFFFFFFFFFFF00;
      2'b01: x__h99389 = 64'hFFFFFFFFFFFF0000;
      2'b10: x__h99389 = 64'hFFFFFFFF00000000;
      2'd3: x__h99389 = 64'd0;
    endcase
  end
  always@(m_iobuffer_mv_io_head or
	  mem_response_data__h94537 or
	  mem_response_data4537_BITS_7_TO_0__q1 or
	  mem_response_data4537_BITS_15_TO_0__q2 or
	  mem_response_data4537_BITS_31_TO_0__q3)
  begin
    case (m_iobuffer_mv_io_head[75:73])
      3'b0:
	  mem_response_data__h94535 =
	      { {56{mem_response_data4537_BITS_7_TO_0__q1[7]}},
		mem_response_data4537_BITS_7_TO_0__q1 };
      3'b001:
	  mem_response_data__h94535 =
	      { {48{mem_response_data4537_BITS_15_TO_0__q2[15]}},
		mem_response_data4537_BITS_15_TO_0__q2 };
      3'b010:
	  mem_response_data__h94535 =
	      { {32{mem_response_data4537_BITS_31_TO_0__q3[31]}},
		mem_response_data4537_BITS_31_TO_0__q3 };
      3'b100:
	  mem_response_data__h94535 =
	      { 56'd0, mem_response_data__h94537[7:0] };
      3'b101:
	  mem_response_data__h94535 =
	      { 48'd0, mem_response_data__h94537[15:0] };
      3'b110:
	  mem_response_data__h94535 =
	      { 32'd0, mem_response_data__h94537[31:0] };
      default: mem_response_data__h94535 = mem_response_data__h94537;
    endcase
  end
  always@(x__h25555 or
	  m_tag_v_tags_0_ram_double_0_doutb or
	  m_tag_v_tags_1_ram_double_0_doutb or
	  m_tag_v_tags_2_ram_double_0_doutb or
	  m_tag_v_tags_3_ram_double_0_doutb)
  begin
    case (x__h25555)
      2'd0: v__h21368 = m_tag_v_tags_0_ram_double_0_doutb;
      2'd1: v__h21368 = m_tag_v_tags_1_ram_double_0_doutb;
      2'd2: v__h21368 = m_tag_v_tags_2_ram_double_0_doutb;
      2'd3: v__h21368 = m_tag_v_tags_3_ram_double_0_doutb;
    endcase
  end
  always@(x__h25555 or
	  m_data_v_data_0_ram_double_0_doutb or
	  m_data_v_data_1_ram_double_0_doutb or
	  m_data_v_data_2_ram_double_0_doutb or
	  m_data_v_data_3_ram_double_0_doutb)
  begin
    case (x__h25555)
      2'd0: x__h29001 = m_data_v_data_0_ram_double_0_doutb;
      2'd1: x__h29001 = m_data_v_data_1_ram_double_0_doutb;
      2'd2: x__h29001 = m_data_v_data_2_ram_double_0_doutb;
      2'd3: x__h29001 = m_data_v_data_3_ram_double_0_doutb;
    endcase
  end
  always@(x__h25555 or
	  v_reg_valid_0 or v_reg_valid_1 or v_reg_valid_2 or v_reg_valid_3)
  begin
    case (x__h25555)
      2'd0: bs__h15653 = v_reg_valid_0;
      2'd1: bs__h15653 = v_reg_valid_1;
      2'd2: bs__h15653 = v_reg_valid_2;
      2'd3: bs__h15653 = v_reg_valid_3;
    endcase
  end
  always@(x__h25555 or
	  v_reg_dirty_0 or v_reg_dirty_1 or v_reg_dirty_2 or v_reg_dirty_3)
  begin
    case (x__h25555)
      2'd0: bs__h18506 = v_reg_dirty_0;
      2'd1: bs__h18506 = v_reg_dirty_1;
      2'd2: bs__h18506 = v_reg_dirty_2;
      2'd3: bs__h18506 = v_reg_dirty_3;
    endcase
  end
  always@(x__h71536 or
	  m_tag_v_tags_0_ram_double_0_doutb or
	  m_tag_v_tags_1_ram_double_0_doutb or
	  m_tag_v_tags_2_ram_double_0_doutb or
	  m_tag_v_tags_3_ram_double_0_doutb)
  begin
    case (x__h71536)
      2'd0: v__h67850 = m_tag_v_tags_0_ram_double_0_doutb;
      2'd1: v__h67850 = m_tag_v_tags_1_ram_double_0_doutb;
      2'd2: v__h67850 = m_tag_v_tags_2_ram_double_0_doutb;
      2'd3: v__h67850 = m_tag_v_tags_3_ram_double_0_doutb;
    endcase
  end
  always@(m_storebuffer_mv_release_head or
	  replacement_v_count_0 or
	  replacement_v_count_1 or
	  replacement_v_count_2 or
	  replacement_v_count_3 or
	  replacement_v_count_4 or
	  replacement_v_count_5 or
	  replacement_v_count_6 or
	  replacement_v_count_7 or
	  replacement_v_count_8 or
	  replacement_v_count_9 or
	  replacement_v_count_10 or
	  replacement_v_count_11 or
	  replacement_v_count_12 or
	  replacement_v_count_13 or
	  replacement_v_count_14 or
	  replacement_v_count_15 or
	  replacement_v_count_16 or
	  replacement_v_count_17 or
	  replacement_v_count_18 or
	  replacement_v_count_19 or
	  replacement_v_count_20 or
	  replacement_v_count_21 or
	  replacement_v_count_22 or
	  replacement_v_count_23 or
	  replacement_v_count_24 or
	  replacement_v_count_25 or
	  replacement_v_count_26 or
	  replacement_v_count_27 or
	  replacement_v_count_28 or
	  replacement_v_count_29 or
	  replacement_v_count_30 or
	  replacement_v_count_31 or
	  replacement_v_count_32 or
	  replacement_v_count_33 or
	  replacement_v_count_34 or
	  replacement_v_count_35 or
	  replacement_v_count_36 or
	  replacement_v_count_37 or
	  replacement_v_count_38 or
	  replacement_v_count_39 or
	  replacement_v_count_40 or
	  replacement_v_count_41 or
	  replacement_v_count_42 or
	  replacement_v_count_43 or
	  replacement_v_count_44 or
	  replacement_v_count_45 or
	  replacement_v_count_46 or
	  replacement_v_count_47 or
	  replacement_v_count_48 or
	  replacement_v_count_49 or
	  replacement_v_count_50 or
	  replacement_v_count_51 or
	  replacement_v_count_52 or
	  replacement_v_count_53 or
	  replacement_v_count_54 or
	  replacement_v_count_55 or
	  replacement_v_count_56 or
	  replacement_v_count_57 or
	  replacement_v_count_58 or
	  replacement_v_count_59 or
	  replacement_v_count_60 or
	  replacement_v_count_61 or
	  replacement_v_count_62 or replacement_v_count_63)
  begin
    case (m_storebuffer_mv_release_head[11:6])
      6'd0:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_0;
      6'd1:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_1;
      6'd2:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_2;
      6'd3:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_3;
      6'd4:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_4;
      6'd5:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_5;
      6'd6:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_6;
      6'd7:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_7;
      6'd8:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_8;
      6'd9:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_9;
      6'd10:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_10;
      6'd11:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_11;
      6'd12:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_12;
      6'd13:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_13;
      6'd14:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_14;
      6'd15:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_15;
      6'd16:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_16;
      6'd17:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_17;
      6'd18:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_18;
      6'd19:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_19;
      6'd20:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_20;
      6'd21:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_21;
      6'd22:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_22;
      6'd23:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_23;
      6'd24:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_24;
      6'd25:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_25;
      6'd26:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_26;
      6'd27:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_27;
      6'd28:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_28;
      6'd29:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_29;
      6'd30:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_30;
      6'd31:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_31;
      6'd32:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_32;
      6'd33:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_33;
      6'd34:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_34;
      6'd35:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_35;
      6'd36:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_36;
      6'd37:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_37;
      6'd38:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_38;
      6'd39:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_39;
      6'd40:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_40;
      6'd41:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_41;
      6'd42:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_42;
      6'd43:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_43;
      6'd44:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_44;
      6'd45:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_45;
      6'd46:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_46;
      6'd47:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_47;
      6'd48:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_48;
      6'd49:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_49;
      6'd50:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_50;
      6'd51:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_51;
      6'd52:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_52;
      6'd53:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_53;
      6'd54:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_54;
      6'd55:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_55;
      6'd56:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_56;
      6'd57:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_57;
      6'd58:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_58;
      6'd59:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_59;
      6'd60:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_60;
      6'd61:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_61;
      6'd62:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_62;
      6'd63:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d935 =
	      replacement_v_count_63;
    endcase
  end
  always@(v__h75586 or
	  v_reg_valid_0 or v_reg_valid_1 or v_reg_valid_2 or v_reg_valid_3)
  begin
    case (v__h75586)
      2'd0: w__h86272 = v_reg_valid_0;
      2'd1: w__h86272 = v_reg_valid_1;
      2'd2: w__h86272 = v_reg_valid_2;
      2'd3: w__h86272 = v_reg_valid_3;
    endcase
  end
  always@(v__h75586 or
	  v_reg_dirty_0 or v_reg_dirty_1 or v_reg_dirty_2 or v_reg_dirty_3)
  begin
    case (v__h75586)
      2'd0: w__h86637 = v_reg_dirty_0;
      2'd1: w__h86637 = v_reg_dirty_1;
      2'd2: w__h86637 = v_reg_dirty_2;
      2'd3: w__h86637 = v_reg_dirty_3;
    endcase
  end
  always@(x__h78647 or
	  m_tag_v_tags_0_ram_double_0_doutb or
	  m_tag_v_tags_1_ram_double_0_doutb or
	  m_tag_v_tags_2_ram_double_0_doutb or
	  m_tag_v_tags_3_ram_double_0_doutb)
  begin
    case (x__h78647)
      2'd0: v__h78637 = m_tag_v_tags_0_ram_double_0_doutb;
      2'd1: v__h78637 = m_tag_v_tags_1_ram_double_0_doutb;
      2'd2: v__h78637 = m_tag_v_tags_2_ram_double_0_doutb;
      2'd3: v__h78637 = m_tag_v_tags_3_ram_double_0_doutb;
    endcase
  end
  always@(x__h78647 or
	  m_data_v_data_0_ram_double_0_doutb or
	  m_data_v_data_1_ram_double_0_doutb or
	  m_data_v_data_2_ram_double_0_doutb or
	  m_data_v_data_3_ram_double_0_doutb)
  begin
    case (x__h78647)
      2'd0: lv_line__h78633 = m_data_v_data_0_ram_double_0_doutb;
      2'd1: lv_line__h78633 = m_data_v_data_1_ram_double_0_doutb;
      2'd2: lv_line__h78633 = m_data_v_data_2_ram_double_0_doutb;
      2'd3: lv_line__h78633 = m_data_v_data_3_ram_double_0_doutb;
    endcase
  end
  always@(m_iobuffer_mv_io_head or
	  op1__h95020 or
	  op2__h95021 or
	  IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1259 or
	  IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1254)
  begin
    case (m_iobuffer_mv_io_head[68:65])
      4'b0: _new_store__h94542 = op1__h95020 + op2__h95021;
      4'b0010: _new_store__h94542 = op1__h95020 ^ op2__h95021;
      4'b0011: _new_store__h94542 = op2__h95021;
      4'b0100: _new_store__h94542 = op1__h95020 | op2__h95021;
      4'b0110: _new_store__h94542 = op1__h95020 & op2__h95021;
      4'b1000:
	  _new_store__h94542 =
	      IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1259 ?
		op1__h95020 :
		op2__h95021;
      4'b1010:
	  _new_store__h94542 =
	      IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1259 ?
		op2__h95021 :
		op1__h95020;
      4'b1100:
	  _new_store__h94542 =
	      IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1254 ?
		op1__h95020 :
		op2__h95021;
      4'b1110:
	  _new_store__h94542 =
	      IF_m_iobuffer_mv_io_head__154_BIT_69_238_THEN__ETC___d1254 ?
		op2__h95021 :
		op1__h95020;
      default: _new_store__h94542 = op1__h95020;
    endcase
  end
  always@(rg_miss_meta or
	  replacement_v_count_0 or
	  replacement_v_count_1 or
	  replacement_v_count_2 or
	  replacement_v_count_3 or
	  replacement_v_count_4 or
	  replacement_v_count_5 or
	  replacement_v_count_6 or
	  replacement_v_count_7 or
	  replacement_v_count_8 or
	  replacement_v_count_9 or
	  replacement_v_count_10 or
	  replacement_v_count_11 or
	  replacement_v_count_12 or
	  replacement_v_count_13 or
	  replacement_v_count_14 or
	  replacement_v_count_15 or
	  replacement_v_count_16 or
	  replacement_v_count_17 or
	  replacement_v_count_18 or
	  replacement_v_count_19 or
	  replacement_v_count_20 or
	  replacement_v_count_21 or
	  replacement_v_count_22 or
	  replacement_v_count_23 or
	  replacement_v_count_24 or
	  replacement_v_count_25 or
	  replacement_v_count_26 or
	  replacement_v_count_27 or
	  replacement_v_count_28 or
	  replacement_v_count_29 or
	  replacement_v_count_30 or
	  replacement_v_count_31 or
	  replacement_v_count_32 or
	  replacement_v_count_33 or
	  replacement_v_count_34 or
	  replacement_v_count_35 or
	  replacement_v_count_36 or
	  replacement_v_count_37 or
	  replacement_v_count_38 or
	  replacement_v_count_39 or
	  replacement_v_count_40 or
	  replacement_v_count_41 or
	  replacement_v_count_42 or
	  replacement_v_count_43 or
	  replacement_v_count_44 or
	  replacement_v_count_45 or
	  replacement_v_count_46 or
	  replacement_v_count_47 or
	  replacement_v_count_48 or
	  replacement_v_count_49 or
	  replacement_v_count_50 or
	  replacement_v_count_51 or
	  replacement_v_count_52 or
	  replacement_v_count_53 or
	  replacement_v_count_54 or
	  replacement_v_count_55 or
	  replacement_v_count_56 or
	  replacement_v_count_57 or
	  replacement_v_count_58 or
	  replacement_v_count_59 or
	  replacement_v_count_60 or
	  replacement_v_count_61 or
	  replacement_v_count_62 or replacement_v_count_63)
  begin
    case (rg_miss_meta[15:10])
      6'd0:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_0;
      6'd1:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_1;
      6'd2:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_2;
      6'd3:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_3;
      6'd4:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_4;
      6'd5:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_5;
      6'd6:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_6;
      6'd7:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_7;
      6'd8:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_8;
      6'd9:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_9;
      6'd10:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_10;
      6'd11:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_11;
      6'd12:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_12;
      6'd13:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_13;
      6'd14:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_14;
      6'd15:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_15;
      6'd16:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_16;
      6'd17:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_17;
      6'd18:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_18;
      6'd19:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_19;
      6'd20:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_20;
      6'd21:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_21;
      6'd22:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_22;
      6'd23:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_23;
      6'd24:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_24;
      6'd25:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_25;
      6'd26:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_26;
      6'd27:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_27;
      6'd28:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_28;
      6'd29:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_29;
      6'd30:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_30;
      6'd31:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_31;
      6'd32:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_32;
      6'd33:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_33;
      6'd34:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_34;
      6'd35:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_35;
      6'd36:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_36;
      6'd37:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_37;
      6'd38:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_38;
      6'd39:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_39;
      6'd40:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_40;
      6'd41:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_41;
      6'd42:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_42;
      6'd43:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_43;
      6'd44:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_44;
      6'd45:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_45;
      6'd46:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_46;
      6'd47:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_47;
      6'd48:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_48;
      6'd49:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_49;
      6'd50:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_50;
      6'd51:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_51;
      6'd52:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_52;
      6'd53:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_53;
      6'd54:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_54;
      6'd55:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_55;
      6'd56:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_56;
      6'd57:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_57;
      6'd58:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_58;
      6'd59:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_59;
      6'd60:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_60;
      6'd61:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_61;
      6'd62:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_62;
      6'd63:
	  SEL_ARR_replacement_v_count_0_70_replacement_v_ETC___d1438 =
	      replacement_v_count_63;
    endcase
  end
  always@(rg_miss_meta or word__h99251)
  begin
    case (rg_miss_meta[2:1])
      2'b0: lv_sign__h99252 = word__h99251[7];
      2'b01: lv_sign__h99252 = word__h99251[15];
      default: lv_sign__h99252 = word__h99251[31];
    endcase
  end
  always@(wayindex__h40303 or
	  v_reg_valid_0 or v_reg_valid_1 or v_reg_valid_2 or v_reg_valid_3)
  begin
    case (wayindex__h40303)
      2'd0: w__h56025 = v_reg_valid_0;
      2'd1: w__h56025 = v_reg_valid_1;
      2'd2: w__h56025 = v_reg_valid_2;
      2'd3: w__h56025 = v_reg_valid_3;
    endcase
  end
  always@(wayindex__h40303 or
	  v_reg_dirty_0 or v_reg_dirty_1 or v_reg_dirty_2 or v_reg_dirty_3)
  begin
    case (wayindex__h40303)
      2'd0: w__h58978 = v_reg_dirty_0;
      2'd1: w__h58978 = v_reg_dirty_1;
      2'd2: w__h58978 = v_reg_dirty_2;
      2'd3: w__h58978 = v_reg_dirty_3;
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or m_data_v_data_0_ram_double_0_doutb)
  begin
    case (ff_from_tlb_rv_port1__read[14:12])
      3'd0:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 =
	      m_data_v_data_0_ram_double_0_doutb[63:0];
      3'd1:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 =
	      m_data_v_data_0_ram_double_0_doutb[127:64];
      3'd2:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 =
	      m_data_v_data_0_ram_double_0_doutb[191:128];
      3'd3:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 =
	      m_data_v_data_0_ram_double_0_doutb[255:192];
      3'd4:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 =
	      m_data_v_data_0_ram_double_0_doutb[319:256];
      3'd5:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 =
	      m_data_v_data_0_ram_double_0_doutb[383:320];
      3'd6:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 =
	      m_data_v_data_0_ram_double_0_doutb[447:384];
      3'd7:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 =
	      m_data_v_data_0_ram_double_0_doutb[511:448];
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or m_data_v_data_1_ram_double_0_doutb)
  begin
    case (ff_from_tlb_rv_port1__read[14:12])
      3'd0:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 =
	      m_data_v_data_1_ram_double_0_doutb[63:0];
      3'd1:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 =
	      m_data_v_data_1_ram_double_0_doutb[127:64];
      3'd2:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 =
	      m_data_v_data_1_ram_double_0_doutb[191:128];
      3'd3:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 =
	      m_data_v_data_1_ram_double_0_doutb[255:192];
      3'd4:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 =
	      m_data_v_data_1_ram_double_0_doutb[319:256];
      3'd5:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 =
	      m_data_v_data_1_ram_double_0_doutb[383:320];
      3'd6:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 =
	      m_data_v_data_1_ram_double_0_doutb[447:384];
      3'd7:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 =
	      m_data_v_data_1_ram_double_0_doutb[511:448];
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or m_data_v_data_2_ram_double_0_doutb)
  begin
    case (ff_from_tlb_rv_port1__read[14:12])
      3'd0:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 =
	      m_data_v_data_2_ram_double_0_doutb[63:0];
      3'd1:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 =
	      m_data_v_data_2_ram_double_0_doutb[127:64];
      3'd2:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 =
	      m_data_v_data_2_ram_double_0_doutb[191:128];
      3'd3:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 =
	      m_data_v_data_2_ram_double_0_doutb[255:192];
      3'd4:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 =
	      m_data_v_data_2_ram_double_0_doutb[319:256];
      3'd5:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 =
	      m_data_v_data_2_ram_double_0_doutb[383:320];
      3'd6:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 =
	      m_data_v_data_2_ram_double_0_doutb[447:384];
      3'd7:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 =
	      m_data_v_data_2_ram_double_0_doutb[511:448];
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or m_data_v_data_3_ram_double_0_doutb)
  begin
    case (ff_from_tlb_rv_port1__read[14:12])
      3'd0:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10 =
	      m_data_v_data_3_ram_double_0_doutb[63:0];
      3'd1:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10 =
	      m_data_v_data_3_ram_double_0_doutb[127:64];
      3'd2:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10 =
	      m_data_v_data_3_ram_double_0_doutb[191:128];
      3'd3:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10 =
	      m_data_v_data_3_ram_double_0_doutb[255:192];
      3'd4:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10 =
	      m_data_v_data_3_ram_double_0_doutb[319:256];
      3'd5:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10 =
	      m_data_v_data_3_ram_double_0_doutb[383:320];
      3'd6:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10 =
	      m_data_v_data_3_ram_double_0_doutb[447:384];
      3'd7:
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10 =
	      m_data_v_data_3_ram_double_0_doutb[511:448];
    endcase
  end
  always@(wayindex__h40303 or
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7 or
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8 or
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9 or
	  CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10)
  begin
    case (wayindex__h40303)
      2'd0:
	  response_word__h37880 =
	      CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q7;
      2'd1:
	  response_word__h37880 =
	      CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q8;
      2'd2:
	  response_word__h37880 =
	      CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q9;
      2'd3:
	  response_word__h37880 =
	      CASE_ff_from_tlb_rvport1__read_BITS_14_TO_12__ETC__q10;
    endcase
  end
  always@(ff_core_request_D_OUT or word__h40282)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: lv_sign__h40283 = word__h40282[7];
      2'b01: lv_sign__h40283 = word__h40282[15];
      default: lv_sign__h40283 = word__h40282[31];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      41'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_mem_rd_resp_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_mem_wr_resp_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	m_data_v_data_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	m_data_v_data_0_rg_read_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_data_v_data_0_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	m_data_v_data_0_rg_write_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_data_v_data_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	m_data_v_data_1_rg_read_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_data_v_data_1_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	m_data_v_data_1_rg_write_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_data_v_data_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	m_data_v_data_2_rg_read_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_data_v_data_2_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	m_data_v_data_2_rg_write_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_data_v_data_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	m_data_v_data_3_rg_read_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_data_v_data_3_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	m_data_v_data_3_rg_write_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_tag_v_tags_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	m_tag_v_tags_0_rg_read_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_tag_v_tags_0_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	m_tag_v_tags_0_rg_write_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_tag_v_tags_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	m_tag_v_tags_1_rg_read_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_tag_v_tags_1_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	m_tag_v_tags_1_rg_write_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_tag_v_tags_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	m_tag_v_tags_2_rg_read_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_tag_v_tags_2_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	m_tag_v_tags_2_rg_write_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_tag_v_tags_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	m_tag_v_tags_3_rg_read_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	m_tag_v_tags_3_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	m_tag_v_tags_3_rg_write_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_atomic_rd_data <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_block_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_core_io_response <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_evict_addr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_eviction_required <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fill_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fill_eviction <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fill_release <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fill_set <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_fill_tag <= `BSV_ASSIGNMENT_DELAY 20'd0;
	rg_fill_way <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_first <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_global_dirty <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_io_atomic_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_io_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_miss_handling <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_miss_meta <= `BSV_ASSIGNMENT_DELAY 173'd0;
	rg_reservation_address <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_store_eviction <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (ff_from_tlb_rv_EN)
	  ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY ff_from_tlb_rv_D_IN;
	if (ff_hold_request_rv_EN)
	  ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY ff_hold_request_rv_D_IN;
	if (ff_mem_rd_resp_rv_EN)
	  ff_mem_rd_resp_rv <= `BSV_ASSIGNMENT_DELAY ff_mem_rd_resp_rv_D_IN;
	if (ff_mem_wr_resp_rv_EN)
	  ff_mem_wr_resp_rv <= `BSV_ASSIGNMENT_DELAY ff_mem_wr_resp_rv_D_IN;
	if (ff_ptw_response_rv_EN)
	  ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY ff_ptw_response_rv_D_IN;
	if (m_data_v_data_0_rg_output_0_EN)
	  m_data_v_data_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_0_rg_output_0_D_IN;
	if (m_data_v_data_0_rg_read_index_EN)
	  m_data_v_data_0_rg_read_index <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_0_rg_read_index_D_IN;
	if (m_data_v_data_0_rg_write_data_0_EN)
	  m_data_v_data_0_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_0_rg_write_data_0_D_IN;
	if (m_data_v_data_0_rg_write_index_EN)
	  m_data_v_data_0_rg_write_index <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_0_rg_write_index_D_IN;
	if (m_data_v_data_1_rg_output_0_EN)
	  m_data_v_data_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_1_rg_output_0_D_IN;
	if (m_data_v_data_1_rg_read_index_EN)
	  m_data_v_data_1_rg_read_index <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_1_rg_read_index_D_IN;
	if (m_data_v_data_1_rg_write_data_0_EN)
	  m_data_v_data_1_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_1_rg_write_data_0_D_IN;
	if (m_data_v_data_1_rg_write_index_EN)
	  m_data_v_data_1_rg_write_index <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_1_rg_write_index_D_IN;
	if (m_data_v_data_2_rg_output_0_EN)
	  m_data_v_data_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_2_rg_output_0_D_IN;
	if (m_data_v_data_2_rg_read_index_EN)
	  m_data_v_data_2_rg_read_index <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_2_rg_read_index_D_IN;
	if (m_data_v_data_2_rg_write_data_0_EN)
	  m_data_v_data_2_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_2_rg_write_data_0_D_IN;
	if (m_data_v_data_2_rg_write_index_EN)
	  m_data_v_data_2_rg_write_index <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_2_rg_write_index_D_IN;
	if (m_data_v_data_3_rg_output_0_EN)
	  m_data_v_data_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_3_rg_output_0_D_IN;
	if (m_data_v_data_3_rg_read_index_EN)
	  m_data_v_data_3_rg_read_index <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_3_rg_read_index_D_IN;
	if (m_data_v_data_3_rg_write_data_0_EN)
	  m_data_v_data_3_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_3_rg_write_data_0_D_IN;
	if (m_data_v_data_3_rg_write_index_EN)
	  m_data_v_data_3_rg_write_index <= `BSV_ASSIGNMENT_DELAY
	      m_data_v_data_3_rg_write_index_D_IN;
	if (m_tag_v_tags_0_rg_output_0_EN)
	  m_tag_v_tags_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_0_rg_output_0_D_IN;
	if (m_tag_v_tags_0_rg_read_index_EN)
	  m_tag_v_tags_0_rg_read_index <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_0_rg_read_index_D_IN;
	if (m_tag_v_tags_0_rg_write_data_0_EN)
	  m_tag_v_tags_0_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_0_rg_write_data_0_D_IN;
	if (m_tag_v_tags_0_rg_write_index_EN)
	  m_tag_v_tags_0_rg_write_index <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_0_rg_write_index_D_IN;
	if (m_tag_v_tags_1_rg_output_0_EN)
	  m_tag_v_tags_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_1_rg_output_0_D_IN;
	if (m_tag_v_tags_1_rg_read_index_EN)
	  m_tag_v_tags_1_rg_read_index <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_1_rg_read_index_D_IN;
	if (m_tag_v_tags_1_rg_write_data_0_EN)
	  m_tag_v_tags_1_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_1_rg_write_data_0_D_IN;
	if (m_tag_v_tags_1_rg_write_index_EN)
	  m_tag_v_tags_1_rg_write_index <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_1_rg_write_index_D_IN;
	if (m_tag_v_tags_2_rg_output_0_EN)
	  m_tag_v_tags_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_2_rg_output_0_D_IN;
	if (m_tag_v_tags_2_rg_read_index_EN)
	  m_tag_v_tags_2_rg_read_index <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_2_rg_read_index_D_IN;
	if (m_tag_v_tags_2_rg_write_data_0_EN)
	  m_tag_v_tags_2_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_2_rg_write_data_0_D_IN;
	if (m_tag_v_tags_2_rg_write_index_EN)
	  m_tag_v_tags_2_rg_write_index <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_2_rg_write_index_D_IN;
	if (m_tag_v_tags_3_rg_output_0_EN)
	  m_tag_v_tags_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_3_rg_output_0_D_IN;
	if (m_tag_v_tags_3_rg_read_index_EN)
	  m_tag_v_tags_3_rg_read_index <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_3_rg_read_index_D_IN;
	if (m_tag_v_tags_3_rg_write_data_0_EN)
	  m_tag_v_tags_3_rg_write_data_0 <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_3_rg_write_data_0_D_IN;
	if (m_tag_v_tags_3_rg_write_index_EN)
	  m_tag_v_tags_3_rg_write_index <= `BSV_ASSIGNMENT_DELAY
	      m_tag_v_tags_3_rg_write_index_D_IN;
	if (replacement_v_count_0_EN)
	  replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_0_D_IN;
	if (replacement_v_count_1_EN)
	  replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_1_D_IN;
	if (replacement_v_count_10_EN)
	  replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_10_D_IN;
	if (replacement_v_count_11_EN)
	  replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_11_D_IN;
	if (replacement_v_count_12_EN)
	  replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_12_D_IN;
	if (replacement_v_count_13_EN)
	  replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_13_D_IN;
	if (replacement_v_count_14_EN)
	  replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_14_D_IN;
	if (replacement_v_count_15_EN)
	  replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_15_D_IN;
	if (replacement_v_count_16_EN)
	  replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_16_D_IN;
	if (replacement_v_count_17_EN)
	  replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_17_D_IN;
	if (replacement_v_count_18_EN)
	  replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_18_D_IN;
	if (replacement_v_count_19_EN)
	  replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_19_D_IN;
	if (replacement_v_count_2_EN)
	  replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_2_D_IN;
	if (replacement_v_count_20_EN)
	  replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_20_D_IN;
	if (replacement_v_count_21_EN)
	  replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_21_D_IN;
	if (replacement_v_count_22_EN)
	  replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_22_D_IN;
	if (replacement_v_count_23_EN)
	  replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_23_D_IN;
	if (replacement_v_count_24_EN)
	  replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_24_D_IN;
	if (replacement_v_count_25_EN)
	  replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_25_D_IN;
	if (replacement_v_count_26_EN)
	  replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_26_D_IN;
	if (replacement_v_count_27_EN)
	  replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_27_D_IN;
	if (replacement_v_count_28_EN)
	  replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_28_D_IN;
	if (replacement_v_count_29_EN)
	  replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_29_D_IN;
	if (replacement_v_count_3_EN)
	  replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_3_D_IN;
	if (replacement_v_count_30_EN)
	  replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_30_D_IN;
	if (replacement_v_count_31_EN)
	  replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_31_D_IN;
	if (replacement_v_count_32_EN)
	  replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_32_D_IN;
	if (replacement_v_count_33_EN)
	  replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_33_D_IN;
	if (replacement_v_count_34_EN)
	  replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_34_D_IN;
	if (replacement_v_count_35_EN)
	  replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_35_D_IN;
	if (replacement_v_count_36_EN)
	  replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_36_D_IN;
	if (replacement_v_count_37_EN)
	  replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_37_D_IN;
	if (replacement_v_count_38_EN)
	  replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_38_D_IN;
	if (replacement_v_count_39_EN)
	  replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_39_D_IN;
	if (replacement_v_count_4_EN)
	  replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_4_D_IN;
	if (replacement_v_count_40_EN)
	  replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_40_D_IN;
	if (replacement_v_count_41_EN)
	  replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_41_D_IN;
	if (replacement_v_count_42_EN)
	  replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_42_D_IN;
	if (replacement_v_count_43_EN)
	  replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_43_D_IN;
	if (replacement_v_count_44_EN)
	  replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_44_D_IN;
	if (replacement_v_count_45_EN)
	  replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_45_D_IN;
	if (replacement_v_count_46_EN)
	  replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_46_D_IN;
	if (replacement_v_count_47_EN)
	  replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_47_D_IN;
	if (replacement_v_count_48_EN)
	  replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_48_D_IN;
	if (replacement_v_count_49_EN)
	  replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_49_D_IN;
	if (replacement_v_count_5_EN)
	  replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_5_D_IN;
	if (replacement_v_count_50_EN)
	  replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_50_D_IN;
	if (replacement_v_count_51_EN)
	  replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_51_D_IN;
	if (replacement_v_count_52_EN)
	  replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_52_D_IN;
	if (replacement_v_count_53_EN)
	  replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_53_D_IN;
	if (replacement_v_count_54_EN)
	  replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_54_D_IN;
	if (replacement_v_count_55_EN)
	  replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_55_D_IN;
	if (replacement_v_count_56_EN)
	  replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_56_D_IN;
	if (replacement_v_count_57_EN)
	  replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_57_D_IN;
	if (replacement_v_count_58_EN)
	  replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_58_D_IN;
	if (replacement_v_count_59_EN)
	  replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_59_D_IN;
	if (replacement_v_count_6_EN)
	  replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_6_D_IN;
	if (replacement_v_count_60_EN)
	  replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_60_D_IN;
	if (replacement_v_count_61_EN)
	  replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_61_D_IN;
	if (replacement_v_count_62_EN)
	  replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_62_D_IN;
	if (replacement_v_count_63_EN)
	  replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_63_D_IN;
	if (replacement_v_count_7_EN)
	  replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_7_D_IN;
	if (replacement_v_count_8_EN)
	  replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_8_D_IN;
	if (replacement_v_count_9_EN)
	  replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_9_D_IN;
	if (rg_atomic_rd_data_EN)
	  rg_atomic_rd_data <= `BSV_ASSIGNMENT_DELAY rg_atomic_rd_data_D_IN;
	if (rg_block_count_EN)
	  rg_block_count <= `BSV_ASSIGNMENT_DELAY rg_block_count_D_IN;
	if (rg_core_io_response_EN)
	  rg_core_io_response <= `BSV_ASSIGNMENT_DELAY
	      rg_core_io_response_D_IN;
	if (rg_evict_addr_EN)
	  rg_evict_addr <= `BSV_ASSIGNMENT_DELAY rg_evict_addr_D_IN;
	if (rg_eviction_required_EN)
	  rg_eviction_required <= `BSV_ASSIGNMENT_DELAY
	      rg_eviction_required_D_IN;
	if (rg_fence_stall_EN)
	  rg_fence_stall <= `BSV_ASSIGNMENT_DELAY rg_fence_stall_D_IN;
	if (rg_fill_err_EN)
	  rg_fill_err <= `BSV_ASSIGNMENT_DELAY rg_fill_err_D_IN;
	if (rg_fill_eviction_EN)
	  rg_fill_eviction <= `BSV_ASSIGNMENT_DELAY rg_fill_eviction_D_IN;
	if (rg_fill_release_EN)
	  rg_fill_release <= `BSV_ASSIGNMENT_DELAY rg_fill_release_D_IN;
	if (rg_fill_set_EN)
	  rg_fill_set <= `BSV_ASSIGNMENT_DELAY rg_fill_set_D_IN;
	if (rg_fill_tag_EN)
	  rg_fill_tag <= `BSV_ASSIGNMENT_DELAY rg_fill_tag_D_IN;
	if (rg_fill_way_EN)
	  rg_fill_way <= `BSV_ASSIGNMENT_DELAY rg_fill_way_D_IN;
	if (rg_first_EN) rg_first <= `BSV_ASSIGNMENT_DELAY rg_first_D_IN;
	if (rg_global_dirty_EN)
	  rg_global_dirty <= `BSV_ASSIGNMENT_DELAY rg_global_dirty_D_IN;
	if (rg_io_atomic_done_EN)
	  rg_io_atomic_done <= `BSV_ASSIGNMENT_DELAY rg_io_atomic_done_D_IN;
	if (rg_io_busy_EN)
	  rg_io_busy <= `BSV_ASSIGNMENT_DELAY rg_io_busy_D_IN;
	if (rg_miss_handling_EN)
	  rg_miss_handling <= `BSV_ASSIGNMENT_DELAY rg_miss_handling_D_IN;
	if (rg_miss_meta_EN)
	  rg_miss_meta <= `BSV_ASSIGNMENT_DELAY rg_miss_meta_D_IN;
	if (rg_reservation_address_EN)
	  rg_reservation_address <= `BSV_ASSIGNMENT_DELAY
	      rg_reservation_address_D_IN;
	if (rg_store_eviction_EN)
	  rg_store_eviction <= `BSV_ASSIGNMENT_DELAY rg_store_eviction_D_IN;
	if (v_reg_dirty_0_EN)
	  v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_0_D_IN;
	if (v_reg_dirty_1_EN)
	  v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_1_D_IN;
	if (v_reg_dirty_2_EN)
	  v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_2_D_IN;
	if (v_reg_dirty_3_EN)
	  v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_3_D_IN;
	if (v_reg_valid_0_EN)
	  v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_0_D_IN;
	if (v_reg_valid_1_EN)
	  v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_1_D_IN;
	if (v_reg_valid_2_EN)
	  v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_2_D_IN;
	if (v_reg_valid_3_EN)
	  v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_3_D_IN;
      end
    if (rg_evicted_line_EN)
      rg_evicted_line <= `BSV_ASSIGNMENT_DELAY rg_evicted_line_D_IN;
    if (v_fill_line_0_EN)
      v_fill_line_0 <= `BSV_ASSIGNMENT_DELAY v_fill_line_0_D_IN;
    if (v_fill_line_1_EN)
      v_fill_line_1 <= `BSV_ASSIGNMENT_DELAY v_fill_line_1_D_IN;
    if (v_fill_line_2_EN)
      v_fill_line_2 <= `BSV_ASSIGNMENT_DELAY v_fill_line_2_D_IN;
    if (v_fill_line_3_EN)
      v_fill_line_3 <= `BSV_ASSIGNMENT_DELAY v_fill_line_3_D_IN;
    if (v_fill_line_4_EN)
      v_fill_line_4 <= `BSV_ASSIGNMENT_DELAY v_fill_line_4_D_IN;
    if (v_fill_line_5_EN)
      v_fill_line_5 <= `BSV_ASSIGNMENT_DELAY v_fill_line_5_D_IN;
    if (v_fill_line_6_EN)
      v_fill_line_6 <= `BSV_ASSIGNMENT_DELAY v_fill_line_6_D_IN;
    if (v_fill_line_7_EN)
      v_fill_line_7 <= `BSV_ASSIGNMENT_DELAY v_fill_line_7_D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      rg_fence_set <= `BSV_ASSIGNMENT_DELAY 6'd0;
      rg_fence_way <= `BSV_ASSIGNMENT_DELAY 4'd1;
      rg_performing_replay <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_recent_req <= `BSV_ASSIGNMENT_DELAY 6'd0;
    end
  else
    begin
      if (rg_fence_set_EN)
	rg_fence_set <= `BSV_ASSIGNMENT_DELAY rg_fence_set_D_IN;
      if (rg_fence_way_EN)
	rg_fence_way <= `BSV_ASSIGNMENT_DELAY rg_fence_way_D_IN;
      if (rg_performing_replay_EN)
	rg_performing_replay <= `BSV_ASSIGNMENT_DELAY
	    rg_performing_replay_D_IN;
      if (rg_recent_req_EN)
	rg_recent_req <= `BSV_ASSIGNMENT_DELAY rg_recent_req_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_from_tlb_rv = 42'h2AAAAAAAAAA;
    ff_hold_request_rv = 142'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_mem_rd_resp_rv = 67'h2AAAAAAAAAAAAAAAA;
    ff_mem_wr_resp_rv = 2'h2;
    ff_ptw_response_rv = 77'h0AAAAAAAAAAAAAAAAAAA;
    m_data_v_data_0_rg_output_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_data_v_data_0_rg_read_index = 6'h2A;
    m_data_v_data_0_rg_write_data_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_data_v_data_0_rg_write_index = 6'h2A;
    m_data_v_data_1_rg_output_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_data_v_data_1_rg_read_index = 6'h2A;
    m_data_v_data_1_rg_write_data_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_data_v_data_1_rg_write_index = 6'h2A;
    m_data_v_data_2_rg_output_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_data_v_data_2_rg_read_index = 6'h2A;
    m_data_v_data_2_rg_write_data_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_data_v_data_2_rg_write_index = 6'h2A;
    m_data_v_data_3_rg_output_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_data_v_data_3_rg_read_index = 6'h2A;
    m_data_v_data_3_rg_write_data_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_data_v_data_3_rg_write_index = 6'h2A;
    m_tag_v_tags_0_rg_output_0 = 20'hAAAAA;
    m_tag_v_tags_0_rg_read_index = 6'h2A;
    m_tag_v_tags_0_rg_write_data_0 = 20'hAAAAA;
    m_tag_v_tags_0_rg_write_index = 6'h2A;
    m_tag_v_tags_1_rg_output_0 = 20'hAAAAA;
    m_tag_v_tags_1_rg_read_index = 6'h2A;
    m_tag_v_tags_1_rg_write_data_0 = 20'hAAAAA;
    m_tag_v_tags_1_rg_write_index = 6'h2A;
    m_tag_v_tags_2_rg_output_0 = 20'hAAAAA;
    m_tag_v_tags_2_rg_read_index = 6'h2A;
    m_tag_v_tags_2_rg_write_data_0 = 20'hAAAAA;
    m_tag_v_tags_2_rg_write_index = 6'h2A;
    m_tag_v_tags_3_rg_output_0 = 20'hAAAAA;
    m_tag_v_tags_3_rg_read_index = 6'h2A;
    m_tag_v_tags_3_rg_write_data_0 = 20'hAAAAA;
    m_tag_v_tags_3_rg_write_index = 6'h2A;
    replacement_v_count_0 = 2'h2;
    replacement_v_count_1 = 2'h2;
    replacement_v_count_10 = 2'h2;
    replacement_v_count_11 = 2'h2;
    replacement_v_count_12 = 2'h2;
    replacement_v_count_13 = 2'h2;
    replacement_v_count_14 = 2'h2;
    replacement_v_count_15 = 2'h2;
    replacement_v_count_16 = 2'h2;
    replacement_v_count_17 = 2'h2;
    replacement_v_count_18 = 2'h2;
    replacement_v_count_19 = 2'h2;
    replacement_v_count_2 = 2'h2;
    replacement_v_count_20 = 2'h2;
    replacement_v_count_21 = 2'h2;
    replacement_v_count_22 = 2'h2;
    replacement_v_count_23 = 2'h2;
    replacement_v_count_24 = 2'h2;
    replacement_v_count_25 = 2'h2;
    replacement_v_count_26 = 2'h2;
    replacement_v_count_27 = 2'h2;
    replacement_v_count_28 = 2'h2;
    replacement_v_count_29 = 2'h2;
    replacement_v_count_3 = 2'h2;
    replacement_v_count_30 = 2'h2;
    replacement_v_count_31 = 2'h2;
    replacement_v_count_32 = 2'h2;
    replacement_v_count_33 = 2'h2;
    replacement_v_count_34 = 2'h2;
    replacement_v_count_35 = 2'h2;
    replacement_v_count_36 = 2'h2;
    replacement_v_count_37 = 2'h2;
    replacement_v_count_38 = 2'h2;
    replacement_v_count_39 = 2'h2;
    replacement_v_count_4 = 2'h2;
    replacement_v_count_40 = 2'h2;
    replacement_v_count_41 = 2'h2;
    replacement_v_count_42 = 2'h2;
    replacement_v_count_43 = 2'h2;
    replacement_v_count_44 = 2'h2;
    replacement_v_count_45 = 2'h2;
    replacement_v_count_46 = 2'h2;
    replacement_v_count_47 = 2'h2;
    replacement_v_count_48 = 2'h2;
    replacement_v_count_49 = 2'h2;
    replacement_v_count_5 = 2'h2;
    replacement_v_count_50 = 2'h2;
    replacement_v_count_51 = 2'h2;
    replacement_v_count_52 = 2'h2;
    replacement_v_count_53 = 2'h2;
    replacement_v_count_54 = 2'h2;
    replacement_v_count_55 = 2'h2;
    replacement_v_count_56 = 2'h2;
    replacement_v_count_57 = 2'h2;
    replacement_v_count_58 = 2'h2;
    replacement_v_count_59 = 2'h2;
    replacement_v_count_6 = 2'h2;
    replacement_v_count_60 = 2'h2;
    replacement_v_count_61 = 2'h2;
    replacement_v_count_62 = 2'h2;
    replacement_v_count_63 = 2'h2;
    replacement_v_count_7 = 2'h2;
    replacement_v_count_8 = 2'h2;
    replacement_v_count_9 = 2'h2;
    rg_atomic_rd_data = 64'hAAAAAAAAAAAAAAAA;
    rg_block_count = 8'hAA;
    rg_core_io_response = 77'h0AAAAAAAAAAAAAAAAAAA;
    rg_evict_addr = 32'hAAAAAAAA;
    rg_evicted_line =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_eviction_required = 1'h0;
    rg_fence_set = 6'h2A;
    rg_fence_stall = 1'h0;
    rg_fence_way = 4'hA;
    rg_fill_err = 1'h0;
    rg_fill_eviction = 1'h0;
    rg_fill_release = 1'h0;
    rg_fill_set = 6'h2A;
    rg_fill_tag = 20'hAAAAA;
    rg_fill_way = 2'h2;
    rg_first = 1'h0;
    rg_global_dirty = 1'h0;
    rg_io_atomic_done = 1'h0;
    rg_io_busy = 1'h0;
    rg_miss_handling = 1'h0;
    rg_miss_meta = 173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_performing_replay = 1'h0;
    rg_recent_req = 6'h2A;
    rg_reservation_address = 65'h0AAAAAAAAAAAAAAAA;
    rg_store_eviction = 1'h0;
    v_fill_line_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fill_line_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fill_line_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fill_line_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fill_line_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fill_line_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fill_line_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fill_line_7 = 64'hAAAAAAAAAAAAAAAA;
    v_reg_dirty_0 = 64'hAAAAAAAAAAAAAAAA;
    v_reg_dirty_1 = 64'hAAAAAAAAAAAAAAAA;
    v_reg_dirty_2 = 64'hAAAAAAAAAAAAAAAA;
    v_reg_dirty_3 = 64'hAAAAAAAAAAAAAAAA;
    v_reg_valid_0 = 64'hAAAAAAAAAAAAAAAA;
    v_reg_valid_1 = 64'hAAAAAAAAAAAAAAAA;
    v_reg_valid_2 = 64'hAAAAAAAAAAAAAAAA;
    v_reg_valid_3 = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put)
	begin
	  TASK_testplusargs___d1642 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put)
	begin
	  TASK_testplusargs___d1643 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put)
	begin
	  TASK_testplusargs___d1644 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1648 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	receive_core_req_put[76];
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1651 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	!receive_core_req_put[76];
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1659 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	!receive_core_req_put[76] &&
	receive_core_req_put[74:73] != 2'd2 &&
	!receive_core_req_put[0];
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1679 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	!receive_core_req_put[76] &&
	receive_core_req_put[74:73] == 2'd2 &&
	!receive_core_req_put[0];
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1713 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	!receive_core_req_put[76] &&
	(receive_core_req_put[74:73] == 2'd2 || receive_core_req_put[0]) &&
	(receive_core_req_put[74:73] != 2'd2 || receive_core_req_put[0]);
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1714 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	receive_core_req_put[74:73] == 2'd0;
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1718 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	receive_core_req_put[0];
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1716 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	receive_core_req_put[74:73] != 2'd0;
    TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1719 =
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644) &&
	!receive_core_req_put[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put)
	begin
	  v__h123559 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  (TASK_testplusargs___d1642 ||
	   TASK_testplusargs___d1643 && TASK_testplusargs___d1644))
	$write("[%10d", v__h123559, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  (TASK_testplusargs___d1642 ||
	   TASK_testplusargs___d1643 && TASK_testplusargs___d1644))
	$write("[%2d]DCACHE: Receiving request: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1648)
	$write("{va:%h", receive_core_req_put[140:77], " is a Fence op");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1651)
	$write("{va:%h", receive_core_req_put[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1648)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1659)
	if (receive_core_req_put[74:73] == 2'd0)
	  if (receive_core_req_put[72:70] == 3'b0)
	    $write(" is a %s%s op", "L", "B");
	  else
	    if (receive_core_req_put[72:70] == 3'b001)
	      $write(" is a %s%s op", "L", "H");
	    else
	      if (receive_core_req_put[72:70] == 3'b010)
		$write(" is a %s%s op", "L", "W");
	      else
		if (receive_core_req_put[72:70] == 3'b011)
		  $write(" is a %s%s op", "L", "D");
		else
		  if (receive_core_req_put[72:70] == 3'b100)
		    $write(" is a %s%s op", "L", "BU");
		  else
		    if (receive_core_req_put[72:70] == 3'b101)
		      $write(" is a %s%s op", "L", "HU");
		    else
		      $write(" is a %s%s op", "L", "WU");
	else
	  if (receive_core_req_put[74:73] == 2'd1)
	    if (receive_core_req_put[72:70] == 3'b0)
	      $write(" is a %s%s op", "S", "B");
	    else
	      if (receive_core_req_put[72:70] == 3'b001)
		$write(" is a %s%s op", "S", "H");
	      else
		if (receive_core_req_put[72:70] == 3'b010)
		  $write(" is a %s%s op", "S", "W");
		else
		  if (receive_core_req_put[72:70] == 3'b011)
		    $write(" is a %s%s op", "S", "D");
		  else
		    if (receive_core_req_put[72:70] == 3'b100)
		      $write(" is a %s%s op", "S", "BU");
		    else
		      if (receive_core_req_put[72:70] == 3'b101)
			$write(" is a %s%s op", "S", "HU");
		      else
			$write(" is a %s%s op", "S", "WU");
	  else
	    if (receive_core_req_put[72:70] == 3'b0)
	      $write(" is a %s%s op", "UNKNOWN ACCESS", "B");
	    else
	      if (receive_core_req_put[72:70] == 3'b001)
		$write(" is a %s%s op", "UNKNOWN ACCESS", "H");
	      else
		if (receive_core_req_put[72:70] == 3'b010)
		  $write(" is a %s%s op", "UNKNOWN ACCESS", "W");
		else
		  if (receive_core_req_put[72:70] == 3'b011)
		    $write(" is a %s%s op", "UNKNOWN ACCESS", "D");
		  else
		    if (receive_core_req_put[72:70] == 3'b100)
		      $write(" is a %s%s op", "UNKNOWN ACCESS", "BU");
		    else
		      if (receive_core_req_put[72:70] == 3'b101)
			$write(" is a %s%s op", "UNKNOWN ACCESS", "HU");
		      else
			$write(" is a %s%s op", "UNKNOWN ACCESS", "WU");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1679)
	if (receive_core_req_put[4:1] == 4'b0011)
	  if (receive_core_req_put[5])
	    $write(" is a %s op", "AMOSWAP.D");
	  else
	    $write(" is a %s op", "AMOSWAP.W");
	else
	  if (receive_core_req_put[4:1] == 4'b0)
	    if (receive_core_req_put[5])
	      $write(" is a %s op", "AMOADD.D");
	    else
	      $write(" is a %s op", "AMOADD.W");
	  else
	    if (receive_core_req_put[4:1] == 4'b0010)
	      if (receive_core_req_put[5])
		$write(" is a %s op", "AMOXOR.D");
	      else
		$write(" is a %s op", "AMOXOR.W");
	    else
	      if (receive_core_req_put[4:1] == 4'b0110)
		if (receive_core_req_put[5])
		  $write(" is a %s op", "AMOAND.D");
		else
		  $write(" is a %s op", "AMOAND.W");
	      else
		if (receive_core_req_put[4:1] == 4'b0100)
		  if (receive_core_req_put[5])
		    $write(" is a %s op", "AMOOR.D");
		  else
		    $write(" is a %s op", "AMOOR.W");
		else
		  if (receive_core_req_put[4:1] == 4'b1100)
		    if (receive_core_req_put[5])
		      $write(" is a %s op", "AMOMINU.D");
		    else
		      $write(" is a %s op", "AMOMINU.W");
		  else
		    if (receive_core_req_put[4:1] == 4'b1110)
		      if (receive_core_req_put[5])
			$write(" is a %s op", "AMOMAXU.D");
		      else
			$write(" is a %s op", "AMOMAXU.W");
		    else
		      if (receive_core_req_put[4:1] == 4'b1000)
			if (receive_core_req_put[5])
			  $write(" is a %s op", "AMOMIN.D");
			else
			  $write(" is a %s op", "AMOMIN.W");
		      else
			if (receive_core_req_put[4:1] == 4'b1010)
			  if (receive_core_req_put[5])
			    $write(" is a %s op", "AMOMAX.D");
			  else
			    $write(" is a %s op", "AMOMAX.W");
			else
			  $write(" is a %s op", "UNKNOWN OP");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1713)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1714)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1716)
	$write(", data:%h", receive_core_req_put[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1718)
	$write(" coming from PTWALK");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  TASK_testplusargs_642_OR_TASK_testplusargs_643_ETC___d1719)
	$write(" coming from CORE");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  (TASK_testplusargs___d1642 ||
	   TASK_testplusargs___d1643 && TASK_testplusargs___d1644))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  (TASK_testplusargs___d1642 ||
	   TASK_testplusargs___d1643 && TASK_testplusargs___d1644))
	$write(" set:%d", _theResult____h123294);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_receive_core_req_put &&
	  (TASK_testplusargs___d1642 ||
	   TASK_testplusargs___d1643 && TASK_testplusargs___d1644))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_eviction)
	begin
	  TASK_testplusargs___d740 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_eviction)
	begin
	  TASK_testplusargs___d741 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_eviction)
	begin
	  TASK_testplusargs___d742 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_eviction)
	begin
	  v__h62638 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_eviction &&
	  (TASK_testplusargs___d740 ||
	   TASK_testplusargs___d741 && TASK_testplusargs___d742))
	$write("[%10d", v__h62638, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_eviction &&
	  (TASK_testplusargs___d740 ||
	   TASK_testplusargs___d741 && TASK_testplusargs___d742))
	$write("[%2d]DCACHE: Performing eviction. rg_evict_addr:%h rg_evicted_line:%h",
	       id,
	       rg_evict_addr,
	       rg_evicted_line);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_line_eviction &&
	  (TASK_testplusargs___d740 ||
	   TASK_testplusargs___d741 && TASK_testplusargs___d742))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1140 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1141 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1142 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  v__h94062 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1140 ||
	   TASK_testplusargs___d1141 && TASK_testplusargs___d1142))
	$write("[%10d", v__h94062, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1140 ||
	   TASK_testplusargs___d1141 && TASK_testplusargs___d1142))
	$write("[%2d]DCACHE: Performing replay for index:%d",
	       id,
	       rg_recent_req);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1140 ||
	   TASK_testplusargs___d1141 && TASK_testplusargs___d1142))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io)
	begin
	  TASK_testplusargs___d1160 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io)
	begin
	  TASK_testplusargs___d1161 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io)
	begin
	  TASK_testplusargs___d1162 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_160_OR_TASK_testplusargs_161_ETC___d1172 =
	(TASK_testplusargs___d1160 ||
	 TASK_testplusargs___d1161 && TASK_testplusargs___d1162) &&
	m_iobuffer_mv_io_head[0];
    TASK_testplusargs_160_OR_TASK_testplusargs_161_ETC___d1174 =
	(TASK_testplusargs___d1160 ||
	 TASK_testplusargs___d1161 && TASK_testplusargs___d1162) &&
	!m_iobuffer_mv_io_head[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io)
	begin
	  v__h94264 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("[%10d", v__h94264, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("[%2d]DCACHE: Initiating IO request: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("IoEntry { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("'h%h", m_iobuffer_mv_io_head[171:140]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("'h%h", m_iobuffer_mv_io_head[139:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("'h%h", m_iobuffer_mv_io_head[75:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("'h%h", m_iobuffer_mv_io_head[72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("'h%h", m_iobuffer_mv_io_head[71:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("'h%h", m_iobuffer_mv_io_head[69:65]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write(", ", "vaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("'h%h", m_iobuffer_mv_io_head[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write(", ", "is_ptw_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  TASK_testplusargs_160_OR_TASK_testplusargs_161_ETC___d1172)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  TASK_testplusargs_160_OR_TASK_testplusargs_161_ETC___d1174)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initiate_io &&
	  (TASK_testplusargs___d1160 ||
	   TASK_testplusargs___d1161 && TASK_testplusargs___d1162))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d53 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d54 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d55 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h15448 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("[%10d", v__h15448, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("[%2d]DCACHE: Fence processing set:%d way:%b",
	       id,
	       rg_fence_set,
	       rg_fence_way);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d61 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d62 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d63 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h15592 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("[%10d", v__h15592, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("[%2d]DCACHE: Fence flags: v:%d d:%d",
	       id,
	       bs__h15653[rg_fence_set],
	       bs__h18506[rg_fence_set]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation && x__h24767 != 4'd0)
	begin
	  TASK_testplusargs___d104 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation && x__h24767 != 4'd0)
	begin
	  TASK_testplusargs___d105 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation && x__h24767 != 4'd0)
	begin
	  TASK_testplusargs___d106 = $test$plusargs("l0");
	  #0;
	end
    NOT_v_reg_dirty_3_3_BIT_rg_fence_set_9_7_AND_v_ETC___d109 =
	x__h24767 != 4'd0 &&
	(TASK_testplusargs___d104 ||
	 TASK_testplusargs___d105 && TASK_testplusargs___d106);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation && x__h24767 != 4'd0)
	begin
	  v__h25484 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  NOT_v_reg_dirty_3_3_BIT_rg_fence_set_9_7_AND_v_ETC___d109)
	$write("[%10d", v__h25484, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  NOT_v_reg_dirty_3_3_BIT_rg_fence_set_9_7_AND_v_ETC___d109)
	$write("[%2d]DCACHE: Fence evicting addr:%h data:%h",
	       id,
	       lv_address__h24743,
	       x__h29001);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  NOT_v_reg_dirty_3_3_BIT_rg_fence_set_9_7_AND_v_ETC___d109)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io && m_iobuffer_mv_io_head_valid)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 1255, column 50\nIO Head is already ready to commit.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io && m_iobuffer_mv_io_head_valid) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io)
	begin
	  TASK_testplusargs___d1746 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io)
	begin
	  TASK_testplusargs___d1747 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io)
	begin
	  TASK_testplusargs___d1748 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_746_OR_TASK_testplusargs_747_ETC___d1752 =
	(TASK_testplusargs___d1746 ||
	 TASK_testplusargs___d1747 && TASK_testplusargs___d1748) &&
	m_iobuffer_mv_io_head[0];
    TASK_testplusargs_746_OR_TASK_testplusargs_747_ETC___d1753 =
	(TASK_testplusargs___d1746 ||
	 TASK_testplusargs___d1747 && TASK_testplusargs___d1748) &&
	!m_iobuffer_mv_io_head[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io)
	begin
	  v__h125064 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("[%10d", v__h125064, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("[%2d]DCACHE: Commit IO entry:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("IoEntry { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("'h%h", m_iobuffer_mv_io_head[171:140]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("'h%h", m_iobuffer_mv_io_head[139:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("'h%h", m_iobuffer_mv_io_head[75:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("'h%h", m_iobuffer_mv_io_head[72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("'h%h", m_iobuffer_mv_io_head[71:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("'h%h", m_iobuffer_mv_io_head[69:65]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write(", ", "vaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("'h%h", m_iobuffer_mv_io_head[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write(", ", "is_ptw_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  TASK_testplusargs_746_OR_TASK_testplusargs_747_ETC___d1752)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  TASK_testplusargs_746_OR_TASK_testplusargs_747_ETC___d1753)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  (TASK_testplusargs___d1746 ||
	   TASK_testplusargs___d1747 && TASK_testplusargs___d1748))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  !m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754)
	begin
	  TASK_testplusargs___d1756 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  !m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754)
	begin
	  TASK_testplusargs___d1757 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  !m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754)
	begin
	  TASK_testplusargs___d1758 = $test$plusargs("l0");
	  #0;
	end
    NOT_m_iobuffer_mv_io_head__154_BIT_72_168_EQ_m_ETC___d1761 =
	!m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754 &&
	(TASK_testplusargs___d1756 ||
	 TASK_testplusargs___d1757 && TASK_testplusargs___d1758);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  !m_iobuffer_mv_io_head__154_BIT_72_168_EQ_ma_co_ETC___d1754)
	begin
	  v__h125234 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  NOT_m_iobuffer_mv_io_head__154_BIT_72_168_EQ_m_ETC___d1761)
	$write("[%10d", v__h125234, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  NOT_m_iobuffer_mv_io_head__154_BIT_72_168_EQ_m_ETC___d1761)
	$write("[%2d]DCACHE: IO is being dropped- epoch mismatch", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io &&
	  NOT_m_iobuffer_mv_io_head__154_BIT_72_168_EQ_m_ETC___d1761)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d183 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d184 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d185 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d196 =
	(TASK_testplusargs___d183 ||
	 TASK_testplusargs___d184 && TASK_testplusargs___d185) &&
	ff_core_request_D_OUT[74:73] != 2'd2 &&
	!ff_core_request_D_OUT[0];
    TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d215 =
	(TASK_testplusargs___d183 ||
	 TASK_testplusargs___d184 && TASK_testplusargs___d185) &&
	ff_core_request_D_OUT[74:73] == 2'd2 &&
	!ff_core_request_D_OUT[0];
    TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d248 =
	(TASK_testplusargs___d183 ||
	 TASK_testplusargs___d184 && TASK_testplusargs___d185) &&
	(ff_core_request_D_OUT[74:73] == 2'd2 || ff_core_request_D_OUT[0]) &&
	(ff_core_request_D_OUT[74:73] != 2'd2 || ff_core_request_D_OUT[0]);
    TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d249 =
	(TASK_testplusargs___d183 ||
	 TASK_testplusargs___d184 && TASK_testplusargs___d185) &&
	ff_core_request_D_OUT[74:73] == 2'd0;
    TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d251 =
	(TASK_testplusargs___d183 ||
	 TASK_testplusargs___d184 && TASK_testplusargs___d185) &&
	ff_core_request_D_OUT[74:73] != 2'd0;
    TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d253 =
	(TASK_testplusargs___d183 ||
	 TASK_testplusargs___d184 && TASK_testplusargs___d185) &&
	ff_core_request_D_OUT[0];
    TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d254 =
	(TASK_testplusargs___d183 ||
	 TASK_testplusargs___d184 && TASK_testplusargs___d185) &&
	!ff_core_request_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h35382 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d183 ||
	   TASK_testplusargs___d184 && TASK_testplusargs___d185))
	$write("[%10d", v__h35382, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d183 ||
	   TASK_testplusargs___d184 && TASK_testplusargs___d185))
	$write("[%2d]DCACHE: RAM Processing Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d183 ||
	   TASK_testplusargs___d184 && TASK_testplusargs___d185))
	$write("{va:%h", ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d196)
	if (ff_core_request_D_OUT[74:73] == 2'd0)
	  if (ff_core_request_D_OUT[72:70] == 3'b0)
	    $write(" is a %s%s op", "L", "B");
	  else
	    if (ff_core_request_D_OUT[72:70] == 3'b001)
	      $write(" is a %s%s op", "L", "H");
	    else
	      if (ff_core_request_D_OUT[72:70] == 3'b010)
		$write(" is a %s%s op", "L", "W");
	      else
		if (ff_core_request_D_OUT[72:70] == 3'b011)
		  $write(" is a %s%s op", "L", "D");
		else
		  if (ff_core_request_D_OUT[72:70] == 3'b100)
		    $write(" is a %s%s op", "L", "BU");
		  else
		    if (ff_core_request_D_OUT[72:70] == 3'b101)
		      $write(" is a %s%s op", "L", "HU");
		    else
		      $write(" is a %s%s op", "L", "WU");
	else
	  if (ff_core_request_D_OUT[74:73] == 2'd1)
	    if (ff_core_request_D_OUT[72:70] == 3'b0)
	      $write(" is a %s%s op", "S", "B");
	    else
	      if (ff_core_request_D_OUT[72:70] == 3'b001)
		$write(" is a %s%s op", "S", "H");
	      else
		if (ff_core_request_D_OUT[72:70] == 3'b010)
		  $write(" is a %s%s op", "S", "W");
		else
		  if (ff_core_request_D_OUT[72:70] == 3'b011)
		    $write(" is a %s%s op", "S", "D");
		  else
		    if (ff_core_request_D_OUT[72:70] == 3'b100)
		      $write(" is a %s%s op", "S", "BU");
		    else
		      if (ff_core_request_D_OUT[72:70] == 3'b101)
			$write(" is a %s%s op", "S", "HU");
		      else
			$write(" is a %s%s op", "S", "WU");
	  else
	    if (ff_core_request_D_OUT[72:70] == 3'b0)
	      $write(" is a %s%s op", "UNKNOWN ACCESS", "B");
	    else
	      if (ff_core_request_D_OUT[72:70] == 3'b001)
		$write(" is a %s%s op", "UNKNOWN ACCESS", "H");
	      else
		if (ff_core_request_D_OUT[72:70] == 3'b010)
		  $write(" is a %s%s op", "UNKNOWN ACCESS", "W");
		else
		  if (ff_core_request_D_OUT[72:70] == 3'b011)
		    $write(" is a %s%s op", "UNKNOWN ACCESS", "D");
		  else
		    if (ff_core_request_D_OUT[72:70] == 3'b100)
		      $write(" is a %s%s op", "UNKNOWN ACCESS", "BU");
		    else
		      if (ff_core_request_D_OUT[72:70] == 3'b101)
			$write(" is a %s%s op", "UNKNOWN ACCESS", "HU");
		      else
			$write(" is a %s%s op", "UNKNOWN ACCESS", "WU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d215)
	if (ff_core_request_D_OUT[4:1] == 4'b0011)
	  if (ff_core_request_D_OUT[5])
	    $write(" is a %s op", "AMOSWAP.D");
	  else
	    $write(" is a %s op", "AMOSWAP.W");
	else
	  if (ff_core_request_D_OUT[4:1] == 4'b0)
	    if (ff_core_request_D_OUT[5])
	      $write(" is a %s op", "AMOADD.D");
	    else
	      $write(" is a %s op", "AMOADD.W");
	  else
	    if (ff_core_request_D_OUT[4:1] == 4'b0010)
	      if (ff_core_request_D_OUT[5])
		$write(" is a %s op", "AMOXOR.D");
	      else
		$write(" is a %s op", "AMOXOR.W");
	    else
	      if (ff_core_request_D_OUT[4:1] == 4'b0110)
		if (ff_core_request_D_OUT[5])
		  $write(" is a %s op", "AMOAND.D");
		else
		  $write(" is a %s op", "AMOAND.W");
	      else
		if (ff_core_request_D_OUT[4:1] == 4'b0100)
		  if (ff_core_request_D_OUT[5])
		    $write(" is a %s op", "AMOOR.D");
		  else
		    $write(" is a %s op", "AMOOR.W");
		else
		  if (ff_core_request_D_OUT[4:1] == 4'b1100)
		    if (ff_core_request_D_OUT[5])
		      $write(" is a %s op", "AMOMINU.D");
		    else
		      $write(" is a %s op", "AMOMINU.W");
		  else
		    if (ff_core_request_D_OUT[4:1] == 4'b1110)
		      if (ff_core_request_D_OUT[5])
			$write(" is a %s op", "AMOMAXU.D");
		      else
			$write(" is a %s op", "AMOMAXU.W");
		    else
		      if (ff_core_request_D_OUT[4:1] == 4'b1000)
			if (ff_core_request_D_OUT[5])
			  $write(" is a %s op", "AMOMIN.D");
			else
			  $write(" is a %s op", "AMOMIN.W");
		      else
			if (ff_core_request_D_OUT[4:1] == 4'b1010)
			  if (ff_core_request_D_OUT[5])
			    $write(" is a %s op", "AMOMAX.D");
			  else
			    $write(" is a %s op", "AMOMAX.W");
			else
			  $write(" is a %s op", "UNKNOWN OP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d248)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d249)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d251)
	$write(", data:%h", ff_core_request_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d253)
	$write(" coming from PTWALK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_83_OR_TASK_testplusargs_84_A_ETC___d254)
	$write(" coming from CORE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d183 ||
	   TASK_testplusargs___d184 && TASK_testplusargs___d185))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d183 ||
	   TASK_testplusargs___d184 && TASK_testplusargs___d185))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d255 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d256 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d257 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d263 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	ff_from_tlb_rv_port1__read[8];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d284 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	!ff_from_tlb_rv_port1__read[8];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d286 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	ff_from_tlb_rv_port1__read[0];
    TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d288 =
	(TASK_testplusargs___d255 ||
	 TASK_testplusargs___d256 && TASK_testplusargs___d257) &&
	!ff_from_tlb_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h35898 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d255 ||
	   TASK_testplusargs___d256 && TASK_testplusargs___d257))
	$write("[%10d", v__h35898, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d255 ||
	   TASK_testplusargs___d256 && TASK_testplusargs___d257))
	$write("[%2d]DCACHE: Response from PA:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d255 ||
	   TASK_testplusargs___d256 && TASK_testplusargs___d257))
	$write("{pa:%h", ff_from_tlb_rv_port1__read[40:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d263)
	if (ff_from_tlb_rv_port1__read[7:1] == 7'd0)
	  $write(", caused ", "Instruction-Address-Misaligned-Trap");
	else
	  if (ff_from_tlb_rv_port1__read[7:1] == 7'd1)
	    $write(", caused ", "Instruction-Access-Fault-Trap");
	  else
	    if (ff_from_tlb_rv_port1__read[7:1] == 7'd4)
	      $write(", caused ", "Load-Address-Misaligned-Trap");
	    else
	      if (ff_from_tlb_rv_port1__read[7:1] == 7'd5)
		$write(", caused ", "Load-Access-Fault-Trap");
	      else
		if (ff_from_tlb_rv_port1__read[7:1] == 7'd6)
		  $write(", caused ", "Store-Address-Misaligned-Trap");
		else
		  if (ff_from_tlb_rv_port1__read[7:1] == 7'd7)
		    $write(", caused ", "Store-Access-Fault-Trap");
		  else
		    if (ff_from_tlb_rv_port1__read[7:1] == 7'd12)
		      $write(", caused ", "Instruction-Page-Fault-Trap");
		    else
		      if (ff_from_tlb_rv_port1__read[7:1] == 7'd13)
			$write(", caused ", "Load-Page-Fault-Trap");
		      else
			if (ff_from_tlb_rv_port1__read[7:1] == 7'd15)
			  $write(", caused ", "Store-Page-Fault-Trap");
			else
			  $write(", caused ", "UNKNOWN CAUSE VALUE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d284)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d286)
	$write(", is a TLBMISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_55_OR_TASK_testplusargs_56_A_ETC___d288)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d255 ||
	   TASK_testplusargs___d256 && TASK_testplusargs___d257))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d255 ||
	   TASK_testplusargs___d256 && TASK_testplusargs___d257))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00101)
	begin
	  TASK_testplusargs___d299 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00101)
	begin
	  TASK_testplusargs___d300 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00101)
	begin
	  TASK_testplusargs___d301 = $test$plusargs("l0");
	  #0;
	end
    ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d304 =
	ff_core_request_D_OUT[74:73] == 2'd2 &&
	ff_core_request_D_OUT[5:1] == 5'b00101 &&
	(TASK_testplusargs___d299 ||
	 TASK_testplusargs___d300 && TASK_testplusargs___d301);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00101)
	begin
	  v__h36275 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d304)
	$write("[%10d", v__h36275, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d304)
	$write("[%2d]DCACHE: LR reservation for : %h",
	       id,
	       ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d304)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  rg_reservation_address[64] &&
	  IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312)
	begin
	  TASK_testplusargs___d315 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  rg_reservation_address[64] &&
	  IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312)
	begin
	  TASK_testplusargs___d316 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  rg_reservation_address[64] &&
	  IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312)
	begin
	  TASK_testplusargs___d317 = $test$plusargs("l0");
	  #0;
	end
    rg_reservation_address_07_BIT_64_08_AND_IF_rg__ETC___d320 =
	rg_reservation_address[64] &&
	IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312 &&
	(TASK_testplusargs___d315 ||
	 TASK_testplusargs___d316 && TASK_testplusargs___d317);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  rg_reservation_address[64] &&
	  IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312)
	begin
	  v__h36554 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  rg_reservation_address_07_BIT_64_08_AND_IF_rg__ETC___d320)
	$write("[%10d", v__h36554, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  rg_reservation_address_07_BIT_64_08_AND_IF_rg__ETC___d320)
	$write("[%2d]DCACHE: SC succeeds for : %h ",
	       id,
	       ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  rg_reservation_address_07_BIT_64_08_AND_IF_rg__ETC___d320)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  (!rg_reservation_address[64] ||
	   !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312))
	begin
	  TASK_testplusargs___d327 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  (!rg_reservation_address[64] ||
	   !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312))
	begin
	  TASK_testplusargs___d328 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  (!rg_reservation_address[64] ||
	   !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312))
	begin
	  TASK_testplusargs___d329 = $test$plusargs("l0");
	  #0;
	end
    NOT_rg_reservation_address_07_BIT_64_08_23_OR__ETC___d332 =
	(!rg_reservation_address[64] ||
	 !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312) &&
	(TASK_testplusargs___d327 ||
	 TASK_testplusargs___d328 && TASK_testplusargs___d329);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  (!rg_reservation_address[64] ||
	   !IF_rg_reservation_address_07_BIT_64_08_THEN_rg_ETC___d312))
	begin
	  v__h36716 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  NOT_rg_reservation_address_07_BIT_64_08_23_OR__ETC___d332)
	$write("[%10d", v__h36716, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  NOT_rg_reservation_address_07_BIT_64_08_23_OR__ETC___d332)
	$write("[%2d]DCACHE: SC fails for : %h. ResAddr:%h",
	       id,
	       ff_core_request_D_OUT[140:77],
	       rg_reservation_address[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_core_request_D_OUT[74:73] == 2'd2 &&
	  ff_core_request_D_OUT[5:1] == 5'b00111 &&
	  NOT_rg_reservation_address_07_BIT_64_08_23_OR__ETC___d332)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d336 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d337 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d338 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h36971 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("[%10d", v__h36971, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("TAGS: tag_in:%h", ff_from_tlb_rv_port1__read[40:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("'h%h", m_tag_v_tags_0_ram_double_0_doutb, " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("'h%h", m_tag_v_tags_1_ram_double_0_doutb, " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("'h%h", m_tag_v_tags_2_ram_double_0_doutb, " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("'h%h", m_tag_v_tags_3_ram_double_0_doutb, " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d336 ||
	   TASK_testplusargs___d337 && TASK_testplusargs___d338))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d343 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d344 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d345 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h37584 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d343 ||
	   TASK_testplusargs___d344 && TASK_testplusargs___d345))
	$write("[%10d", v__h37584, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d343 ||
	   TASK_testplusargs___d344 && TASK_testplusargs___d345))
	$write("TAGS: hitvector:%b", lv_hitvector__h36904);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d343 ||
	   TASK_testplusargs___d344 && TASK_testplusargs___d345))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d357 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d358 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d359 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h37947 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d357 ||
	   TASK_testplusargs___d358 && TASK_testplusargs___d359))
	$write("[%10d", v__h37947, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d357 ||
	   TASK_testplusargs___d358 && TASK_testplusargs___d359))
	$write("[%2d]DCACHE: RAM Hit:%b ", id, lv_hitmask__h37878);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d357 ||
	   TASK_testplusargs___d358 && TASK_testplusargs___d359))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d374 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d375 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d376 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h38457 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d374 ||
	   TASK_testplusargs___d375 && TASK_testplusargs___d376))
	$write("[%10d", v__h38457, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d374 ||
	   TASK_testplusargs___d375 && TASK_testplusargs___d376))
	$write("[%2d]DCACHE: SB hit:%b",
	       id,
	       m_storebuffer_mav_core_lookup[66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d374 ||
	   TASK_testplusargs___d375 && TASK_testplusargs___d376))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_v_tags_3_rg_output_0_port1__ETC___d390)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 766, column 48\nDCACHE: More than one way is a hit in the cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_v_tags_3_rg_output_0_port1__ETC___d390)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d393)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 767, column 63\nDCACHE: Hit in SB and RAMS simultaneously");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d393)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d419 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d420 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d421 = $test$plusargs("l0");
	  #0;
	end
    NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d424 =
	NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	!ff_from_tlb_rv_port1__read[0] &&
	(TASK_testplusargs___d419 ||
	 TASK_testplusargs___d420 && TASK_testplusargs___d421);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  v__h40044 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d424)
	$write("[%10d", v__h40044, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d424)
	$write("[%2d]DCACHE: Allocating Store Buffer", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d424)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  !m_storebuffer_mav_core_lookup[66] &&
	  x__h38803)
	begin
	  TASK_testplusargs___d565 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  !m_storebuffer_mav_core_lookup[66] &&
	  x__h38803)
	begin
	  TASK_testplusargs___d566 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  !m_storebuffer_mav_core_lookup[66] &&
	  x__h38803)
	begin
	  TASK_testplusargs___d567 = $test$plusargs("l0");
	  #0;
	end
    NOT_m_storebuffer_mav_core_lookup_80_BIT_66_81_ETC___d570 =
	!m_storebuffer_mav_core_lookup[66] && x__h38803 &&
	(TASK_testplusargs___d565 ||
	 TASK_testplusargs___d566 && TASK_testplusargs___d567);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  !m_storebuffer_mav_core_lookup[66] &&
	  x__h38803)
	begin
	  v__h59224 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_storebuffer_mav_core_lookup_80_BIT_66_81_ETC___d570)
	$write("[%10d", v__h59224, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_storebuffer_mav_core_lookup_80_BIT_66_81_ETC___d570)
	$write("[%2d]DCACHE: Moving hit line to SB", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_IF_ff_core_request_first__2_BITS_74_TO_73__ETC___d417 &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_storebuffer_mav_core_lookup_80_BIT_66_81_ETC___d570)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d576 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d577 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d578 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d581 =
	NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574 &&
	!ff_from_tlb_rv_port1__read[0] &&
	(TASK_testplusargs___d576 ||
	 TASK_testplusargs___d577 && TASK_testplusargs___d578);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d574 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  v__h59499 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d581)
	$write("[%10d", v__h59499, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d581)
	$write("[%2d]DCACHE: Allocating IO Buffer", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_wr_cache_enable_wget__13_37_OR_ff_from_tlb_ETC___d581)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d588 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d589 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d590 = $test$plusargs("l0");
	  #0;
	end
    ff_from_tlb_rv_port1__read__39_BIT_0_85_AND_TA_ETC___d593 =
	ff_from_tlb_rv_port1__read[0] &&
	(TASK_testplusargs___d588 ||
	 TASK_testplusargs___d589 && TASK_testplusargs___d590);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && ff_from_tlb_rv_port1__read[0])
	begin
	  v__h59828 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  ff_from_tlb_rv_port1__read__39_BIT_0_85_AND_TA_ETC___d593)
	$write("[%10d", v__h59828, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  ff_from_tlb_rv_port1__read__39_BIT_0_85_AND_TA_ETC___d593)
	$write("[%2d]DCACHE: Detected TLB Miss. parking current request", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  ff_from_tlb_rv_port1__read__39_BIT_0_85_AND_TA_ETC___d593)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597)
	begin
	  TASK_testplusargs___d618 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597)
	begin
	  TASK_testplusargs___d619 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597)
	begin
	  TASK_testplusargs___d620 = $test$plusargs("l0");
	  #0;
	end
    NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d623 =
	NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597 &&
	(TASK_testplusargs___d618 ||
	 TASK_testplusargs___d619 && TASK_testplusargs___d620);
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d626 =
	(TASK_testplusargs___d618 ||
	 TASK_testplusargs___d619 && TASK_testplusargs___d620) &&
	(fn_pmp_lookup___d407[7] || ff_from_tlb_rv_port1__read[8]);
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d649 =
	(TASK_testplusargs___d618 ||
	 TASK_testplusargs___d619 && TASK_testplusargs___d620) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8];
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d653 =
	(TASK_testplusargs___d618 ||
	 TASK_testplusargs___d619 && TASK_testplusargs___d620) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8] &&
	(!ma_cache_enable_c ||
	 ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414);
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d657 =
	(TASK_testplusargs___d618 ||
	 TASK_testplusargs___d619 && TASK_testplusargs___d620) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8] &&
	ma_cache_enable_c &&
	!ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414;
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d663 =
	(TASK_testplusargs___d618 ||
	 TASK_testplusargs___d619 && TASK_testplusargs___d620) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8] &&
	(NOT_ff_core_request_first__2_BITS_74_TO_73_90__ETC___d660 ||
	 x__h38897 != 2'd0);
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d669 =
	(TASK_testplusargs___d618 ||
	 TASK_testplusargs___d619 && TASK_testplusargs___d620) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8] &&
	ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d666 &&
	x__h38897 == 2'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d597)
	begin
	  v__h60180 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d623)
	$write("[%10d", v__h60180, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d623)
	$write("[%2d]DCACHE: Responding: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d626)
	if (_theResult_____1_cause__h40255 == 7'd0)
	  $write("{%s with mtval:%h",
		 "Instruction-Address-Misaligned-Trap",
		 rdata__h40211);
	else
	  if (_theResult_____1_cause__h40255 == 7'd1)
	    $write("{%s with mtval:%h",
		   "Instruction-Access-Fault-Trap",
		   rdata__h40211);
	  else
	    if (_theResult_____1_cause__h40255 == 7'd4)
	      $write("{%s with mtval:%h",
		     "Load-Address-Misaligned-Trap",
		     rdata__h40211);
	    else
	      if (_theResult_____1_cause__h40255 == 7'd5)
		$write("{%s with mtval:%h",
		       "Load-Access-Fault-Trap",
		       rdata__h40211);
	      else
		if (_theResult_____1_cause__h40255 == 7'd6)
		  $write("{%s with mtval:%h",
			 "Store-Address-Misaligned-Trap",
			 rdata__h40211);
		else
		  if (_theResult_____1_cause__h40255 == 7'd7)
		    $write("{%s with mtval:%h",
			   "Store-Access-Fault-Trap",
			   rdata__h40211);
		  else
		    if (_theResult_____1_cause__h40255 == 7'd12)
		      $write("{%s with mtval:%h",
			     "Instruction-Page-Fault-Trap",
			     rdata__h40211);
		    else
		      if (_theResult_____1_cause__h40255 == 7'd13)
			$write("{%s with mtval:%h",
			       "Load-Page-Fault-Trap",
			       rdata__h40211);
		      else
			if (_theResult_____1_cause__h40255 == 7'd15)
			  $write("{%s with mtval:%h",
				 "Store-Page-Fault-Trap",
				 rdata__h40211);
			else
			  $write("{%s with mtval:%h",
				 "UNKNOWN CAUSE VALUE",
				 rdata__h40211);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d647 &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d649)
	$write("{data:%h", rdata__h40211);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d626)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d653)
	$write(" is IO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d655 &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d657)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d626)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d647 &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d663)
	$write(" and entry allocated");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d647 &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d669)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d623)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  NOT_m_tag_v_tags_3_rg_output_0_port1__read__14_ETC___d623)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675)
	begin
	  TASK_testplusargs___d680 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675)
	begin
	  TASK_testplusargs___d681 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675)
	begin
	  TASK_testplusargs___d682 = $test$plusargs("l0");
	  #0;
	end
    m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d685 =
	m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675 &&
	(TASK_testplusargs___d680 ||
	 TASK_testplusargs___d681 && TASK_testplusargs___d682);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675)
	begin
	  v__h60463 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d685)
	$write("[%10d", v__h60463, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d685)
	$write("[%2d]DCACHE: MemReq: Sending Line Request for Addr:%h",
	       id,
	       ff_from_tlb_rv_port1__read[40:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d685)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675)
	begin
	  TASK_testplusargs___d704 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675)
	begin
	  TASK_testplusargs___d705 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675)
	begin
	  TASK_testplusargs___d706 = $test$plusargs("l0");
	  #0;
	end
    m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d709 =
	m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675 &&
	(TASK_testplusargs___d704 ||
	 TASK_testplusargs___d705 && TASK_testplusargs___d706);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d675)
	begin
	  v__h61850 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d709)
	$write("[%10d", v__h61850, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d709)
	$write("[%2d]DCACHE: Miss generated. Fetching line@Addr:%h",
	       id,
	       ff_from_tlb_rv_port1__read[40:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check && !ff_from_tlb_rv_port1__read[0] &&
	  m_tag_v_tags_3_rg_output_0_port1__read__14_EQ__ETC___d709)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d712 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d713 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d714 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h62015 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d712 ||
	   TASK_testplusargs___d713 && TASK_testplusargs___d714))
	$write("[%10d", v__h62015, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d712 ||
	   TASK_testplusargs___d713 && TASK_testplusargs___d714))
	$write("[%2d]DCACHE: RAM Valid:%b Dirty:%b",
	       id,
	       lv_set_valid__h36892,
	       lv_set_dirty__h36893);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d712 ||
	   TASK_testplusargs___d713 && TASK_testplusargs___d714))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d726 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d727 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d728 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d732 =
	(TASK_testplusargs___d726 ||
	 TASK_testplusargs___d727 && TASK_testplusargs___d728) &&
	(fn_pmp_lookup___d407[7] || ff_from_tlb_rv_port1__read[8]);
    TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d733 =
	(TASK_testplusargs___d726 ||
	 TASK_testplusargs___d727 && TASK_testplusargs___d728) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8];
    TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d734 =
	(TASK_testplusargs___d726 ||
	 TASK_testplusargs___d727 && TASK_testplusargs___d728) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8] &&
	(!ma_cache_enable_c ||
	 ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414);
    TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d735 =
	(TASK_testplusargs___d726 ||
	 TASK_testplusargs___d727 && TASK_testplusargs___d728) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8] &&
	ma_cache_enable_c &&
	!ff_from_tlb_rv_port1__read__39_BITS_40_TO_9_61_ETC___d414;
    TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d736 =
	(TASK_testplusargs___d726 ||
	 TASK_testplusargs___d727 && TASK_testplusargs___d728) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8] &&
	(NOT_ff_core_request_first__2_BITS_74_TO_73_90__ETC___d660 ||
	 x__h38897 != 2'd0);
    TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d737 =
	(TASK_testplusargs___d726 ||
	 TASK_testplusargs___d727 && TASK_testplusargs___d728) &&
	!fn_pmp_lookup___d407[7] &&
	!ff_from_tlb_rv_port1__read[8] &&
	ff_core_request_first__2_BITS_74_TO_73_90_EQ_2_ETC___d666 &&
	x__h38897 == 2'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h62410 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d726 ||
	   TASK_testplusargs___d727 && TASK_testplusargs___d728))
	$write("[%10d", v__h62410, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d726 ||
	   TASK_testplusargs___d727 && TASK_testplusargs___d728))
	$write("[%2d]DCACHE: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d732)
	if (_theResult_____1_cause__h40255 == 7'd0)
	  $write("{%s with mtval:%h",
		 "Instruction-Address-Misaligned-Trap",
		 rdata__h40211);
	else
	  if (_theResult_____1_cause__h40255 == 7'd1)
	    $write("{%s with mtval:%h",
		   "Instruction-Access-Fault-Trap",
		   rdata__h40211);
	  else
	    if (_theResult_____1_cause__h40255 == 7'd4)
	      $write("{%s with mtval:%h",
		     "Load-Address-Misaligned-Trap",
		     rdata__h40211);
	    else
	      if (_theResult_____1_cause__h40255 == 7'd5)
		$write("{%s with mtval:%h",
		       "Load-Access-Fault-Trap",
		       rdata__h40211);
	      else
		if (_theResult_____1_cause__h40255 == 7'd6)
		  $write("{%s with mtval:%h",
			 "Store-Address-Misaligned-Trap",
			 rdata__h40211);
		else
		  if (_theResult_____1_cause__h40255 == 7'd7)
		    $write("{%s with mtval:%h",
			   "Store-Access-Fault-Trap",
			   rdata__h40211);
		  else
		    if (_theResult_____1_cause__h40255 == 7'd12)
		      $write("{%s with mtval:%h",
			     "Instruction-Page-Fault-Trap",
			     rdata__h40211);
		    else
		      if (_theResult_____1_cause__h40255 == 7'd13)
			$write("{%s with mtval:%h",
			       "Load-Page-Fault-Trap",
			       rdata__h40211);
		      else
			if (_theResult_____1_cause__h40255 == 7'd15)
			  $write("{%s with mtval:%h",
				 "Store-Page-Fault-Trap",
				 rdata__h40211);
			else
			  $write("{%s with mtval:%h",
				 "UNKNOWN CAUSE VALUE",
				 rdata__h40211);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d733)
	$write("{data:%h", rdata__h40211);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d732)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d734)
	$write(" is IO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d735)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d732)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d736)
	$write(" and entry allocated");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_26_OR_TASK_testplusargs_27_A_ETC___d737)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d726 ||
	   TASK_testplusargs___d727 && TASK_testplusargs___d728))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d726 ||
	   TASK_testplusargs___d727 && TASK_testplusargs___d728))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d754 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d755 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d756 = $test$plusargs("l0");
	  #0;
	end
    NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d759 =
	!rg_fill_err &&
	(TASK_testplusargs___d754 ||
	 TASK_testplusargs___d755 && TASK_testplusargs___d756);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  v__h62899 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d759)
	$write("[%10d", v__h62899, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d759)
	$write("[%2d]DCACHE: writing fill to ram tag:%h set:%d way:%d data:%h",
	       id,
	       rg_fill_tag,
	       rg_fill_set,
	       rg_fill_way,
	       x1__h65298);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d759)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d776 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d777 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d778 = $test$plusargs("l0");
	  #0;
	end
    NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d781 =
	!rg_fill_err &&
	(TASK_testplusargs___d776 ||
	 TASK_testplusargs___d777 && TASK_testplusargs___d778);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  v__h64212 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d781)
	$write("[%10d", v__h64212, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d781)
	$write("[%2d]DCACHE: DATAs: Req: rw:%b ind:%d data:%h",
	       id,
	       rg_fill_set,
	       rg_fill_way,
	       x1__h65298);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d781)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d791 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d792 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  TASK_testplusargs___d793 = $test$plusargs("l0");
	  #0;
	end
    NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d796 =
	!rg_fill_err &&
	(TASK_testplusargs___d791 ||
	 TASK_testplusargs___d792 && TASK_testplusargs___d793);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && !rg_fill_err)
	begin
	  v__h66229 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d796)
	$write("[%10d", v__h66229, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d796)
	$write("[%2d]DCACHE: TAGs: Req: way:%d ind:%d tag:%h",
	       id,
	       rg_fill_way,
	       rg_fill_set,
	       rg_fill_tag);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  NOT_rg_fill_err_read__52_53_AND_TASK_testplusa_ETC___d796)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && rg_fill_eviction)
	begin
	  TASK_testplusargs___d813 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && rg_fill_eviction)
	begin
	  TASK_testplusargs___d814 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && rg_fill_eviction)
	begin
	  TASK_testplusargs___d815 = $test$plusargs("l0");
	  #0;
	end
    rg_fill_eviction_read__06_AND_TASK_testplusarg_ETC___d818 =
	rg_fill_eviction &&
	(TASK_testplusargs___d813 ||
	 TASK_testplusargs___d814 && TASK_testplusargs___d815);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release && rg_fill_eviction)
	begin
	  v__h75271 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  rg_fill_eviction_read__06_AND_TASK_testplusarg_ETC___d818)
	$write("[%10d", v__h75271, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  rg_fill_eviction_read__06_AND_TASK_testplusarg_ETC___d818)
	$write("[%2d]DCACHE: Initiating eviction of dirty line replaced", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_release &&
	  rg_fill_eviction_read__06_AND_TASK_testplusarg_ETC___d818)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release)
	begin
	  TASK_testplusargs___d837 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release)
	begin
	  TASK_testplusargs___d838 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release)
	begin
	  TASK_testplusargs___d839 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release)
	begin
	  v__h75496 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (TASK_testplusargs___d837 ||
	   TASK_testplusargs___d838 && TASK_testplusargs___d839))
	$write("[%10d", v__h75496, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (TASK_testplusargs___d837 ||
	   TASK_testplusargs___d838 && TASK_testplusargs___d839))
	$write("[%2d]DCACHE: Store release from entry:%d",
	       id,
	       m_storebuffer_mv_lb_head);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (TASK_testplusargs___d837 ||
	   TASK_testplusargs___d838 && TASK_testplusargs___d839))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && rg_store_eviction)
	begin
	  TASK_testplusargs___d845 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && rg_store_eviction)
	begin
	  TASK_testplusargs___d846 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && rg_store_eviction)
	begin
	  TASK_testplusargs___d847 = $test$plusargs("l0");
	  #0;
	end
    rg_store_eviction_44_AND_TASK_testplusargs_45__ETC___d850 =
	rg_store_eviction &&
	(TASK_testplusargs___d845 ||
	 TASK_testplusargs___d846 && TASK_testplusargs___d847);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && rg_store_eviction)
	begin
	  v__h82319 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  rg_store_eviction_44_AND_TASK_testplusargs_45__ETC___d850)
	$write("[%10d", v__h82319, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  rg_store_eviction_44_AND_TASK_testplusargs_45__ETC___d850)
	$write("[%2d]DCACHE: Store release staging for eviction:way:%d set:%d address:%h, line:%h",
	       id,
	       v__h75586,
	       m_storebuffer_mv_release_head[11:6],
	       _theResult_____1__h82252,
	       lv_line__h78633);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  rg_store_eviction_44_AND_TASK_testplusargs_45__ETC___d850)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 &&
	  !rg_store_eviction)
	begin
	  TASK_testplusargs___d962 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 &&
	  !rg_store_eviction)
	begin
	  TASK_testplusargs___d963 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 &&
	  !rg_store_eviction)
	begin
	  TASK_testplusargs___d964 = $test$plusargs("l0");
	  #0;
	end
    v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d967 =
	v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 &&
	!rg_store_eviction &&
	(TASK_testplusargs___d962 ||
	 TASK_testplusargs___d963 && TASK_testplusargs___d964);
    __duses557 =
	(TASK_testplusargs___d962 ||
	 TASK_testplusargs___d963 && TASK_testplusargs___d964) &&
	!rg_store_eviction;
    __duses578 =
	__duses437 || __duses557 || !rg_store_eviction || __duses421 ||
	lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0;
    __duses581 =
	1'b1 ||
	v__h75586 == 2'd0 &&
	(!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	 rg_store_eviction) &&
	(v__h75586 == 2'd0 || 1'b1) ||
	1'b1 ||
	__duses557 ||
	!rg_store_eviction ||
	1'b1;
    __duses585 =
	__duses557 || !rg_store_eviction || lv_set_valid__h75581 == 4'd15;
    __duses588 =
	__duses453 || __duses445 || __duses421 ||
	lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses578;
    __duses629 =
	!rg_store_eviction || __duses420 || __duses420 || __duses420 ||
	__duses444 ||
	__duses420 ||
	__duses557 ||
	!rg_store_eviction ||
	__duses420;
    __duses632 =
	!rg_store_eviction || lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses471 ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses585;
    __duses633 =
	!rg_store_eviction || lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses481 ||
	lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses585;
    __duses634 =
	!rg_store_eviction || lv_set_valid__h75581 == 4'd15 || __duses491 ||
	lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses585;
    __duses635 =
	!rg_store_eviction || __duses501 || lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses585;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 &&
	  !rg_store_eviction)
	begin
	  v__h86510 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d967)
	$write("[%10d", v__h86510, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d967)
	$write("[%2d]DCACHE: Store release initiating read for set:%d way:%d",
	       id,
	       m_storebuffer_mv_release_head[11:6],
	       v__h75586);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d967)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d981 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d982 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d983 = $test$plusargs("l0");
	  #0;
	end
    NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d986 =
	(!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	 rg_store_eviction) &&
	(TASK_testplusargs___d981 ||
	 TASK_testplusargs___d982 && TASK_testplusargs___d983);
    __duses668 =
	(TASK_testplusargs___d981 ||
	 TASK_testplusargs___d982 && TASK_testplusargs___d983) &&
	!rg_store_eviction;
    __duses677 =
	(TASK_testplusargs___d981 ||
	 TASK_testplusargs___d982 && TASK_testplusargs___d983) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 1'b1 ||
	 !rg_store_eviction);
    __duses679 =
	(TASK_testplusargs___d981 ||
	 TASK_testplusargs___d982 && TASK_testplusargs___d983) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 __duses420 ||
	 !rg_store_eviction);
    __duses671 =
	__duses668 || !rg_store_eviction || __duses421 ||
	lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses461 ||
	__duses421 ||
	lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses588;
    __duses681 =
	(TASK_testplusargs___d981 ||
	 TASK_testplusargs___d982 && TASK_testplusargs___d983) &&
	(__duses509 || !rg_store_eviction);
    __duses685 =
	(TASK_testplusargs___d981 ||
	 TASK_testplusargs___d982 && TASK_testplusargs___d983) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 lv_set_valid__h75581 == 4'd15 ||
	 !rg_store_eviction);
    __duses698 =
	1'b1 || __duses677 || __duses668 || !rg_store_eviction ||
	!rg_store_eviction ||
	1'b1 ||
	1'b1 ||
	1'b1 ||
	__duses581;
    __duses699 =
	__duses420 || __duses679 || __duses668 || !rg_store_eviction ||
	__duses629;
    __duses700 =
	__duses421 || lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses668 ||
	__duses681 ||
	__duses671;
    __duses702 =
	lv_set_valid__h75581 == 4'd15 || __duses685 || __duses668 ||
	!rg_store_eviction ||
	__duses632;
    __duses703 =
	lv_set_valid__h75581 == 4'd15 || __duses685 || __duses668 ||
	!rg_store_eviction ||
	__duses633;
    __duses704 =
	lv_set_valid__h75581 == 4'd15 || __duses685 || __duses668 ||
	!rg_store_eviction ||
	__duses634;
    __duses705 =
	lv_set_valid__h75581 == 4'd15 || __duses685 || __duses668 ||
	!rg_store_eviction ||
	__duses635;
    __duses796 =
	!rg_store_eviction || __duses421 || lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses421 ||
	lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses700;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  v__h86907 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d986)
	$write("[%10d", v__h86907, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d986)
	$write("[%2d]DCACHE: DATAs: Req: rw:%b ind:%d data:%h",
	       id,
	       m_storebuffer_mv_release_head[11:6],
	       v__h75586,
	       m_storebuffer_mv_release_head[543:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d986)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d989 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d990 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d991 = $test$plusargs("l0");
	  #0;
	end
    NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d994 =
	(!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	 rg_store_eviction) &&
	(TASK_testplusargs___d989 ||
	 TASK_testplusargs___d990 && TASK_testplusargs___d991);
    __duses826 =
	(TASK_testplusargs___d989 ||
	 TASK_testplusargs___d990 && TASK_testplusargs___d991) &&
	!rg_store_eviction;
    __duses835 =
	(TASK_testplusargs___d989 ||
	 TASK_testplusargs___d990 && TASK_testplusargs___d991) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 1'b1 ||
	 !rg_store_eviction);
    __duses837 =
	(TASK_testplusargs___d989 ||
	 TASK_testplusargs___d990 && TASK_testplusargs___d991) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 __duses420 ||
	 !rg_store_eviction);
    __duses839 =
	(TASK_testplusargs___d989 ||
	 TASK_testplusargs___d990 && TASK_testplusargs___d991) &&
	(__duses509 || !rg_store_eviction);
    __duses843 =
	(TASK_testplusargs___d989 ||
	 TASK_testplusargs___d990 && TASK_testplusargs___d991) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 lv_set_valid__h75581 == 4'd15 ||
	 !rg_store_eviction);
    __duses856 =
	__duses835 || __duses826 || !rg_store_eviction || 1'b1 || __duses698;
    __duses857 =
	__duses837 || __duses826 || !rg_store_eviction || __duses420 ||
	__duses699;
    __duses858 =
	__duses421 || lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses839 ||
	__duses826 ||
	!rg_store_eviction ||
	__duses796;
    __duses860 =
	__duses843 || __duses826 || !rg_store_eviction ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses702;
    __duses861 =
	__duses843 || __duses826 || !rg_store_eviction ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses703;
    __duses862 =
	__duses843 || __duses826 || !rg_store_eviction ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses704;
    __duses863 =
	__duses843 || __duses826 || !rg_store_eviction ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses705;
    __duses954 =
	!rg_store_eviction || __duses421 || lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses421 ||
	lv_set_dirty__h75582 == 4'd15 ||
	lv_set_dirty__h75582 == 4'd0 ||
	__duses858;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  v__h87968 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d994)
	$write("[%10d", v__h87968, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d994)
	$write("[%2d]DCACHE: TAGs: Req: way:%d ind:%d tag:%h",
	       id,
	       v__h75586,
	       m_storebuffer_mv_release_head[11:6],
	       m_storebuffer_mv_release_head[31:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d994)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d997 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d998 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  TASK_testplusargs___d999 = $test$plusargs("l0");
	  #0;
	end
    NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1002 =
	(!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	 rg_store_eviction) &&
	(TASK_testplusargs___d997 ||
	 TASK_testplusargs___d998 && TASK_testplusargs___d999);
    __duses992 =
	(TASK_testplusargs___d997 ||
	 TASK_testplusargs___d998 && TASK_testplusargs___d999) &&
	!rg_store_eviction;
    __duses1017 =
	(TASK_testplusargs___d997 ||
	 TASK_testplusargs___d998 && TASK_testplusargs___d999) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 1'b1 ||
	 !rg_store_eviction);
    __duses1019 =
	(TASK_testplusargs___d997 ||
	 TASK_testplusargs___d998 && TASK_testplusargs___d999) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 __duses420 ||
	 !rg_store_eviction);
    __duses1021 =
	(TASK_testplusargs___d997 ||
	 TASK_testplusargs___d998 && TASK_testplusargs___d999) &&
	(__duses509 || !rg_store_eviction);
    __duses1025 =
	(TASK_testplusargs___d997 ||
	 TASK_testplusargs___d998 && TASK_testplusargs___d999) &&
	((!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	  rg_store_eviction) &&
	 lv_set_valid__h75581 == 4'd15 ||
	 !rg_store_eviction);
    __duses1030 =
	__duses1017 || __duses992 || !rg_store_eviction || 1'b1 || __duses856;
    __duses1031 =
	__duses1019 || __duses992 || !rg_store_eviction || __duses420 ||
	__duses857;
    __duses1034 =
	__duses1025 || __duses992 || !rg_store_eviction ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses860;
    __duses1035 =
	__duses1025 || __duses992 || !rg_store_eviction ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses861;
    __duses1036 =
	__duses1025 || __duses992 || !rg_store_eviction ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses862;
    __duses1037 =
	__duses1025 || __duses992 || !rg_store_eviction ||
	lv_set_valid__h75581 == 4'd15 ||
	__duses863;
    __duses1061 =
	__duses1038 || __duses1021 || __duses992 || !rg_store_eviction ||
	__duses954;
    __duses1090 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd4 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd3 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd2 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd1 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd0 ||
	__duses1038 ||
	__duses1031;
    __duses1089 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd4 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd3 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd2 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd1 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd0 ||
	__duses1038 ||
	__duses1030;
    __duses1093 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd4 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd3 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd2 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd1 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd0 ||
	__duses1038 ||
	__duses1034;
    __duses1094 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd4 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd3 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd2 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd1 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd0 ||
	__duses1038 ||
	__duses1035;
    __duses1095 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd4 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd3 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd2 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd1 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd0 ||
	__duses1038 ||
	__duses1036;
    __duses1096 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd4 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd3 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd2 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd1 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd0 ||
	__duses1038 ||
	__duses1037;
    __duses1121 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd7 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd6 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd5 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd4 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd3 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd2 ||
	__duses1061;
    __duses1150 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd10 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd9 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd8 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd7 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd6 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd5 ||
	__duses1090;
    __duses1149 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd10 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd9 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd8 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd7 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd6 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd5 ||
	__duses1089;
    __duses1153 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd10 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd9 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd8 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd7 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd6 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd5 ||
	__duses1093;
    __duses1154 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd10 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd9 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd8 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd7 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd6 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd5 ||
	__duses1094;
    __duses1155 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd10 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd9 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd8 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd7 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd6 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd5 ||
	__duses1095;
    __duses1156 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd10 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd9 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd8 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd7 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd6 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd5 ||
	__duses1096;
    __duses1181 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd13 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd12 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd11 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd10 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd9 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd8 ||
	__duses1121;
    __duses1210 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd16 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd15 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd14 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd13 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd12 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd11 ||
	__duses1150;
    __duses1209 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd16 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd15 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd14 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd13 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd12 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd11 ||
	__duses1149;
    __duses1213 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd16 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd15 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd14 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd13 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd12 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd11 ||
	__duses1153;
    __duses1214 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd16 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd15 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd14 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd13 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd12 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd11 ||
	__duses1154;
    __duses1215 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd16 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd15 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd14 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd13 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd12 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd11 ||
	__duses1155;
    __duses1216 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd16 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd15 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd14 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd13 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd12 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd11 ||
	__duses1156;
    __duses1241 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd19 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd18 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd17 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd16 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd15 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd14 ||
	__duses1181;
    __duses1270 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd22 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd21 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd20 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd19 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd18 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd17 ||
	__duses1210;
    __duses1269 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd22 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd21 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd20 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd19 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd18 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd17 ||
	__duses1209;
    __duses1273 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd22 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd21 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd20 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd19 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd18 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd17 ||
	__duses1213;
    __duses1274 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd22 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd21 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd20 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd19 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd18 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd17 ||
	__duses1214;
    __duses1275 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd22 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd21 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd20 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd19 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd18 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd17 ||
	__duses1215;
    __duses1276 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd22 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd21 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd20 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd19 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd18 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd17 ||
	__duses1216;
    __duses1330 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd28 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd27 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd26 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd25 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd24 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd23 ||
	__duses1270;
    __duses1301 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd25 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd24 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd23 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd22 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd21 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd20 ||
	__duses1241;
    __duses1329 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd28 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd27 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd26 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd25 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd24 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd23 ||
	__duses1269;
    __duses1333 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd28 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd27 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd26 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd25 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd24 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd23 ||
	__duses1273;
    __duses1334 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd28 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd27 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd26 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd25 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd24 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd23 ||
	__duses1274;
    __duses1335 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd28 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd27 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd26 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd25 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd24 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd23 ||
	__duses1275;
    __duses1336 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd28 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd27 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd26 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd25 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd24 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd23 ||
	__duses1276;
    __duses1361 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd31 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd30 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd29 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd28 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd27 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd26 ||
	__duses1301;
    __duses1390 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd34 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd33 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd32 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd31 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd30 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd29 ||
	__duses1330;
    __duses1389 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd34 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd33 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd32 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd31 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd30 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd29 ||
	__duses1329;
    __duses1393 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd34 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd33 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd32 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd31 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd30 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd29 ||
	__duses1333;
    __duses1394 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd34 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd33 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd32 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd31 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd30 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd29 ||
	__duses1334;
    __duses1395 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd34 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd33 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd32 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd31 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd30 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd29 ||
	__duses1335;
    __duses1396 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd34 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd33 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd32 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd31 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd30 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd29 ||
	__duses1336;
    __duses1421 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd37 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd36 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd35 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd34 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd33 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd32 ||
	__duses1361;
    __duses1450 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd40 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd39 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd38 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd37 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd36 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd35 ||
	__duses1390;
    __duses1449 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd40 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd39 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd38 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd37 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd36 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd35 ||
	__duses1389;
    __duses1453 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd40 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd39 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd38 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd37 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd36 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd35 ||
	__duses1393;
    __duses1454 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd40 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd39 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd38 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd37 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd36 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd35 ||
	__duses1394;
    __duses1456 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd40 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd39 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd38 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd37 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd36 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd35 ||
	__duses1396;
    __duses1455 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd40 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd39 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd38 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd37 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd36 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd35 ||
	__duses1395;
    __duses1481 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd43 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd42 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd41 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd40 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd39 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd38 ||
	__duses1421;
    __duses1510 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd46 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd45 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd44 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd43 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd42 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd41 ||
	__duses1450;
    __duses1509 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd46 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd45 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd44 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd43 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd42 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd41 ||
	__duses1449;
    __duses1513 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd46 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd45 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd44 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd43 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd42 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd41 ||
	__duses1453;
    __duses1514 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd46 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd45 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd44 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd43 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd42 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd41 ||
	__duses1454;
    __duses1515 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd46 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd45 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd44 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd43 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd42 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd41 ||
	__duses1455;
    __duses1516 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd46 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd45 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd44 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd43 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd42 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd41 ||
	__duses1456;
    __duses1541 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd49 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd48 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd47 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd46 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd45 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd44 ||
	__duses1481;
    __duses1570 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd52 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd51 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd50 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd49 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd48 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd47 ||
	__duses1510;
    __duses1569 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd52 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd51 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd50 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd49 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd48 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd47 ||
	__duses1509;
    __duses1573 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd52 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd51 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd50 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd49 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd48 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd47 ||
	__duses1513;
    __duses1574 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd52 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd51 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd50 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd49 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd48 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd47 ||
	__duses1514;
    __duses1575 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd52 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd51 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd50 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd49 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd48 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd47 ||
	__duses1515;
    __duses1576 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd52 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd51 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd50 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd49 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd48 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd47 ||
	__duses1516;
    __duses1601 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd55 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd54 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd53 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd52 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd51 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd50 ||
	__duses1541;
    __duses1630 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd58 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd57 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd56 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd55 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd54 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd53 ||
	__duses1570;
    __duses1629 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd58 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd57 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd56 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd55 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd54 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd53 ||
	__duses1569;
    __duses1633 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd58 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd57 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd56 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd55 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd54 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd53 ||
	__duses1573;
    __duses1634 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd58 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd57 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd56 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd55 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd54 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd53 ||
	__duses1574;
    __duses1635 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd58 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd57 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd56 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd55 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd54 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd53 ||
	__duses1575;
    __duses1636 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd58 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd57 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd56 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd55 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd54 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd53 ||
	__duses1576;
    __duses1660 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd61 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd60 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd59 ||
	__duses1630;
    __duses1659 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd61 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd60 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd59 ||
	__duses1629;
    __duses1661 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd61 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd60 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd59 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd58 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd57 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd56 ||
	__duses1601;
    __duses1663 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd61 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd60 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd59 ||
	__duses1633;
    __duses1664 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd61 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd60 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd59 ||
	__duses1634;
    __duses1665 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd61 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd60 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd59 ||
	__duses1635;
    __duses1666 =
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd61 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd60 ||
	!rg_store_eviction && m_storebuffer_mv_release_head[11:6] == 6'd59 ||
	__duses1636;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  (!v_reg_valid_3_0_BIT_m_storebuffer_mv_release_h_ETC___d959 ||
	   rg_store_eviction))
	begin
	  v__h89041 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1002)
	$write("[%10d", v__h89041, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1002)
	$write("[%2d]DCACHE: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1002)
	$write("StoreRelease ready [%h]=%h",
	       m_storebuffer_mv_release_head[31:0],
	       m_storebuffer_mv_release_head[543:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1002)
	$write(" to tag:%h set:%d way:%d",
	       m_storebuffer_mv_release_head[31:6],
	       m_storebuffer_mv_release_head[11:6],
	       v__h75586);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release &&
	  NOT_v_reg_valid_3_0_BIT_m_storebuffer_mv_relea_ETC___d1002)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && WILL_FIRE_RL_rl_ram_check &&
	  (!rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd63 ||
	   !rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd62 ||
	   __duses1659) &&
	  m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d552)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 961, column 10: (R0002)\n  Conflict-free rules RL_rl_store_release and RL_rl_ram_check called\n  conflicting methods read and write of module instance v_reg_valid_0.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && WILL_FIRE_RL_rl_ram_check &&
	  (!rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd63 ||
	   !rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd62 ||
	   __duses1660) &&
	  m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d558)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 961, column 10: (R0002)\n  Conflict-free rules RL_rl_store_release and RL_rl_ram_check called\n  conflicting methods read and write of module instance v_reg_valid_1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && WILL_FIRE_RL_rl_ram_check &&
	  (!rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd63 ||
	   !rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd62 ||
	   __duses1661) &&
	  m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d560)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 961, column 10: (R0002)\n  Conflict-free rules RL_rl_store_release and RL_rl_ram_check called\n  conflicting methods read and write of module instance v_reg_valid_2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && WILL_FIRE_RL_rl_ram_check &&
	  m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d562)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 961, column 10: (R0002)\n  Conflict-free rules RL_rl_store_release and RL_rl_ram_check called\n  conflicting methods read and write of module instance v_reg_valid_3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && WILL_FIRE_RL_rl_ram_check &&
	  (!rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd63 ||
	   !rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd62 ||
	   __duses1663) &&
	  m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d552)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 961, column 10: (R0002)\n  Conflict-free rules RL_rl_store_release and RL_rl_ram_check called\n  conflicting methods read and write of module instance v_reg_dirty_0.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && WILL_FIRE_RL_rl_ram_check &&
	  (!rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd63 ||
	   !rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd62 ||
	   __duses1664) &&
	  m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d558)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 961, column 10: (R0002)\n  Conflict-free rules RL_rl_store_release and RL_rl_ram_check called\n  conflicting methods read and write of module instance v_reg_dirty_1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && WILL_FIRE_RL_rl_ram_check &&
	  (!rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd63 ||
	   !rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd62 ||
	   __duses1665) &&
	  m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d560)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 961, column 10: (R0002)\n  Conflict-free rules RL_rl_store_release and RL_rl_ram_check called\n  conflicting methods read and write of module instance v_reg_dirty_2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_store_release && WILL_FIRE_RL_rl_ram_check &&
	  (!rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd63 ||
	   !rg_store_eviction &&
	   m_storebuffer_mv_release_head[11:6] == 6'd62 ||
	   __duses1666) &&
	  m_tag_v_tags_2_rg_output_0_port1__read__13_EQ__ETC___d562)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 961, column 10: (R0002)\n  Conflict-free rules RL_rl_store_release and RL_rl_ram_check called\n  conflicting methods read and write of module instance v_reg_dirty_3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response)
	begin
	  TASK_testplusargs___d1179 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response)
	begin
	  TASK_testplusargs___d1180 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response)
	begin
	  TASK_testplusargs___d1181 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_179_OR_TASK_testplusargs_180_ETC___d1188 =
	(TASK_testplusargs___d1179 ||
	 TASK_testplusargs___d1180 && TASK_testplusargs___d1181) &&
	ff_mem_io_resp_D_OUT[0];
    TASK_testplusargs_179_OR_TASK_testplusargs_180_ETC___d1190 =
	(TASK_testplusargs___d1179 ||
	 TASK_testplusargs___d1180 && TASK_testplusargs___d1181) &&
	!ff_mem_io_resp_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response)
	begin
	  v__h94395 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  (TASK_testplusargs___d1179 ||
	   TASK_testplusargs___d1180 && TASK_testplusargs___d1181))
	$write("[%10d", v__h94395, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  (TASK_testplusargs___d1179 ||
	   TASK_testplusargs___d1180 && TASK_testplusargs___d1181))
	$write("[%2d]DCACHE: IO Response from Bus", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  (TASK_testplusargs___d1179 ||
	   TASK_testplusargs___d1180 && TASK_testplusargs___d1181))
	$write("DCache_io_response { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  (TASK_testplusargs___d1179 ||
	   TASK_testplusargs___d1180 && TASK_testplusargs___d1181))
	$write("'h%h", ff_mem_io_resp_D_OUT[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  (TASK_testplusargs___d1179 ||
	   TASK_testplusargs___d1180 && TASK_testplusargs___d1181))
	$write(", ", "error: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  TASK_testplusargs_179_OR_TASK_testplusargs_180_ETC___d1188)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  TASK_testplusargs_179_OR_TASK_testplusargs_180_ETC___d1190)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  (TASK_testplusargs___d1179 ||
	   TASK_testplusargs___d1180 && TASK_testplusargs___d1181))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  (TASK_testplusargs___d1179 ||
	   TASK_testplusargs___d1180 && TASK_testplusargs___d1181))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  NOT_m_iobuffer_mv_io_head__154_BIT_0_171_173_A_ETC___d1235)
	begin
	  TASK_testplusargs___d1274 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  NOT_m_iobuffer_mv_io_head__154_BIT_0_171_173_A_ETC___d1235)
	begin
	  TASK_testplusargs___d1275 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  NOT_m_iobuffer_mv_io_head__154_BIT_0_171_173_A_ETC___d1235)
	begin
	  TASK_testplusargs___d1276 = $test$plusargs("l0");
	  #0;
	end
    m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1279 =
	m_iobuffer_mv_io_head[71:70] == 2'd2 && !rg_io_atomic_done &&
	!ff_mem_io_resp_D_OUT[0] &&
	(TASK_testplusargs___d1274 ||
	 TASK_testplusargs___d1275 && TASK_testplusargs___d1276);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response &&
	  NOT_m_iobuffer_mv_io_head__154_BIT_0_171_173_A_ETC___d1235)
	begin
	  v__h95430 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1279)
	$write("[%10d", v__h95430, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1279)
	$write("DACCHE[%2d]: IO Atomic Rd phase Done. NewSt:%h",
	       id,
	       _new_store__h94542);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1279)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	  rg_io_atomic_done)
	begin
	  TASK_testplusargs___d1284 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	  rg_io_atomic_done)
	begin
	  TASK_testplusargs___d1285 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	  rg_io_atomic_done)
	begin
	  TASK_testplusargs___d1286 = $test$plusargs("l0");
	  #0;
	end
    m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1289 =
	m_iobuffer_mv_io_head[71:70] == 2'd2 && rg_io_atomic_done &&
	(TASK_testplusargs___d1284 ||
	 TASK_testplusargs___d1285 && TASK_testplusargs___d1286);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	  rg_io_atomic_done)
	begin
	  v__h95605 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1289)
	$write("[%10d", v__h95605, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1289)
	$write("DACCHE[%2d]: IO Atomic Wr phase Done.", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	  m_iobuffer_mv_io_head__154_BITS_71_TO_70_156_E_ETC___d1289)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && WILL_FIRE_RL_rl_ram_check &&
	  _ma_allocate_io_RL_rl_ram_check_EN_m_iobuffer_wget)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 1040, column 10: (R0002)\n  Conflict-free rules RL_rl_io_response and RL_rl_ram_check called conflicting\n  methods mv_io_head and ma_allocate_io of module instance m_iobuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && WILL_FIRE_RL_rl_ram_check &&
	  m_iobuffer_mv_io_head__154_BIT_0_171_OR_NOT_m__ETC___d1196 &&
	  _ma_allocate_io_RL_rl_ram_check_EN_m_iobuffer_wget)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 1040, column 10: (R0002)\n  Conflict-free rules RL_rl_io_response and RL_rl_ram_check called conflicting\n  methods ma_increment_head and ma_allocate_io of module instance m_iobuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && WILL_FIRE_RL_rl_ram_check &&
	  ff_mem_io_resp_EMPTY_N &&
	  rg_io_busy &&
	  ff_mem_io_request_FULL_N &&
	  _port0__write_RL_rl_ram_check_EN_ff_ptw_response_rv_wget)
	$display("Error: \"cache_subsystem/src/dcache/dcache1r1w.bsv\", line 1040, column 10: (R0002)\n  Conflict-free rules RL_rl_io_response and RL_rl_ram_check called conflicting\n  methods port0__read and port0__write of module instance ff_ptw_response_rv.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1300 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1301 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1302 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1308 =
	(TASK_testplusargs___d1300 ||
	 TASK_testplusargs___d1301 && TASK_testplusargs___d1302) &&
	ff_mem_rd_resp_rv_port1__read[1];
    TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1310 =
	(TASK_testplusargs___d1300 ||
	 TASK_testplusargs___d1301 && TASK_testplusargs___d1302) &&
	!ff_mem_rd_resp_rv_port1__read[1];
    TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1312 =
	(TASK_testplusargs___d1300 ||
	 TASK_testplusargs___d1301 && TASK_testplusargs___d1302) &&
	ff_mem_rd_resp_rv_port1__read[0];
    TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1314 =
	(TASK_testplusargs___d1300 ||
	 TASK_testplusargs___d1301 && TASK_testplusargs___d1302) &&
	!ff_mem_rd_resp_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  v__h95837 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1300 ||
	   TASK_testplusargs___d1301 && TASK_testplusargs___d1302))
	$write("[%10d", v__h95837, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1300 ||
	   TASK_testplusargs___d1301 && TASK_testplusargs___d1302))
	$write("[%2d]DCACHE: fill from mem:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1300 ||
	   TASK_testplusargs___d1301 && TASK_testplusargs___d1302))
	$write("{data:%h", ff_mem_rd_resp_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1308)
	$write(" Last");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1310)
	$write(" NotLast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1312)
	$write(" Error");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_300_OR_TASK_testplusargs_301_ETC___d1314)
	$write(" NoError");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1300 ||
	   TASK_testplusargs___d1301 && TASK_testplusargs___d1302))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1300 ||
	   TASK_testplusargs___d1301 && TASK_testplusargs___d1302))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (rg_first && rg_miss_meta[37:36] == 2'd0 ||
	   rg_miss_meta[37:36] == 2'd1 && ff_mem_rd_resp_rv_port1__read[1] ||
	   rg_first && rg_miss_meta[37:36] == 2'd2))
	begin
	  TASK_testplusargs___d1326 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (rg_first && rg_miss_meta[37:36] == 2'd0 ||
	   rg_miss_meta[37:36] == 2'd1 && ff_mem_rd_resp_rv_port1__read[1] ||
	   rg_first && rg_miss_meta[37:36] == 2'd2))
	begin
	  TASK_testplusargs___d1327 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (rg_first && rg_miss_meta[37:36] == 2'd0 ||
	   rg_miss_meta[37:36] == 2'd1 && ff_mem_rd_resp_rv_port1__read[1] ||
	   rg_first && rg_miss_meta[37:36] == 2'd2))
	begin
	  TASK_testplusargs___d1328 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1333 =
	(TASK_testplusargs___d1326 ||
	 TASK_testplusargs___d1327 && TASK_testplusargs___d1328) &&
	ff_mem_rd_resp_rv_port1__read[0];
    TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1398 =
	(TASK_testplusargs___d1326 ||
	 TASK_testplusargs___d1327 && TASK_testplusargs___d1328) &&
	!ff_mem_rd_resp_rv_port1__read[0];
    TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1405 =
	(TASK_testplusargs___d1326 ||
	 TASK_testplusargs___d1327 && TASK_testplusargs___d1328) &&
	!ff_mem_rd_resp_rv_port1__read[0] &&
	rg_miss_meta[37:36] != 2'd0;
    rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1331 =
	(rg_first && rg_miss_meta[37:36] == 2'd0 ||
	 rg_miss_meta[37:36] == 2'd1 && ff_mem_rd_resp_rv_port1__read[1] ||
	 rg_first && rg_miss_meta[37:36] == 2'd2) &&
	(TASK_testplusargs___d1326 ||
	 TASK_testplusargs___d1327 && TASK_testplusargs___d1328);
    rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1334 =
	(rg_first && rg_miss_meta[37:36] == 2'd0 ||
	 rg_miss_meta[37:36] == 2'd1 && ff_mem_rd_resp_rv_port1__read[1] ||
	 rg_first && rg_miss_meta[37:36] == 2'd2) &&
	TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1333;
    rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1399 =
	(rg_first && rg_miss_meta[37:36] == 2'd0 ||
	 rg_miss_meta[37:36] == 2'd1 && ff_mem_rd_resp_rv_port1__read[1] ||
	 rg_first && rg_miss_meta[37:36] == 2'd2) &&
	TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1398;
    rg_miss_meta_316_BITS_37_TO_36_317_EQ_1_320_AN_ETC___d1406 =
	(rg_miss_meta[37:36] == 2'd1 && ff_mem_rd_resp_rv_port1__read[1] ||
	 rg_first && rg_miss_meta[37:36] == 2'd2) &&
	TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1405;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (rg_first && rg_miss_meta[37:36] == 2'd0 ||
	   rg_miss_meta[37:36] == 2'd1 && ff_mem_rd_resp_rv_port1__read[1] ||
	   rg_first && rg_miss_meta[37:36] == 2'd2))
	begin
	  v__h99116 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1331)
	$write("[%10d", v__h99116, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1331)
	$write("[%2d]DCACHE: fwd fill response to core:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1334)
	if (rg_miss_meta[37:36] == 2'd0)
	  $write("{%s with mtval:%h",
		 "Load-Access-Fault-Trap",
		 _theResult_____1_word__h99196);
	else
	  $write("{%s with mtval:%h",
		 "Store-Access-Fault-Trap",
		 _theResult_____1_word__h99196);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1399)
	$write("{data:%h", _theResult_____1_word__h99196);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1334)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory && rg_first &&
	  rg_miss_meta[37:36] == 2'd0 &&
	  TASK_testplusargs_326_OR_TASK_testplusargs_327_ETC___d1398)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  rg_miss_meta_316_BITS_37_TO_36_317_EQ_1_320_AN_ETC___d1406)
	$write(" and entry allocated");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1331)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  rg_first_315_AND_rg_miss_meta_316_BITS_37_TO_3_ETC___d1331)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1633 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1634 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1635 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  v__h123162 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1633 ||
	   TASK_testplusargs___d1634 && TASK_testplusargs___d1635))
	$write("[%10d", v__h123162, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1633 ||
	   TASK_testplusargs___d1634 && TASK_testplusargs___d1635))
	$write("[%2d]DCACHE: fill rotator:%b", id, rotator__h120747);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1633 ||
	   TASK_testplusargs___d1634 && TASK_testplusargs___d1635))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkdcache


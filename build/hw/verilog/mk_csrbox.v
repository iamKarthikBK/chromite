//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:35:21 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// sbread_mv_csr_misa             O    64
// RDY_sbread_mv_csr_misa         O     1 const
// sbread_mv_csr_mvendorid        O    64 const
// RDY_sbread_mv_csr_mvendorid    O     1 const
// sbread_mv_csr_stvec            O    64 reg
// RDY_sbread_mv_csr_stvec        O     1 const
// sbread_mv_csr_mtvec            O    64 reg
// RDY_sbread_mv_csr_mtvec        O     1 const
// sbread_mv_csr_mstatus          O    64
// RDY_sbread_mv_csr_mstatus      O     1 const
// sbread_mv_csr_marchid          O    64 const
// RDY_sbread_mv_csr_marchid      O     1 const
// sbread_mv_csr_mimpid           O    64 const
// RDY_sbread_mv_csr_mimpid       O     1 const
// sbread_mv_csr_mhartid          O    64 const
// RDY_sbread_mv_csr_mhartid      O     1 const
// sbread_mv_csr_mip              O    64
// RDY_sbread_mv_csr_mip          O     1 const
// sbread_mv_csr_sip              O    64
// RDY_sbread_mv_csr_sip          O     1 const
// sbread_mv_csr_mie              O    64
// RDY_sbread_mv_csr_mie          O     1 const
// sbread_mv_csr_sie              O    64
// RDY_sbread_mv_csr_sie          O     1 const
// sbread_mv_csr_mscratch         O    64 reg
// RDY_sbread_mv_csr_mscratch     O     1 const
// sbread_mv_csr_sscratch         O    64 reg
// RDY_sbread_mv_csr_sscratch     O     1 const
// sbread_mv_csr_sepc             O    64 reg
// RDY_sbread_mv_csr_sepc         O     1 const
// sbread_mv_csr_stval            O    64 reg
// RDY_sbread_mv_csr_stval        O     1 const
// sbread_mv_csr_scause           O    64
// RDY_sbread_mv_csr_scause       O     1 const
// sbread_mv_csr_mepc             O    64 reg
// RDY_sbread_mv_csr_mepc         O     1 const
// sbread_mv_csr_mtval            O    64 reg
// RDY_sbread_mv_csr_mtval        O     1 const
// sbread_mv_csr_mcause           O    64
// RDY_sbread_mv_csr_mcause       O     1 const
// sbread_mv_csr_mcycle           O    64
// RDY_sbread_mv_csr_mcycle       O     1 const
// sbread_mv_csr_minstret         O    64
// RDY_sbread_mv_csr_minstret     O     1 const
// sbread_mv_csr_time             O    64 reg
// RDY_sbread_mv_csr_time         O     1 const
// sbread_mv_csr_mideleg          O    64 reg
// RDY_sbread_mv_csr_mideleg      O     1 const
// sbread_mv_csr_medeleg          O    64 reg
// RDY_sbread_mv_csr_medeleg      O     1 const
// sbread_mv_csr_pmpcfg0          O    64
// RDY_sbread_mv_csr_pmpcfg0      O     1 const
// sbread_mv_csr_pmpaddr0         O    64 reg
// RDY_sbread_mv_csr_pmpaddr0     O     1 const
// sbread_mv_csr_pmpaddr1         O    64 reg
// RDY_sbread_mv_csr_pmpaddr1     O     1 const
// sbread_mv_csr_pmpaddr2         O    64 reg
// RDY_sbread_mv_csr_pmpaddr2     O     1 const
// sbread_mv_csr_pmpaddr3         O    64 reg
// RDY_sbread_mv_csr_pmpaddr3     O     1 const
// sbread_mv_csr_satp             O    64 reg
// RDY_sbread_mv_csr_satp         O     1 const
// sbread_mv_csr_mcountinhibit    O    32 const
// RDY_sbread_mv_csr_mcountinhibit  O     1 const
// sbread_mv_csr_customcontrol    O    64 const
// RDY_sbread_mv_csr_customcontrol  O     1 const
// RDY_ma_stop_count              O     1 const
// mv_pmpcfg                      O    32 reg
// RDY_mv_pmpcfg                  O     1 const
// mv_pmpaddr                     O   128
// RDY_mv_pmpaddr                 O     1 const
// RDY_ma_set_mip_meip            O     1 const
// RDY_ma_set_mip_mtip            O     1 const
// RDY_ma_set_mip_msip            O     1 const
// RDY_ma_set_mip_seip            O     1 const
// RDY_ma_incr_minstret           O     1 const
// RDY_ma_set_time                O     1 const
// RDY_ma_set_mip_debug_interrupt  O     1 const
// RDY_ma_core_req                O     1 const
// mv_core_resp                   O    65
// RDY_mv_core_resp               O     1 const
// mav_upd_on_ret                 O    64
// RDY_mav_upd_on_ret             O     1 const
// mav_upd_on_trap                O    64
// RDY_mav_upd_on_trap            O     1 const
// mv_prv                         O     2 reg
// RDY_mv_prv                     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_stop_count__stop            I     1
// ma_set_mip_meip__meip          I     1
// ma_set_mip_mtip__mtip          I     1
// ma_set_mip_msip__msip          I     1
// ma_set_mip_seip__seip          I     1
// ma_incr_minstret_incr          I    64
// ma_set_time__time              I    64 reg
// ma_set_mip_debug_interrupt__debug_interrupt  I     1
// ma_core_req_req                I    79
// mav_upd_on_ret_retype          I     8
// mav_upd_on_trap_cause          I     7
// mav_upd_on_trap_pc             I    64
// mav_upd_on_trap_tval           I    64
// EN_ma_stop_count               I     1
// EN_ma_set_mip_meip             I     1
// EN_ma_set_mip_mtip             I     1
// EN_ma_set_mip_msip             I     1
// EN_ma_set_mip_seip             I     1
// EN_ma_incr_minstret            I     1
// EN_ma_set_time                 I     1
// EN_ma_set_mip_debug_interrupt  I     1
// EN_ma_core_req                 I     1
// EN_mav_upd_on_ret              I     1
// EN_mav_upd_on_trap             I     1
//
// Combinational paths from inputs to outputs:
//   (ma_stop_count__stop, EN_ma_stop_count) -> sbread_mv_csr_mcycle
//   (ma_stop_count__stop,
//    ma_set_mip_meip__meip,
//    ma_set_mip_mtip__mtip,
//    ma_set_mip_msip__msip,
//    ma_set_mip_seip__seip,
//    ma_set_mip_debug_interrupt__debug_interrupt,
//    ma_core_req_req,
//    EN_ma_stop_count,
//    EN_ma_set_mip_meip,
//    EN_ma_set_mip_mtip,
//    EN_ma_set_mip_msip,
//    EN_ma_set_mip_seip,
//    EN_ma_set_mip_debug_interrupt,
//    EN_ma_core_req) -> mv_core_resp
//   (ma_set_mip_meip__meip,
//    ma_set_mip_mtip__mtip,
//    ma_set_mip_msip__msip,
//    ma_set_mip_seip__seip,
//    ma_set_mip_debug_interrupt__debug_interrupt,
//    EN_ma_set_mip_meip,
//    EN_ma_set_mip_mtip,
//    EN_ma_set_mip_msip,
//    EN_ma_set_mip_seip,
//    EN_ma_set_mip_debug_interrupt) -> sbread_mv_csr_mip
//   (ma_set_mip_seip__seip, EN_ma_set_mip_seip) -> sbread_mv_csr_sip
//   (ma_core_req_req, EN_ma_core_req) -> sbread_mv_csr_minstret
//   mav_upd_on_ret_retype -> mav_upd_on_ret
//   mav_upd_on_trap_cause -> mav_upd_on_trap
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_csrbox(CLK,
		 RST_N,

		 sbread_mv_csr_misa,
		 RDY_sbread_mv_csr_misa,

		 sbread_mv_csr_mvendorid,
		 RDY_sbread_mv_csr_mvendorid,

		 sbread_mv_csr_stvec,
		 RDY_sbread_mv_csr_stvec,

		 sbread_mv_csr_mtvec,
		 RDY_sbread_mv_csr_mtvec,

		 sbread_mv_csr_mstatus,
		 RDY_sbread_mv_csr_mstatus,

		 sbread_mv_csr_marchid,
		 RDY_sbread_mv_csr_marchid,

		 sbread_mv_csr_mimpid,
		 RDY_sbread_mv_csr_mimpid,

		 sbread_mv_csr_mhartid,
		 RDY_sbread_mv_csr_mhartid,

		 sbread_mv_csr_mip,
		 RDY_sbread_mv_csr_mip,

		 sbread_mv_csr_sip,
		 RDY_sbread_mv_csr_sip,

		 sbread_mv_csr_mie,
		 RDY_sbread_mv_csr_mie,

		 sbread_mv_csr_sie,
		 RDY_sbread_mv_csr_sie,

		 sbread_mv_csr_mscratch,
		 RDY_sbread_mv_csr_mscratch,

		 sbread_mv_csr_sscratch,
		 RDY_sbread_mv_csr_sscratch,

		 sbread_mv_csr_sepc,
		 RDY_sbread_mv_csr_sepc,

		 sbread_mv_csr_stval,
		 RDY_sbread_mv_csr_stval,

		 sbread_mv_csr_scause,
		 RDY_sbread_mv_csr_scause,

		 sbread_mv_csr_mepc,
		 RDY_sbread_mv_csr_mepc,

		 sbread_mv_csr_mtval,
		 RDY_sbread_mv_csr_mtval,

		 sbread_mv_csr_mcause,
		 RDY_sbread_mv_csr_mcause,

		 sbread_mv_csr_mcycle,
		 RDY_sbread_mv_csr_mcycle,

		 sbread_mv_csr_minstret,
		 RDY_sbread_mv_csr_minstret,

		 sbread_mv_csr_time,
		 RDY_sbread_mv_csr_time,

		 sbread_mv_csr_mideleg,
		 RDY_sbread_mv_csr_mideleg,

		 sbread_mv_csr_medeleg,
		 RDY_sbread_mv_csr_medeleg,

		 sbread_mv_csr_pmpcfg0,
		 RDY_sbread_mv_csr_pmpcfg0,

		 sbread_mv_csr_pmpaddr0,
		 RDY_sbread_mv_csr_pmpaddr0,

		 sbread_mv_csr_pmpaddr1,
		 RDY_sbread_mv_csr_pmpaddr1,

		 sbread_mv_csr_pmpaddr2,
		 RDY_sbread_mv_csr_pmpaddr2,

		 sbread_mv_csr_pmpaddr3,
		 RDY_sbread_mv_csr_pmpaddr3,

		 sbread_mv_csr_satp,
		 RDY_sbread_mv_csr_satp,

		 sbread_mv_csr_mcountinhibit,
		 RDY_sbread_mv_csr_mcountinhibit,

		 sbread_mv_csr_customcontrol,
		 RDY_sbread_mv_csr_customcontrol,

		 ma_stop_count__stop,
		 EN_ma_stop_count,
		 RDY_ma_stop_count,

		 mv_pmpcfg,
		 RDY_mv_pmpcfg,

		 mv_pmpaddr,
		 RDY_mv_pmpaddr,

		 ma_set_mip_meip__meip,
		 EN_ma_set_mip_meip,
		 RDY_ma_set_mip_meip,

		 ma_set_mip_mtip__mtip,
		 EN_ma_set_mip_mtip,
		 RDY_ma_set_mip_mtip,

		 ma_set_mip_msip__msip,
		 EN_ma_set_mip_msip,
		 RDY_ma_set_mip_msip,

		 ma_set_mip_seip__seip,
		 EN_ma_set_mip_seip,
		 RDY_ma_set_mip_seip,

		 ma_incr_minstret_incr,
		 EN_ma_incr_minstret,
		 RDY_ma_incr_minstret,

		 ma_set_time__time,
		 EN_ma_set_time,
		 RDY_ma_set_time,

		 ma_set_mip_debug_interrupt__debug_interrupt,
		 EN_ma_set_mip_debug_interrupt,
		 RDY_ma_set_mip_debug_interrupt,

		 ma_core_req_req,
		 EN_ma_core_req,
		 RDY_ma_core_req,

		 mv_core_resp,
		 RDY_mv_core_resp,

		 mav_upd_on_ret_retype,
		 EN_mav_upd_on_ret,
		 mav_upd_on_ret,
		 RDY_mav_upd_on_ret,

		 mav_upd_on_trap_cause,
		 mav_upd_on_trap_pc,
		 mav_upd_on_trap_tval,
		 EN_mav_upd_on_trap,
		 mav_upd_on_trap,
		 RDY_mav_upd_on_trap,

		 mv_prv,
		 RDY_mv_prv);
  input  CLK;
  input  RST_N;

  // value method sbread_mv_csr_misa
  output [63 : 0] sbread_mv_csr_misa;
  output RDY_sbread_mv_csr_misa;

  // value method sbread_mv_csr_mvendorid
  output [63 : 0] sbread_mv_csr_mvendorid;
  output RDY_sbread_mv_csr_mvendorid;

  // value method sbread_mv_csr_stvec
  output [63 : 0] sbread_mv_csr_stvec;
  output RDY_sbread_mv_csr_stvec;

  // value method sbread_mv_csr_mtvec
  output [63 : 0] sbread_mv_csr_mtvec;
  output RDY_sbread_mv_csr_mtvec;

  // value method sbread_mv_csr_mstatus
  output [63 : 0] sbread_mv_csr_mstatus;
  output RDY_sbread_mv_csr_mstatus;

  // value method sbread_mv_csr_marchid
  output [63 : 0] sbread_mv_csr_marchid;
  output RDY_sbread_mv_csr_marchid;

  // value method sbread_mv_csr_mimpid
  output [63 : 0] sbread_mv_csr_mimpid;
  output RDY_sbread_mv_csr_mimpid;

  // value method sbread_mv_csr_mhartid
  output [63 : 0] sbread_mv_csr_mhartid;
  output RDY_sbread_mv_csr_mhartid;

  // value method sbread_mv_csr_mip
  output [63 : 0] sbread_mv_csr_mip;
  output RDY_sbread_mv_csr_mip;

  // value method sbread_mv_csr_sip
  output [63 : 0] sbread_mv_csr_sip;
  output RDY_sbread_mv_csr_sip;

  // value method sbread_mv_csr_mie
  output [63 : 0] sbread_mv_csr_mie;
  output RDY_sbread_mv_csr_mie;

  // value method sbread_mv_csr_sie
  output [63 : 0] sbread_mv_csr_sie;
  output RDY_sbread_mv_csr_sie;

  // value method sbread_mv_csr_mscratch
  output [63 : 0] sbread_mv_csr_mscratch;
  output RDY_sbread_mv_csr_mscratch;

  // value method sbread_mv_csr_sscratch
  output [63 : 0] sbread_mv_csr_sscratch;
  output RDY_sbread_mv_csr_sscratch;

  // value method sbread_mv_csr_sepc
  output [63 : 0] sbread_mv_csr_sepc;
  output RDY_sbread_mv_csr_sepc;

  // value method sbread_mv_csr_stval
  output [63 : 0] sbread_mv_csr_stval;
  output RDY_sbread_mv_csr_stval;

  // value method sbread_mv_csr_scause
  output [63 : 0] sbread_mv_csr_scause;
  output RDY_sbread_mv_csr_scause;

  // value method sbread_mv_csr_mepc
  output [63 : 0] sbread_mv_csr_mepc;
  output RDY_sbread_mv_csr_mepc;

  // value method sbread_mv_csr_mtval
  output [63 : 0] sbread_mv_csr_mtval;
  output RDY_sbread_mv_csr_mtval;

  // value method sbread_mv_csr_mcause
  output [63 : 0] sbread_mv_csr_mcause;
  output RDY_sbread_mv_csr_mcause;

  // value method sbread_mv_csr_mcycle
  output [63 : 0] sbread_mv_csr_mcycle;
  output RDY_sbread_mv_csr_mcycle;

  // value method sbread_mv_csr_minstret
  output [63 : 0] sbread_mv_csr_minstret;
  output RDY_sbread_mv_csr_minstret;

  // value method sbread_mv_csr_time
  output [63 : 0] sbread_mv_csr_time;
  output RDY_sbread_mv_csr_time;

  // value method sbread_mv_csr_mideleg
  output [63 : 0] sbread_mv_csr_mideleg;
  output RDY_sbread_mv_csr_mideleg;

  // value method sbread_mv_csr_medeleg
  output [63 : 0] sbread_mv_csr_medeleg;
  output RDY_sbread_mv_csr_medeleg;

  // value method sbread_mv_csr_pmpcfg0
  output [63 : 0] sbread_mv_csr_pmpcfg0;
  output RDY_sbread_mv_csr_pmpcfg0;

  // value method sbread_mv_csr_pmpaddr0
  output [63 : 0] sbread_mv_csr_pmpaddr0;
  output RDY_sbread_mv_csr_pmpaddr0;

  // value method sbread_mv_csr_pmpaddr1
  output [63 : 0] sbread_mv_csr_pmpaddr1;
  output RDY_sbread_mv_csr_pmpaddr1;

  // value method sbread_mv_csr_pmpaddr2
  output [63 : 0] sbread_mv_csr_pmpaddr2;
  output RDY_sbread_mv_csr_pmpaddr2;

  // value method sbread_mv_csr_pmpaddr3
  output [63 : 0] sbread_mv_csr_pmpaddr3;
  output RDY_sbread_mv_csr_pmpaddr3;

  // value method sbread_mv_csr_satp
  output [63 : 0] sbread_mv_csr_satp;
  output RDY_sbread_mv_csr_satp;

  // value method sbread_mv_csr_mcountinhibit
  output [31 : 0] sbread_mv_csr_mcountinhibit;
  output RDY_sbread_mv_csr_mcountinhibit;

  // value method sbread_mv_csr_customcontrol
  output [63 : 0] sbread_mv_csr_customcontrol;
  output RDY_sbread_mv_csr_customcontrol;

  // action method ma_stop_count
  input  ma_stop_count__stop;
  input  EN_ma_stop_count;
  output RDY_ma_stop_count;

  // value method mv_pmpcfg
  output [31 : 0] mv_pmpcfg;
  output RDY_mv_pmpcfg;

  // value method mv_pmpaddr
  output [127 : 0] mv_pmpaddr;
  output RDY_mv_pmpaddr;

  // action method ma_set_mip_meip
  input  ma_set_mip_meip__meip;
  input  EN_ma_set_mip_meip;
  output RDY_ma_set_mip_meip;

  // action method ma_set_mip_mtip
  input  ma_set_mip_mtip__mtip;
  input  EN_ma_set_mip_mtip;
  output RDY_ma_set_mip_mtip;

  // action method ma_set_mip_msip
  input  ma_set_mip_msip__msip;
  input  EN_ma_set_mip_msip;
  output RDY_ma_set_mip_msip;

  // action method ma_set_mip_seip
  input  ma_set_mip_seip__seip;
  input  EN_ma_set_mip_seip;
  output RDY_ma_set_mip_seip;

  // action method ma_incr_minstret
  input  [63 : 0] ma_incr_minstret_incr;
  input  EN_ma_incr_minstret;
  output RDY_ma_incr_minstret;

  // action method ma_set_time
  input  [63 : 0] ma_set_time__time;
  input  EN_ma_set_time;
  output RDY_ma_set_time;

  // action method ma_set_mip_debug_interrupt
  input  ma_set_mip_debug_interrupt__debug_interrupt;
  input  EN_ma_set_mip_debug_interrupt;
  output RDY_ma_set_mip_debug_interrupt;

  // action method ma_core_req
  input  [78 : 0] ma_core_req_req;
  input  EN_ma_core_req;
  output RDY_ma_core_req;

  // value method mv_core_resp
  output [64 : 0] mv_core_resp;
  output RDY_mv_core_resp;

  // actionvalue method mav_upd_on_ret
  input  [7 : 0] mav_upd_on_ret_retype;
  input  EN_mav_upd_on_ret;
  output [63 : 0] mav_upd_on_ret;
  output RDY_mav_upd_on_ret;

  // actionvalue method mav_upd_on_trap
  input  [6 : 0] mav_upd_on_trap_cause;
  input  [63 : 0] mav_upd_on_trap_pc;
  input  [63 : 0] mav_upd_on_trap_tval;
  input  EN_mav_upd_on_trap;
  output [63 : 0] mav_upd_on_trap;
  output RDY_mav_upd_on_trap;

  // value method mv_prv
  output [1 : 0] mv_prv;
  output RDY_mv_prv;

  // signals for module outputs
  wire [127 : 0] mv_pmpaddr;
  wire [64 : 0] mv_core_resp;
  wire [63 : 0] mav_upd_on_ret,
		mav_upd_on_trap,
		sbread_mv_csr_customcontrol,
		sbread_mv_csr_marchid,
		sbread_mv_csr_mcause,
		sbread_mv_csr_mcycle,
		sbread_mv_csr_medeleg,
		sbread_mv_csr_mepc,
		sbread_mv_csr_mhartid,
		sbread_mv_csr_mideleg,
		sbread_mv_csr_mie,
		sbread_mv_csr_mimpid,
		sbread_mv_csr_minstret,
		sbread_mv_csr_mip,
		sbread_mv_csr_misa,
		sbread_mv_csr_mscratch,
		sbread_mv_csr_mstatus,
		sbread_mv_csr_mtval,
		sbread_mv_csr_mtvec,
		sbread_mv_csr_mvendorid,
		sbread_mv_csr_pmpaddr0,
		sbread_mv_csr_pmpaddr1,
		sbread_mv_csr_pmpaddr2,
		sbread_mv_csr_pmpaddr3,
		sbread_mv_csr_pmpcfg0,
		sbread_mv_csr_satp,
		sbread_mv_csr_scause,
		sbread_mv_csr_sepc,
		sbread_mv_csr_sie,
		sbread_mv_csr_sip,
		sbread_mv_csr_sscratch,
		sbread_mv_csr_stval,
		sbread_mv_csr_stvec,
		sbread_mv_csr_time;
  wire [31 : 0] mv_pmpcfg, sbread_mv_csr_mcountinhibit;
  wire [1 : 0] mv_prv;
  wire RDY_ma_core_req,
       RDY_ma_incr_minstret,
       RDY_ma_set_mip_debug_interrupt,
       RDY_ma_set_mip_meip,
       RDY_ma_set_mip_msip,
       RDY_ma_set_mip_mtip,
       RDY_ma_set_mip_seip,
       RDY_ma_set_time,
       RDY_ma_stop_count,
       RDY_mav_upd_on_ret,
       RDY_mav_upd_on_trap,
       RDY_mv_core_resp,
       RDY_mv_pmpaddr,
       RDY_mv_pmpcfg,
       RDY_mv_prv,
       RDY_sbread_mv_csr_customcontrol,
       RDY_sbread_mv_csr_marchid,
       RDY_sbread_mv_csr_mcause,
       RDY_sbread_mv_csr_mcountinhibit,
       RDY_sbread_mv_csr_mcycle,
       RDY_sbread_mv_csr_medeleg,
       RDY_sbread_mv_csr_mepc,
       RDY_sbread_mv_csr_mhartid,
       RDY_sbread_mv_csr_mideleg,
       RDY_sbread_mv_csr_mie,
       RDY_sbread_mv_csr_mimpid,
       RDY_sbread_mv_csr_minstret,
       RDY_sbread_mv_csr_mip,
       RDY_sbread_mv_csr_misa,
       RDY_sbread_mv_csr_mscratch,
       RDY_sbread_mv_csr_mstatus,
       RDY_sbread_mv_csr_mtval,
       RDY_sbread_mv_csr_mtvec,
       RDY_sbread_mv_csr_mvendorid,
       RDY_sbread_mv_csr_pmpaddr0,
       RDY_sbread_mv_csr_pmpaddr1,
       RDY_sbread_mv_csr_pmpaddr2,
       RDY_sbread_mv_csr_pmpaddr3,
       RDY_sbread_mv_csr_pmpcfg0,
       RDY_sbread_mv_csr_satp,
       RDY_sbread_mv_csr_scause,
       RDY_sbread_mv_csr_sepc,
       RDY_sbread_mv_csr_sie,
       RDY_sbread_mv_csr_sip,
       RDY_sbread_mv_csr_sscratch,
       RDY_sbread_mv_csr_stval,
       RDY_sbread_mv_csr_stvec,
       RDY_sbread_mv_csr_time;

  // inlined wires
  reg [64 : 0] grp1_rg_resp_to_core_wget;
  reg [63 : 0] grp1_rg_mcycle_port1__write_1, grp1_rg_minstret_port0__write_1;
  wire [63 : 0] grp1_rg_mcycle_port0__write_1,
		grp1_rg_mcycle_port2__read,
		grp1_rg_minstret_port1__write_1,
		grp1_rg_minstret_port2__read;
  wire grp1_rg_mcycle_EN_port1__write,
       grp1_rg_minstret_EN_port0__write,
       grp1_rg_minstret_EN_port1__write;

  // register grp1_rg_mcause_exception_code_wlrl
  reg [3 : 0] grp1_rg_mcause_exception_code_wlrl;
  wire [3 : 0] grp1_rg_mcause_exception_code_wlrl_D_IN;
  wire grp1_rg_mcause_exception_code_wlrl_EN;

  // register grp1_rg_mcause_interrupt
  reg grp1_rg_mcause_interrupt;
  wire grp1_rg_mcause_interrupt_D_IN, grp1_rg_mcause_interrupt_EN;

  // register grp1_rg_mcycle
  reg [63 : 0] grp1_rg_mcycle;
  wire [63 : 0] grp1_rg_mcycle_D_IN;
  wire grp1_rg_mcycle_EN;

  // register grp1_rg_medeleg_warl
  reg [63 : 0] grp1_rg_medeleg_warl;
  wire [63 : 0] grp1_rg_medeleg_warl_D_IN;
  wire grp1_rg_medeleg_warl_EN;

  // register grp1_rg_mepc_warl
  reg [63 : 0] grp1_rg_mepc_warl;
  wire [63 : 0] grp1_rg_mepc_warl_D_IN;
  wire grp1_rg_mepc_warl_EN;

  // register grp1_rg_mideleg_warl
  reg [63 : 0] grp1_rg_mideleg_warl;
  wire [63 : 0] grp1_rg_mideleg_warl_D_IN;
  wire grp1_rg_mideleg_warl_EN;

  // register grp1_rg_mie_debug_interrupt
  reg grp1_rg_mie_debug_interrupt;
  wire grp1_rg_mie_debug_interrupt_D_IN, grp1_rg_mie_debug_interrupt_EN;

  // register grp1_rg_mie_meie
  reg grp1_rg_mie_meie;
  wire grp1_rg_mie_meie_D_IN, grp1_rg_mie_meie_EN;

  // register grp1_rg_mie_msie
  reg grp1_rg_mie_msie;
  wire grp1_rg_mie_msie_D_IN, grp1_rg_mie_msie_EN;

  // register grp1_rg_mie_mtie
  reg grp1_rg_mie_mtie;
  wire grp1_rg_mie_mtie_D_IN, grp1_rg_mie_mtie_EN;

  // register grp1_rg_mie_seie
  reg grp1_rg_mie_seie;
  wire grp1_rg_mie_seie_D_IN, grp1_rg_mie_seie_EN;

  // register grp1_rg_mie_ssie
  reg grp1_rg_mie_ssie;
  wire grp1_rg_mie_ssie_D_IN, grp1_rg_mie_ssie_EN;

  // register grp1_rg_mie_stie
  reg grp1_rg_mie_stie;
  wire grp1_rg_mie_stie_D_IN, grp1_rg_mie_stie_EN;

  // register grp1_rg_minstret
  reg [63 : 0] grp1_rg_minstret;
  wire [63 : 0] grp1_rg_minstret_D_IN;
  wire grp1_rg_minstret_EN;

  // register grp1_rg_mip_seip
  reg grp1_rg_mip_seip;
  wire grp1_rg_mip_seip_D_IN, grp1_rg_mip_seip_EN;

  // register grp1_rg_mip_ssip
  reg grp1_rg_mip_ssip;
  wire grp1_rg_mip_ssip_D_IN, grp1_rg_mip_ssip_EN;

  // register grp1_rg_mip_stip
  reg grp1_rg_mip_stip;
  wire grp1_rg_mip_stip_D_IN, grp1_rg_mip_stip_EN;

  // register grp1_rg_misa_extensions_warl
  reg [25 : 0] grp1_rg_misa_extensions_warl;
  wire [25 : 0] grp1_rg_misa_extensions_warl_D_IN;
  wire grp1_rg_misa_extensions_warl_EN;

  // register grp1_rg_misa_mxl_warl
  reg [1 : 0] grp1_rg_misa_mxl_warl;
  wire [1 : 0] grp1_rg_misa_mxl_warl_D_IN;
  wire grp1_rg_misa_mxl_warl_EN;

  // register grp1_rg_mscratch_warl
  reg [63 : 0] grp1_rg_mscratch_warl;
  reg [63 : 0] grp1_rg_mscratch_warl_D_IN;
  wire grp1_rg_mscratch_warl_EN;

  // register grp1_rg_mstatus_fs_warl
  reg [1 : 0] grp1_rg_mstatus_fs_warl;
  wire [1 : 0] grp1_rg_mstatus_fs_warl_D_IN;
  wire grp1_rg_mstatus_fs_warl_EN;

  // register grp1_rg_mstatus_mie
  reg grp1_rg_mstatus_mie;
  reg grp1_rg_mstatus_mie_D_IN;
  wire grp1_rg_mstatus_mie_EN;

  // register grp1_rg_mstatus_mpie
  reg grp1_rg_mstatus_mpie;
  reg grp1_rg_mstatus_mpie_D_IN;
  wire grp1_rg_mstatus_mpie_EN;

  // register grp1_rg_mstatus_mpp_warl
  reg [1 : 0] grp1_rg_mstatus_mpp_warl;
  reg [1 : 0] grp1_rg_mstatus_mpp_warl_D_IN;
  wire grp1_rg_mstatus_mpp_warl_EN;

  // register grp1_rg_mstatus_mprv_warl
  reg grp1_rg_mstatus_mprv_warl;
  wire grp1_rg_mstatus_mprv_warl_D_IN, grp1_rg_mstatus_mprv_warl_EN;

  // register grp1_rg_mstatus_mxr
  reg grp1_rg_mstatus_mxr;
  wire grp1_rg_mstatus_mxr_D_IN, grp1_rg_mstatus_mxr_EN;

  // register grp1_rg_mstatus_sie
  reg grp1_rg_mstatus_sie;
  reg grp1_rg_mstatus_sie_D_IN;
  wire grp1_rg_mstatus_sie_EN;

  // register grp1_rg_mstatus_spie
  reg grp1_rg_mstatus_spie;
  reg grp1_rg_mstatus_spie_D_IN;
  wire grp1_rg_mstatus_spie_EN;

  // register grp1_rg_mstatus_spp
  reg grp1_rg_mstatus_spp;
  reg grp1_rg_mstatus_spp_D_IN;
  wire grp1_rg_mstatus_spp_EN;

  // register grp1_rg_mstatus_sum
  reg grp1_rg_mstatus_sum;
  wire grp1_rg_mstatus_sum_D_IN, grp1_rg_mstatus_sum_EN;

  // register grp1_rg_mstatus_tsr
  reg grp1_rg_mstatus_tsr;
  wire grp1_rg_mstatus_tsr_D_IN, grp1_rg_mstatus_tsr_EN;

  // register grp1_rg_mstatus_tvm
  reg grp1_rg_mstatus_tvm;
  wire grp1_rg_mstatus_tvm_D_IN, grp1_rg_mstatus_tvm_EN;

  // register grp1_rg_mstatus_tw
  reg grp1_rg_mstatus_tw;
  wire grp1_rg_mstatus_tw_D_IN, grp1_rg_mstatus_tw_EN;

  // register grp1_rg_mtval_warl
  reg [63 : 0] grp1_rg_mtval_warl;
  wire [63 : 0] grp1_rg_mtval_warl_D_IN;
  wire grp1_rg_mtval_warl_EN;

  // register grp1_rg_mtvec_base_warl
  reg [61 : 0] grp1_rg_mtvec_base_warl;
  wire [61 : 0] grp1_rg_mtvec_base_warl_D_IN;
  wire grp1_rg_mtvec_base_warl_EN;

  // register grp1_rg_mtvec_mode_warl
  reg [1 : 0] grp1_rg_mtvec_mode_warl;
  wire [1 : 0] grp1_rg_mtvec_mode_warl_D_IN;
  wire grp1_rg_mtvec_mode_warl_EN;

  // register grp1_rg_pmpaddr0_warl
  reg [63 : 0] grp1_rg_pmpaddr0_warl;
  wire [63 : 0] grp1_rg_pmpaddr0_warl_D_IN;
  wire grp1_rg_pmpaddr0_warl_EN;

  // register grp1_rg_pmpaddr1_warl
  reg [63 : 0] grp1_rg_pmpaddr1_warl;
  wire [63 : 0] grp1_rg_pmpaddr1_warl_D_IN;
  wire grp1_rg_pmpaddr1_warl_EN;

  // register grp1_rg_pmpaddr2_warl
  reg [63 : 0] grp1_rg_pmpaddr2_warl;
  wire [63 : 0] grp1_rg_pmpaddr2_warl_D_IN;
  wire grp1_rg_pmpaddr2_warl_EN;

  // register grp1_rg_pmpaddr3_warl
  reg [63 : 0] grp1_rg_pmpaddr3_warl;
  wire [63 : 0] grp1_rg_pmpaddr3_warl_D_IN;
  wire grp1_rg_pmpaddr3_warl_EN;

  // register grp1_rg_pmpcfg0_pmp0cfg_warl
  reg [7 : 0] grp1_rg_pmpcfg0_pmp0cfg_warl;
  wire [7 : 0] grp1_rg_pmpcfg0_pmp0cfg_warl_D_IN;
  wire grp1_rg_pmpcfg0_pmp0cfg_warl_EN;

  // register grp1_rg_pmpcfg0_pmp1cfg_warl
  reg [7 : 0] grp1_rg_pmpcfg0_pmp1cfg_warl;
  wire [7 : 0] grp1_rg_pmpcfg0_pmp1cfg_warl_D_IN;
  wire grp1_rg_pmpcfg0_pmp1cfg_warl_EN;

  // register grp1_rg_pmpcfg0_pmp2cfg_warl
  reg [7 : 0] grp1_rg_pmpcfg0_pmp2cfg_warl;
  wire [7 : 0] grp1_rg_pmpcfg0_pmp2cfg_warl_D_IN;
  wire grp1_rg_pmpcfg0_pmp2cfg_warl_EN;

  // register grp1_rg_pmpcfg0_pmp3cfg_warl
  reg [7 : 0] grp1_rg_pmpcfg0_pmp3cfg_warl;
  wire [7 : 0] grp1_rg_pmpcfg0_pmp3cfg_warl_D_IN;
  wire grp1_rg_pmpcfg0_pmp3cfg_warl_EN;

  // register grp1_rg_satp_asid_warl
  reg [15 : 0] grp1_rg_satp_asid_warl;
  wire [15 : 0] grp1_rg_satp_asid_warl_D_IN;
  wire grp1_rg_satp_asid_warl_EN;

  // register grp1_rg_satp_mode_warl
  reg [3 : 0] grp1_rg_satp_mode_warl;
  wire [3 : 0] grp1_rg_satp_mode_warl_D_IN;
  wire grp1_rg_satp_mode_warl_EN;

  // register grp1_rg_satp_ppn_warl
  reg [43 : 0] grp1_rg_satp_ppn_warl;
  wire [43 : 0] grp1_rg_satp_ppn_warl_D_IN;
  wire grp1_rg_satp_ppn_warl_EN;

  // register grp1_rg_scause_exception_code_wlrl
  reg [3 : 0] grp1_rg_scause_exception_code_wlrl;
  wire [3 : 0] grp1_rg_scause_exception_code_wlrl_D_IN;
  wire grp1_rg_scause_exception_code_wlrl_EN;

  // register grp1_rg_scause_interrupt
  reg grp1_rg_scause_interrupt;
  wire grp1_rg_scause_interrupt_D_IN, grp1_rg_scause_interrupt_EN;

  // register grp1_rg_sepc_warl
  reg [63 : 0] grp1_rg_sepc_warl;
  wire [63 : 0] grp1_rg_sepc_warl_D_IN;
  wire grp1_rg_sepc_warl_EN;

  // register grp1_rg_sscratch_warl
  reg [63 : 0] grp1_rg_sscratch_warl;
  reg [63 : 0] grp1_rg_sscratch_warl_D_IN;
  wire grp1_rg_sscratch_warl_EN;

  // register grp1_rg_stval_warl
  reg [63 : 0] grp1_rg_stval_warl;
  wire [63 : 0] grp1_rg_stval_warl_D_IN;
  wire grp1_rg_stval_warl_EN;

  // register grp1_rg_stvec_base_warl
  reg [61 : 0] grp1_rg_stvec_base_warl;
  wire [61 : 0] grp1_rg_stvec_base_warl_D_IN;
  wire grp1_rg_stvec_base_warl_EN;

  // register grp1_rg_stvec_mode_warl
  reg [1 : 0] grp1_rg_stvec_mode_warl;
  wire [1 : 0] grp1_rg_stvec_mode_warl_D_IN;
  wire grp1_rg_stvec_mode_warl_EN;

  // register grp1_rg_time
  reg [63 : 0] grp1_rg_time;
  wire [63 : 0] grp1_rg_time_D_IN;
  wire grp1_rg_time_EN;

  // register rg_prv
  reg [1 : 0] rg_prv;
  wire [1 : 0] rg_prv_D_IN;
  wire rg_prv_EN;

  // ports of submodule grp1_ff_fwd_request
  wire [78 : 0] grp1_ff_fwd_request_D_IN;
  wire grp1_ff_fwd_request_CLR,
       grp1_ff_fwd_request_DEQ,
       grp1_ff_fwd_request_ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_grp1_rl_increment_cycle,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_ma_core_req,
       CAN_FIRE_ma_incr_minstret,
       CAN_FIRE_ma_set_mip_debug_interrupt,
       CAN_FIRE_ma_set_mip_meip,
       CAN_FIRE_ma_set_mip_msip,
       CAN_FIRE_ma_set_mip_mtip,
       CAN_FIRE_ma_set_mip_seip,
       CAN_FIRE_ma_set_time,
       CAN_FIRE_ma_stop_count,
       CAN_FIRE_mav_upd_on_ret,
       CAN_FIRE_mav_upd_on_trap,
       WILL_FIRE_RL_grp1_rl_increment_cycle,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_ma_core_req,
       WILL_FIRE_ma_incr_minstret,
       WILL_FIRE_ma_set_mip_debug_interrupt,
       WILL_FIRE_ma_set_mip_meip,
       WILL_FIRE_ma_set_mip_msip,
       WILL_FIRE_ma_set_mip_mtip,
       WILL_FIRE_ma_set_mip_seip,
       WILL_FIRE_ma_set_time,
       WILL_FIRE_ma_stop_count,
       WILL_FIRE_mav_upd_on_ret,
       WILL_FIRE_mav_upd_on_trap;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_grp1_rg_mtval_warl_write_1__VAL_1,
	       MUX_grp1_rg_stval_warl_write_1__VAL_1;
  wire [63 : 0] MUX_grp1_rg_mepc_warl_write_1__VAL_1,
		MUX_grp1_rg_mepc_warl_write_1__VAL_2,
		MUX_grp1_rg_sepc_warl_write_1__VAL_1;
  wire [1 : 0] MUX_grp1_rg_mstatus_mpp_warl_write_1__VAL_1,
	       MUX_rg_prv_write_1__VAL_1,
	       MUX_rg_prv_write_1__VAL_2;
  wire MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_1,
       MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2,
       MUX_grp1_rg_mepc_warl_write_1__SEL_1,
       MUX_grp1_rg_mstatus_mie_write_1__SEL_1,
       MUX_grp1_rg_mstatus_mie_write_1__SEL_2,
       MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_2,
       MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_3,
       MUX_grp1_rg_mstatus_sie_write_1__SEL_1,
       MUX_grp1_rg_mstatus_sie_write_1__SEL_2,
       MUX_grp1_rg_mstatus_sie_write_1__SEL_3,
       MUX_grp1_rg_mstatus_sie_write_1__VAL_3,
       MUX_grp1_rg_mstatus_spie_write_1__VAL_3,
       MUX_grp1_rg_mstatus_spp_write_1__VAL_3,
       MUX_grp1_rg_mtval_warl_write_1__SEL_1,
       MUX_grp1_rg_scause_exception_code_wlrl_write_1__SEL_1,
       MUX_grp1_rg_sepc_warl_write_1__SEL_1,
       MUX_grp1_rg_stval_warl_write_1__SEL_1,
       MUX_rg_prv_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d175;
  reg TASK_testplusargs___d176;
  reg TASK_testplusargs___d177;
  reg [63 : 0] v__h5404;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1,
	       CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2,
	       CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q3,
	       CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q4,
	       CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q5,
	       CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q6,
	       IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d510,
	       IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d518,
	       word__h6656,
	       word__h8764,
	       word__h9266,
	       x__h10082,
	       x__h10561,
	       x__h10734,
	       x__h11141,
	       x__h12616,
	       x__h6927,
	       x__h7086,
	       x__h7245,
	       x__h8168,
	       x__h9559;
  wire [63 : 0] anydata__h3033,
		lv_tvec___1__h14426,
		lv_tvec___1__h14837,
		lv_tvec___2__h14417,
		lv_tvec___2__h14828,
		new_value_data__h6172,
		new_value_data__h6193,
		readdata__h5509,
		readdata__h5528,
		readdata__h5538,
		readdata__h5548,
		readdata__h5558,
		readdata__h5615,
		readdata__h5625,
		readdata__h5675,
		readdata__h5705,
		readdata__h5764,
		readdata__h5814,
		readdata__h5834,
		readdata__h5843,
		result__h6800,
		rg_mip__read__h3600,
		rg_sip__read__h3721,
		v__h14115,
		v__h14437,
		x__h12693,
		x__h13980,
		x__h14024,
		x__h6657;
  wire [62 : 0] r1__read__h3445,
		r1__read__h3602,
		r1__read__h3723,
		r1__read__h3799,
		r1__read__h3877,
		r1__read__h6116,
		result__h13890,
		rg_mcause_exception_code__read__h3933,
		rg_scause_exception_code__read__h3915,
		v__h13116;
  wire [61 : 0] r1__read__h3447,
		r1__read__h3604,
		r1__read__h3725,
		r1__read__h3801,
		r1__read__h3879,
		r1__read__h6118;
  wire [60 : 0] r1__read__h3449, r1__read__h3606, r1__read__h3803;
  wire [59 : 0] r1__read__h3451,
		r1__read__h3608,
		r1__read__h3727,
		r1__read__h3805,
		r1__read__h3881,
		r1__read__h6120;
  wire [58 : 0] r1__read__h3453,
		r1__read__h3610,
		r1__read__h3729,
		r1__read__h3807,
		r1__read__h3883,
		r1__read__h6122;
  wire [57 : 0] r1__read__h3455,
		r1__read__h3612,
		r1__read__h3731,
		r1__read__h3809,
		r1__read__h3885,
		r1__read__h6124;
  wire [56 : 0] r1__read__h3457, r1__read__h3614, r1__read__h3811;
  wire [55 : 0] r1__read__h3459,
		r1__read__h3616,
		r1__read__h3733,
		r1__read__h3813,
		r1__read__h3887,
		r1__read__h3998,
		r1__read__h6126;
  wire [54 : 0] r1__read__h3461,
		r1__read__h3618,
		r1__read__h3735,
		r1__read__h3815,
		r1__read__h3889,
		r1__read__h6128;
  wire [53 : 0] r1__read__h3620, r1__read__h3817;
  wire [52 : 0] r1__read__h3463, r1__read__h3622, r1__read__h3819;
  wire [51 : 0] r1__read__h3624, r1__read__h3821;
  wire [50 : 0] r1__read__h3465, r1__read__h6130;
  wire [48 : 0] r1__read__h3467, r1__read__h6132;
  wire [47 : 0] r1__read__h3626, r1__read__h3823, r1__read__h4000;
  wire [46 : 0] r1__read__h3469, r1__read__h6134;
  wire [45 : 0] r1__read__h3471, r1__read__h6136;
  wire [44 : 0] r1__read__h3473, r1__read__h6138;
  wire [43 : 0] r1__read__h3475, r1__read__h6140;
  wire [42 : 0] r1__read__h3477;
  wire [41 : 0] r1__read__h3479;
  wire [40 : 0] r1__read__h3481;
  wire [39 : 0] r1__read__h4002;
  wire [37 : 0] r1__read__h3335;
  wire [31 : 0] r1__read__h3483, r1__read__h6142;
  wire [29 : 0] r1__read__h3485, r1__read__h6144;
  wire [27 : 0] r1__read__h3487;
  wire [19 : 0] r1__read__h4050;
  wire NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683,
       NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698,
       NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d705,
       grp1_rg_medeleg_warl_49_SRL_mav_upd_on_trap_ca_ETC___d675,
       grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d670,
       grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689,
       r__h3490,
       r__h3628,
       r__h3638,
       r__h3653,
       r__h3667,
       rg_prv_1_ULE_1___d687,
       x__read__h343,
       x_wget__h403,
       y__h14023;

  // value method sbread_mv_csr_misa
  assign sbread_mv_csr_misa =
	     { r1__read__h3335, grp1_rg_misa_extensions_warl } ;
  assign RDY_sbread_mv_csr_misa = 1'd1 ;

  // value method sbread_mv_csr_mvendorid
  assign sbread_mv_csr_mvendorid = 64'd0 ;
  assign RDY_sbread_mv_csr_mvendorid = 1'd1 ;

  // value method sbread_mv_csr_stvec
  assign sbread_mv_csr_stvec =
	     { grp1_rg_stvec_base_warl, grp1_rg_stvec_mode_warl } ;
  assign RDY_sbread_mv_csr_stvec = 1'd1 ;

  // value method sbread_mv_csr_mtvec
  assign sbread_mv_csr_mtvec =
	     { grp1_rg_mtvec_base_warl, grp1_rg_mtvec_mode_warl } ;
  assign RDY_sbread_mv_csr_mtvec = 1'd1 ;

  // value method sbread_mv_csr_mstatus
  assign sbread_mv_csr_mstatus = { r1__read__h3445, 1'd0 } ;
  assign RDY_sbread_mv_csr_mstatus = 1'd1 ;

  // value method sbread_mv_csr_marchid
  assign sbread_mv_csr_marchid = 64'd5 ;
  assign RDY_sbread_mv_csr_marchid = 1'd1 ;

  // value method sbread_mv_csr_mimpid
  assign sbread_mv_csr_mimpid = 64'd0 ;
  assign RDY_sbread_mv_csr_mimpid = 1'd1 ;

  // value method sbread_mv_csr_mhartid
  assign sbread_mv_csr_mhartid = 64'd0 ;
  assign RDY_sbread_mv_csr_mhartid = 1'd1 ;

  // value method sbread_mv_csr_mip
  assign sbread_mv_csr_mip =
	     rg_mip__read__h3600 | { 54'd0, x__read__h343, 9'd0 } ;
  assign RDY_sbread_mv_csr_mip = 1'd1 ;

  // value method sbread_mv_csr_sip
  assign sbread_mv_csr_sip =
	     rg_sip__read__h3721 | { 54'd0, x__read__h343, 9'd0 } ;
  assign RDY_sbread_mv_csr_sip = 1'd1 ;

  // value method sbread_mv_csr_mie
  assign sbread_mv_csr_mie = { r1__read__h3799, 1'd0 } ;
  assign RDY_sbread_mv_csr_mie = 1'd1 ;

  // value method sbread_mv_csr_sie
  assign sbread_mv_csr_sie = { r1__read__h3877, 1'd0 } ;
  assign RDY_sbread_mv_csr_sie = 1'd1 ;

  // value method sbread_mv_csr_mscratch
  assign sbread_mv_csr_mscratch = grp1_rg_mscratch_warl ;
  assign RDY_sbread_mv_csr_mscratch = 1'd1 ;

  // value method sbread_mv_csr_sscratch
  assign sbread_mv_csr_sscratch = grp1_rg_sscratch_warl ;
  assign RDY_sbread_mv_csr_sscratch = 1'd1 ;

  // value method sbread_mv_csr_sepc
  assign sbread_mv_csr_sepc = grp1_rg_sepc_warl ;
  assign RDY_sbread_mv_csr_sepc = 1'd1 ;

  // value method sbread_mv_csr_stval
  assign sbread_mv_csr_stval = grp1_rg_stval_warl ;
  assign RDY_sbread_mv_csr_stval = 1'd1 ;

  // value method sbread_mv_csr_scause
  assign sbread_mv_csr_scause =
	     { grp1_rg_scause_interrupt,
	       rg_scause_exception_code__read__h3915 } ;
  assign RDY_sbread_mv_csr_scause = 1'd1 ;

  // value method sbread_mv_csr_mepc
  assign sbread_mv_csr_mepc = grp1_rg_mepc_warl ;
  assign RDY_sbread_mv_csr_mepc = 1'd1 ;

  // value method sbread_mv_csr_mtval
  assign sbread_mv_csr_mtval = grp1_rg_mtval_warl ;
  assign RDY_sbread_mv_csr_mtval = 1'd1 ;

  // value method sbread_mv_csr_mcause
  assign sbread_mv_csr_mcause =
	     { grp1_rg_mcause_interrupt,
	       rg_mcause_exception_code__read__h3933 } ;
  assign RDY_sbread_mv_csr_mcause = 1'd1 ;

  // value method sbread_mv_csr_mcycle
  assign sbread_mv_csr_mcycle =
	     (!x_wget__h403) ?
	       grp1_rg_mcycle_port0__write_1 :
	       grp1_rg_mcycle ;
  assign RDY_sbread_mv_csr_mcycle = 1'd1 ;

  // value method sbread_mv_csr_minstret
  assign sbread_mv_csr_minstret =
	     grp1_rg_minstret_EN_port0__write ?
	       grp1_rg_minstret_port0__write_1 :
	       grp1_rg_minstret ;
  assign RDY_sbread_mv_csr_minstret = 1'd1 ;

  // value method sbread_mv_csr_time
  assign sbread_mv_csr_time = grp1_rg_time ;
  assign RDY_sbread_mv_csr_time = 1'd1 ;

  // value method sbread_mv_csr_mideleg
  assign sbread_mv_csr_mideleg = grp1_rg_mideleg_warl ;
  assign RDY_sbread_mv_csr_mideleg = 1'd1 ;

  // value method sbread_mv_csr_medeleg
  assign sbread_mv_csr_medeleg = grp1_rg_medeleg_warl ;
  assign RDY_sbread_mv_csr_medeleg = 1'd1 ;

  // value method sbread_mv_csr_pmpcfg0
  assign sbread_mv_csr_pmpcfg0 =
	     { r1__read__h3998, grp1_rg_pmpcfg0_pmp0cfg_warl } ;
  assign RDY_sbread_mv_csr_pmpcfg0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr0
  assign sbread_mv_csr_pmpaddr0 = grp1_rg_pmpaddr0_warl ;
  assign RDY_sbread_mv_csr_pmpaddr0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr1
  assign sbread_mv_csr_pmpaddr1 = grp1_rg_pmpaddr1_warl ;
  assign RDY_sbread_mv_csr_pmpaddr1 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr2
  assign sbread_mv_csr_pmpaddr2 = grp1_rg_pmpaddr2_warl ;
  assign RDY_sbread_mv_csr_pmpaddr2 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr3
  assign sbread_mv_csr_pmpaddr3 = grp1_rg_pmpaddr3_warl ;
  assign RDY_sbread_mv_csr_pmpaddr3 = 1'd1 ;

  // value method sbread_mv_csr_satp
  assign sbread_mv_csr_satp = { r1__read__h4050, grp1_rg_satp_ppn_warl } ;
  assign RDY_sbread_mv_csr_satp = 1'd1 ;

  // value method sbread_mv_csr_mcountinhibit
  assign sbread_mv_csr_mcountinhibit = 32'd0 ;
  assign RDY_sbread_mv_csr_mcountinhibit = 1'd1 ;

  // value method sbread_mv_csr_customcontrol
  assign sbread_mv_csr_customcontrol = 64'd23 ;
  assign RDY_sbread_mv_csr_customcontrol = 1'd1 ;

  // action method ma_stop_count
  assign RDY_ma_stop_count = 1'd1 ;
  assign CAN_FIRE_ma_stop_count = 1'd1 ;
  assign WILL_FIRE_ma_stop_count = EN_ma_stop_count ;

  // value method mv_pmpcfg
  assign mv_pmpcfg =
	     { grp1_rg_pmpcfg0_pmp3cfg_warl,
	       grp1_rg_pmpcfg0_pmp2cfg_warl,
	       grp1_rg_pmpcfg0_pmp1cfg_warl,
	       grp1_rg_pmpcfg0_pmp0cfg_warl } ;
  assign RDY_mv_pmpcfg = 1'd1 ;

  // value method mv_pmpaddr
  assign mv_pmpaddr =
	     { grp1_rg_pmpaddr3_warl[29:0],
	       2'b0,
	       grp1_rg_pmpaddr2_warl[29:0],
	       2'b0,
	       grp1_rg_pmpaddr1_warl[29:0],
	       2'b0,
	       grp1_rg_pmpaddr0_warl[29:0],
	       2'b0 } ;
  assign RDY_mv_pmpaddr = 1'd1 ;

  // action method ma_set_mip_meip
  assign RDY_ma_set_mip_meip = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_meip = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_meip = EN_ma_set_mip_meip ;

  // action method ma_set_mip_mtip
  assign RDY_ma_set_mip_mtip = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_mtip = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_mtip = EN_ma_set_mip_mtip ;

  // action method ma_set_mip_msip
  assign RDY_ma_set_mip_msip = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_msip = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_msip = EN_ma_set_mip_msip ;

  // action method ma_set_mip_seip
  assign RDY_ma_set_mip_seip = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_seip = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_seip = EN_ma_set_mip_seip ;

  // action method ma_incr_minstret
  assign RDY_ma_incr_minstret = 1'd1 ;
  assign CAN_FIRE_ma_incr_minstret = 1'd1 ;
  assign WILL_FIRE_ma_incr_minstret = EN_ma_incr_minstret ;

  // action method ma_set_time
  assign RDY_ma_set_time = 1'd1 ;
  assign CAN_FIRE_ma_set_time = 1'd1 ;
  assign WILL_FIRE_ma_set_time = EN_ma_set_time ;

  // action method ma_set_mip_debug_interrupt
  assign RDY_ma_set_mip_debug_interrupt = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_debug_interrupt = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_debug_interrupt =
	     EN_ma_set_mip_debug_interrupt ;

  // action method ma_core_req
  assign RDY_ma_core_req = 1'd1 ;
  assign CAN_FIRE_ma_core_req = 1'd1 ;
  assign WILL_FIRE_ma_core_req = EN_ma_core_req ;

  // value method mv_core_resp
  assign mv_core_resp =
	     { EN_ma_core_req && grp1_rg_resp_to_core_wget[64],
	       anydata__h3033 } ;
  assign RDY_mv_core_resp = 1'd1 ;

  // actionvalue method mav_upd_on_ret
  assign mav_upd_on_ret =
	     { grp1_rg_misa_extensions_warl[2] ? v__h13116 : result__h13890,
	       1'b0 } ;
  assign RDY_mav_upd_on_ret = 1'd1 ;
  assign CAN_FIRE_mav_upd_on_ret = 1'd1 ;
  assign WILL_FIRE_mav_upd_on_ret = EN_mav_upd_on_ret ;

  // actionvalue method mav_upd_on_trap
  assign mav_upd_on_trap =
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ?
	       v__h14115 :
	       v__h14437 ;
  assign RDY_mav_upd_on_trap = 1'd1 ;
  assign CAN_FIRE_mav_upd_on_trap = 1'd1 ;
  assign WILL_FIRE_mav_upd_on_trap = EN_mav_upd_on_trap ;

  // value method mv_prv
  assign mv_prv = rg_prv ;
  assign RDY_mv_prv = 1'd1 ;

  // submodule grp1_ff_fwd_request
  FIFO2 #(.width(32'd79), .guarded(1'd1)) grp1_ff_fwd_request(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(grp1_ff_fwd_request_D_IN),
							      .ENQ(grp1_ff_fwd_request_ENQ),
							      .DEQ(grp1_ff_fwd_request_DEQ),
							      .CLR(grp1_ff_fwd_request_CLR),
							      .D_OUT(),
							      .FULL_N(),
							      .EMPTY_N());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;

  // rule RL_grp1_rl_increment_cycle
  assign CAN_FIRE_RL_grp1_rl_increment_cycle = 1'd1 ;
  assign WILL_FIRE_RL_grp1_rl_increment_cycle = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h342 ;
  assign MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2 =
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ;
  assign MUX_grp1_rg_mepc_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h341 ;
  assign MUX_grp1_rg_mstatus_mie_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 ;
  assign MUX_grp1_rg_mstatus_mie_write_1__SEL_2 =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[5:4] == 2'd3 ;
  assign MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_2 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 &&
	     (x__h7245[12:11] == 2'h0 || x__h7245[12:11] == 2'h1 ||
	      x__h7245[12:11] == 2'h3) ;
  assign MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_3 =
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d705 ;
  assign MUX_grp1_rg_mstatus_sie_write_1__SEL_1 =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[5:4] == 2'd1 ;
  assign MUX_grp1_rg_mstatus_sie_write_1__SEL_2 =
	     EN_mav_upd_on_trap &&
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ;
  assign MUX_grp1_rg_mstatus_sie_write_1__SEL_3 =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100) ;
  assign MUX_grp1_rg_mtval_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h343 ;
  assign MUX_grp1_rg_scause_exception_code_wlrl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h142 ;
  assign MUX_grp1_rg_sepc_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h141 ;
  assign MUX_grp1_rg_stval_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h143 ;
  assign MUX_rg_prv_write_1__SEL_1 =
	     EN_mav_upd_on_trap &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ;
  assign MUX_grp1_rg_mepc_warl_write_1__VAL_1 =
	     { CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1[63:1],
	       1'd0 } ;
  assign MUX_grp1_rg_mepc_warl_write_1__VAL_2 =
	     { mav_upd_on_trap_pc[63:1], 1'd0 } ;
  assign MUX_grp1_rg_mstatus_mpp_warl_write_1__VAL_1 =
	     grp1_rg_misa_extensions_warl[20] ? 2'd0 : 2'd3 ;
  assign MUX_grp1_rg_mstatus_sie_write_1__VAL_3 =
	     (ma_core_req_req[78:67] == 12'h300) ? x__h7245[1] : x__h8168[1] ;
  assign MUX_grp1_rg_mstatus_spie_write_1__VAL_3 =
	     (ma_core_req_req[78:67] == 12'h300) ? x__h7245[5] : x__h8168[5] ;
  assign MUX_grp1_rg_mstatus_spp_write_1__VAL_3 =
	     (ma_core_req_req[78:67] == 12'h300) ? x__h7245[8] : x__h8168[8] ;
  always@(ma_core_req_req or x__h12693 or grp1_rg_mtval_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1: MUX_grp1_rg_mtval_warl_write_1__VAL_1 = ma_core_req_req[66:3];
      2'd2:
	  MUX_grp1_rg_mtval_warl_write_1__VAL_1 =
	      ma_core_req_req[66:3] | grp1_rg_mtval_warl;
      default: MUX_grp1_rg_mtval_warl_write_1__VAL_1 =
		   x__h12693 & grp1_rg_mtval_warl;
    endcase
  end
  assign MUX_grp1_rg_sepc_warl_write_1__VAL_1 =
	     { CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2[63:1],
	       1'd0 } ;
  always@(ma_core_req_req or x__h12693 or grp1_rg_stval_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1: MUX_grp1_rg_stval_warl_write_1__VAL_1 = ma_core_req_req[66:3];
      2'd2:
	  MUX_grp1_rg_stval_warl_write_1__VAL_1 =
	      ma_core_req_req[66:3] | grp1_rg_stval_warl;
      default: MUX_grp1_rg_stval_warl_write_1__VAL_1 =
		   x__h12693 & grp1_rg_stval_warl;
    endcase
  end
  assign MUX_rg_prv_write_1__VAL_1 =
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ?
	       2'd1 :
	       2'd3 ;
  assign MUX_rg_prv_write_1__VAL_2 =
	     (mav_upd_on_ret_retype[5:4] == 2'd1) ?
	       { 1'd0, grp1_rg_mstatus_spp } :
	       grp1_rg_mstatus_mpp_warl ;

  // inlined wires
  always@(ma_core_req_req or
	  readdata__h5558 or
	  readdata__h5625 or
	  readdata__h5528 or
	  grp1_rg_sscratch_warl or
	  grp1_rg_sepc_warl or
	  readdata__h5675 or
	  grp1_rg_stval_warl or
	  new_value_data__h6193 or
	  readdata__h5814 or
	  readdata__h5548 or
	  readdata__h5509 or
	  grp1_rg_medeleg_warl or
	  grp1_rg_mideleg_warl or
	  readdata__h5615 or
	  readdata__h5538 or
	  grp1_rg_mscratch_warl or
	  grp1_rg_mepc_warl or
	  readdata__h5705 or
	  grp1_rg_mtval_warl or
	  new_value_data__h6172 or
	  readdata__h5764 or
	  grp1_rg_pmpaddr0_warl or
	  grp1_rg_pmpaddr1_warl or
	  grp1_rg_pmpaddr2_warl or
	  grp1_rg_pmpaddr3_warl or
	  readdata__h5834 or
	  grp1_rg_minstret or grp1_rg_time or readdata__h5843)
  begin
    case (ma_core_req_req[78:67])
      12'h100: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5558 };
      12'h104: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5625 };
      12'h105: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5528 };
      12'h140: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_sscratch_warl };
      12'h141: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_sepc_warl };
      12'h142: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5675 };
      12'h143: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_stval_warl };
      12'h144: grp1_rg_resp_to_core_wget = { 1'd1, new_value_data__h6193 };
      12'h180: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5814 };
      12'h300: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5548 };
      12'h301: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5509 };
      12'h302: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_medeleg_warl };
      12'h303: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_mideleg_warl };
      12'h304: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5615 };
      12'h305: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5538 };
      12'h320, 12'hF11, 12'hF13, 12'hF14:
	  grp1_rg_resp_to_core_wget = 65'h10000000000000000;
      12'h340: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_mscratch_warl };
      12'h341: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_mepc_warl };
      12'h342: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5705 };
      12'h343: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_mtval_warl };
      12'h344: grp1_rg_resp_to_core_wget = { 1'd1, new_value_data__h6172 };
      12'h3A0: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5764 };
      12'h3B0: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_pmpaddr0_warl };
      12'h3B1: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_pmpaddr1_warl };
      12'h3B2: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_pmpaddr2_warl };
      12'h3B3: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_pmpaddr3_warl };
      12'h800: grp1_rg_resp_to_core_wget = 65'h10000000000000017;
      12'hB00, 12'hC00: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5834 };
      12'hB02: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_minstret };
      12'hC01: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_time };
      12'hC02: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h5843 };
      12'hF12: grp1_rg_resp_to_core_wget = 65'h10000000000000005;
      default: grp1_rg_resp_to_core_wget = 65'h10000000000000000;
    endcase
  end
  assign grp1_rg_mcycle_port0__write_1 = grp1_rg_mcycle + 64'd1 ;
  assign grp1_rg_mcycle_EN_port1__write =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'hB00 ;
  always@(ma_core_req_req or x__h12693 or readdata__h5834)
  begin
    case (ma_core_req_req[2:1])
      2'd1: grp1_rg_mcycle_port1__write_1 = ma_core_req_req[66:3];
      2'd2:
	  grp1_rg_mcycle_port1__write_1 =
	      ma_core_req_req[66:3] | readdata__h5834;
      default: grp1_rg_mcycle_port1__write_1 = x__h12693 & readdata__h5834;
    endcase
  end
  assign grp1_rg_mcycle_port2__read =
	     grp1_rg_mcycle_EN_port1__write ?
	       grp1_rg_mcycle_port1__write_1 :
	       sbread_mv_csr_mcycle ;
  assign grp1_rg_minstret_EN_port0__write =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'hB02 ;
  always@(ma_core_req_req or x__h12693 or grp1_rg_minstret)
  begin
    case (ma_core_req_req[2:1])
      2'd1: grp1_rg_minstret_port0__write_1 = ma_core_req_req[66:3];
      2'd2:
	  grp1_rg_minstret_port0__write_1 =
	      ma_core_req_req[66:3] | grp1_rg_minstret;
      default: grp1_rg_minstret_port0__write_1 = x__h12693 & grp1_rg_minstret;
    endcase
  end
  assign grp1_rg_minstret_EN_port1__write =
	     EN_ma_incr_minstret && !x_wget__h403 ;
  assign grp1_rg_minstret_port1__write_1 =
	     readdata__h5843 + ma_incr_minstret_incr ;
  assign grp1_rg_minstret_port2__read =
	     grp1_rg_minstret_EN_port1__write ?
	       grp1_rg_minstret_port1__write_1 :
	       sbread_mv_csr_minstret ;

  // register grp1_rg_mcause_exception_code_wlrl
  assign grp1_rg_mcause_exception_code_wlrl_D_IN =
	     MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_1 ?
	       x__h10734[3:0] :
	       mav_upd_on_trap_cause[3:0] ;
  assign grp1_rg_mcause_exception_code_wlrl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h342 ||
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ;

  // register grp1_rg_mcause_interrupt
  assign grp1_rg_mcause_interrupt_D_IN =
	     MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_1 ?
	       x__h10734[63] :
	       mav_upd_on_trap_cause[6] ;
  assign grp1_rg_mcause_interrupt_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h342 ||
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ;

  // register grp1_rg_mcycle
  assign grp1_rg_mcycle_D_IN = grp1_rg_mcycle_port2__read ;
  assign grp1_rg_mcycle_EN = 1'b1 ;

  // register grp1_rg_medeleg_warl
  assign grp1_rg_medeleg_warl_D_IN =
	     { 48'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d518[15:12],
	       1'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d518[10:0] } ;
  assign grp1_rg_medeleg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h302 ;

  // register grp1_rg_mepc_warl
  assign grp1_rg_mepc_warl_D_IN =
	     MUX_grp1_rg_mepc_warl_write_1__SEL_1 ?
	       MUX_grp1_rg_mepc_warl_write_1__VAL_1 :
	       MUX_grp1_rg_mepc_warl_write_1__VAL_2 ;
  assign grp1_rg_mepc_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h341 ||
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ;

  // register grp1_rg_mideleg_warl
  assign grp1_rg_mideleg_warl_D_IN =
	     { 48'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d510[15:12],
	       1'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d510[10:0] } ;
  assign grp1_rg_mideleg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h303 ;

  // register grp1_rg_mie_debug_interrupt
  assign grp1_rg_mie_debug_interrupt_D_IN = x__h9559[16] ;
  assign grp1_rg_mie_debug_interrupt_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_meie
  assign grp1_rg_mie_meie_D_IN = x__h9559[11] ;
  assign grp1_rg_mie_meie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_msie
  assign grp1_rg_mie_msie_D_IN = x__h9559[3] ;
  assign grp1_rg_mie_msie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_mtie
  assign grp1_rg_mie_mtie_D_IN = x__h9559[7] ;
  assign grp1_rg_mie_mtie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_seie
  assign grp1_rg_mie_seie_D_IN =
	     (ma_core_req_req[78:67] == 12'h304) ?
	       x__h9559[9] :
	       x__h10082[9] ;
  assign grp1_rg_mie_seie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h304 ||
	      ma_core_req_req[78:67] == 12'h104) ;

  // register grp1_rg_mie_ssie
  assign grp1_rg_mie_ssie_D_IN =
	     (ma_core_req_req[78:67] == 12'h304) ?
	       x__h9559[1] :
	       x__h10082[1] ;
  assign grp1_rg_mie_ssie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h304 ||
	      ma_core_req_req[78:67] == 12'h104) ;

  // register grp1_rg_mie_stie
  assign grp1_rg_mie_stie_D_IN =
	     (ma_core_req_req[78:67] == 12'h304) ?
	       x__h9559[5] :
	       x__h10082[5] ;
  assign grp1_rg_mie_stie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h304 ||
	      ma_core_req_req[78:67] == 12'h104) ;

  // register grp1_rg_minstret
  assign grp1_rg_minstret_D_IN = grp1_rg_minstret_port2__read ;
  assign grp1_rg_minstret_EN = 1'b1 ;

  // register grp1_rg_mip_seip
  assign grp1_rg_mip_seip_D_IN = word__h8764[9] ;
  assign grp1_rg_mip_seip_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h344 ;

  // register grp1_rg_mip_ssip
  assign grp1_rg_mip_ssip_D_IN =
	     (ma_core_req_req[78:67] == 12'h344) ?
	       word__h8764[1] :
	       word__h9266[1] ;
  assign grp1_rg_mip_ssip_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h344 ||
	      ma_core_req_req[78:67] == 12'h144) ;

  // register grp1_rg_mip_stip
  assign grp1_rg_mip_stip_D_IN = word__h8764[5] ;
  assign grp1_rg_mip_stip_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h344 ;

  // register grp1_rg_misa_extensions_warl
  assign grp1_rg_misa_extensions_warl_D_IN =
	     { 5'd0,
	       x__h6657[20],
	       1'd0,
	       x__h6657[18],
	       5'd0,
	       x__h6657[12],
	       3'd0,
	       x__h6657[8],
	       5'd0,
	       x__h6657[2],
	       1'd0,
	       x__h6657[0] } ;
  assign grp1_rg_misa_extensions_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h301 ;

  // register grp1_rg_misa_mxl_warl
  assign grp1_rg_misa_mxl_warl_D_IN = x__h6657[63:62] ;
  assign grp1_rg_misa_mxl_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h301 &&
	     x__h6657[63:62] == 2'h2 ;

  // register grp1_rg_mscratch_warl
  always@(ma_core_req_req or x__h12693 or grp1_rg_mscratch_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1: grp1_rg_mscratch_warl_D_IN = ma_core_req_req[66:3];
      2'd2:
	  grp1_rg_mscratch_warl_D_IN =
	      ma_core_req_req[66:3] | grp1_rg_mscratch_warl;
      default: grp1_rg_mscratch_warl_D_IN = x__h12693 & grp1_rg_mscratch_warl;
    endcase
  end
  assign grp1_rg_mscratch_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h340 ;

  // register grp1_rg_mstatus_fs_warl
  assign grp1_rg_mstatus_fs_warl_D_IN =
	     (ma_core_req_req[78:67] == 12'h300) ?
	       x__h7245[14:13] :
	       x__h8168[14:13] ;
  assign grp1_rg_mstatus_fs_warl_EN = MUX_grp1_rg_mstatus_sie_write_1__SEL_3 ;

  // register grp1_rg_mstatus_mie
  always@(MUX_grp1_rg_mstatus_mie_write_1__SEL_1 or
	  x__h7245 or
	  MUX_grp1_rg_mstatus_mie_write_1__SEL_2 or
	  grp1_rg_mstatus_mpie or
	  MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_mie_write_1__SEL_1:
	  grp1_rg_mstatus_mie_D_IN = x__h7245[3];
      MUX_grp1_rg_mstatus_mie_write_1__SEL_2:
	  grp1_rg_mstatus_mie_D_IN = grp1_rg_mstatus_mpie;
      MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2:
	  grp1_rg_mstatus_mie_D_IN = 1'b0;
      default: grp1_rg_mstatus_mie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_mie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 ||
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[5:4] == 2'd3 ||
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ;

  // register grp1_rg_mstatus_mpie
  always@(MUX_grp1_rg_mstatus_mie_write_1__SEL_1 or
	  x__h7245 or
	  MUX_grp1_rg_mstatus_mie_write_1__SEL_2 or
	  MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2 or
	  grp1_rg_mstatus_mie)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_mie_write_1__SEL_1:
	  grp1_rg_mstatus_mpie_D_IN = x__h7245[7];
      MUX_grp1_rg_mstatus_mie_write_1__SEL_2:
	  grp1_rg_mstatus_mpie_D_IN = 1'b1;
      MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2:
	  grp1_rg_mstatus_mpie_D_IN = grp1_rg_mstatus_mie;
      default: grp1_rg_mstatus_mpie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_mpie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 ||
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[5:4] == 2'd3 ||
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ;

  // register grp1_rg_mstatus_mpp_warl
  always@(MUX_grp1_rg_mstatus_mie_write_1__SEL_2 or
	  MUX_grp1_rg_mstatus_mpp_warl_write_1__VAL_1 or
	  MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_2 or
	  x__h7245 or MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_3 or rg_prv)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_mie_write_1__SEL_2:
	  grp1_rg_mstatus_mpp_warl_D_IN =
	      MUX_grp1_rg_mstatus_mpp_warl_write_1__VAL_1;
      MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_2:
	  grp1_rg_mstatus_mpp_warl_D_IN = x__h7245[12:11];
      MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_3:
	  grp1_rg_mstatus_mpp_warl_D_IN = rg_prv;
      default: grp1_rg_mstatus_mpp_warl_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_mpp_warl_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[5:4] == 2'd3 ||
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 &&
	     (x__h7245[12:11] == 2'h0 || x__h7245[12:11] == 2'h1 ||
	      x__h7245[12:11] == 2'h3) ||
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d705 ;

  // register grp1_rg_mstatus_mprv_warl
  assign grp1_rg_mstatus_mprv_warl_D_IN =
	     MUX_grp1_rg_mstatus_mie_write_1__SEL_1 && x__h7245[17] ;
  assign grp1_rg_mstatus_mprv_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 ||
	     EN_mav_upd_on_ret &&
	     (mav_upd_on_ret_retype[5:4] == 2'd1 ||
	      mav_upd_on_ret_retype[5:4] == 2'd3 &&
	      grp1_rg_mstatus_mpp_warl != 2'd3) ;

  // register grp1_rg_mstatus_mxr
  assign grp1_rg_mstatus_mxr_D_IN =
	     (ma_core_req_req[78:67] == 12'h300) ?
	       x__h7245[19] :
	       x__h8168[19] ;
  assign grp1_rg_mstatus_mxr_EN = MUX_grp1_rg_mstatus_sie_write_1__SEL_3 ;

  // register grp1_rg_mstatus_sie
  always@(MUX_grp1_rg_mstatus_sie_write_1__SEL_1 or
	  grp1_rg_mstatus_spie or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_2 or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_3 or
	  MUX_grp1_rg_mstatus_sie_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_sie_write_1__SEL_1:
	  grp1_rg_mstatus_sie_D_IN = grp1_rg_mstatus_spie;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_2: grp1_rg_mstatus_sie_D_IN = 1'b0;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_3:
	  grp1_rg_mstatus_sie_D_IN = MUX_grp1_rg_mstatus_sie_write_1__VAL_3;
      default: grp1_rg_mstatus_sie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_sie_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[5:4] == 2'd1 ||
	     EN_mav_upd_on_trap &&
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100) ;

  // register grp1_rg_mstatus_spie
  always@(MUX_grp1_rg_mstatus_sie_write_1__SEL_1 or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_2 or
	  grp1_rg_mstatus_sie or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_3 or
	  MUX_grp1_rg_mstatus_spie_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_sie_write_1__SEL_1:
	  grp1_rg_mstatus_spie_D_IN = 1'b1;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_2:
	  grp1_rg_mstatus_spie_D_IN = grp1_rg_mstatus_sie;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_3:
	  grp1_rg_mstatus_spie_D_IN = MUX_grp1_rg_mstatus_spie_write_1__VAL_3;
      default: grp1_rg_mstatus_spie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_spie_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[5:4] == 2'd1 ||
	     EN_mav_upd_on_trap &&
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100) ;

  // register grp1_rg_mstatus_spp
  always@(MUX_grp1_rg_mstatus_sie_write_1__SEL_1 or
	  grp1_rg_misa_extensions_warl or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_2 or
	  rg_prv or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_3 or
	  MUX_grp1_rg_mstatus_spp_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_sie_write_1__SEL_1:
	  grp1_rg_mstatus_spp_D_IN = !grp1_rg_misa_extensions_warl[20];
      MUX_grp1_rg_mstatus_sie_write_1__SEL_2:
	  grp1_rg_mstatus_spp_D_IN = rg_prv[0];
      MUX_grp1_rg_mstatus_sie_write_1__SEL_3:
	  grp1_rg_mstatus_spp_D_IN = MUX_grp1_rg_mstatus_spp_write_1__VAL_3;
      default: grp1_rg_mstatus_spp_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_spp_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[5:4] == 2'd1 ||
	     EN_mav_upd_on_trap &&
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100) ;

  // register grp1_rg_mstatus_sum
  assign grp1_rg_mstatus_sum_D_IN =
	     (ma_core_req_req[78:67] == 12'h300) ?
	       x__h7245[18] :
	       x__h8168[18] ;
  assign grp1_rg_mstatus_sum_EN = MUX_grp1_rg_mstatus_sie_write_1__SEL_3 ;

  // register grp1_rg_mstatus_tsr
  assign grp1_rg_mstatus_tsr_D_IN = x__h7245[22] ;
  assign grp1_rg_mstatus_tsr_EN = MUX_grp1_rg_mstatus_mie_write_1__SEL_1 ;

  // register grp1_rg_mstatus_tvm
  assign grp1_rg_mstatus_tvm_D_IN = x__h7245[20] ;
  assign grp1_rg_mstatus_tvm_EN = MUX_grp1_rg_mstatus_mie_write_1__SEL_1 ;

  // register grp1_rg_mstatus_tw
  assign grp1_rg_mstatus_tw_D_IN = x__h7245[21] ;
  assign grp1_rg_mstatus_tw_EN = MUX_grp1_rg_mstatus_mie_write_1__SEL_1 ;

  // register grp1_rg_mtval_warl
  assign grp1_rg_mtval_warl_D_IN =
	     MUX_grp1_rg_mtval_warl_write_1__SEL_1 ?
	       MUX_grp1_rg_mtval_warl_write_1__VAL_1 :
	       mav_upd_on_trap_tval ;
  assign grp1_rg_mtval_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h343 ||
	     EN_mav_upd_on_trap &&
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ;

  // register grp1_rg_mtvec_base_warl
  assign grp1_rg_mtvec_base_warl_D_IN = x__h7086[63:2] ;
  assign grp1_rg_mtvec_base_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h305 ;

  // register grp1_rg_mtvec_mode_warl
  assign grp1_rg_mtvec_mode_warl_D_IN = x__h7086[1:0] ;
  assign grp1_rg_mtvec_mode_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h305 &&
	     x__h7086[1:0] <= 2'h1 ;

  // register grp1_rg_pmpaddr0_warl
  assign grp1_rg_pmpaddr0_warl_D_IN =
	     { CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q3[63:1],
	       1'd0 } ;
  assign grp1_rg_pmpaddr0_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3B0 &&
	     !grp1_rg_pmpcfg0_pmp0cfg_warl[7] ;

  // register grp1_rg_pmpaddr1_warl
  assign grp1_rg_pmpaddr1_warl_D_IN =
	     { CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q4[63:1],
	       1'd0 } ;
  assign grp1_rg_pmpaddr1_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3B1 &&
	     !grp1_rg_pmpcfg0_pmp1cfg_warl[7] ;

  // register grp1_rg_pmpaddr2_warl
  assign grp1_rg_pmpaddr2_warl_D_IN =
	     { CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q6[63:1],
	       1'd0 } ;
  assign grp1_rg_pmpaddr2_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3B2 &&
	     !grp1_rg_pmpcfg0_pmp2cfg_warl[7] ;

  // register grp1_rg_pmpaddr3_warl
  assign grp1_rg_pmpaddr3_warl_D_IN =
	     { CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q5[63:1],
	       1'd0 } ;
  assign grp1_rg_pmpaddr3_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3B3 &&
	     !grp1_rg_pmpcfg0_pmp3cfg_warl[7] ;

  // register grp1_rg_pmpcfg0_pmp0cfg_warl
  assign grp1_rg_pmpcfg0_pmp0cfg_warl_D_IN = x__h11141[7:0] ;
  assign grp1_rg_pmpcfg0_pmp0cfg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3A0 &&
	     !grp1_rg_pmpcfg0_pmp0cfg_warl[7] &&
	     x__h11141[6:5] == 2'd0 &&
	     x__h11141[4:3] != 2'd2 &&
	     x__h11141[2:0] != 3'd2 &&
	     x__h11141[2:0] != 3'd6 ;

  // register grp1_rg_pmpcfg0_pmp1cfg_warl
  assign grp1_rg_pmpcfg0_pmp1cfg_warl_D_IN = x__h11141[15:8] ;
  assign grp1_rg_pmpcfg0_pmp1cfg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3A0 &&
	     !grp1_rg_pmpcfg0_pmp1cfg_warl[7] &&
	     x__h11141[14:13] == 2'd0 &&
	     x__h11141[12:11] != 2'd2 &&
	     x__h11141[10:8] != 3'd2 &&
	     x__h11141[10:8] != 3'd6 ;

  // register grp1_rg_pmpcfg0_pmp2cfg_warl
  assign grp1_rg_pmpcfg0_pmp2cfg_warl_D_IN = x__h11141[23:16] ;
  assign grp1_rg_pmpcfg0_pmp2cfg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3A0 &&
	     !grp1_rg_pmpcfg0_pmp2cfg_warl[7] &&
	     x__h11141[22:21] == 2'd0 &&
	     x__h11141[20:19] != 2'd2 &&
	     x__h11141[18:16] != 3'd2 &&
	     x__h11141[18:16] != 3'd6 ;

  // register grp1_rg_pmpcfg0_pmp3cfg_warl
  assign grp1_rg_pmpcfg0_pmp3cfg_warl_D_IN = x__h11141[31:24] ;
  assign grp1_rg_pmpcfg0_pmp3cfg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3A0 &&
	     !grp1_rg_pmpcfg0_pmp3cfg_warl[7] &&
	     x__h11141[30:29] == 2'd0 &&
	     x__h11141[28:27] != 2'd2 &&
	     x__h11141[26:24] != 3'd2 &&
	     x__h11141[26:24] != 3'd6 ;

  // register grp1_rg_satp_asid_warl
  assign grp1_rg_satp_asid_warl_D_IN = x__h12616[59:44] ;
  assign grp1_rg_satp_asid_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h180 &&
	     x__h12616[59:44] <= 16'h00FF ;

  // register grp1_rg_satp_mode_warl
  assign grp1_rg_satp_mode_warl_D_IN = x__h12616[63:60] ;
  assign grp1_rg_satp_mode_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h180 &&
	     (x__h12616[63:60] == 4'd0 || x__h12616[63:60] == 4'd8) ;

  // register grp1_rg_satp_ppn_warl
  assign grp1_rg_satp_ppn_warl_D_IN = x__h12616[43:0] ;
  assign grp1_rg_satp_ppn_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h180 ;

  // register grp1_rg_scause_exception_code_wlrl
  assign grp1_rg_scause_exception_code_wlrl_D_IN =
	     MUX_grp1_rg_scause_exception_code_wlrl_write_1__SEL_1 ?
	       x__h10561[3:0] :
	       mav_upd_on_trap_cause[3:0] ;
  assign grp1_rg_scause_exception_code_wlrl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h142 ||
	     EN_mav_upd_on_trap &&
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ;

  // register grp1_rg_scause_interrupt
  assign grp1_rg_scause_interrupt_D_IN =
	     MUX_grp1_rg_scause_exception_code_wlrl_write_1__SEL_1 ?
	       x__h10561[63] :
	       mav_upd_on_trap_cause[6] ;
  assign grp1_rg_scause_interrupt_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h142 ||
	     EN_mav_upd_on_trap &&
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ;

  // register grp1_rg_sepc_warl
  assign grp1_rg_sepc_warl_D_IN =
	     MUX_grp1_rg_sepc_warl_write_1__SEL_1 ?
	       MUX_grp1_rg_sepc_warl_write_1__VAL_1 :
	       MUX_grp1_rg_mepc_warl_write_1__VAL_2 ;
  assign grp1_rg_sepc_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h141 ||
	     EN_mav_upd_on_trap &&
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ;

  // register grp1_rg_sscratch_warl
  always@(ma_core_req_req or x__h12693 or grp1_rg_sscratch_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1: grp1_rg_sscratch_warl_D_IN = ma_core_req_req[66:3];
      2'd2:
	  grp1_rg_sscratch_warl_D_IN =
	      ma_core_req_req[66:3] | grp1_rg_sscratch_warl;
      default: grp1_rg_sscratch_warl_D_IN = x__h12693 & grp1_rg_sscratch_warl;
    endcase
  end
  assign grp1_rg_sscratch_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h140 ;

  // register grp1_rg_stval_warl
  assign grp1_rg_stval_warl_D_IN =
	     MUX_grp1_rg_stval_warl_write_1__SEL_1 ?
	       MUX_grp1_rg_stval_warl_write_1__VAL_1 :
	       mav_upd_on_trap_tval ;
  assign grp1_rg_stval_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h143 ||
	     EN_mav_upd_on_trap &&
	     grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 ;

  // register grp1_rg_stvec_base_warl
  assign grp1_rg_stvec_base_warl_D_IN = x__h6927[63:2] ;
  assign grp1_rg_stvec_base_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h105 ;

  // register grp1_rg_stvec_mode_warl
  assign grp1_rg_stvec_mode_warl_D_IN = x__h6927[1:0] ;
  assign grp1_rg_stvec_mode_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h105 &&
	     x__h6927[1:0] <= 2'h1 ;

  // register grp1_rg_time
  assign grp1_rg_time_D_IN = ma_set_time__time ;
  assign grp1_rg_time_EN = EN_ma_set_time ;

  // register rg_prv
  assign rg_prv_D_IN =
	     MUX_rg_prv_write_1__SEL_1 ?
	       MUX_rg_prv_write_1__VAL_1 :
	       MUX_rg_prv_write_1__VAL_2 ;
  assign rg_prv_EN =
	     EN_mav_upd_on_trap &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) ||
	     EN_mav_upd_on_ret &&
	     (mav_upd_on_ret_retype[5:4] == 2'd1 ||
	      mav_upd_on_ret_retype[5:4] == 2'd3) ;

  // submodule grp1_ff_fwd_request
  assign grp1_ff_fwd_request_D_IN = 79'h0 ;
  assign grp1_ff_fwd_request_ENQ = 1'b0 ;
  assign grp1_ff_fwd_request_DEQ = 1'b0 ;
  assign grp1_ff_fwd_request_CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 =
	     !grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d670 &&
	     !grp1_rg_medeleg_warl_49_SRL_mav_upd_on_trap_ca_ETC___d675 ||
	     rg_prv != 2'h0 ||
	     !grp1_rg_misa_extensions_warl[13] ;
  assign NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 =
	     !grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d670 &&
	     !grp1_rg_medeleg_warl_49_SRL_mav_upd_on_trap_ca_ETC___d675 ||
	     !rg_prv_1_ULE_1___d687 ||
	     !grp1_rg_misa_extensions_warl[18] ;
  assign NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d705 =
	     NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d698 &&
	     (NOT_grp1_rg_mideleg_warl_48_SRL_mav_upd_on_tra_ETC___d683 ||
	      grp1_rg_misa_extensions_warl[18]) &&
	     (rg_prv == 2'h0 || rg_prv == 2'h1 || rg_prv == 2'h3) ;
  assign anydata__h3033 =
	     EN_ma_core_req ? grp1_rg_resp_to_core_wget[63:0] : 64'd0 ;
  assign grp1_rg_medeleg_warl_49_SRL_mav_upd_on_trap_ca_ETC___d675 =
	     x__h14024[0] & y__h14023 ;
  assign grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d670 =
	     x__h13980[0] & mav_upd_on_trap_cause[6] ;
  assign grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d689 =
	     (grp1_rg_mideleg_warl_48_SRL_mav_upd_on_trap_ca_ETC___d670 ||
	      grp1_rg_medeleg_warl_49_SRL_mav_upd_on_trap_ca_ETC___d675) &&
	     rg_prv_1_ULE_1___d687 &&
	     grp1_rg_misa_extensions_warl[18] ;
  assign lv_tvec___1__h14426 =
	     lv_tvec___2__h14417 +
	     { 56'd0, mav_upd_on_trap_cause[5:0], 2'b0 } ;
  assign lv_tvec___1__h14837 =
	     lv_tvec___2__h14828 +
	     { 56'd0, mav_upd_on_trap_cause[5:0], 2'b0 } ;
  assign lv_tvec___2__h14417 = { grp1_rg_stvec_base_warl, 2'b0 } ;
  assign lv_tvec___2__h14828 = { grp1_rg_mtvec_base_warl, 2'b0 } ;
  assign new_value_data__h6172 =
	     rg_mip__read__h3600 | { 54'd0, x__read__h343, 9'd0 } ;
  assign new_value_data__h6193 =
	     rg_sip__read__h3721 | { 54'd0, x__read__h343, 9'd0 } ;
  assign r1__read__h3335 = { grp1_rg_misa_mxl_warl, 36'd0 } ;
  assign r1__read__h3445 = { r1__read__h3447, grp1_rg_mstatus_sie } ;
  assign r1__read__h3447 = { r1__read__h3449, 1'd0 } ;
  assign r1__read__h3449 = { r1__read__h3451, grp1_rg_mstatus_mie } ;
  assign r1__read__h3451 = { r1__read__h3453, 1'd0 } ;
  assign r1__read__h3453 = { r1__read__h3455, grp1_rg_mstatus_spie } ;
  assign r1__read__h3455 = { r1__read__h3457, 1'd0 } ;
  assign r1__read__h3457 = { r1__read__h3459, grp1_rg_mstatus_mpie } ;
  assign r1__read__h3459 = { r1__read__h3461, grp1_rg_mstatus_spp } ;
  assign r1__read__h3461 = { r1__read__h3463, 2'd0 } ;
  assign r1__read__h3463 = { r1__read__h3465, grp1_rg_mstatus_mpp_warl } ;
  assign r1__read__h3465 = { r1__read__h3467, grp1_rg_mstatus_fs_warl } ;
  assign r1__read__h3467 = { r1__read__h3469, 2'd0 } ;
  assign r1__read__h3469 = { r1__read__h3471, grp1_rg_mstatus_mprv_warl } ;
  assign r1__read__h3471 = { r1__read__h3473, grp1_rg_mstatus_sum } ;
  assign r1__read__h3473 = { r1__read__h3475, grp1_rg_mstatus_mxr } ;
  assign r1__read__h3475 = { r1__read__h3477, grp1_rg_mstatus_tvm } ;
  assign r1__read__h3477 = { r1__read__h3479, grp1_rg_mstatus_tw } ;
  assign r1__read__h3479 = { r1__read__h3481, grp1_rg_mstatus_tsr } ;
  assign r1__read__h3481 = { r1__read__h3483, 9'd0 } ;
  assign r1__read__h3483 = { r1__read__h3485, 2'd2 } ;
  assign r1__read__h3485 = { r1__read__h3487, 2'd2 } ;
  assign r1__read__h3487 = { r__h3490, 27'd0 } ;
  assign r1__read__h3602 = { r1__read__h3604, grp1_rg_mip_ssip } ;
  assign r1__read__h3604 = { r1__read__h3606, 1'd0 } ;
  assign r1__read__h3606 = { r1__read__h3608, r__h3667 } ;
  assign r1__read__h3608 = { r1__read__h3610, 1'd0 } ;
  assign r1__read__h3610 = { r1__read__h3612, grp1_rg_mip_stip } ;
  assign r1__read__h3612 = { r1__read__h3614, 1'd0 } ;
  assign r1__read__h3614 = { r1__read__h3616, r__h3653 } ;
  assign r1__read__h3616 = { r1__read__h3618, 1'd0 } ;
  assign r1__read__h3618 = { r1__read__h3620, grp1_rg_mip_seip } ;
  assign r1__read__h3620 = { r1__read__h3622, 1'd0 } ;
  assign r1__read__h3622 = { r1__read__h3624, r__h3638 } ;
  assign r1__read__h3624 = { r1__read__h3626, 4'd0 } ;
  assign r1__read__h3626 = { 47'd0, r__h3628 } ;
  assign r1__read__h3723 = { r1__read__h3725, grp1_rg_mip_ssip } ;
  assign r1__read__h3725 = { r1__read__h3727, 2'd0 } ;
  assign r1__read__h3727 = { r1__read__h3729, 1'd0 } ;
  assign r1__read__h3729 = { r1__read__h3731, grp1_rg_mip_stip } ;
  assign r1__read__h3731 = { r1__read__h3733, 2'd0 } ;
  assign r1__read__h3733 = { r1__read__h3735, 1'd0 } ;
  assign r1__read__h3735 = { 54'd0, grp1_rg_mip_seip } ;
  assign r1__read__h3799 = { r1__read__h3801, grp1_rg_mie_ssie } ;
  assign r1__read__h3801 = { r1__read__h3803, 1'd0 } ;
  assign r1__read__h3803 = { r1__read__h3805, grp1_rg_mie_msie } ;
  assign r1__read__h3805 = { r1__read__h3807, 1'd0 } ;
  assign r1__read__h3807 = { r1__read__h3809, grp1_rg_mie_stie } ;
  assign r1__read__h3809 = { r1__read__h3811, 1'd0 } ;
  assign r1__read__h3811 = { r1__read__h3813, grp1_rg_mie_mtie } ;
  assign r1__read__h3813 = { r1__read__h3815, 1'd0 } ;
  assign r1__read__h3815 = { r1__read__h3817, grp1_rg_mie_seie } ;
  assign r1__read__h3817 = { r1__read__h3819, 1'd0 } ;
  assign r1__read__h3819 = { r1__read__h3821, grp1_rg_mie_meie } ;
  assign r1__read__h3821 = { r1__read__h3823, 4'd0 } ;
  assign r1__read__h3823 = { 47'd0, grp1_rg_mie_debug_interrupt } ;
  assign r1__read__h3877 = { r1__read__h3879, grp1_rg_mie_ssie } ;
  assign r1__read__h3879 = { r1__read__h3881, 2'd0 } ;
  assign r1__read__h3881 = { r1__read__h3883, 1'd0 } ;
  assign r1__read__h3883 = { r1__read__h3885, grp1_rg_mie_stie } ;
  assign r1__read__h3885 = { r1__read__h3887, 2'd0 } ;
  assign r1__read__h3887 = { r1__read__h3889, 1'd0 } ;
  assign r1__read__h3889 = { 54'd0, grp1_rg_mie_seie } ;
  assign r1__read__h3998 = { r1__read__h4000, grp1_rg_pmpcfg0_pmp1cfg_warl } ;
  assign r1__read__h4000 = { r1__read__h4002, grp1_rg_pmpcfg0_pmp2cfg_warl } ;
  assign r1__read__h4002 = { 32'd0, grp1_rg_pmpcfg0_pmp3cfg_warl } ;
  assign r1__read__h4050 =
	     { grp1_rg_satp_mode_warl, grp1_rg_satp_asid_warl } ;
  assign r1__read__h6116 = { r1__read__h6118, grp1_rg_mstatus_sie } ;
  assign r1__read__h6118 = { r1__read__h6120, 2'd0 } ;
  assign r1__read__h6120 = { r1__read__h6122, 1'd0 } ;
  assign r1__read__h6122 = { r1__read__h6124, grp1_rg_mstatus_spie } ;
  assign r1__read__h6124 = { r1__read__h6126, 2'd0 } ;
  assign r1__read__h6126 = { r1__read__h6128, grp1_rg_mstatus_spp } ;
  assign r1__read__h6128 = { r1__read__h6130, 4'd0 } ;
  assign r1__read__h6130 = { r1__read__h6132, grp1_rg_mstatus_fs_warl } ;
  assign r1__read__h6132 = { r1__read__h6134, 2'd0 } ;
  assign r1__read__h6134 = { r1__read__h6136, 1'd0 } ;
  assign r1__read__h6136 = { r1__read__h6138, grp1_rg_mstatus_sum } ;
  assign r1__read__h6138 = { r1__read__h6140, grp1_rg_mstatus_mxr } ;
  assign r1__read__h6140 = { r1__read__h6142, 12'd0 } ;
  assign r1__read__h6142 = { r1__read__h6144, 2'd2 } ;
  assign r1__read__h6144 = { r__h3490, 29'd0 } ;
  assign r__h3490 = grp1_rg_mstatus_fs_warl == 2'b11 ;
  assign r__h3628 =
	     EN_ma_set_mip_debug_interrupt &&
	     ma_set_mip_debug_interrupt__debug_interrupt ;
  assign r__h3638 = EN_ma_set_mip_meip && ma_set_mip_meip__meip ;
  assign r__h3653 = EN_ma_set_mip_mtip && ma_set_mip_mtip__mtip ;
  assign r__h3667 = EN_ma_set_mip_msip && ma_set_mip_msip__msip ;
  assign readdata__h5509 = { r1__read__h3335, grp1_rg_misa_extensions_warl } ;
  assign readdata__h5528 =
	     { grp1_rg_stvec_base_warl, grp1_rg_stvec_mode_warl } ;
  assign readdata__h5538 =
	     { grp1_rg_mtvec_base_warl, grp1_rg_mtvec_mode_warl } ;
  assign readdata__h5548 = { r1__read__h3445, 1'd0 } ;
  assign readdata__h5558 = { r1__read__h6116, 1'd0 } ;
  assign readdata__h5615 = { r1__read__h3799, 1'd0 } ;
  assign readdata__h5625 = { r1__read__h3877, 1'd0 } ;
  assign readdata__h5675 =
	     { grp1_rg_scause_interrupt,
	       rg_scause_exception_code__read__h3915 } ;
  assign readdata__h5705 =
	     { grp1_rg_mcause_interrupt,
	       rg_mcause_exception_code__read__h3933 } ;
  assign readdata__h5764 = { r1__read__h3998, grp1_rg_pmpcfg0_pmp0cfg_warl } ;
  assign readdata__h5814 = { r1__read__h4050, grp1_rg_satp_ppn_warl } ;
  assign readdata__h5834 = sbread_mv_csr_mcycle ;
  assign readdata__h5843 = sbread_mv_csr_minstret ;
  assign result__h13890 = { v__h13116[62:1], 1'd0 } ;
  assign result__h6800 =
	     { word__h6656[63:3], ma_core_req_req[0], word__h6656[1:0] } ;
  assign rg_mcause_exception_code__read__h3933 =
	     { 59'd0, grp1_rg_mcause_exception_code_wlrl } ;
  assign rg_mip__read__h3600 = { r1__read__h3602, 1'd0 } ;
  assign rg_prv_1_ULE_1___d687 = rg_prv <= 2'd1 ;
  assign rg_scause_exception_code__read__h3915 =
	     { 59'd0, grp1_rg_scause_exception_code_wlrl } ;
  assign rg_sip__read__h3721 = { r1__read__h3723, 1'd0 } ;
  assign v__h13116 =
	     (mav_upd_on_ret_retype[5:4] == 2'd1) ?
	       grp1_rg_sepc_warl[63:1] :
	       grp1_rg_mepc_warl[63:1] ;
  assign v__h14115 =
	     (grp1_rg_stvec_mode_warl == 2'd1 && mav_upd_on_trap_cause[6]) ?
	       lv_tvec___1__h14426 :
	       lv_tvec___2__h14417 ;
  assign v__h14437 =
	     (grp1_rg_mtvec_mode_warl == 2'd1 && mav_upd_on_trap_cause[6]) ?
	       lv_tvec___1__h14837 :
	       lv_tvec___2__h14828 ;
  assign x__h12693 = ~ma_core_req_req[66:3] ;
  assign x__h13980 = grp1_rg_mideleg_warl >> mav_upd_on_trap_cause[5:0] ;
  assign x__h14024 = grp1_rg_medeleg_warl >> mav_upd_on_trap_cause[5:0] ;
  assign x__h6657 =
	     (grp1_rg_misa_extensions_warl[2] && !word__h6656[2]) ?
	       result__h6800 :
	       word__h6656 ;
  assign x__read__h343 = EN_ma_set_mip_seip && ma_set_mip_seip__seip ;
  assign x_wget__h403 = EN_ma_stop_count && ma_stop_count__stop ;
  assign y__h14023 = ~mav_upd_on_trap_cause[6] ;
  always@(ma_core_req_req or x__h12693 or readdata__h5509)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h6656 = ma_core_req_req[66:3];
      2'd2: word__h6656 = ma_core_req_req[66:3] | readdata__h5509;
      default: word__h6656 = x__h12693 & readdata__h5509;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5528)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h6927 = ma_core_req_req[66:3];
      2'd2: x__h6927 = ma_core_req_req[66:3] | readdata__h5528;
      default: x__h6927 = x__h12693 & readdata__h5528;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5538)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h7086 = ma_core_req_req[66:3];
      2'd2: x__h7086 = ma_core_req_req[66:3] | readdata__h5538;
      default: x__h7086 = x__h12693 & readdata__h5538;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5548)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h7245 = ma_core_req_req[66:3];
      2'd2: x__h7245 = ma_core_req_req[66:3] | readdata__h5548;
      default: x__h7245 = x__h12693 & readdata__h5548;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5558)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h8168 = ma_core_req_req[66:3];
      2'd2: x__h8168 = ma_core_req_req[66:3] | readdata__h5558;
      default: x__h8168 = x__h12693 & readdata__h5558;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or rg_mip__read__h3600)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h8764 = ma_core_req_req[66:3];
      2'd2: word__h8764 = ma_core_req_req[66:3] | rg_mip__read__h3600;
      default: word__h8764 = x__h12693 & rg_mip__read__h3600;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or rg_sip__read__h3721)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h9266 = ma_core_req_req[66:3];
      2'd2: word__h9266 = ma_core_req_req[66:3] | rg_sip__read__h3721;
      default: word__h9266 = x__h12693 & rg_sip__read__h3721;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5705)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h10734 = ma_core_req_req[66:3];
      2'd2: x__h10734 = ma_core_req_req[66:3] | readdata__h5705;
      default: x__h10734 = x__h12693 & readdata__h5705;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5615)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h9559 = ma_core_req_req[66:3];
      2'd2: x__h9559 = ma_core_req_req[66:3] | readdata__h5615;
      default: x__h9559 = x__h12693 & readdata__h5615;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5625)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h10082 = ma_core_req_req[66:3];
      2'd2: x__h10082 = ma_core_req_req[66:3] | readdata__h5625;
      default: x__h10082 = x__h12693 & readdata__h5625;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5675)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h10561 = ma_core_req_req[66:3];
      2'd2: x__h10561 = ma_core_req_req[66:3] | readdata__h5675;
      default: x__h10561 = x__h12693 & readdata__h5675;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5764)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h11141 = ma_core_req_req[66:3];
      2'd2: x__h11141 = ma_core_req_req[66:3] | readdata__h5764;
      default: x__h11141 = x__h12693 & readdata__h5764;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or readdata__h5814)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h12616 = ma_core_req_req[66:3];
      2'd2: x__h12616 = ma_core_req_req[66:3] | readdata__h5814;
      default: x__h12616 = x__h12693 & readdata__h5814;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or grp1_rg_mideleg_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d510 =
	      ma_core_req_req[66:3];
      2'd2:
	  IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d510 =
	      ma_core_req_req[66:3] | grp1_rg_mideleg_warl;
      default: IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d510 =
		   x__h12693 & grp1_rg_mideleg_warl;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or grp1_rg_medeleg_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d518 =
	      ma_core_req_req[66:3];
      2'd2:
	  IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d518 =
	      ma_core_req_req[66:3] | grp1_rg_medeleg_warl;
      default: IF_ma_core_req_req_BITS_2_TO_1_83_EQ_1_04_THEN_ETC___d518 =
		   x__h12693 & grp1_rg_medeleg_warl;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or grp1_rg_mepc_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1 =
	      ma_core_req_req[66:3];
      2'd2:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1 =
	      ma_core_req_req[66:3] | grp1_rg_mepc_warl;
      default: CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1 =
		   x__h12693 & grp1_rg_mepc_warl;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or grp1_rg_sepc_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2 =
	      ma_core_req_req[66:3];
      2'd2:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2 =
	      ma_core_req_req[66:3] | grp1_rg_sepc_warl;
      default: CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2 =
		   x__h12693 & grp1_rg_sepc_warl;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or grp1_rg_pmpaddr0_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q3 =
	      ma_core_req_req[66:3];
      2'd2:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q3 =
	      ma_core_req_req[66:3] | grp1_rg_pmpaddr0_warl;
      default: CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q3 =
		   x__h12693 & grp1_rg_pmpaddr0_warl;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or grp1_rg_pmpaddr1_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q4 =
	      ma_core_req_req[66:3];
      2'd2:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q4 =
	      ma_core_req_req[66:3] | grp1_rg_pmpaddr1_warl;
      default: CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q4 =
		   x__h12693 & grp1_rg_pmpaddr1_warl;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or grp1_rg_pmpaddr3_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q5 =
	      ma_core_req_req[66:3];
      2'd2:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q5 =
	      ma_core_req_req[66:3] | grp1_rg_pmpaddr3_warl;
      default: CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q5 =
		   x__h12693 & grp1_rg_pmpaddr3_warl;
    endcase
  end
  always@(ma_core_req_req or x__h12693 or grp1_rg_pmpaddr2_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q6 =
	      ma_core_req_req[66:3];
      2'd2:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q6 =
	      ma_core_req_req[66:3] | grp1_rg_pmpaddr2_warl;
      default: CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q6 =
		   x__h12693 & grp1_rg_pmpaddr2_warl;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        grp1_rg_mcause_exception_code_wlrl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	grp1_rg_mcause_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_medeleg_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mepc_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mideleg_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mie_debug_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd1;
	grp1_rg_mie_meie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_msie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_mtie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_seie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_ssie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_stie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mip_seip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mip_ssip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mip_stip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_misa_extensions_warl <= `BSV_ASSIGNMENT_DELAY 26'd1315077;
	grp1_rg_misa_mxl_warl <= `BSV_ASSIGNMENT_DELAY 2'd2;
	grp1_rg_mscratch_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mstatus_fs_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_mstatus_mie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_mpp_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_mstatus_mprv_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_mxr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_sie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_spie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_spp <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_sum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_tsr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_tvm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_tw <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mtval_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mtvec_base_warl <= `BSV_ASSIGNMENT_DELAY 62'd0;
	grp1_rg_mtvec_mode_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_pmpaddr0_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_pmpaddr1_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_pmpaddr2_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_pmpaddr3_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_pmpcfg0_pmp0cfg_warl <= `BSV_ASSIGNMENT_DELAY 8'd0;
	grp1_rg_pmpcfg0_pmp1cfg_warl <= `BSV_ASSIGNMENT_DELAY 8'd0;
	grp1_rg_pmpcfg0_pmp2cfg_warl <= `BSV_ASSIGNMENT_DELAY 8'd0;
	grp1_rg_pmpcfg0_pmp3cfg_warl <= `BSV_ASSIGNMENT_DELAY 8'd0;
	grp1_rg_satp_asid_warl <= `BSV_ASSIGNMENT_DELAY 16'd0;
	grp1_rg_satp_mode_warl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	grp1_rg_satp_ppn_warl <= `BSV_ASSIGNMENT_DELAY 44'd0;
	grp1_rg_scause_exception_code_wlrl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	grp1_rg_scause_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_sepc_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_sscratch_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_stval_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_stvec_base_warl <= `BSV_ASSIGNMENT_DELAY 62'd0;
	grp1_rg_stvec_mode_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_time <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
      end
    else
      begin
        if (grp1_rg_mcause_exception_code_wlrl_EN)
	  grp1_rg_mcause_exception_code_wlrl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mcause_exception_code_wlrl_D_IN;
	if (grp1_rg_mcause_interrupt_EN)
	  grp1_rg_mcause_interrupt <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mcause_interrupt_D_IN;
	if (grp1_rg_mcycle_EN)
	  grp1_rg_mcycle <= `BSV_ASSIGNMENT_DELAY grp1_rg_mcycle_D_IN;
	if (grp1_rg_medeleg_warl_EN)
	  grp1_rg_medeleg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_medeleg_warl_D_IN;
	if (grp1_rg_mepc_warl_EN)
	  grp1_rg_mepc_warl <= `BSV_ASSIGNMENT_DELAY grp1_rg_mepc_warl_D_IN;
	if (grp1_rg_mideleg_warl_EN)
	  grp1_rg_mideleg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mideleg_warl_D_IN;
	if (grp1_rg_mie_debug_interrupt_EN)
	  grp1_rg_mie_debug_interrupt <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mie_debug_interrupt_D_IN;
	if (grp1_rg_mie_meie_EN)
	  grp1_rg_mie_meie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_meie_D_IN;
	if (grp1_rg_mie_msie_EN)
	  grp1_rg_mie_msie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_msie_D_IN;
	if (grp1_rg_mie_mtie_EN)
	  grp1_rg_mie_mtie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_mtie_D_IN;
	if (grp1_rg_mie_seie_EN)
	  grp1_rg_mie_seie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_seie_D_IN;
	if (grp1_rg_mie_ssie_EN)
	  grp1_rg_mie_ssie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_ssie_D_IN;
	if (grp1_rg_mie_stie_EN)
	  grp1_rg_mie_stie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_stie_D_IN;
	if (grp1_rg_minstret_EN)
	  grp1_rg_minstret <= `BSV_ASSIGNMENT_DELAY grp1_rg_minstret_D_IN;
	if (grp1_rg_mip_seip_EN)
	  grp1_rg_mip_seip <= `BSV_ASSIGNMENT_DELAY grp1_rg_mip_seip_D_IN;
	if (grp1_rg_mip_ssip_EN)
	  grp1_rg_mip_ssip <= `BSV_ASSIGNMENT_DELAY grp1_rg_mip_ssip_D_IN;
	if (grp1_rg_mip_stip_EN)
	  grp1_rg_mip_stip <= `BSV_ASSIGNMENT_DELAY grp1_rg_mip_stip_D_IN;
	if (grp1_rg_misa_extensions_warl_EN)
	  grp1_rg_misa_extensions_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_misa_extensions_warl_D_IN;
	if (grp1_rg_misa_mxl_warl_EN)
	  grp1_rg_misa_mxl_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_misa_mxl_warl_D_IN;
	if (grp1_rg_mscratch_warl_EN)
	  grp1_rg_mscratch_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mscratch_warl_D_IN;
	if (grp1_rg_mstatus_fs_warl_EN)
	  grp1_rg_mstatus_fs_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_fs_warl_D_IN;
	if (grp1_rg_mstatus_mie_EN)
	  grp1_rg_mstatus_mie <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mie_D_IN;
	if (grp1_rg_mstatus_mpie_EN)
	  grp1_rg_mstatus_mpie <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mpie_D_IN;
	if (grp1_rg_mstatus_mpp_warl_EN)
	  grp1_rg_mstatus_mpp_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mpp_warl_D_IN;
	if (grp1_rg_mstatus_mprv_warl_EN)
	  grp1_rg_mstatus_mprv_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mprv_warl_D_IN;
	if (grp1_rg_mstatus_mxr_EN)
	  grp1_rg_mstatus_mxr <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mxr_D_IN;
	if (grp1_rg_mstatus_sie_EN)
	  grp1_rg_mstatus_sie <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_sie_D_IN;
	if (grp1_rg_mstatus_spie_EN)
	  grp1_rg_mstatus_spie <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_spie_D_IN;
	if (grp1_rg_mstatus_spp_EN)
	  grp1_rg_mstatus_spp <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_spp_D_IN;
	if (grp1_rg_mstatus_sum_EN)
	  grp1_rg_mstatus_sum <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_sum_D_IN;
	if (grp1_rg_mstatus_tsr_EN)
	  grp1_rg_mstatus_tsr <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_tsr_D_IN;
	if (grp1_rg_mstatus_tvm_EN)
	  grp1_rg_mstatus_tvm <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_tvm_D_IN;
	if (grp1_rg_mstatus_tw_EN)
	  grp1_rg_mstatus_tw <= `BSV_ASSIGNMENT_DELAY grp1_rg_mstatus_tw_D_IN;
	if (grp1_rg_mtval_warl_EN)
	  grp1_rg_mtval_warl <= `BSV_ASSIGNMENT_DELAY grp1_rg_mtval_warl_D_IN;
	if (grp1_rg_mtvec_base_warl_EN)
	  grp1_rg_mtvec_base_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mtvec_base_warl_D_IN;
	if (grp1_rg_mtvec_mode_warl_EN)
	  grp1_rg_mtvec_mode_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mtvec_mode_warl_D_IN;
	if (grp1_rg_pmpaddr0_warl_EN)
	  grp1_rg_pmpaddr0_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpaddr0_warl_D_IN;
	if (grp1_rg_pmpaddr1_warl_EN)
	  grp1_rg_pmpaddr1_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpaddr1_warl_D_IN;
	if (grp1_rg_pmpaddr2_warl_EN)
	  grp1_rg_pmpaddr2_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpaddr2_warl_D_IN;
	if (grp1_rg_pmpaddr3_warl_EN)
	  grp1_rg_pmpaddr3_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpaddr3_warl_D_IN;
	if (grp1_rg_pmpcfg0_pmp0cfg_warl_EN)
	  grp1_rg_pmpcfg0_pmp0cfg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpcfg0_pmp0cfg_warl_D_IN;
	if (grp1_rg_pmpcfg0_pmp1cfg_warl_EN)
	  grp1_rg_pmpcfg0_pmp1cfg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpcfg0_pmp1cfg_warl_D_IN;
	if (grp1_rg_pmpcfg0_pmp2cfg_warl_EN)
	  grp1_rg_pmpcfg0_pmp2cfg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpcfg0_pmp2cfg_warl_D_IN;
	if (grp1_rg_pmpcfg0_pmp3cfg_warl_EN)
	  grp1_rg_pmpcfg0_pmp3cfg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpcfg0_pmp3cfg_warl_D_IN;
	if (grp1_rg_satp_asid_warl_EN)
	  grp1_rg_satp_asid_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_satp_asid_warl_D_IN;
	if (grp1_rg_satp_mode_warl_EN)
	  grp1_rg_satp_mode_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_satp_mode_warl_D_IN;
	if (grp1_rg_satp_ppn_warl_EN)
	  grp1_rg_satp_ppn_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_satp_ppn_warl_D_IN;
	if (grp1_rg_scause_exception_code_wlrl_EN)
	  grp1_rg_scause_exception_code_wlrl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_scause_exception_code_wlrl_D_IN;
	if (grp1_rg_scause_interrupt_EN)
	  grp1_rg_scause_interrupt <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_scause_interrupt_D_IN;
	if (grp1_rg_sepc_warl_EN)
	  grp1_rg_sepc_warl <= `BSV_ASSIGNMENT_DELAY grp1_rg_sepc_warl_D_IN;
	if (grp1_rg_sscratch_warl_EN)
	  grp1_rg_sscratch_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_sscratch_warl_D_IN;
	if (grp1_rg_stval_warl_EN)
	  grp1_rg_stval_warl <= `BSV_ASSIGNMENT_DELAY grp1_rg_stval_warl_D_IN;
	if (grp1_rg_stvec_base_warl_EN)
	  grp1_rg_stvec_base_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_stvec_base_warl_D_IN;
	if (grp1_rg_stvec_mode_warl_EN)
	  grp1_rg_stvec_mode_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_stvec_mode_warl_D_IN;
	if (grp1_rg_time_EN)
	  grp1_rg_time <= `BSV_ASSIGNMENT_DELAY grp1_rg_time_D_IN;
	if (rg_prv_EN) rg_prv <= `BSV_ASSIGNMENT_DELAY rg_prv_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    grp1_rg_mcause_exception_code_wlrl = 4'hA;
    grp1_rg_mcause_interrupt = 1'h0;
    grp1_rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_medeleg_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mepc_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mideleg_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mie_debug_interrupt = 1'h0;
    grp1_rg_mie_meie = 1'h0;
    grp1_rg_mie_msie = 1'h0;
    grp1_rg_mie_mtie = 1'h0;
    grp1_rg_mie_seie = 1'h0;
    grp1_rg_mie_ssie = 1'h0;
    grp1_rg_mie_stie = 1'h0;
    grp1_rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mip_seip = 1'h0;
    grp1_rg_mip_ssip = 1'h0;
    grp1_rg_mip_stip = 1'h0;
    grp1_rg_misa_extensions_warl = 26'h2AAAAAA;
    grp1_rg_misa_mxl_warl = 2'h2;
    grp1_rg_mscratch_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mstatus_fs_warl = 2'h2;
    grp1_rg_mstatus_mie = 1'h0;
    grp1_rg_mstatus_mpie = 1'h0;
    grp1_rg_mstatus_mpp_warl = 2'h2;
    grp1_rg_mstatus_mprv_warl = 1'h0;
    grp1_rg_mstatus_mxr = 1'h0;
    grp1_rg_mstatus_sie = 1'h0;
    grp1_rg_mstatus_spie = 1'h0;
    grp1_rg_mstatus_spp = 1'h0;
    grp1_rg_mstatus_sum = 1'h0;
    grp1_rg_mstatus_tsr = 1'h0;
    grp1_rg_mstatus_tvm = 1'h0;
    grp1_rg_mstatus_tw = 1'h0;
    grp1_rg_mtval_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mtvec_base_warl = 62'h2AAAAAAAAAAAAAAA;
    grp1_rg_mtvec_mode_warl = 2'h2;
    grp1_rg_pmpaddr0_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_pmpaddr1_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_pmpaddr2_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_pmpaddr3_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_pmpcfg0_pmp0cfg_warl = 8'hAA;
    grp1_rg_pmpcfg0_pmp1cfg_warl = 8'hAA;
    grp1_rg_pmpcfg0_pmp2cfg_warl = 8'hAA;
    grp1_rg_pmpcfg0_pmp3cfg_warl = 8'hAA;
    grp1_rg_satp_asid_warl = 16'hAAAA;
    grp1_rg_satp_mode_warl = 4'hA;
    grp1_rg_satp_ppn_warl = 44'hAAAAAAAAAAA;
    grp1_rg_scause_exception_code_wlrl = 4'hA;
    grp1_rg_scause_interrupt = 1'h0;
    grp1_rg_sepc_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_sscratch_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_stval_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_stvec_base_warl = 62'h2AAAAAAAAAAAAAAA;
    grp1_rg_stvec_mode_warl = 2'h2;
    grp1_rg_time = 64'hAAAAAAAAAAAAAAAA;
    rg_prv = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req)
	begin
	  TASK_testplusargs___d175 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req)
	begin
	  TASK_testplusargs___d176 = $test$plusargs("mcsrbox_grp1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req)
	begin
	  TASK_testplusargs___d177 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req)
	begin
	  v__h5404 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write("[%10d", v__h5404, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write("csrbox_grp1: received req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write("CSRReq { ", "csr_address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write("'h%h", ma_core_req_req[78:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write(", ", "writedata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write("'h%h", ma_core_req_req[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write(", ", "funct3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write("'h%h", ma_core_req_req[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write(", ", "pc_1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write("'h%h", ma_core_req_req[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_core_req &&
	  (TASK_testplusargs___d175 ||
	   TASK_testplusargs___d176 && TASK_testplusargs___d177))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mk_csrbox


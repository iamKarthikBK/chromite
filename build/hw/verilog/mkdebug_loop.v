//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:36:13 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// PREADY                         O     1 reg
// PRDATA                         O    32 reg
// PSLVERR                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// PADDR                          I    32 reg
// PROT                           I     3 reg
// PENABLE                        I     1
// PWRITE                         I     1 reg
// PWDATA                         I    32 reg
// PSTRB                          I     4 reg
// PSEL                           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdebug_loop(CLK,
		    RST_N,

		    PADDR,
		    PROT,
		    PENABLE,
		    PWRITE,
		    PWDATA,
		    PSTRB,
		    PSEL,

		    PREADY,

		    PRDATA,

		    PSLVERR);
  input  CLK;
  input  RST_N;

  // action method slave_s_paddr
  input  [31 : 0] PADDR;
  input  [2 : 0] PROT;
  input  PENABLE;
  input  PWRITE;
  input  [31 : 0] PWDATA;
  input  [3 : 0] PSTRB;
  input  PSEL;

  // value method slave_s_pready
  output PREADY;

  // value method slave_s_prdata
  output [31 : 0] PRDATA;

  // value method slave_s_pslverr
  output PSLVERR;

  // value method slave_s_puser

  // signals for module outputs
  wire [31 : 0] PRDATA;
  wire PREADY, PSLVERR;

  // inlined wires
  wire [71 : 0] debug_loop_s_xactor_wr_request_wget;
  wire [33 : 0] debug_loop_s_xactor_ff_response_rv_port0__write_1,
		debug_loop_s_xactor_ff_response_rv_port1__read,
		debug_loop_s_xactor_ff_response_rv_port1__write_1,
		debug_loop_s_xactor_ff_response_rv_port2__read;

  // register debug_loop_ifc_dummy
  reg debug_loop_ifc_dummy;
  wire debug_loop_ifc_dummy_D_IN, debug_loop_ifc_dummy_EN;

  // register debug_loop_ifc_rg_inst1_inner_reg
  reg [31 : 0] debug_loop_ifc_rg_inst1_inner_reg;
  wire [31 : 0] debug_loop_ifc_rg_inst1_inner_reg_D_IN;
  wire debug_loop_ifc_rg_inst1_inner_reg_EN;

  // register debug_loop_ifc_rg_inst2_inner_reg
  reg [31 : 0] debug_loop_ifc_rg_inst2_inner_reg;
  wire [31 : 0] debug_loop_ifc_rg_inst2_inner_reg_D_IN;
  wire debug_loop_ifc_rg_inst2_inner_reg_EN;

  // register debug_loop_ifc_rg_inst3_inner_reg
  reg [31 : 0] debug_loop_ifc_rg_inst3_inner_reg;
  wire [31 : 0] debug_loop_ifc_rg_inst3_inner_reg_D_IN;
  wire debug_loop_ifc_rg_inst3_inner_reg_EN;

  // register debug_loop_ifc_rg_inst4_inner_reg
  reg [31 : 0] debug_loop_ifc_rg_inst4_inner_reg;
  wire [31 : 0] debug_loop_ifc_rg_inst4_inner_reg_D_IN;
  wire debug_loop_ifc_rg_inst4_inner_reg_EN;

  // register debug_loop_s_xactor_ff_response_rv
  reg [33 : 0] debug_loop_s_xactor_ff_response_rv;
  wire [33 : 0] debug_loop_s_xactor_ff_response_rv_D_IN;
  wire debug_loop_s_xactor_ff_response_rv_EN;

  // register debug_loop_s_xactor_rg_pready
  reg debug_loop_s_xactor_rg_pready;
  wire debug_loop_s_xactor_rg_pready_D_IN, debug_loop_s_xactor_rg_pready_EN;

  // register debug_loop_s_xactor_rg_response
  reg [32 : 0] debug_loop_s_xactor_rg_response;
  wire [32 : 0] debug_loop_s_xactor_rg_response_D_IN;
  wire debug_loop_s_xactor_rg_response_EN;

  // register debug_loop_s_xactor_rg_wait
  reg debug_loop_s_xactor_rg_wait;
  wire debug_loop_s_xactor_rg_wait_D_IN, debug_loop_s_xactor_rg_wait_EN;

  // ports of submodule debug_loop_s_xactor_ff_request
  wire [71 : 0] debug_loop_s_xactor_ff_request_D_IN,
		debug_loop_s_xactor_ff_request_D_OUT;
  wire debug_loop_s_xactor_ff_request_CLR,
       debug_loop_s_xactor_ff_request_DEQ,
       debug_loop_s_xactor_ff_request_EMPTY_N,
       debug_loop_s_xactor_ff_request_ENQ,
       debug_loop_s_xactor_ff_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_debug_loop_rl_pop_apb_req,
       CAN_FIRE_RL_debug_loop_s_xactor_rg_pready__dreg_update,
       CAN_FIRE_RL_debug_loop_s_xactor_rl_capture_request,
       CAN_FIRE_RL_debug_loop_s_xactor_rl_send_response,
       CAN_FIRE_slave_s_paddr,
       WILL_FIRE_RL_debug_loop_rl_pop_apb_req,
       WILL_FIRE_RL_debug_loop_s_xactor_rg_pready__dreg_update,
       WILL_FIRE_RL_debug_loop_s_xactor_rl_capture_request,
       WILL_FIRE_RL_debug_loop_s_xactor_rl_send_response,
       WILL_FIRE_slave_s_paddr;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d28;
  reg TASK_testplusargs___d29;
  reg TASK_testplusargs___d30;
  reg [63 : 0] v__h2277;
  reg TASK_testplusargs___d43;
  reg TASK_testplusargs___d44;
  reg TASK_testplusargs___d45;
  reg [63 : 0] v__h2809;
  reg TASK_testplusargs___d52;
  reg TASK_testplusargs___d53;
  reg TASK_testplusargs___d54;
  reg [63 : 0] v__h3389;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d83;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d88;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d38;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d40;
  reg debug_loop_s_xactor_ff_request_first__4_BIT_36_ETC___d48;
  reg NOT_debug_loop_s_xactor_ff_request_first__4_BI_ETC___d57;
  // synopsys translate_on

  // remaining internal signals
  wire [31 : 0] addr__h2912,
		lv2__h3459,
		lv2__h3481,
		resp_prdata__h3450,
		x1_avValue_snd__h3022,
		x1_avValue_snd__h3095,
		x1_avValue_snd__h3168,
		x1_avValue_snd__h3241;

  // action method slave_s_paddr
  assign CAN_FIRE_slave_s_paddr = 1'd1 ;
  assign WILL_FIRE_slave_s_paddr = 1'd1 ;

  // value method slave_s_pready
  assign PREADY = debug_loop_s_xactor_rg_pready ;

  // value method slave_s_prdata
  assign PRDATA = debug_loop_s_xactor_rg_response[32:1] ;

  // value method slave_s_pslverr
  assign PSLVERR = debug_loop_s_xactor_rg_response[0] ;

  // submodule debug_loop_s_xactor_ff_request
  FIFOL1 #(.width(32'd72)) debug_loop_s_xactor_ff_request(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(debug_loop_s_xactor_ff_request_D_IN),
							  .ENQ(debug_loop_s_xactor_ff_request_ENQ),
							  .DEQ(debug_loop_s_xactor_ff_request_DEQ),
							  .CLR(debug_loop_s_xactor_ff_request_CLR),
							  .D_OUT(debug_loop_s_xactor_ff_request_D_OUT),
							  .FULL_N(debug_loop_s_xactor_ff_request_FULL_N),
							  .EMPTY_N(debug_loop_s_xactor_ff_request_EMPTY_N));

  // rule RL_debug_loop_rl_pop_apb_req
  assign CAN_FIRE_RL_debug_loop_rl_pop_apb_req =
	     debug_loop_s_xactor_ff_request_EMPTY_N &&
	     !debug_loop_s_xactor_ff_response_rv[33] ;
  assign WILL_FIRE_RL_debug_loop_rl_pop_apb_req =
	     CAN_FIRE_RL_debug_loop_rl_pop_apb_req ;

  // rule RL_debug_loop_s_xactor_rl_capture_request
  assign CAN_FIRE_RL_debug_loop_s_xactor_rl_capture_request =
	     debug_loop_s_xactor_ff_request_FULL_N &&
	     !debug_loop_s_xactor_rg_wait &&
	     PSEL &&
	     !PENABLE &&
	     debug_loop_s_xactor_ff_request_FULL_N ;
  assign WILL_FIRE_RL_debug_loop_s_xactor_rl_capture_request =
	     CAN_FIRE_RL_debug_loop_s_xactor_rl_capture_request ;

  // rule RL_debug_loop_s_xactor_rl_send_response
  assign CAN_FIRE_RL_debug_loop_s_xactor_rl_send_response =
	     debug_loop_s_xactor_ff_response_rv_port1__read[33] &&
	     debug_loop_s_xactor_rg_wait &&
	     PSEL &&
	     PENABLE ;
  assign WILL_FIRE_RL_debug_loop_s_xactor_rl_send_response =
	     CAN_FIRE_RL_debug_loop_s_xactor_rl_send_response ;

  // rule RL_debug_loop_s_xactor_rg_pready__dreg_update
  assign CAN_FIRE_RL_debug_loop_s_xactor_rg_pready__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_debug_loop_s_xactor_rg_pready__dreg_update = 1'd1 ;

  // inlined wires
  assign debug_loop_s_xactor_wr_request_wget =
	     { PADDR, PROT, PWRITE, PWDATA, PSTRB } ;
  assign debug_loop_s_xactor_ff_response_rv_port0__write_1 =
	     { 1'd1,
	       resp_prdata__h3450,
	       debug_loop_s_xactor_ff_request_D_OUT[36] ||
	       addr__h2912[31:2] != 30'd0 && addr__h2912[31:2] != 30'd1 &&
	       addr__h2912[31:2] != 30'd2 &&
	       addr__h2912[31:2] != 30'd3 } ;
  assign debug_loop_s_xactor_ff_response_rv_port1__read =
	     CAN_FIRE_RL_debug_loop_rl_pop_apb_req ?
	       debug_loop_s_xactor_ff_response_rv_port0__write_1 :
	       debug_loop_s_xactor_ff_response_rv ;
  assign debug_loop_s_xactor_ff_response_rv_port1__write_1 =
	     { 1'd0,
	       33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign debug_loop_s_xactor_ff_response_rv_port2__read =
	     CAN_FIRE_RL_debug_loop_s_xactor_rl_send_response ?
	       debug_loop_s_xactor_ff_response_rv_port1__write_1 :
	       debug_loop_s_xactor_ff_response_rv_port1__read ;

  // register debug_loop_ifc_dummy
  assign debug_loop_ifc_dummy_D_IN = !debug_loop_ifc_dummy ;
  assign debug_loop_ifc_dummy_EN =
	     WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	     !debug_loop_s_xactor_ff_request_D_OUT[36] ;

  // register debug_loop_ifc_rg_inst1_inner_reg
  assign debug_loop_ifc_rg_inst1_inner_reg_D_IN = 32'h0 ;
  assign debug_loop_ifc_rg_inst1_inner_reg_EN = 1'b0 ;

  // register debug_loop_ifc_rg_inst2_inner_reg
  assign debug_loop_ifc_rg_inst2_inner_reg_D_IN = 32'h0 ;
  assign debug_loop_ifc_rg_inst2_inner_reg_EN = 1'b0 ;

  // register debug_loop_ifc_rg_inst3_inner_reg
  assign debug_loop_ifc_rg_inst3_inner_reg_D_IN = 32'h0 ;
  assign debug_loop_ifc_rg_inst3_inner_reg_EN = 1'b0 ;

  // register debug_loop_ifc_rg_inst4_inner_reg
  assign debug_loop_ifc_rg_inst4_inner_reg_D_IN = 32'h0 ;
  assign debug_loop_ifc_rg_inst4_inner_reg_EN = 1'b0 ;

  // register debug_loop_s_xactor_ff_response_rv
  assign debug_loop_s_xactor_ff_response_rv_D_IN =
	     debug_loop_s_xactor_ff_response_rv_port2__read ;
  assign debug_loop_s_xactor_ff_response_rv_EN = 1'b1 ;

  // register debug_loop_s_xactor_rg_pready
  assign debug_loop_s_xactor_rg_pready_D_IN =
	     CAN_FIRE_RL_debug_loop_s_xactor_rl_send_response ;
  assign debug_loop_s_xactor_rg_pready_EN = 1'd1 ;

  // register debug_loop_s_xactor_rg_response
  assign debug_loop_s_xactor_rg_response_D_IN =
	     debug_loop_s_xactor_ff_response_rv_port1__read[32:0] ;
  assign debug_loop_s_xactor_rg_response_EN =
	     CAN_FIRE_RL_debug_loop_s_xactor_rl_send_response ;

  // register debug_loop_s_xactor_rg_wait
  assign debug_loop_s_xactor_rg_wait_D_IN =
	     !WILL_FIRE_RL_debug_loop_s_xactor_rl_send_response ;
  assign debug_loop_s_xactor_rg_wait_EN =
	     WILL_FIRE_RL_debug_loop_s_xactor_rl_send_response ||
	     WILL_FIRE_RL_debug_loop_s_xactor_rl_capture_request ;

  // submodule debug_loop_s_xactor_ff_request
  assign debug_loop_s_xactor_ff_request_D_IN =
	     debug_loop_s_xactor_wr_request_wget ;
  assign debug_loop_s_xactor_ff_request_ENQ =
	     CAN_FIRE_RL_debug_loop_s_xactor_rl_capture_request ;
  assign debug_loop_s_xactor_ff_request_DEQ =
	     CAN_FIRE_RL_debug_loop_rl_pop_apb_req ;
  assign debug_loop_s_xactor_ff_request_CLR = 1'b0 ;

  // remaining internal signals
  assign addr__h2912 =
	     debug_loop_s_xactor_ff_request_D_OUT[71:40] - 32'h00000100 ;
  assign lv2__h3459 = x1_avValue_snd__h3022 | x1_avValue_snd__h3095 ;
  assign lv2__h3481 = x1_avValue_snd__h3168 | x1_avValue_snd__h3241 ;
  assign resp_prdata__h3450 = lv2__h3459 | lv2__h3481 ;
  assign x1_avValue_snd__h3022 =
	     (addr__h2912[31:2] == 30'd0) ?
	       debug_loop_ifc_rg_inst1_inner_reg :
	       32'd0 ;
  assign x1_avValue_snd__h3095 =
	     (addr__h2912[31:2] == 30'd1) ?
	       debug_loop_ifc_rg_inst2_inner_reg :
	       32'd0 ;
  assign x1_avValue_snd__h3168 =
	     (addr__h2912[31:2] == 30'd2) ?
	       debug_loop_ifc_rg_inst3_inner_reg :
	       32'd0 ;
  assign x1_avValue_snd__h3241 =
	     (addr__h2912[31:2] == 30'd3) ?
	       debug_loop_ifc_rg_inst4_inner_reg :
	       32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        debug_loop_ifc_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	debug_loop_ifc_rg_inst1_inner_reg <= `BSV_ASSIGNMENT_DELAY
	    32'h0000100F;
	debug_loop_ifc_rg_inst2_inner_reg <= `BSV_ASSIGNMENT_DELAY
	    32'h00000013;
	debug_loop_ifc_rg_inst3_inner_reg <= `BSV_ASSIGNMENT_DELAY
	    32'hFFDFF06F;
	debug_loop_ifc_rg_inst4_inner_reg <= `BSV_ASSIGNMENT_DELAY
	    32'h0000006F;
	debug_loop_s_xactor_ff_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	debug_loop_s_xactor_rg_pready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	debug_loop_s_xactor_rg_response <= `BSV_ASSIGNMENT_DELAY 33'd0;
	debug_loop_s_xactor_rg_wait <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (debug_loop_ifc_dummy_EN)
	  debug_loop_ifc_dummy <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_ifc_dummy_D_IN;
	if (debug_loop_ifc_rg_inst1_inner_reg_EN)
	  debug_loop_ifc_rg_inst1_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_ifc_rg_inst1_inner_reg_D_IN;
	if (debug_loop_ifc_rg_inst2_inner_reg_EN)
	  debug_loop_ifc_rg_inst2_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_ifc_rg_inst2_inner_reg_D_IN;
	if (debug_loop_ifc_rg_inst3_inner_reg_EN)
	  debug_loop_ifc_rg_inst3_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_ifc_rg_inst3_inner_reg_D_IN;
	if (debug_loop_ifc_rg_inst4_inner_reg_EN)
	  debug_loop_ifc_rg_inst4_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_ifc_rg_inst4_inner_reg_D_IN;
	if (debug_loop_s_xactor_ff_response_rv_EN)
	  debug_loop_s_xactor_ff_response_rv <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_s_xactor_ff_response_rv_D_IN;
	if (debug_loop_s_xactor_rg_pready_EN)
	  debug_loop_s_xactor_rg_pready <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_s_xactor_rg_pready_D_IN;
	if (debug_loop_s_xactor_rg_response_EN)
	  debug_loop_s_xactor_rg_response <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_s_xactor_rg_response_D_IN;
	if (debug_loop_s_xactor_rg_wait_EN)
	  debug_loop_s_xactor_rg_wait <= `BSV_ASSIGNMENT_DELAY
	      debug_loop_s_xactor_rg_wait_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    debug_loop_ifc_dummy = 1'h0;
    debug_loop_ifc_rg_inst1_inner_reg = 32'hAAAAAAAA;
    debug_loop_ifc_rg_inst2_inner_reg = 32'hAAAAAAAA;
    debug_loop_ifc_rg_inst3_inner_reg = 32'hAAAAAAAA;
    debug_loop_ifc_rg_inst4_inner_reg = 32'hAAAAAAAA;
    debug_loop_s_xactor_ff_response_rv = 34'h2AAAAAAAA;
    debug_loop_s_xactor_rg_pready = 1'h0;
    debug_loop_s_xactor_rg_response = 33'h0AAAAAAAA;
    debug_loop_s_xactor_rg_wait = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d28 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d29 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d38 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	debug_loop_s_xactor_ff_request_D_OUT[36];
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d40 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	!debug_loop_s_xactor_ff_request_D_OUT[36];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req)
	begin
	  v__h2277 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("[%10d", v__h2277, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("DC2APB: Req:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("{paddr:'h%0h,",
	       debug_loop_s_xactor_ff_request_D_OUT[71:40],
	       "prot:%0d",
	       debug_loop_s_xactor_ff_request_D_OUT[39:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d38)
	$write("write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d40)
	$write("read");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d38)
	$write(",data:'h%0h",
	       debug_loop_s_xactor_ff_request_D_OUT[35:4],
	       ",strb:%b",
	       debug_loop_s_xactor_ff_request_D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d40)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d43 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d44 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d45 = $test$plusargs("l1");
	  #0;
	end
    debug_loop_s_xactor_ff_request_first__4_BIT_36_ETC___d48 =
	debug_loop_s_xactor_ff_request_D_OUT[36] &&
	(TASK_testplusargs___d43 ||
	 TASK_testplusargs___d44 && TASK_testplusargs___d45);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_D_OUT[36])
	begin
	  v__h2809 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_first__4_BIT_36_ETC___d48)
	$write("[%10d", v__h2809, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_first__4_BIT_36_ETC___d48)
	$write("DC2APB: Write Resp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_first__4_BIT_36_ETC___d48)
	$write("{prdata:'h%0h pslverr:",
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_first__4_BIT_36_ETC___d48)
	$write("slverr", "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  debug_loop_s_xactor_ff_request_first__4_BIT_36_ETC___d48)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  !debug_loop_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d52 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  !debug_loop_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d53 = $test$plusargs("mdc2apb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  !debug_loop_s_xactor_ff_request_D_OUT[36])
	begin
	  TASK_testplusargs___d54 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d83 =
	(TASK_testplusargs___d52 ||
	 TASK_testplusargs___d53 && TASK_testplusargs___d54) &&
	addr__h2912[31:2] != 30'd0 &&
	addr__h2912[31:2] != 30'd1 &&
	addr__h2912[31:2] != 30'd2 &&
	addr__h2912[31:2] != 30'd3;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d88 =
	(TASK_testplusargs___d52 ||
	 TASK_testplusargs___d53 && TASK_testplusargs___d54) &&
	(addr__h2912[31:2] == 30'd0 || addr__h2912[31:2] == 30'd1 ||
	 addr__h2912[31:2] == 30'd2 ||
	 addr__h2912[31:2] == 30'd3);
    NOT_debug_loop_s_xactor_ff_request_first__4_BI_ETC___d57 =
	!debug_loop_s_xactor_ff_request_D_OUT[36] &&
	(TASK_testplusargs___d52 ||
	 TASK_testplusargs___d53 && TASK_testplusargs___d54);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  !debug_loop_s_xactor_ff_request_D_OUT[36])
	begin
	  v__h3389 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  NOT_debug_loop_s_xactor_ff_request_first__4_BI_ETC___d57)
	$write("[%10d", v__h3389, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  NOT_debug_loop_s_xactor_ff_request_first__4_BI_ETC___d57)
	$write("DC2APB: Read Resp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  NOT_debug_loop_s_xactor_ff_request_first__4_BI_ETC___d57)
	$write("{prdata:'h%0h pslverr:", resp_prdata__h3450);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  !debug_loop_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d83)
	$write("slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  !debug_loop_s_xactor_ff_request_D_OUT[36] &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d88)
	$write("okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  NOT_debug_loop_s_xactor_ff_request_first__4_BI_ETC___d57)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_debug_loop_rl_pop_apb_req &&
	  NOT_debug_loop_s_xactor_ff_request_first__4_BI_ETC___d57)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkdebug_loop


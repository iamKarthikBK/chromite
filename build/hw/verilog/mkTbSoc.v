//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:36:25 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTbSoc(CLK,
	       RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [31 : 0] uart_ifc_wr_status_x_wget;
  wire [3 : 0] uart_ifc_uart_err_status_reg_port0__write_1;
  wire rg_read_rx_1_whas,
       uart_ifc_uart_fifoRecv_r_enq_whas,
       uart_ifc_uart_pwRecvCellCountReset_whas,
       uart_ifc_uart_pwRecvResetBitCount_whas,
       uart_ifc_uart_pwXmitCellCountReset_whas,
       uart_ifc_uart_pwXmitEnableBitCount_whas,
       uart_ifc_uart_pwXmitLoadBuffer_whas;

  // register dump
  reg [31 : 0] dump;
  wire [31 : 0] dump_D_IN;
  wire dump_EN;

  // register dump1
  reg [31 : 0] dump1;
  wire [31 : 0] dump1_D_IN;
  wire dump1_EN;

  // register rg_cnt
  reg [4 : 0] rg_cnt;
  wire [4 : 0] rg_cnt_D_IN;
  wire rg_cnt_EN;

  // register rg_read_rx
  reg rg_read_rx;
  wire rg_read_rx_D_IN, rg_read_rx_EN;

  // register uart_ifc_dummy
  reg uart_ifc_dummy;
  wire uart_ifc_dummy_D_IN, uart_ifc_dummy_EN;

  // register uart_ifc_rg_baud_val_inner_reg
  reg [15 : 0] uart_ifc_rg_baud_val_inner_reg;
  wire [15 : 0] uart_ifc_rg_baud_val_inner_reg_D_IN;
  wire uart_ifc_rg_baud_val_inner_reg_EN;

  // register uart_ifc_rg_control_inner_reg
  reg [31 : 0] uart_ifc_rg_control_inner_reg;
  wire [31 : 0] uart_ifc_rg_control_inner_reg_D_IN;
  wire uart_ifc_rg_control_inner_reg_EN;

  // register uart_ifc_rg_intr_en_inner_reg
  reg [31 : 0] uart_ifc_rg_intr_en_inner_reg;
  wire [31 : 0] uart_ifc_rg_intr_en_inner_reg_D_IN;
  wire uart_ifc_rg_intr_en_inner_reg_EN;

  // register uart_ifc_uart_err_status_reg
  reg [3 : 0] uart_ifc_uart_err_status_reg;
  wire [3 : 0] uart_ifc_uart_err_status_reg_D_IN;
  wire uart_ifc_uart_err_status_reg_EN;

  // register uart_ifc_uart_fifoRecv_countReg
  reg [4 : 0] uart_ifc_uart_fifoRecv_countReg;
  wire [4 : 0] uart_ifc_uart_fifoRecv_countReg_D_IN;
  wire uart_ifc_uart_fifoRecv_countReg_EN;

  // register uart_ifc_uart_fifoXmit_countReg
  reg [4 : 0] uart_ifc_uart_fifoXmit_countReg;
  wire [4 : 0] uart_ifc_uart_fifoXmit_countReg_D_IN;
  wire uart_ifc_uart_fifoXmit_countReg_EN;

  // register uart_ifc_uart_rRecvBitCount
  reg [3 : 0] uart_ifc_uart_rRecvBitCount;
  wire [3 : 0] uart_ifc_uart_rRecvBitCount_D_IN;
  wire uart_ifc_uart_rRecvBitCount_EN;

  // register uart_ifc_uart_rRecvCellCount
  reg [3 : 0] uart_ifc_uart_rRecvCellCount;
  wire [3 : 0] uart_ifc_uart_rRecvCellCount_D_IN;
  wire uart_ifc_uart_rRecvCellCount_EN;

  // register uart_ifc_uart_rRecvData
  reg uart_ifc_uart_rRecvData;
  wire uart_ifc_uart_rRecvData_D_IN, uart_ifc_uart_rRecvData_EN;

  // register uart_ifc_uart_rRecvParity
  reg uart_ifc_uart_rRecvParity;
  wire uart_ifc_uart_rRecvParity_D_IN, uart_ifc_uart_rRecvParity_EN;

  // register uart_ifc_uart_rRecvState
  reg [2 : 0] uart_ifc_uart_rRecvState;
  reg [2 : 0] uart_ifc_uart_rRecvState_D_IN;
  wire uart_ifc_uart_rRecvState_EN;

  // register uart_ifc_uart_rXmitBitCount
  reg [3 : 0] uart_ifc_uart_rXmitBitCount;
  wire [3 : 0] uart_ifc_uart_rXmitBitCount_D_IN;
  wire uart_ifc_uart_rXmitBitCount_EN;

  // register uart_ifc_uart_rXmitCellCount
  reg [3 : 0] uart_ifc_uart_rXmitCellCount;
  wire [3 : 0] uart_ifc_uart_rXmitCellCount_D_IN;
  wire uart_ifc_uart_rXmitCellCount_EN;

  // register uart_ifc_uart_rXmitDataOut
  reg uart_ifc_uart_rXmitDataOut;
  reg uart_ifc_uart_rXmitDataOut_D_IN;
  wire uart_ifc_uart_rXmitDataOut_EN;

  // register uart_ifc_uart_rXmitParity
  reg uart_ifc_uart_rXmitParity;
  wire uart_ifc_uart_rXmitParity_D_IN, uart_ifc_uart_rXmitParity_EN;

  // register uart_ifc_uart_rXmitState
  reg [2 : 0] uart_ifc_uart_rXmitState;
  reg [2 : 0] uart_ifc_uart_rXmitState_D_IN;
  wire uart_ifc_uart_rXmitState_EN;

  // register uart_ifc_uart_rg_stop_error
  reg uart_ifc_uart_rg_stop_error;
  wire uart_ifc_uart_rg_stop_error_D_IN, uart_ifc_uart_rg_stop_error_EN;

  // register uart_ifc_uart_rx_thld_triggered
  reg uart_ifc_uart_rx_thld_triggered;
  wire uart_ifc_uart_rx_thld_triggered_D_IN,
       uart_ifc_uart_rx_thld_triggered_EN;

  // register uart_ifc_uart_tx_thld_triggered
  reg uart_ifc_uart_tx_thld_triggered;
  wire uart_ifc_uart_tx_thld_triggered_D_IN,
       uart_ifc_uart_tx_thld_triggered_EN;

  // register uart_ifc_uart_vrRecvBuffer
  reg uart_ifc_uart_vrRecvBuffer;
  wire uart_ifc_uart_vrRecvBuffer_D_IN, uart_ifc_uart_vrRecvBuffer_EN;

  // register uart_ifc_uart_vrRecvBuffer_1
  reg uart_ifc_uart_vrRecvBuffer_1;
  wire uart_ifc_uart_vrRecvBuffer_1_D_IN, uart_ifc_uart_vrRecvBuffer_1_EN;

  // register uart_ifc_uart_vrRecvBuffer_2
  reg uart_ifc_uart_vrRecvBuffer_2;
  wire uart_ifc_uart_vrRecvBuffer_2_D_IN, uart_ifc_uart_vrRecvBuffer_2_EN;

  // register uart_ifc_uart_vrRecvBuffer_3
  reg uart_ifc_uart_vrRecvBuffer_3;
  wire uart_ifc_uart_vrRecvBuffer_3_D_IN, uart_ifc_uart_vrRecvBuffer_3_EN;

  // register uart_ifc_uart_vrRecvBuffer_4
  reg uart_ifc_uart_vrRecvBuffer_4;
  wire uart_ifc_uart_vrRecvBuffer_4_D_IN, uart_ifc_uart_vrRecvBuffer_4_EN;

  // register uart_ifc_uart_vrRecvBuffer_5
  reg uart_ifc_uart_vrRecvBuffer_5;
  wire uart_ifc_uart_vrRecvBuffer_5_D_IN, uart_ifc_uart_vrRecvBuffer_5_EN;

  // register uart_ifc_uart_vrRecvBuffer_6
  reg uart_ifc_uart_vrRecvBuffer_6;
  wire uart_ifc_uart_vrRecvBuffer_6_D_IN, uart_ifc_uart_vrRecvBuffer_6_EN;

  // register uart_ifc_uart_vrRecvBuffer_7
  reg uart_ifc_uart_vrRecvBuffer_7;
  wire uart_ifc_uart_vrRecvBuffer_7_D_IN, uart_ifc_uart_vrRecvBuffer_7_EN;

  // register uart_ifc_uart_vrXmitBuffer
  reg uart_ifc_uart_vrXmitBuffer;
  wire uart_ifc_uart_vrXmitBuffer_D_IN, uart_ifc_uart_vrXmitBuffer_EN;

  // register uart_ifc_uart_vrXmitBuffer_1
  reg uart_ifc_uart_vrXmitBuffer_1;
  wire uart_ifc_uart_vrXmitBuffer_1_D_IN, uart_ifc_uart_vrXmitBuffer_1_EN;

  // register uart_ifc_uart_vrXmitBuffer_2
  reg uart_ifc_uart_vrXmitBuffer_2;
  wire uart_ifc_uart_vrXmitBuffer_2_D_IN, uart_ifc_uart_vrXmitBuffer_2_EN;

  // register uart_ifc_uart_vrXmitBuffer_3
  reg uart_ifc_uart_vrXmitBuffer_3;
  wire uart_ifc_uart_vrXmitBuffer_3_D_IN, uart_ifc_uart_vrXmitBuffer_3_EN;

  // register uart_ifc_uart_vrXmitBuffer_4
  reg uart_ifc_uart_vrXmitBuffer_4;
  wire uart_ifc_uart_vrXmitBuffer_4_D_IN, uart_ifc_uart_vrXmitBuffer_4_EN;

  // register uart_ifc_uart_vrXmitBuffer_5
  reg uart_ifc_uart_vrXmitBuffer_5;
  wire uart_ifc_uart_vrXmitBuffer_5_D_IN, uart_ifc_uart_vrXmitBuffer_5_EN;

  // register uart_ifc_uart_vrXmitBuffer_6
  reg uart_ifc_uart_vrXmitBuffer_6;
  wire uart_ifc_uart_vrXmitBuffer_6_D_IN, uart_ifc_uart_vrXmitBuffer_6_EN;

  // register uart_ifc_uart_vrXmitBuffer_7
  reg uart_ifc_uart_vrXmitBuffer_7;
  wire uart_ifc_uart_vrXmitBuffer_7_D_IN, uart_ifc_uart_vrXmitBuffer_7_EN;

  // register uart_ifc_uart_wr_rx_thld_clear
  reg uart_ifc_uart_wr_rx_thld_clear;
  wire uart_ifc_uart_wr_rx_thld_clear_D_IN, uart_ifc_uart_wr_rx_thld_clear_EN;

  // register uart_ifc_uart_wr_tx_thld_clear
  reg uart_ifc_uart_wr_tx_thld_clear;
  wire uart_ifc_uart_wr_tx_thld_clear_D_IN, uart_ifc_uart_wr_tx_thld_clear_EN;

  // ports of submodule soc
  wire [309 : 0] soc_commitlog;
  wire [63 : 0] soc_sbread_mv_csr_customcontrol,
		soc_sbread_mv_csr_marchid,
		soc_sbread_mv_csr_mcause,
		soc_sbread_mv_csr_mcycle,
		soc_sbread_mv_csr_medeleg,
		soc_sbread_mv_csr_mepc,
		soc_sbread_mv_csr_mhartid,
		soc_sbread_mv_csr_mideleg,
		soc_sbread_mv_csr_mie,
		soc_sbread_mv_csr_mimpid,
		soc_sbread_mv_csr_minstret,
		soc_sbread_mv_csr_mip,
		soc_sbread_mv_csr_misa,
		soc_sbread_mv_csr_mscratch,
		soc_sbread_mv_csr_mstatus,
		soc_sbread_mv_csr_mtval,
		soc_sbread_mv_csr_mtvec,
		soc_sbread_mv_csr_mvendorid,
		soc_sbread_mv_csr_pmpaddr0,
		soc_sbread_mv_csr_pmpaddr1,
		soc_sbread_mv_csr_pmpaddr2,
		soc_sbread_mv_csr_pmpaddr3,
		soc_sbread_mv_csr_pmpcfg0,
		soc_sbread_mv_csr_satp,
		soc_sbread_mv_csr_scause,
		soc_sbread_mv_csr_sepc,
		soc_sbread_mv_csr_sie,
		soc_sbread_mv_csr_sip,
		soc_sbread_mv_csr_sscratch,
		soc_sbread_mv_csr_stval,
		soc_sbread_mv_csr_stvec,
		soc_sbread_mv_csr_time;
  wire [31 : 0] soc_sbread_mv_csr_mcountinhibit;
  wire soc_uart_io_SIN, soc_uart_io_SOUT;

  // ports of submodule tck_clk
  wire tck_clk_CLK_IN, tck_clk_CLK_IN_EN, tck_clk_COND_IN, tck_clk_COND_IN_EN;

  // ports of submodule trst
  wire trst_ASSERT_IN;

  // ports of submodule uart_ifc_uart_baudGen_rBaudCounter
  wire [15 : 0] uart_ifc_uart_baudGen_rBaudCounter_DATA_A,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_B,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_C,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_F,
		uart_ifc_uart_baudGen_rBaudCounter_Q_OUT;
  wire uart_ifc_uart_baudGen_rBaudCounter_ADDA,
       uart_ifc_uart_baudGen_rBaudCounter_ADDB,
       uart_ifc_uart_baudGen_rBaudCounter_SETC,
       uart_ifc_uart_baudGen_rBaudCounter_SETF;

  // ports of submodule uart_ifc_uart_baudGen_rBaudTickCounter
  wire [2 : 0] uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F,
	       uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT;
  wire uart_ifc_uart_baudGen_rBaudTickCounter_ADDA,
       uart_ifc_uart_baudGen_rBaudTickCounter_ADDB,
       uart_ifc_uart_baudGen_rBaudTickCounter_SETC,
       uart_ifc_uart_baudGen_rBaudTickCounter_SETF;

  // ports of submodule uart_ifc_uart_fifoRecv
  wire [7 : 0] uart_ifc_uart_fifoRecv_D_IN, uart_ifc_uart_fifoRecv_D_OUT;
  wire uart_ifc_uart_fifoRecv_CLR,
       uart_ifc_uart_fifoRecv_DEQ,
       uart_ifc_uart_fifoRecv_EMPTY_N,
       uart_ifc_uart_fifoRecv_ENQ,
       uart_ifc_uart_fifoRecv_FULL_N;

  // ports of submodule uart_ifc_uart_fifoXmit
  wire [7 : 0] uart_ifc_uart_fifoXmit_D_IN, uart_ifc_uart_fifoXmit_D_OUT;
  wire uart_ifc_uart_fifoXmit_CLR,
       uart_ifc_uart_fifoXmit_DEQ,
       uart_ifc_uart_fifoXmit_EMPTY_N,
       uart_ifc_uart_fifoXmit_ENQ,
       uart_ifc_uart_fifoXmit_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_display_eol,
       CAN_FIRE_RL_rg_read_rx__dreg_update,
       CAN_FIRE_RL_rl_check_if_character_present,
       CAN_FIRE_RL_rl_connect_uart_in,
       CAN_FIRE_RL_rl_connect_uart_out,
       CAN_FIRE_RL_rl_open_file_app,
       CAN_FIRE_RL_rl_open_file_rtldump,
       CAN_FIRE_RL_rl_write_dump_file,
       CAN_FIRE_RL_rl_write_received_character,
       CAN_FIRE_RL_uart_ifc_rl_clear_status,
       CAN_FIRE_RL_uart_ifc_rl_connect_status,
       CAN_FIRE_RL_uart_ifc_rl_deq_rx,
       CAN_FIRE_RL_uart_ifc_rl_write_tx,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x,
       CAN_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter,
       CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter,
       CAN_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_uart_ifc_uart_receive_bit_counter,
       CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift,
       CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_sample_pin,
       CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear,
       CAN_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear,
       CAN_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_uart_ifc_uart_transmit_bit_counter,
       CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load,
       CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command,
       CAN_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update,
       CAN_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update,
       WILL_FIRE_RL_display_eol,
       WILL_FIRE_RL_rg_read_rx__dreg_update,
       WILL_FIRE_RL_rl_check_if_character_present,
       WILL_FIRE_RL_rl_connect_uart_in,
       WILL_FIRE_RL_rl_connect_uart_out,
       WILL_FIRE_RL_rl_open_file_app,
       WILL_FIRE_RL_rl_open_file_rtldump,
       WILL_FIRE_RL_rl_write_dump_file,
       WILL_FIRE_RL_rl_write_received_character,
       WILL_FIRE_RL_uart_ifc_rl_clear_status,
       WILL_FIRE_RL_uart_ifc_rl_connect_status,
       WILL_FIRE_RL_uart_ifc_rl_deq_rx,
       WILL_FIRE_RL_uart_ifc_rl_write_tx,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x,
       WILL_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter,
       WILL_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter,
       WILL_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_uart_ifc_uart_receive_bit_counter,
       WILL_FIRE_RL_uart_ifc_uart_receive_buffer_shift,
       WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin,
       WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear,
       WILL_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear,
       WILL_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_uart_ifc_uart_transmit_bit_counter,
       WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load,
       WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command,
       WILL_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update,
       WILL_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update;

  // inputs to muxes for submodule ports
  wire [2 : 0] MUX_uart_ifc_uart_rRecvState_write_1__VAL_1,
	       MUX_uart_ifc_uart_rRecvState_write_1__VAL_2,
	       MUX_uart_ifc_uart_rRecvState_write_1__VAL_3,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_1,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_2,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_3,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_4,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_5,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_6,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_7;
  wire MUX_uart_ifc_uart_rRecvState_write_1__SEL_5,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2,
       MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h17421;
  reg TASK_testplusargs___d300;
  reg TASK_testplusargs___d301;
  reg TASK_testplusargs___d302;
  reg [63 : 0] v__h17491;
  reg TASK_testplusargs___d309;
  reg [31 : 0] TASK_fopen___d310;
  reg TASK_testplusargs___d313;
  reg TASK_testplusargs___d314;
  reg TASK_testplusargs___d315;
  reg [63 : 0] v__h17781;
  reg [31 : 0] TASK_fopen___d321;
  reg TASK_testplusargs___d323;
  reg TASK_testplusargs___d324;
  reg TASK_testplusargs___d325;
  reg [63 : 0] v__h18194;
  reg TASK_testplusargs___d353;
  reg TASK_testplusargs___d99;
  reg TASK_testplusargs___d100;
  reg TASK_testplusargs___d101;
  reg [63 : 0] v__h10197;
  reg TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318;
  reg NOT_soc_commitlog__43_BITS_242_TO_211_45_EQ_0x_ETC___d836;
  reg NOT_soc_commitlog__43_BITS_242_TO_211_45_EQ_0x_ETC___d844;
  reg TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] store_data___1__h23293, wdata__h21009;
  wire [63 : 0] _theResult____h22300,
		op1___1__h23363,
		op1__h23304,
		op2___1__h23364,
		op2__h23305,
		soccommitlog_BITS_144_TO_81__q4,
		soccommitlog_BITS_80_TO_17__q1;
  wire [31 : 0] data__h19644,
		soccommitlog_BITS_144_TO_81_BITS_31_TO_0__q5,
		soccommitlog_BITS_80_TO_17_BITS_31_TO_0__q2;
  wire [11 : 0] _theResult____h20783;
  wire [7 : 0] _i_receive_char__h16744, bitdata__h10120;
  wire [4 : 0] soccommitlog_BITS_4_TO_0__q3;
  wire [3 : 0] x__h11400,
	       x__h12085,
	       x__h12119,
	       x__h16923,
	       x__h7790,
	       x__h9515,
	       y__h15733,
	       y__h9803,
	       y__h9825;
  wire [2 : 0] IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88;
  wire IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d811,
       IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d816,
       _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset,
       _theResult_____1__h10129,
       _theResult_____2__h10128,
       _theResult_____3__h10127,
       _theResult____h10126,
       uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38,
       uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149,
       uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258,
       uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213,
       uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135,
       x__h16149,
       x__h17105,
       z__h11476,
       z__h11483,
       z__h11490,
       z__h11497,
       z__h11504,
       z__h11511,
       z__h11518,
       z__h13616,
       z__h13623,
       z__h13630,
       z__h13637,
       z__h13644,
       z__h13651;

  // submodule soc
  mkSoc soc(.CLK(CLK),
	    .RST_N(RST_N),
	    .uart_io_SIN(soc_uart_io_SIN),
	    .sbread_mv_csr_misa(soc_sbread_mv_csr_misa),
	    .RDY_sbread_mv_csr_misa(),
	    .sbread_mv_csr_mvendorid(soc_sbread_mv_csr_mvendorid),
	    .RDY_sbread_mv_csr_mvendorid(),
	    .sbread_mv_csr_stvec(soc_sbread_mv_csr_stvec),
	    .RDY_sbread_mv_csr_stvec(),
	    .sbread_mv_csr_mtvec(soc_sbread_mv_csr_mtvec),
	    .RDY_sbread_mv_csr_mtvec(),
	    .sbread_mv_csr_mstatus(soc_sbread_mv_csr_mstatus),
	    .RDY_sbread_mv_csr_mstatus(),
	    .sbread_mv_csr_marchid(soc_sbread_mv_csr_marchid),
	    .RDY_sbread_mv_csr_marchid(),
	    .sbread_mv_csr_mimpid(soc_sbread_mv_csr_mimpid),
	    .RDY_sbread_mv_csr_mimpid(),
	    .sbread_mv_csr_mhartid(soc_sbread_mv_csr_mhartid),
	    .RDY_sbread_mv_csr_mhartid(),
	    .sbread_mv_csr_mip(soc_sbread_mv_csr_mip),
	    .RDY_sbread_mv_csr_mip(),
	    .sbread_mv_csr_sip(soc_sbread_mv_csr_sip),
	    .RDY_sbread_mv_csr_sip(),
	    .sbread_mv_csr_mie(soc_sbread_mv_csr_mie),
	    .RDY_sbread_mv_csr_mie(),
	    .sbread_mv_csr_sie(soc_sbread_mv_csr_sie),
	    .RDY_sbread_mv_csr_sie(),
	    .sbread_mv_csr_mscratch(soc_sbread_mv_csr_mscratch),
	    .RDY_sbread_mv_csr_mscratch(),
	    .sbread_mv_csr_sscratch(soc_sbread_mv_csr_sscratch),
	    .RDY_sbread_mv_csr_sscratch(),
	    .sbread_mv_csr_sepc(soc_sbread_mv_csr_sepc),
	    .RDY_sbread_mv_csr_sepc(),
	    .sbread_mv_csr_stval(soc_sbread_mv_csr_stval),
	    .RDY_sbread_mv_csr_stval(),
	    .sbread_mv_csr_scause(soc_sbread_mv_csr_scause),
	    .RDY_sbread_mv_csr_scause(),
	    .sbread_mv_csr_mepc(soc_sbread_mv_csr_mepc),
	    .RDY_sbread_mv_csr_mepc(),
	    .sbread_mv_csr_mtval(soc_sbread_mv_csr_mtval),
	    .RDY_sbread_mv_csr_mtval(),
	    .sbread_mv_csr_mcause(soc_sbread_mv_csr_mcause),
	    .RDY_sbread_mv_csr_mcause(),
	    .sbread_mv_csr_mcycle(soc_sbread_mv_csr_mcycle),
	    .RDY_sbread_mv_csr_mcycle(),
	    .sbread_mv_csr_minstret(soc_sbread_mv_csr_minstret),
	    .RDY_sbread_mv_csr_minstret(),
	    .sbread_mv_csr_time(soc_sbread_mv_csr_time),
	    .RDY_sbread_mv_csr_time(),
	    .sbread_mv_csr_mideleg(soc_sbread_mv_csr_mideleg),
	    .RDY_sbread_mv_csr_mideleg(),
	    .sbread_mv_csr_medeleg(soc_sbread_mv_csr_medeleg),
	    .RDY_sbread_mv_csr_medeleg(),
	    .sbread_mv_csr_pmpcfg0(soc_sbread_mv_csr_pmpcfg0),
	    .RDY_sbread_mv_csr_pmpcfg0(),
	    .sbread_mv_csr_pmpaddr0(soc_sbread_mv_csr_pmpaddr0),
	    .RDY_sbread_mv_csr_pmpaddr0(),
	    .sbread_mv_csr_pmpaddr1(soc_sbread_mv_csr_pmpaddr1),
	    .RDY_sbread_mv_csr_pmpaddr1(),
	    .sbread_mv_csr_pmpaddr2(soc_sbread_mv_csr_pmpaddr2),
	    .RDY_sbread_mv_csr_pmpaddr2(),
	    .sbread_mv_csr_pmpaddr3(soc_sbread_mv_csr_pmpaddr3),
	    .RDY_sbread_mv_csr_pmpaddr3(),
	    .sbread_mv_csr_satp(soc_sbread_mv_csr_satp),
	    .RDY_sbread_mv_csr_satp(),
	    .sbread_mv_csr_mcountinhibit(soc_sbread_mv_csr_mcountinhibit),
	    .RDY_sbread_mv_csr_mcountinhibit(),
	    .sbread_mv_csr_customcontrol(soc_sbread_mv_csr_customcontrol),
	    .RDY_sbread_mv_csr_customcontrol(),
	    .commitlog(soc_commitlog),
	    .RDY_commitlog(),
	    .uart_io_SOUT(soc_uart_io_SOUT));

  // submodule tck_clk
  MakeClock #(.initVal(1'd1), .initGate(1'd1)) tck_clk(.CLK(CLK),
						       .RST(RST_N),
						       .CLK_IN(tck_clk_CLK_IN),
						       .COND_IN(tck_clk_COND_IN),
						       .CLK_IN_EN(tck_clk_CLK_IN_EN),
						       .COND_IN_EN(tck_clk_COND_IN_EN),
						       .CLK_VAL_OUT(),
						       .COND_OUT(),
						       .CLK_GATE_OUT(),
						       .CLK_OUT());

  // submodule trst
  MakeReset0 #(.init(1'd1)) trst(.CLK(CLK),
				 .RST(RST_N),
				 .ASSERT_IN(trst_ASSERT_IN),
				 .ASSERT_OUT(),
				 .OUT_RST());

  // submodule uart_ifc_uart_baudGen_rBaudCounter
  Counter #(.width(32'd16),
	    .init(16'd0)) uart_ifc_uart_baudGen_rBaudCounter(.CLK(CLK),
							     .RST(RST_N),
							     .DATA_A(uart_ifc_uart_baudGen_rBaudCounter_DATA_A),
							     .DATA_B(uart_ifc_uart_baudGen_rBaudCounter_DATA_B),
							     .DATA_C(uart_ifc_uart_baudGen_rBaudCounter_DATA_C),
							     .DATA_F(uart_ifc_uart_baudGen_rBaudCounter_DATA_F),
							     .ADDA(uart_ifc_uart_baudGen_rBaudCounter_ADDA),
							     .ADDB(uart_ifc_uart_baudGen_rBaudCounter_ADDB),
							     .SETC(uart_ifc_uart_baudGen_rBaudCounter_SETC),
							     .SETF(uart_ifc_uart_baudGen_rBaudCounter_SETF),
							     .Q_OUT(uart_ifc_uart_baudGen_rBaudCounter_Q_OUT));

  // submodule uart_ifc_uart_baudGen_rBaudTickCounter
  Counter #(.width(32'd3),
	    .init(3'd0)) uart_ifc_uart_baudGen_rBaudTickCounter(.CLK(CLK),
								.RST(RST_N),
								.DATA_A(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A),
								.DATA_B(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B),
								.DATA_C(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C),
								.DATA_F(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F),
								.ADDA(uart_ifc_uart_baudGen_rBaudTickCounter_ADDA),
								.ADDB(uart_ifc_uart_baudGen_rBaudTickCounter_ADDB),
								.SETC(uart_ifc_uart_baudGen_rBaudTickCounter_SETC),
								.SETF(uart_ifc_uart_baudGen_rBaudTickCounter_SETF),
								.Q_OUT(uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT));

  // submodule uart_ifc_uart_fifoRecv
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_ifc_uart_fifoRecv(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(uart_ifc_uart_fifoRecv_D_IN),
						     .ENQ(uart_ifc_uart_fifoRecv_ENQ),
						     .DEQ(uart_ifc_uart_fifoRecv_DEQ),
						     .CLR(uart_ifc_uart_fifoRecv_CLR),
						     .D_OUT(uart_ifc_uart_fifoRecv_D_OUT),
						     .FULL_N(uart_ifc_uart_fifoRecv_FULL_N),
						     .EMPTY_N(uart_ifc_uart_fifoRecv_EMPTY_N));

  // submodule uart_ifc_uart_fifoXmit
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_ifc_uart_fifoXmit(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(uart_ifc_uart_fifoXmit_D_IN),
						     .ENQ(uart_ifc_uart_fifoXmit_ENQ),
						     .DEQ(uart_ifc_uart_fifoXmit_DEQ),
						     .CLR(uart_ifc_uart_fifoXmit_CLR),
						     .D_OUT(uart_ifc_uart_fifoXmit_D_OUT),
						     .FULL_N(uart_ifc_uart_fifoXmit_FULL_N),
						     .EMPTY_N(uart_ifc_uart_fifoXmit_EMPTY_N));

  // rule RL_display_eol
  assign CAN_FIRE_RL_display_eol = 1'd1 ;
  assign WILL_FIRE_RL_display_eol = 1'd1 ;

  // rule RL_rl_open_file_rtldump
  assign CAN_FIRE_RL_rl_open_file_rtldump = rg_cnt == 5'd0 ;
  assign WILL_FIRE_RL_rl_open_file_rtldump =
	     CAN_FIRE_RL_rl_open_file_rtldump ;

  // rule RL_rl_open_file_app
  assign CAN_FIRE_RL_rl_open_file_app = CAN_FIRE_RL_rl_open_file_rtldump ;
  assign WILL_FIRE_RL_rl_open_file_app = CAN_FIRE_RL_rl_open_file_rtldump ;

  // rule RL_rl_connect_uart_out
  assign CAN_FIRE_RL_rl_connect_uart_out = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_uart_out = 1'd1 ;

  // rule RL_rl_write_dump_file
  assign CAN_FIRE_RL_rl_write_dump_file = rg_cnt != 5'd0 ;
  assign WILL_FIRE_RL_rl_write_dump_file = CAN_FIRE_RL_rl_write_dump_file ;

  // rule RL_uart_ifc_rl_connect_status
  assign CAN_FIRE_RL_uart_ifc_rl_connect_status = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_rl_connect_status = 1'd1 ;

  // rule RL_rl_check_if_character_present
  assign CAN_FIRE_RL_rl_check_if_character_present = !rg_read_rx ;
  assign WILL_FIRE_RL_rl_check_if_character_present =
	     CAN_FIRE_RL_rl_check_if_character_present ;

  // rule RL_rl_write_received_character
  assign CAN_FIRE_RL_rl_write_received_character =
	     CAN_FIRE_RL_uart_ifc_rl_deq_rx ;
  assign WILL_FIRE_RL_rl_write_received_character =
	     CAN_FIRE_RL_uart_ifc_rl_deq_rx ;

  // rule RL_uart_ifc_uart_rl_rx_thld_clear
  assign CAN_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear = 1'd1 ;

  // rule RL_uart_ifc_uart_rl_tx_thld_clear
  assign CAN_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear = 1'd1 ;

  // rule RL_uart_ifc_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_uart_ifc_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_uart_ifc_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit =
	     uart_ifc_uart_rRecvState == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ;

  // rule RL_uart_ifc_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell =
	     uart_ifc_uart_rRecvState == 3'd1 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell ;

  // rule RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample =
	     uart_ifc_uart_rRecvState == 3'd2 &&
	     uart_ifc_uart_rRecvCellCount == 4'hF &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_uart_ifc_uart_receive_sample_pin
  assign CAN_FIRE_RL_uart_ifc_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // rule RL_uart_ifc_uart_receive_parity_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit =
	     uart_ifc_uart_rRecvState == 3'd4 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit ;

  // rule RL_uart_ifc_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit =
	     uart_ifc_uart_rRecvState == 3'd5 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ;

  // rule RL_uart_ifc_uart_receive_bit_counter
  assign CAN_FIRE_RL_uart_ifc_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_bit_counter = 1'd1 ;

  // rule RL_uart_ifc_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit =
	     uart_ifc_uart_rRecvState == 3'd6 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ;

  // rule RL_uart_ifc_rl_clear_status
  assign CAN_FIRE_RL_uart_ifc_rl_clear_status = 1'b0 ;
  assign WILL_FIRE_RL_uart_ifc_rl_clear_status = 1'b0 ;

  // rule RL_uart_ifc_rl_deq_rx
  assign CAN_FIRE_RL_uart_ifc_rl_deq_rx = rg_cnt != 5'd0 && rg_read_rx ;
  assign WILL_FIRE_RL_uart_ifc_rl_deq_rx = CAN_FIRE_RL_uart_ifc_rl_deq_rx ;

  // rule RL_uart_ifc_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_receive_buffer_shift
  assign CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift =
	     uart_ifc_uart_rRecvState == 3'd3 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_buffer_shift =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // rule RL_rl_connect_uart_in
  assign CAN_FIRE_RL_rl_connect_uart_in = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_uart_in = 1'd1 ;

  // rule RL_uart_ifc_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command =
	     uart_ifc_uart_rXmitState == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;

  // rule RL_uart_ifc_rl_write_tx
  assign CAN_FIRE_RL_uart_ifc_rl_write_tx = 1'b0 ;
  assign WILL_FIRE_RL_uart_ifc_rl_write_tx = 1'b0 ;

  // rule RL_uart_ifc_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit =
	     uart_ifc_uart_rXmitState == 3'd1 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ;

  // rule RL_uart_ifc_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time =
	     uart_ifc_uart_rXmitState == 3'd2 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_uart_ifc_uart_transmit_bit_counter
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_uart_ifc_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit =
	     uart_ifc_uart_rXmitState == 3'd3 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;

  // rule RL_uart_ifc_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift =
	     !uart_ifc_uart_pwXmitLoadBuffer_whas &&
	     CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // rule RL_uart_ifc_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit =
	     uart_ifc_uart_rXmitState == 3'd7 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ;

  // rule RL_uart_ifc_uart_transmit_buffer_load
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load =
	     uart_ifc_uart_fifoXmit_EMPTY_N &&
	     uart_ifc_uart_pwXmitLoadBuffer_whas ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit =
	     uart_ifc_uart_rXmitState == 3'd4 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 =
	     uart_ifc_uart_rXmitState == 3'd5 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 =
	     uart_ifc_uart_rXmitState == 3'd6 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ;

  // rule RL_uart_ifc_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_baudGen_baud_tick_count_wire
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire = 1'd1 ;

  // rule RL_uart_ifc_uart_baudGen_assert_2x_baud_tick
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick =
	     uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick ;

  // rule RL_uart_ifc_uart_baudGen_count_baudtick_16x
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x =
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_fifoRecv__updateLevelCounter
  assign CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter =
	     uart_ifc_uart_fifoRecv_r_enq_whas !=
	     CAN_FIRE_RL_uart_ifc_rl_deq_rx ;
  assign WILL_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter ;

  // rule RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update
  assign CAN_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update = 1'd1 ;

  // rule RL_uart_ifc_uart_fifoXmit__updateLevelCounter
  assign CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter =
	     1'b0 != CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;
  assign WILL_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter ;

  // rule RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update
  assign CAN_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update = 1'd1 ;

  // rule RL_rg_read_rx__dreg_update
  assign CAN_FIRE_RL_rg_read_rx__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_read_rx__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_uart_ifc_uart_rRecvState_write_1__SEL_5 =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4 =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;
  assign MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit &&
	     !uart_ifc_uart_rRecvData ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_1 =
	     uart_ifc_uart_rRecvData ? 3'd0 : 3'd1 ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_2 =
	     (uart_ifc_uart_rRecvCellCount == 4'h4) ?
	       (uart_ifc_uart_rRecvData ? 3'd0 : 3'd2) :
	       3'd1 ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_3 =
	     (uart_ifc_uart_rRecvBitCount ==
	      uart_ifc_rg_control_inner_reg[7:4]) ?
	       ((uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ?
		  ((uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
		     3'd6 :
		     3'd5) :
		  3'd4) :
	       IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88 ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2 =
	     (uart_ifc_rg_control_inner_reg[3:2] == 2'd1) ?
	       uart_ifc_uart_rXmitParity :
	       uart_ifc_rg_control_inner_reg[3:2] == 2'd2 && x__h16149 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_1 =
	     uart_ifc_uart_fifoXmit_EMPTY_N ? 3'd1 : 3'd0 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_2 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd2 : 3'd1 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_3 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ?
	       ((uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 &&
		 uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ?
		  3'd4 :
		  ((uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 &&
		    uart_ifc_rg_control_inner_reg[3:2] != 2'd0) ?
		     3'd7 :
		     3'd3)) :
	       3'd2 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_4 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd4 : 3'd7 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_5 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF &&
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
	       3'd0 :
	       ((uart_ifc_uart_rXmitCellCount == 4'hF &&
		 uart_ifc_rg_control_inner_reg[1:0] == 2'd2) ?
		  3'd6 :
		  ((uart_ifc_uart_rXmitCellCount == 4'hF &&
		    uart_ifc_rg_control_inner_reg[1:0] == 2'd1) ?
		     3'd5 :
		     3'd4)) ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_6 =
	     (uart_ifc_uart_rXmitCellCount == 4'h7) ? 3'd0 : 3'd5 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_7 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd6 ;

  // inlined wires
  assign rg_read_rx_1_whas =
	     WILL_FIRE_RL_rl_check_if_character_present &&
	     uart_ifc_wr_status_x_wget[3] ;
  assign uart_ifc_uart_fifoRecv_r_enq_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	     uart_ifc_uart_rRecvData &&
	     !uart_ifc_uart_rg_stop_error ;
  assign uart_ifc_uart_pwRecvCellCountReset_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell &&
	     uart_ifc_uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ;
  assign uart_ifc_uart_pwRecvResetBitCount_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit &&
	     uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_pwXmitCellCountReset_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command &&
	     uart_ifc_uart_fifoXmit_EMPTY_N ||
	     _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 &&
	     uart_ifc_uart_rXmitCellCount == 4'h7 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit &&
	     uart_ifc_uart_rXmitCellCount == 4'hF &&
	     (uart_ifc_rg_control_inner_reg[1:0] == 2'd0 ||
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd2 ||
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd1) ;
  assign uart_ifc_uart_pwXmitEnableBitCount_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time &&
	     uart_ifc_uart_rXmitCellCount == 4'hF &&
	     (!uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 ||
	      uart_ifc_rg_control_inner_reg[3:2] != 2'd0) &&
	     (!uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 ||
	      uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ;
  assign uart_ifc_uart_pwXmitLoadBuffer_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command &&
	     uart_ifc_uart_fifoXmit_EMPTY_N ;
  assign uart_ifc_wr_status_x_wget =
	     { 20'd0,
	       uart_ifc_uart_err_status_reg,
	       2'd0,
	       uart_ifc_uart_rx_thld_triggered,
	       uart_ifc_uart_tx_thld_triggered,
	       uart_ifc_uart_fifoRecv_EMPTY_N,
	       uart_ifc_uart_fifoRecv_FULL_N,
	       uart_ifc_uart_fifoXmit_FULL_N,
	       x__h17105 } ;
  assign uart_ifc_uart_err_status_reg_port0__write_1 =
	     { _theResult_____2__h10128,
	       _theResult_____1__h10129,
	       _theResult_____3__h10127,
	       _theResult____h10126 } ;

  // register dump
  assign dump_D_IN = TASK_fopen___d310 ;
  assign dump_EN =
	     WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 ;

  // register dump1
  assign dump1_D_IN = TASK_fopen___d321 ;
  assign dump1_EN = CAN_FIRE_RL_rl_open_file_rtldump ;

  // register rg_cnt
  assign rg_cnt_D_IN = rg_cnt + 5'd1 ;
  assign rg_cnt_EN = CAN_FIRE_RL_rl_open_file_rtldump ;

  // register rg_read_rx
  assign rg_read_rx_D_IN = rg_read_rx_1_whas ;
  assign rg_read_rx_EN = 1'd1 ;

  // register uart_ifc_dummy
  assign uart_ifc_dummy_D_IN = !uart_ifc_dummy ;
  assign uart_ifc_dummy_EN =
	     WILL_FIRE_RL_rl_write_received_character ||
	     WILL_FIRE_RL_rl_check_if_character_present ;

  // register uart_ifc_rg_baud_val_inner_reg
  assign uart_ifc_rg_baud_val_inner_reg_D_IN = 16'h0 ;
  assign uart_ifc_rg_baud_val_inner_reg_EN = 1'b0 ;

  // register uart_ifc_rg_control_inner_reg
  assign uart_ifc_rg_control_inner_reg_D_IN = 32'h0 ;
  assign uart_ifc_rg_control_inner_reg_EN = 1'b0 ;

  // register uart_ifc_rg_intr_en_inner_reg
  assign uart_ifc_rg_intr_en_inner_reg_D_IN = 32'h0 ;
  assign uart_ifc_rg_intr_en_inner_reg_EN = 1'b0 ;

  // register uart_ifc_uart_err_status_reg
  assign uart_ifc_uart_err_status_reg_D_IN = x__h16923 ;
  assign uart_ifc_uart_err_status_reg_EN = 1'b1 ;

  // register uart_ifc_uart_fifoRecv_countReg
  assign uart_ifc_uart_fifoRecv_countReg_D_IN =
	     uart_ifc_uart_fifoRecv_r_enq_whas ?
	       uart_ifc_uart_fifoRecv_countReg + 5'd1 :
	       uart_ifc_uart_fifoRecv_countReg - 5'd1 ;
  assign uart_ifc_uart_fifoRecv_countReg_EN =
	     CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter ;

  // register uart_ifc_uart_fifoXmit_countReg
  assign uart_ifc_uart_fifoXmit_countReg_D_IN =
	     uart_ifc_uart_fifoXmit_countReg - 5'd1 ;
  assign uart_ifc_uart_fifoXmit_countReg_EN =
	     CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter ;

  // register uart_ifc_uart_rRecvBitCount
  assign uart_ifc_uart_rRecvBitCount_D_IN =
	     uart_ifc_uart_pwRecvResetBitCount_whas ? 4'd0 : x__h9515 ;
  assign uart_ifc_uart_rRecvBitCount_EN =
	     uart_ifc_uart_pwRecvResetBitCount_whas ||
	     MUX_uart_ifc_uart_rRecvState_write_1__SEL_5 ;

  // register uart_ifc_uart_rRecvCellCount
  assign uart_ifc_uart_rRecvCellCount_D_IN =
	     uart_ifc_uart_pwRecvCellCountReset_whas ? 4'd0 : x__h7790 ;
  assign uart_ifc_uart_rRecvCellCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // register uart_ifc_uart_rRecvData
  assign uart_ifc_uart_rRecvData_D_IN = soc_uart_io_SOUT ;
  assign uart_ifc_uart_rRecvData_EN = 1'd1 ;

  // register uart_ifc_uart_rRecvParity
  assign uart_ifc_uart_rRecvParity_D_IN = uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_rRecvParity_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit ;

  // register uart_ifc_uart_rRecvState
  always@(WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit or
	  MUX_uart_ifc_uart_rRecvState_write_1__SEL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_1;
      WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_3;
      WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit:
	  uart_ifc_uart_rRecvState_D_IN = 3'd0;
      MUX_uart_ifc_uart_rRecvState_write_1__SEL_5:
	  uart_ifc_uart_rRecvState_D_IN = 3'd2;
      default: uart_ifc_uart_rRecvState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rRecvState_EN =
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ;

  // register uart_ifc_uart_rXmitBitCount
  assign uart_ifc_uart_rXmitBitCount_D_IN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ?
	       4'd0 :
	       x__h12119 ;
  assign uart_ifc_uart_rXmitBitCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ||
	     uart_ifc_uart_pwXmitEnableBitCount_whas ;

  // register uart_ifc_uart_rXmitCellCount
  assign uart_ifc_uart_rXmitCellCount_D_IN =
	     uart_ifc_uart_pwXmitCellCountReset_whas ? 4'd0 : x__h12085 ;
  assign uart_ifc_uart_rXmitCellCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // register uart_ifc_uart_rXmitDataOut
  always@(MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1 or
	  uart_ifc_uart_vrXmitBuffer or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit or
	  MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit or
	  MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1:
	  uart_ifc_uart_rXmitDataOut_D_IN = uart_ifc_uart_vrXmitBuffer;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit:
	  uart_ifc_uart_rXmitDataOut_D_IN =
	      MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit:
	  uart_ifc_uart_rXmitDataOut_D_IN = 1'b0;
      MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4:
	  uart_ifc_uart_rXmitDataOut_D_IN = 1'b1;
      default: uart_ifc_uart_rXmitDataOut_D_IN =
		   1'bx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rXmitDataOut_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;

  // register uart_ifc_uart_rXmitParity
  assign uart_ifc_uart_rXmitParity_D_IN =
	     z__h13651 ^ uart_ifc_uart_fifoXmit_D_OUT[7] ;
  assign uart_ifc_uart_rXmitParity_EN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;

  // register uart_ifc_uart_rXmitState
  always@(WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_5 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_6 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_7 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_1;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_3;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_4;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_5;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_6;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_7;
      WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit:
	  uart_ifc_uart_rXmitState_D_IN = 3'd2;
      default: uart_ifc_uart_rXmitState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rXmitState_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;

  // register uart_ifc_uart_rg_stop_error
  assign uart_ifc_uart_rg_stop_error_D_IN =
	     MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1 ;
  assign uart_ifc_uart_rg_stop_error_EN =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit &&
	     !uart_ifc_uart_rRecvData ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ;

  // register uart_ifc_uart_rx_thld_triggered
  assign uart_ifc_uart_rx_thld_triggered_D_IN =
	     (!uart_ifc_rg_control_inner_reg[11] ||
	      uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	      !uart_ifc_rg_control_inner_reg[13] ||
	      !uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	      uart_ifc_rg_control_inner_reg[13]) &&
	     !uart_ifc_uart_wr_rx_thld_clear ;
  assign uart_ifc_uart_rx_thld_triggered_EN =
	     uart_ifc_rg_control_inner_reg[11] ||
	     uart_ifc_uart_wr_rx_thld_clear ||
	     uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	     !uart_ifc_rg_control_inner_reg[13] ||
	     !uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	     uart_ifc_rg_control_inner_reg[13] ;

  // register uart_ifc_uart_tx_thld_triggered
  assign uart_ifc_uart_tx_thld_triggered_D_IN =
	     (!uart_ifc_rg_control_inner_reg[10] ||
	      uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	      !uart_ifc_rg_control_inner_reg[12] ||
	      !uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	      uart_ifc_rg_control_inner_reg[12]) &&
	     !uart_ifc_uart_wr_tx_thld_clear ;
  assign uart_ifc_uart_tx_thld_triggered_EN =
	     uart_ifc_rg_control_inner_reg[10] ||
	     uart_ifc_uart_wr_tx_thld_clear ||
	     uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	     !uart_ifc_rg_control_inner_reg[12] ||
	     !uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	     uart_ifc_rg_control_inner_reg[12] ;

  // register uart_ifc_uart_vrRecvBuffer
  assign uart_ifc_uart_vrRecvBuffer_D_IN = uart_ifc_uart_vrRecvBuffer_1 ;
  assign uart_ifc_uart_vrRecvBuffer_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_1
  assign uart_ifc_uart_vrRecvBuffer_1_D_IN = uart_ifc_uart_vrRecvBuffer_2 ;
  assign uart_ifc_uart_vrRecvBuffer_1_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_2
  assign uart_ifc_uart_vrRecvBuffer_2_D_IN = uart_ifc_uart_vrRecvBuffer_3 ;
  assign uart_ifc_uart_vrRecvBuffer_2_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_3
  assign uart_ifc_uart_vrRecvBuffer_3_D_IN = uart_ifc_uart_vrRecvBuffer_4 ;
  assign uart_ifc_uart_vrRecvBuffer_3_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_4
  assign uart_ifc_uart_vrRecvBuffer_4_D_IN = uart_ifc_uart_vrRecvBuffer_5 ;
  assign uart_ifc_uart_vrRecvBuffer_4_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_5
  assign uart_ifc_uart_vrRecvBuffer_5_D_IN = uart_ifc_uart_vrRecvBuffer_6 ;
  assign uart_ifc_uart_vrRecvBuffer_5_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_6
  assign uart_ifc_uart_vrRecvBuffer_6_D_IN = uart_ifc_uart_vrRecvBuffer_7 ;
  assign uart_ifc_uart_vrRecvBuffer_6_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_7
  assign uart_ifc_uart_vrRecvBuffer_7_D_IN = uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_vrRecvBuffer_7_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer
  assign uart_ifc_uart_vrXmitBuffer_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[0] :
	       uart_ifc_uart_vrXmitBuffer_1 ;
  assign uart_ifc_uart_vrXmitBuffer_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_1
  assign uart_ifc_uart_vrXmitBuffer_1_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[1] :
	       uart_ifc_uart_vrXmitBuffer_2 ;
  assign uart_ifc_uart_vrXmitBuffer_1_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_2
  assign uart_ifc_uart_vrXmitBuffer_2_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[2] :
	       uart_ifc_uart_vrXmitBuffer_3 ;
  assign uart_ifc_uart_vrXmitBuffer_2_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_3
  assign uart_ifc_uart_vrXmitBuffer_3_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[3] :
	       uart_ifc_uart_vrXmitBuffer_4 ;
  assign uart_ifc_uart_vrXmitBuffer_3_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_4
  assign uart_ifc_uart_vrXmitBuffer_4_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[4] :
	       uart_ifc_uart_vrXmitBuffer_5 ;
  assign uart_ifc_uart_vrXmitBuffer_4_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_5
  assign uart_ifc_uart_vrXmitBuffer_5_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[5] :
	       uart_ifc_uart_vrXmitBuffer_6 ;
  assign uart_ifc_uart_vrXmitBuffer_5_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_6
  assign uart_ifc_uart_vrXmitBuffer_6_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[6] :
	       uart_ifc_uart_vrXmitBuffer_7 ;
  assign uart_ifc_uart_vrXmitBuffer_6_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_7
  assign uart_ifc_uart_vrXmitBuffer_7_D_IN =
	     !WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     uart_ifc_uart_fifoXmit_D_OUT[7] ;
  assign uart_ifc_uart_vrXmitBuffer_7_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_wr_rx_thld_clear
  assign uart_ifc_uart_wr_rx_thld_clear_D_IN = 1'b0 ;
  assign uart_ifc_uart_wr_rx_thld_clear_EN = 1'd1 ;

  // register uart_ifc_uart_wr_tx_thld_clear
  assign uart_ifc_uart_wr_tx_thld_clear_D_IN = 1'b0 ;
  assign uart_ifc_uart_wr_tx_thld_clear_EN = 1'd1 ;

  // submodule soc
  assign soc_uart_io_SIN = uart_ifc_uart_rXmitDataOut ;

  // submodule tck_clk
  assign tck_clk_CLK_IN = 1'b0 ;
  assign tck_clk_COND_IN = 1'b0 ;
  assign tck_clk_CLK_IN_EN = 1'b0 ;
  assign tck_clk_COND_IN_EN = 1'b0 ;

  // submodule trst
  assign trst_ASSERT_IN = 1'b0 ;

  // submodule uart_ifc_uart_baudGen_rBaudCounter
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_A = 16'd1 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_B = 16'h0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_C = 16'h0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_F = 16'd0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_ADDA =
	     uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_ADDB = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_SETC = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_SETF =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // submodule uart_ifc_uart_baudGen_rBaudTickCounter
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A = 3'd1 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_ADDA =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_ADDB = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_SETC = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_SETF = 1'b0 ;

  // submodule uart_ifc_uart_fifoRecv
  assign uart_ifc_uart_fifoRecv_D_IN = bitdata__h10120 ;
  assign uart_ifc_uart_fifoRecv_ENQ = uart_ifc_uart_fifoRecv_r_enq_whas ;
  assign uart_ifc_uart_fifoRecv_DEQ = CAN_FIRE_RL_uart_ifc_rl_deq_rx ;
  assign uart_ifc_uart_fifoRecv_CLR = 1'b0 ;

  // submodule uart_ifc_uart_fifoXmit
  assign uart_ifc_uart_fifoXmit_D_IN = 8'h0 ;
  assign uart_ifc_uart_fifoXmit_ENQ = 1'b0 ;
  assign uart_ifc_uart_fifoXmit_DEQ =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;
  assign uart_ifc_uart_fifoXmit_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d811 =
	     op1__h23304 <= op2__h23305 ;
  assign IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d816 =
	     (op1__h23304 ^ 64'h8000000000000000) <=
	     (op2__h23305 ^ 64'h8000000000000000) ;
  assign IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88 =
	     (uart_ifc_uart_rRecvBitCount == y__h9803) ?
	       ((uart_ifc_rg_control_inner_reg[3:2] == 2'd0 ||
		 uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
		  3'd6 :
		  3'd5) :
	       ((uart_ifc_uart_rRecvBitCount == y__h9825) ? 3'd6 : 3'd3) ;
  assign _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset =
	     (WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit) &&
	     uart_ifc_uart_rXmitCellCount == 4'hF ;
  assign _i_receive_char__h16744 =
	     uart_ifc_uart_fifoRecv_EMPTY_N ?
	       uart_ifc_uart_fifoRecv_D_OUT :
	       8'd0 ;
  assign _theResult_____1__h10129 =
	     !uart_ifc_uart_rRecvData || uart_ifc_uart_rg_stop_error ;
  assign _theResult_____2__h10128 =
	     bitdata__h10120 == 8'd0 && !uart_ifc_uart_rRecvData ;
  assign _theResult_____3__h10127 = !uart_ifc_uart_fifoRecv_FULL_N ;
  assign _theResult____h10126 =
	     uart_ifc_rg_control_inner_reg[3:2] == 2'd1 &&
	     !uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 ||
	     uart_ifc_rg_control_inner_reg[3:2] == 2'd2 &&
	     uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 ;
  assign _theResult____h20783 =
	     (soc_commitlog[146:135] == 12'h100) ?
	       12'h300 :
	       soc_commitlog[146:135] ;
  assign _theResult____h22300 =
	     (soc_commitlog[16:14] == 3'd2 && soc_commitlog[4:0] != 5'd5 &&
	      soc_commitlog[4:0] != 5'd7) ?
	       store_data___1__h23293 :
	       soc_commitlog[144:81] ;
  assign bitdata__h10120 =
	     { uart_ifc_uart_vrRecvBuffer_7,
	       uart_ifc_uart_vrRecvBuffer_6,
	       uart_ifc_uart_vrRecvBuffer_5,
	       uart_ifc_uart_vrRecvBuffer_4,
	       uart_ifc_uart_vrRecvBuffer_3,
	       uart_ifc_uart_vrRecvBuffer_2,
	       uart_ifc_uart_vrRecvBuffer_1,
	       uart_ifc_uart_vrRecvBuffer } >>
	     x__h11400 ;
  assign data__h19644 =
	     { 24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       _i_receive_char__h16744 } ;
  assign op1___1__h23363 =
	     { {32{soccommitlog_BITS_80_TO_17_BITS_31_TO_0__q2[31]}},
	       soccommitlog_BITS_80_TO_17_BITS_31_TO_0__q2 } ;
  assign op1__h23304 =
	     soccommitlog_BITS_4_TO_0__q3[4] ?
	       soc_commitlog[80:17] :
	       op1___1__h23363 ;
  assign op2___1__h23364 =
	     { {32{soccommitlog_BITS_144_TO_81_BITS_31_TO_0__q5[31]}},
	       soccommitlog_BITS_144_TO_81_BITS_31_TO_0__q5 } ;
  assign op2__h23305 =
	     soccommitlog_BITS_4_TO_0__q3[4] ?
	       soc_commitlog[144:81] :
	       op2___1__h23364 ;
  assign soccommitlog_BITS_144_TO_81_BITS_31_TO_0__q5 =
	     soccommitlog_BITS_144_TO_81__q4[31:0] ;
  assign soccommitlog_BITS_144_TO_81__q4 = soc_commitlog[144:81] ;
  assign soccommitlog_BITS_4_TO_0__q3 = soc_commitlog[4:0] ;
  assign soccommitlog_BITS_80_TO_17_BITS_31_TO_0__q2 =
	     soccommitlog_BITS_80_TO_17__q1[31:0] ;
  assign soccommitlog_BITS_80_TO_17__q1 = soc_commitlog[80:17] ;
  assign uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 =
	     uart_ifc_uart_baudGen_rBaudCounter_Q_OUT + 16'd1 <
	     uart_ifc_rg_baud_val_inner_reg ;
  assign uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 =
	     uart_ifc_uart_fifoRecv_countReg <=
	     uart_ifc_rg_control_inner_reg[25:21] ;
  assign uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 =
	     uart_ifc_uart_fifoXmit_countReg <=
	     uart_ifc_rg_control_inner_reg[20:16] ;
  assign uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 =
	     uart_ifc_uart_rXmitBitCount == y__h15733 ;
  assign uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 =
	     z__h11518 ^ uart_ifc_uart_rRecvParity ;
  assign x__h11400 = 4'd8 - uart_ifc_rg_control_inner_reg[7:4] ;
  assign x__h12085 = uart_ifc_uart_rXmitCellCount + 4'd1 ;
  assign x__h12119 = uart_ifc_uart_rXmitBitCount + 4'd1 ;
  assign x__h16149 = ~uart_ifc_uart_rXmitParity ;
  assign x__h16923 =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ?
	       uart_ifc_uart_err_status_reg_port0__write_1 :
	       uart_ifc_uart_err_status_reg ;
  assign x__h17105 =
	     !uart_ifc_uart_fifoXmit_EMPTY_N &&
	     uart_ifc_uart_rXmitState == 3'd0 ;
  assign x__h7790 = uart_ifc_uart_rRecvCellCount + 4'd1 ;
  assign x__h9515 = uart_ifc_uart_rRecvBitCount + 4'd1 ;
  assign y__h15733 = uart_ifc_rg_control_inner_reg[7:4] - 4'd1 ;
  assign y__h9803 = uart_ifc_rg_control_inner_reg[7:4] + 4'd1 ;
  assign y__h9825 = uart_ifc_rg_control_inner_reg[7:4] + 4'd2 ;
  assign z__h11476 = bitdata__h10120[0] ^ bitdata__h10120[1] ;
  assign z__h11483 = z__h11476 ^ bitdata__h10120[2] ;
  assign z__h11490 = z__h11483 ^ bitdata__h10120[3] ;
  assign z__h11497 = z__h11490 ^ bitdata__h10120[4] ;
  assign z__h11504 = z__h11497 ^ bitdata__h10120[5] ;
  assign z__h11511 = z__h11504 ^ bitdata__h10120[6] ;
  assign z__h11518 = z__h11511 ^ bitdata__h10120[7] ;
  assign z__h13616 =
	     uart_ifc_uart_fifoXmit_D_OUT[0] ^
	     uart_ifc_uart_fifoXmit_D_OUT[1] ;
  assign z__h13623 = z__h13616 ^ uart_ifc_uart_fifoXmit_D_OUT[2] ;
  assign z__h13630 = z__h13623 ^ uart_ifc_uart_fifoXmit_D_OUT[3] ;
  assign z__h13637 = z__h13630 ^ uart_ifc_uart_fifoXmit_D_OUT[4] ;
  assign z__h13644 = z__h13637 ^ uart_ifc_uart_fifoXmit_D_OUT[5] ;
  assign z__h13651 = z__h13644 ^ uart_ifc_uart_fifoXmit_D_OUT[6] ;
  always@(_theResult____h20783 or
	  soc_sbread_mv_csr_sie or
	  soc_sbread_mv_csr_stvec or
	  soc_sbread_mv_csr_sscratch or
	  soc_sbread_mv_csr_sepc or
	  soc_sbread_mv_csr_scause or
	  soc_sbread_mv_csr_stval or
	  soc_sbread_mv_csr_sip or
	  soc_sbread_mv_csr_satp or
	  soc_sbread_mv_csr_mstatus or
	  soc_sbread_mv_csr_misa or
	  soc_sbread_mv_csr_medeleg or
	  soc_sbread_mv_csr_mideleg or
	  soc_sbread_mv_csr_mie or
	  soc_sbread_mv_csr_mtvec or
	  soc_sbread_mv_csr_mcountinhibit or
	  soc_sbread_mv_csr_mscratch or
	  soc_sbread_mv_csr_mepc or
	  soc_sbread_mv_csr_mcause or
	  soc_sbread_mv_csr_mtval or
	  soc_sbread_mv_csr_mip or
	  soc_sbread_mv_csr_pmpcfg0 or
	  soc_sbread_mv_csr_pmpaddr0 or
	  soc_sbread_mv_csr_pmpaddr1 or
	  soc_sbread_mv_csr_pmpaddr2 or
	  soc_sbread_mv_csr_pmpaddr3 or
	  soc_sbread_mv_csr_customcontrol or
	  soc_sbread_mv_csr_mcycle or
	  soc_sbread_mv_csr_minstret or
	  soc_sbread_mv_csr_time or
	  soc_sbread_mv_csr_mvendorid or
	  soc_sbread_mv_csr_marchid or
	  soc_sbread_mv_csr_mimpid or soc_sbread_mv_csr_mhartid)
  begin
    case (_theResult____h20783)
      12'h104: wdata__h21009 = soc_sbread_mv_csr_sie;
      12'h105: wdata__h21009 = soc_sbread_mv_csr_stvec;
      12'h140: wdata__h21009 = soc_sbread_mv_csr_sscratch;
      12'h141: wdata__h21009 = soc_sbread_mv_csr_sepc;
      12'h142: wdata__h21009 = soc_sbread_mv_csr_scause;
      12'h143: wdata__h21009 = soc_sbread_mv_csr_stval;
      12'h144: wdata__h21009 = soc_sbread_mv_csr_sip;
      12'h180: wdata__h21009 = soc_sbread_mv_csr_satp;
      12'h300: wdata__h21009 = soc_sbread_mv_csr_mstatus;
      12'h301: wdata__h21009 = soc_sbread_mv_csr_misa;
      12'h302: wdata__h21009 = soc_sbread_mv_csr_medeleg;
      12'h303: wdata__h21009 = soc_sbread_mv_csr_mideleg;
      12'h304: wdata__h21009 = soc_sbread_mv_csr_mie;
      12'h305: wdata__h21009 = soc_sbread_mv_csr_mtvec;
      12'h320: wdata__h21009 = { 32'd0, soc_sbread_mv_csr_mcountinhibit };
      12'h340: wdata__h21009 = soc_sbread_mv_csr_mscratch;
      12'h341: wdata__h21009 = soc_sbread_mv_csr_mepc;
      12'h342: wdata__h21009 = soc_sbread_mv_csr_mcause;
      12'h343: wdata__h21009 = soc_sbread_mv_csr_mtval;
      12'h344: wdata__h21009 = soc_sbread_mv_csr_mip;
      12'h3A0: wdata__h21009 = soc_sbread_mv_csr_pmpcfg0;
      12'h3B0: wdata__h21009 = soc_sbread_mv_csr_pmpaddr0;
      12'h3B1: wdata__h21009 = soc_sbread_mv_csr_pmpaddr1;
      12'h3B2: wdata__h21009 = soc_sbread_mv_csr_pmpaddr2;
      12'h3B3: wdata__h21009 = soc_sbread_mv_csr_pmpaddr3;
      12'h800: wdata__h21009 = soc_sbread_mv_csr_customcontrol;
      12'hB00: wdata__h21009 = soc_sbread_mv_csr_mcycle;
      12'hB02: wdata__h21009 = soc_sbread_mv_csr_minstret;
      12'hC01: wdata__h21009 = soc_sbread_mv_csr_time;
      12'hF11: wdata__h21009 = soc_sbread_mv_csr_mvendorid;
      12'hF12: wdata__h21009 = soc_sbread_mv_csr_marchid;
      12'hF13: wdata__h21009 = soc_sbread_mv_csr_mimpid;
      12'hF14: wdata__h21009 = soc_sbread_mv_csr_mhartid;
      default: wdata__h21009 = 64'd0;
    endcase
  end
  always@(soccommitlog_BITS_4_TO_0__q3 or
	  op1__h23304 or
	  op2__h23305 or
	  IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d816 or
	  IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d811)
  begin
    case (soccommitlog_BITS_4_TO_0__q3[3:0])
      4'b0: store_data___1__h23293 = op1__h23304 + op2__h23305;
      4'b0010: store_data___1__h23293 = op1__h23304 ^ op2__h23305;
      4'b0011: store_data___1__h23293 = op2__h23305;
      4'b0100: store_data___1__h23293 = op1__h23304 | op2__h23305;
      4'b0110: store_data___1__h23293 = op1__h23304 & op2__h23305;
      4'b1000:
	  store_data___1__h23293 =
	      IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d816 ?
		op1__h23304 :
		op2__h23305;
      4'b1010:
	  store_data___1__h23293 =
	      IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d816 ?
		op2__h23305 :
		op1__h23304;
      4'b1100:
	  store_data___1__h23293 =
	      IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d811 ?
		op1__h23304 :
		op2__h23305;
      4'b1110:
	  store_data___1__h23293 =
	      IF_IF_soc_commitlog__43_BITS_210_TO_209_67_EQ__ETC___d811 ?
		op2__h23305 :
		op1__h23304;
      default: store_data___1__h23293 = op1__h23304;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dump <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dump1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_cnt <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_read_rx <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_rg_baud_val_inner_reg <= `BSV_ASSIGNMENT_DELAY 16'd5;
	uart_ifc_rg_control_inner_reg <= `BSV_ASSIGNMENT_DELAY 32'd10368;
	uart_ifc_rg_intr_en_inner_reg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	uart_ifc_uart_err_status_reg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_ifc_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_ifc_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY 1'd1;
	uart_ifc_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	uart_ifc_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
	uart_ifc_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	uart_ifc_uart_rg_stop_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rx_thld_triggered <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_tx_thld_triggered <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_wr_rx_thld_clear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_wr_tx_thld_clear <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (dump_EN) dump <= `BSV_ASSIGNMENT_DELAY dump_D_IN;
	if (dump1_EN) dump1 <= `BSV_ASSIGNMENT_DELAY dump1_D_IN;
	if (rg_cnt_EN) rg_cnt <= `BSV_ASSIGNMENT_DELAY rg_cnt_D_IN;
	if (rg_read_rx_EN)
	  rg_read_rx <= `BSV_ASSIGNMENT_DELAY rg_read_rx_D_IN;
	if (uart_ifc_dummy_EN)
	  uart_ifc_dummy <= `BSV_ASSIGNMENT_DELAY uart_ifc_dummy_D_IN;
	if (uart_ifc_rg_baud_val_inner_reg_EN)
	  uart_ifc_rg_baud_val_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_baud_val_inner_reg_D_IN;
	if (uart_ifc_rg_control_inner_reg_EN)
	  uart_ifc_rg_control_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_control_inner_reg_D_IN;
	if (uart_ifc_rg_intr_en_inner_reg_EN)
	  uart_ifc_rg_intr_en_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_intr_en_inner_reg_D_IN;
	if (uart_ifc_uart_err_status_reg_EN)
	  uart_ifc_uart_err_status_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_err_status_reg_D_IN;
	if (uart_ifc_uart_fifoRecv_countReg_EN)
	  uart_ifc_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_fifoRecv_countReg_D_IN;
	if (uart_ifc_uart_fifoXmit_countReg_EN)
	  uart_ifc_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_fifoXmit_countReg_D_IN;
	if (uart_ifc_uart_rRecvBitCount_EN)
	  uart_ifc_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvBitCount_D_IN;
	if (uart_ifc_uart_rRecvCellCount_EN)
	  uart_ifc_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvCellCount_D_IN;
	if (uart_ifc_uart_rRecvData_EN)
	  uart_ifc_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvData_D_IN;
	if (uart_ifc_uart_rRecvParity_EN)
	  uart_ifc_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvParity_D_IN;
	if (uart_ifc_uart_rRecvState_EN)
	  uart_ifc_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvState_D_IN;
	if (uart_ifc_uart_rXmitBitCount_EN)
	  uart_ifc_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitBitCount_D_IN;
	if (uart_ifc_uart_rXmitCellCount_EN)
	  uart_ifc_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitCellCount_D_IN;
	if (uart_ifc_uart_rXmitDataOut_EN)
	  uart_ifc_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitDataOut_D_IN;
	if (uart_ifc_uart_rXmitParity_EN)
	  uart_ifc_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitParity_D_IN;
	if (uart_ifc_uart_rXmitState_EN)
	  uart_ifc_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitState_D_IN;
	if (uart_ifc_uart_rg_stop_error_EN)
	  uart_ifc_uart_rg_stop_error <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rg_stop_error_D_IN;
	if (uart_ifc_uart_rx_thld_triggered_EN)
	  uart_ifc_uart_rx_thld_triggered <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rx_thld_triggered_D_IN;
	if (uart_ifc_uart_tx_thld_triggered_EN)
	  uart_ifc_uart_tx_thld_triggered <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_tx_thld_triggered_D_IN;
	if (uart_ifc_uart_wr_rx_thld_clear_EN)
	  uart_ifc_uart_wr_rx_thld_clear <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_wr_rx_thld_clear_D_IN;
	if (uart_ifc_uart_wr_tx_thld_clear_EN)
	  uart_ifc_uart_wr_tx_thld_clear <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_wr_tx_thld_clear_D_IN;
      end
    if (uart_ifc_uart_vrRecvBuffer_EN)
      uart_ifc_uart_vrRecvBuffer <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_1_EN)
      uart_ifc_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_1_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_2_EN)
      uart_ifc_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_2_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_3_EN)
      uart_ifc_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_3_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_4_EN)
      uart_ifc_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_4_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_5_EN)
      uart_ifc_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_5_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_6_EN)
      uart_ifc_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_6_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_7_EN)
      uart_ifc_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_7_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_EN)
      uart_ifc_uart_vrXmitBuffer <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_1_EN)
      uart_ifc_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_1_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_2_EN)
      uart_ifc_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_2_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_3_EN)
      uart_ifc_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_3_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_4_EN)
      uart_ifc_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_4_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_5_EN)
      uart_ifc_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_5_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_6_EN)
      uart_ifc_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_6_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_7_EN)
      uart_ifc_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_7_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dump = 32'hAAAAAAAA;
    dump1 = 32'hAAAAAAAA;
    rg_cnt = 5'h0A;
    rg_read_rx = 1'h0;
    uart_ifc_dummy = 1'h0;
    uart_ifc_rg_baud_val_inner_reg = 16'hAAAA;
    uart_ifc_rg_control_inner_reg = 32'hAAAAAAAA;
    uart_ifc_rg_intr_en_inner_reg = 32'hAAAAAAAA;
    uart_ifc_uart_err_status_reg = 4'hA;
    uart_ifc_uart_fifoRecv_countReg = 5'h0A;
    uart_ifc_uart_fifoXmit_countReg = 5'h0A;
    uart_ifc_uart_rRecvBitCount = 4'hA;
    uart_ifc_uart_rRecvCellCount = 4'hA;
    uart_ifc_uart_rRecvData = 1'h0;
    uart_ifc_uart_rRecvParity = 1'h0;
    uart_ifc_uart_rRecvState = 3'h2;
    uart_ifc_uart_rXmitBitCount = 4'hA;
    uart_ifc_uart_rXmitCellCount = 4'hA;
    uart_ifc_uart_rXmitDataOut = 1'h0;
    uart_ifc_uart_rXmitParity = 1'h0;
    uart_ifc_uart_rXmitState = 3'h2;
    uart_ifc_uart_rg_stop_error = 1'h0;
    uart_ifc_uart_rx_thld_triggered = 1'h0;
    uart_ifc_uart_tx_thld_triggered = 1'h0;
    uart_ifc_uart_vrRecvBuffer = 1'h0;
    uart_ifc_uart_vrRecvBuffer_1 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_2 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_3 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_4 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_5 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_6 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_7 = 1'h0;
    uart_ifc_uart_vrXmitBuffer = 1'h0;
    uart_ifc_uart_vrXmitBuffer_1 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_2 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_3 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_4 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_5 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_6 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_7 = 1'h0;
    uart_ifc_uart_wr_rx_thld_clear = 1'h0;
    uart_ifc_uart_wr_tx_thld_clear = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    begin
      v__h17421 = $time;
      #0;
    end
    begin
      TASK_testplusargs___d300 = $test$plusargs("fullverbose");
      #0;
    end
    begin
      TASK_testplusargs___d301 = $test$plusargs("mtb");
      #0;
    end
    begin
      TASK_testplusargs___d302 = $test$plusargs("l0");
      #0;
    end
    begin
      v__h17491 = $time;
      #0;
    end
    if (TASK_testplusargs___d300 ||
	TASK_testplusargs___d301 && TASK_testplusargs___d302)
      $write("[%10d", v__h17491, "] ");
    if (TASK_testplusargs___d300 ||
	TASK_testplusargs___d301 && TASK_testplusargs___d302)
      $write("\n[%10d]", v__h17421);
    if (TASK_testplusargs___d300 ||
	TASK_testplusargs___d301 && TASK_testplusargs___d302)
      $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump)
	begin
	  TASK_testplusargs___d309 = $test$plusargs("rtldump");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309)
	begin
	  TASK_fopen___d310 = $fopen("rtl.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	begin
	  TASK_testplusargs___d313 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	begin
	  TASK_testplusargs___d314 = $test$plusargs("mtb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	begin
	  TASK_testplusargs___d315 = $test$plusargs("l0");
	  #0;
	end
    TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318 =
	TASK_fopen___d310 == 32'd0 &&
	(TASK_testplusargs___d313 ||
	 TASK_testplusargs___d314 && TASK_testplusargs___d315);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	begin
	  v__h17781 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318)
	$write("[%10d", v__h17781, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318)
	$write("TB: cannot open %s", "rtl.dump");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app)
	begin
	  TASK_fopen___d321 = $fopen("app_log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	begin
	  TASK_testplusargs___d323 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	begin
	  TASK_testplusargs___d324 = $test$plusargs("mtb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	begin
	  TASK_testplusargs___d325 = $test$plusargs("l0");
	  #0;
	end
    TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328 =
	TASK_fopen___d321 == 32'd0 &&
	(TASK_testplusargs___d323 ||
	 TASK_testplusargs___d324 && TASK_testplusargs___d325);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	begin
	  v__h18194 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app &&
	  TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328)
	$write("[%10d", v__h18194, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app &&
	  TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328)
	$write("TB: cannot open %s", "app_log");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app &&
	  TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file)
	begin
	  TASK_testplusargs___d353 = $test$plusargs("rtldump");
	  #0;
	end
    NOT_soc_commitlog__43_BITS_242_TO_211_45_EQ_0x_ETC___d836 =
	soc_commitlog[242:211] != 32'h0000006F &&
	soc_commitlog[242:211] != 32'h0000A001 &&
	TASK_testplusargs___d353 &&
	soc_commitlog[210:209] == 2'd1 &&
	(soc_commitlog[16:14] == 3'd1 ||
	 soc_commitlog[16:14] == 3'd2 && soc_commitlog[4:0] != 5'd5) &&
	soc_commitlog[7:5] == 3'd0 &&
	_theResult____h22300[7:4] == 4'd0;
    NOT_soc_commitlog__43_BITS_242_TO_211_45_EQ_0x_ETC___d844 =
	soc_commitlog[242:211] != 32'h0000006F &&
	soc_commitlog[242:211] != 32'h0000A001 &&
	TASK_testplusargs___d353 &&
	soc_commitlog[210:209] == 2'd1 &&
	(soc_commitlog[16:14] == 3'd1 ||
	 soc_commitlog[16:14] == 3'd2 && soc_commitlog[4:0] != 5'd5) &&
	soc_commitlog[7:5] == 3'd0 &&
	_theResult____h22300[7:4] != 4'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  (soc_commitlog[242:211] == 32'h0000006F ||
	   soc_commitlog[242:211] == 32'h0000A001))
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[212:211] == 2'b11)
	$fwrite(dump,
		"core   0: ",
		soc_commitlog[308:307],
		" 0x%16h",
		soc_commitlog[306:243],
		" (0x%8h",
		soc_commitlog[242:211],
		")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[212:211] != 2'b11)
	$fwrite(dump,
		"core   0: ",
		soc_commitlog[308:307],
		" 0x%16h",
		soc_commitlog[306:243],
		" (0x%4h",
		soc_commitlog[226:211],
		")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd3 &&
	  (soc_commitlog[242:236] != 7'b0001001 ||
	   soc_commitlog[225:211] != 15'b000000001110011) &&
	  soc_commitlog[0] &&
	  soc_commitlog[5:1] != 5'd0)
	$fwrite(dump,
		" x%d",
		soc_commitlog[5:1],
		" 0x%16h",
		soc_commitlog[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd3 &&
	  (soc_commitlog[242:236] != 7'b0001001 ||
	   soc_commitlog[225:211] != 15'b000000001110011) &&
	  !soc_commitlog[0])
	$fwrite(dump,
		" f%d",
		soc_commitlog[5:1],
		" 0x%16h",
		soc_commitlog[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd2 &&
	  soc_commitlog[70:66] != 5'd0)
	$fwrite(dump,
		" x%d",
		soc_commitlog[70:66],
		" 0x%16h",
		soc_commitlog[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd2 &&
	  (soc_commitlog[1:0] != 2'b10 || soc_commitlog[230:226] != 5'd0))
	if (_theResult____h20783 == 12'h301)
	  $fwrite(dump, " ", "c769_misa", " 0x%16h", wdata__h21009);
	else
	  if (_theResult____h20783 == 12'hF11)
	    $fwrite(dump, " ", "c3857_mvendorid", " 0x%16h", wdata__h21009);
	  else
	    if (_theResult____h20783 == 12'h105)
	      $fwrite(dump, " ", "c261_stvec", " 0x%16h", wdata__h21009);
	    else
	      if (_theResult____h20783 == 12'h305)
		$fwrite(dump, " ", "c773_mtvec", " 0x%16h", wdata__h21009);
	      else
		if (_theResult____h20783 == 12'h300)
		  $fwrite(dump,
			  " ",
			  "c768_mstatus",
			  " 0x%16h",
			  wdata__h21009);
		else
		  if (_theResult____h20783 == 12'h100)
		    $fwrite(dump,
			    " ",
			    "c256_sstatus",
			    " 0x%16h",
			    wdata__h21009);
		  else
		    if (_theResult____h20783 == 12'hF12)
		      $fwrite(dump,
			      " ",
			      "c3858_marchid",
			      " 0x%16h",
			      wdata__h21009);
		    else
		      if (_theResult____h20783 == 12'hF13)
			$fwrite(dump,
				" ",
				"c3859_mimpid",
				" 0x%16h",
				wdata__h21009);
		      else
			if (_theResult____h20783 == 12'hF14)
			  $fwrite(dump,
				  " ",
				  "c3860_mhartid",
				  " 0x%16h",
				  wdata__h21009);
			else
			  if (_theResult____h20783 == 12'h344)
			    $fwrite(dump,
				    " ",
				    "c836_mip",
				    " 0x%16h",
				    wdata__h21009);
			  else
			    if (_theResult____h20783 == 12'h144)
			      $fwrite(dump,
				      " ",
				      "c324_sip",
				      " 0x%16h",
				      wdata__h21009);
			    else
			      if (_theResult____h20783 == 12'h304)
				$fwrite(dump,
					" ",
					"c772_mie",
					" 0x%16h",
					wdata__h21009);
			      else
				if (_theResult____h20783 == 12'h104)
				  $fwrite(dump,
					  " ",
					  "c260_sie",
					  " 0x%16h",
					  wdata__h21009);
				else
				  if (_theResult____h20783 == 12'h340)
				    $fwrite(dump,
					    " ",
					    "c832_mscratch",
					    " 0x%16h",
					    wdata__h21009);
				  else
				    if (_theResult____h20783 == 12'h140)
				      $fwrite(dump,
					      " ",
					      "c320_sscratch",
					      " 0x%16h",
					      wdata__h21009);
				    else
				      if (_theResult____h20783 == 12'h141)
					$fwrite(dump,
						" ",
						"c321_sepc",
						" 0x%16h",
						wdata__h21009);
				      else
					if (_theResult____h20783 == 12'h143)
					  $fwrite(dump,
						  " ",
						  "c323_stval",
						  " 0x%16h",
						  wdata__h21009);
					else
					  if (_theResult____h20783 == 12'h142)
					    $fwrite(dump,
						    " ",
						    "c322_scause",
						    " 0x%16h",
						    wdata__h21009);
					  else
					    if (_theResult____h20783 ==
						12'h341)
					      $fwrite(dump,
						      " ",
						      "c833_mepc",
						      " 0x%16h",
						      wdata__h21009);
					    else
					      if (_theResult____h20783 ==
						  12'h343)
						$fwrite(dump,
							" ",
							"c835_mtval",
							" 0x%16h",
							wdata__h21009);
					      else
						if (_theResult____h20783 ==
						    12'h342)
						  $fwrite(dump,
							  " ",
							  "c834_mcause",
							  " 0x%16h",
							  wdata__h21009);
						else
						  if (_theResult____h20783 ==
						      12'hB00)
						    $fwrite(dump,
							    " ",
							    "c2816_mcycle",
							    " 0x%16h",
							    wdata__h21009);
						  else
						    if (_theResult____h20783 ==
							12'hB02)
						      $fwrite(dump,
							      " ",
							      "c2818_minstret",
							      " 0x%16h",
							      wdata__h21009);
						    else
						      if (_theResult____h20783 ==
							  12'hC01)
							$fwrite(dump,
								" ",
								"c3073_time",
								" 0x%16h",
								wdata__h21009);
						      else
							if (_theResult____h20783 ==
							    12'h303)
							  $fwrite(dump,
								  " ",
								  "c771_mideleg",
								  " 0x%16h",
								  wdata__h21009);
							else
							  if (_theResult____h20783 ==
							      12'h302)
							    $fwrite(dump,
								    " ",
								    "c770_medeleg",
								    " 0x%16h",
								    wdata__h21009);
							  else
							    if (_theResult____h20783 ==
								12'h3A0)
							      $fwrite(dump,
								      " ",
								      "c928_pmpcfg0",
								      " 0x%16h",
								      wdata__h21009);
							    else
							      if (_theResult____h20783 ==
								  12'h3B0)
								$fwrite(dump,
									" ",
									"c944_pmpaddr0",
									" 0x%16h",
									wdata__h21009);
							      else
								if (_theResult____h20783 ==
								    12'h3B1)
								  $fwrite(dump,
									  " ",
									  "c945_pmpaddr1",
									  " 0x%16h",
									  wdata__h21009);
								else
								  if (_theResult____h20783 ==
								      12'h3B2)
								    $fwrite(dump,
									    " ",
									    "c946_pmpaddr2",
									    " 0x%16h",
									    wdata__h21009);
								  else
								    if (_theResult____h20783 ==
									12'h3B3)
								      $fwrite(dump,
									      " ",
									      "c947_pmpaddr3",
									      " 0x%16h",
									      wdata__h21009);
								    else
								      if (_theResult____h20783 ==
									  12'hB03)
									$fwrite(dump,
										" ",
										"c2819_mhpmcounter3",
										" 0x%16h",
										wdata__h21009);
								      else
									if (_theResult____h20783 ==
									    12'hB04)
									  $fwrite(dump,
										  " ",
										  "c2820_mhpmcounter4",
										  " 0x%16h",
										  wdata__h21009);
									else
									  if (_theResult____h20783 ==
									      12'h323)
									    $fwrite(dump,
										    " ",
										    "c803_mhpmevent3",
										    " 0x%16h",
										    wdata__h21009);
									  else
									    if (_theResult____h20783 ==
										12'h324)
									      $fwrite(dump,
										      " ",
										      "c804_mhpmevent4",
										      " 0x%16h",
										      wdata__h21009);
									    else
									      if (_theResult____h20783 ==
										  12'h180)
										$fwrite(dump,
											" ",
											"c384_satp",
											" 0x%16h",
											wdata__h21009);
									      else
										if (_theResult____h20783 ==
										    12'h306)
										  $fwrite(dump,
											  " ",
											  "c774_mcounteren",
											  " 0x%16h",
											  wdata__h21009);
										else
										  if (_theResult____h20783 ==
										      12'h320)
										    $fwrite(dump,
											    " ",
											    "c800_mcountinhibit",
											    " 0x%16h",
											    wdata__h21009);
										  else
										    if (_theResult____h20783 ==
											12'h325)
										      $fwrite(dump,
											      " ",
											      "c805_mhpmevent5",
											      " 0x%16h",
											      wdata__h21009);
										    else
										      if (_theResult____h20783 ==
											  12'hB05)
											$fwrite(dump,
												" ",
												"c2821_mhpmcounter5",
												" 0x%16h",
												wdata__h21009);
										      else
											if (_theResult____h20783 ==
											    12'h326)
											  $fwrite(dump,
												  " ",
												  "c806_mhpmevent6",
												  " 0x%16h",
												  wdata__h21009);
											else
											  if (_theResult____h20783 ==
											      12'hB06)
											    $fwrite(dump,
												    " ",
												    "c2822_mhpmcounter6",
												    " 0x%16h",
												    wdata__h21009);
											  else
											    if (_theResult____h20783 ==
												12'h327)
											      $fwrite(dump,
												      " ",
												      "c807_mhpmevent7",
												      " 0x%16h",
												      wdata__h21009);
											    else
											      if (_theResult____h20783 ==
												  12'hB07)
												$fwrite(dump,
													" ",
													"c2823_mhpmcounter7",
													" 0x%16h",
													wdata__h21009);
											      else
												if (_theResult____h20783 ==
												    12'h328)
												  $fwrite(dump,
													  " ",
													  "c808_mhpmevent8",
													  " 0x%16h",
													  wdata__h21009);
												else
												  if (_theResult____h20783 ==
												      12'hB08)
												    $fwrite(dump,
													    " ",
													    "c2824_mhpmcounter8",
													    " 0x%16h",
													    wdata__h21009);
												  else
												    if (_theResult____h20783 ==
													12'h329)
												      $fwrite(dump,
													      " ",
													      "c809_mhpmevent9",
													      " 0x%16h",
													      wdata__h21009);
												    else
												      if (_theResult____h20783 ==
													  12'hB09)
													$fwrite(dump,
														" ",
														"c2825_mhpmcounter9",
														" 0x%16h",
														wdata__h21009);
												      else
													if (_theResult____h20783 ==
													    12'h32A)
													  $fwrite(dump,
														  " ",
														  "c810_mhpmevent10",
														  " 0x%16h",
														  wdata__h21009);
													else
													  if (_theResult____h20783 ==
													      12'hB0A)
													    $fwrite(dump,
														    " ",
														    "c2826_mhpmcounter10",
														    " 0x%16h",
														    wdata__h21009);
													  else
													    if (_theResult____h20783 ==
														12'h32B)
													      $fwrite(dump,
														      " ",
														      "c811_mhpmevent11",
														      " 0x%16h",
														      wdata__h21009);
													    else
													      if (_theResult____h20783 ==
														  12'hB0B)
														$fwrite(dump,
															" ",
															"c2827_mhpmcounter11",
															" 0x%16h",
															wdata__h21009);
													      else
														if (_theResult____h20783 ==
														    12'h32C)
														  $fwrite(dump,
															  " ",
															  "c812_mhpmevent12",
															  " 0x%16h",
															  wdata__h21009);
														else
														  if (_theResult____h20783 ==
														      12'hB0C)
														    $fwrite(dump,
															    " ",
															    "c2828_mhpmcounter12",
															    " 0x%16h",
															    wdata__h21009);
														  else
														    if (_theResult____h20783 ==
															12'h32D)
														      $fwrite(dump,
															      " ",
															      "c813_mhpmevent13",
															      " 0x%16h",
															      wdata__h21009);
														    else
														      if (_theResult____h20783 ==
															  12'hB0D)
															$fwrite(dump,
																" ",
																"c2829_mhpmcounter13",
																" 0x%16h",
																wdata__h21009);
														      else
															if (_theResult____h20783 ==
															    12'h32E)
															  $fwrite(dump,
																  " ",
																  "c814_mhpmevent14",
																  " 0x%16h",
																  wdata__h21009);
															else
															  if (_theResult____h20783 ==
															      12'hB0E)
															    $fwrite(dump,
																    " ",
																    "c2830_mhpmcounter14",
																    " 0x%16h",
																    wdata__h21009);
															  else
															    if (_theResult____h20783 ==
																12'h32F)
															      $fwrite(dump,
																      " ",
																      "c815_mhpmevent15",
																      " 0x%16h",
																      wdata__h21009);
															    else
															      if (_theResult____h20783 ==
																  12'hB0F)
																$fwrite(dump,
																	" ",
																	"c2831_mhpmcounter15",
																	" 0x%16h",
																	wdata__h21009);
															      else
																if (_theResult____h20783 ==
																    12'h330)
																  $fwrite(dump,
																	  " ",
																	  "c816_mhpmevent16",
																	  " 0x%16h",
																	  wdata__h21009);
																else
																  if (_theResult____h20783 ==
																      12'hB10)
																    $fwrite(dump,
																	    " ",
																	    "c2832_mhpmcounter16",
																	    " 0x%16h",
																	    wdata__h21009);
																  else
																    if (_theResult____h20783 ==
																	12'h331)
																      $fwrite(dump,
																	      " ",
																	      "c817_mhpmevent17",
																	      " 0x%16h",
																	      wdata__h21009);
																    else
																      if (_theResult____h20783 ==
																	  12'hB11)
																	$fwrite(dump,
																		" ",
																		"c2833_mhpmcounter17",
																		" 0x%16h",
																		wdata__h21009);
																      else
																	if (_theResult____h20783 ==
																	    12'h332)
																	  $fwrite(dump,
																		  " ",
																		  "c818_mhpmevent18",
																		  " 0x%16h",
																		  wdata__h21009);
																	else
																	  if (_theResult____h20783 ==
																	      12'hB12)
																	    $fwrite(dump,
																		    " ",
																		    "c2834_mhpmcounter18",
																		    " 0x%16h",
																		    wdata__h21009);
																	  else
																	    if (_theResult____h20783 ==
																		12'h333)
																	      $fwrite(dump,
																		      " ",
																		      "c819_mhpmevent19",
																		      " 0x%16h",
																		      wdata__h21009);
																	    else
																	      if (_theResult____h20783 ==
																		  12'hB13)
																		$fwrite(dump,
																			" ",
																			"c2835_mhpmcounter19",
																			" 0x%16h",
																			wdata__h21009);
																	      else
																		if (_theResult____h20783 ==
																		    12'h334)
																		  $fwrite(dump,
																			  " ",
																			  "c820_mhpmevent20",
																			  " 0x%16h",
																			  wdata__h21009);
																		else
																		  if (_theResult____h20783 ==
																		      12'hB14)
																		    $fwrite(dump,
																			    " ",
																			    "c2836_mhpmcounter20",
																			    " 0x%16h",
																			    wdata__h21009);
																		  else
																		    if (_theResult____h20783 ==
																			12'h335)
																		      $fwrite(dump,
																			      " ",
																			      "c821_mhpmevent21",
																			      " 0x%16h",
																			      wdata__h21009);
																		    else
																		      if (_theResult____h20783 ==
																			  12'hB15)
																			$fwrite(dump,
																				" ",
																				"c2837_mhpmcounter21",
																				" 0x%16h",
																				wdata__h21009);
																		      else
																			if (_theResult____h20783 ==
																			    12'h336)
																			  $fwrite(dump,
																				  " ",
																				  "c822_mhpmevent22",
																				  " 0x%16h",
																				  wdata__h21009);
																			else
																			  if (_theResult____h20783 ==
																			      12'hB16)
																			    $fwrite(dump,
																				    " ",
																				    "c2838_mhpmcounter22",
																				    " 0x%16h",
																				    wdata__h21009);
																			  else
																			    if (_theResult____h20783 ==
																				12'h337)
																			      $fwrite(dump,
																				      " ",
																				      "c823_mhpmevent23",
																				      " 0x%16h",
																				      wdata__h21009);
																			    else
																			      if (_theResult____h20783 ==
																				  12'hB17)
																				$fwrite(dump,
																					" ",
																					"c2839_mhpmcounter23",
																					" 0x%16h",
																					wdata__h21009);
																			      else
																				if (_theResult____h20783 ==
																				    12'h338)
																				  $fwrite(dump,
																					  " ",
																					  "c824_mhpmevent24",
																					  " 0x%16h",
																					  wdata__h21009);
																				else
																				  if (_theResult____h20783 ==
																				      12'hB18)
																				    $fwrite(dump,
																					    " ",
																					    "c2840_mhpmcounter24",
																					    " 0x%16h",
																					    wdata__h21009);
																				  else
																				    if (_theResult____h20783 ==
																					12'h339)
																				      $fwrite(dump,
																					      " ",
																					      "c825_mhpmevent25",
																					      " 0x%16h",
																					      wdata__h21009);
																				    else
																				      if (_theResult____h20783 ==
																					  12'hB19)
																					$fwrite(dump,
																						" ",
																						"c2841_mhpmcounter25",
																						" 0x%16h",
																						wdata__h21009);
																				      else
																					if (_theResult____h20783 ==
																					    12'h33A)
																					  $fwrite(dump,
																						  " ",
																						  "c826_mhpmevent26",
																						  " 0x%16h",
																						  wdata__h21009);
																					else
																					  if (_theResult____h20783 ==
																					      12'hB1A)
																					    $fwrite(dump,
																						    " ",
																						    "c2842_mhpmcounter26",
																						    " 0x%16h",
																						    wdata__h21009);
																					  else
																					    if (_theResult____h20783 ==
																						12'h33B)
																					      $fwrite(dump,
																						      " ",
																						      "c827_mhpmevent27",
																						      " 0x%16h",
																						      wdata__h21009);
																					    else
																					      if (_theResult____h20783 ==
																						  12'hB1B)
																						$fwrite(dump,
																							" ",
																							"c2843_mhpmcounter27",
																							" 0x%16h",
																							wdata__h21009);
																					      else
																						if (_theResult____h20783 ==
																						    12'h33C)
																						  $fwrite(dump,
																							  " ",
																							  "c828_mhpmevent28",
																							  " 0x%16h",
																							  wdata__h21009);
																						else
																						  if (_theResult____h20783 ==
																						      12'hB1C)
																						    $fwrite(dump,
																							    " ",
																							    "c2844_mhpmcounter28",
																							    " 0x%16h",
																							    wdata__h21009);
																						  else
																						    if (_theResult____h20783 ==
																							12'h33D)
																						      $fwrite(dump,
																							      " ",
																							      "c829_mhpmevent29",
																							      " 0x%16h",
																							      wdata__h21009);
																						    else
																						      if (_theResult____h20783 ==
																							  12'hB1D)
																							$fwrite(dump,
																								" ",
																								"c2845_mhpmcounter29",
																								" 0x%16h",
																								wdata__h21009);
																						      else
																							if (_theResult____h20783 ==
																							    12'h33E)
																							  $fwrite(dump,
																								  " ",
																								  "c830_mhpmevent30",
																								  " 0x%16h",
																								  wdata__h21009);
																							else
																							  if (_theResult____h20783 ==
																							      12'hB1E)
																							    $fwrite(dump,
																								    " ",
																								    "c2846_mhpmcounter30",
																								    " 0x%16h",
																								    wdata__h21009);
																							  else
																							    if (_theResult____h20783 ==
																								12'h33F)
																							      $fwrite(dump,
																								      " ",
																								      "c831_mhpmevent31",
																								      " 0x%16h",
																								      wdata__h21009);
																							    else
																							      if (_theResult____h20783 ==
																								  12'hB1F)
																								$fwrite(dump,
																									" ",
																									"c2847_mhpmcounter31",
																									" 0x%16h",
																									wdata__h21009);
																							      else
																								if (_theResult____h20783 ==
																								    12'hC00)
																								  $fwrite(dump,
																									  " ",
																									  "c3072_cycle",
																									  " 0x%16h",
																									  wdata__h21009);
																								else
																								  if (_theResult____h20783 ==
																								      12'hC02)
																								    $fwrite(dump,
																									    " ",
																									    "c3074_instret",
																									    " 0x%16h",
																									    wdata__h21009);
																								  else
																								    if (_theResult____h20783 ==
																									12'hC03)
																								      $fwrite(dump,
																									      " ",
																									      "c3075_hpmcounter3",
																									      " 0x%16h",
																									      wdata__h21009);
																								    else
																								      if (_theResult____h20783 ==
																									  12'hC04)
																									$fwrite(dump,
																										" ",
																										"c3076_hpmcounter4",
																										" 0x%16h",
																										wdata__h21009);
																								      else
																									if (_theResult____h20783 ==
																									    12'hC05)
																									  $fwrite(dump,
																										  " ",
																										  "c3077_hpmcounter5",
																										  " 0x%16h",
																										  wdata__h21009);
																									else
																									  if (_theResult____h20783 ==
																									      12'hC06)
																									    $fwrite(dump,
																										    " ",
																										    "c3078_hpmcounter6",
																										    " 0x%16h",
																										    wdata__h21009);
																									  else
																									    if (_theResult____h20783 ==
																										12'hC07)
																									      $fwrite(dump,
																										      " ",
																										      "c3079_hpmcounter7",
																										      " 0x%16h",
																										      wdata__h21009);
																									    else
																									      if (_theResult____h20783 ==
																										  12'hC08)
																										$fwrite(dump,
																											" ",
																											"c3080_hpmcounter8",
																											" 0x%16h",
																											wdata__h21009);
																									      else
																										if (_theResult____h20783 ==
																										    12'hC09)
																										  $fwrite(dump,
																											  " ",
																											  "c3081_hpmcounter9",
																											  " 0x%16h",
																											  wdata__h21009);
																										else
																										  if (_theResult____h20783 ==
																										      12'hC0A)
																										    $fwrite(dump,
																											    " ",
																											    "c3082_hpmcounter10",
																											    " 0x%16h",
																											    wdata__h21009);
																										  else
																										    if (_theResult____h20783 ==
																											12'hC0B)
																										      $fwrite(dump,
																											      " ",
																											      "c3083_hpmcounter11",
																											      " 0x%16h",
																											      wdata__h21009);
																										    else
																										      if (_theResult____h20783 ==
																											  12'hC0C)
																											$fwrite(dump,
																												" ",
																												"c3084_hpmcounter12",
																												" 0x%16h",
																												wdata__h21009);
																										      else
																											if (_theResult____h20783 ==
																											    12'hC0D)
																											  $fwrite(dump,
																												  " ",
																												  "c3085_hpmcounter13",
																												  " 0x%16h",
																												  wdata__h21009);
																											else
																											  if (_theResult____h20783 ==
																											      12'hC0E)
																											    $fwrite(dump,
																												    " ",
																												    "c3086_hpmcounter14",
																												    " 0x%16h",
																												    wdata__h21009);
																											  else
																											    if (_theResult____h20783 ==
																												12'hC0F)
																											      $fwrite(dump,
																												      " ",
																												      "c3087_hpmcounter15",
																												      " 0x%16h",
																												      wdata__h21009);
																											    else
																											      if (_theResult____h20783 ==
																												  12'hC10)
																												$fwrite(dump,
																													" ",
																													"c3088_hpmcounter16",
																													" 0x%16h",
																													wdata__h21009);
																											      else
																												if (_theResult____h20783 ==
																												    12'hC11)
																												  $fwrite(dump,
																													  " ",
																													  "c3089_hpmcounter17",
																													  " 0x%16h",
																													  wdata__h21009);
																												else
																												  if (_theResult____h20783 ==
																												      12'hC12)
																												    $fwrite(dump,
																													    " ",
																													    "c3090_hpmcounter18",
																													    " 0x%16h",
																													    wdata__h21009);
																												  else
																												    if (_theResult____h20783 ==
																													12'hC13)
																												      $fwrite(dump,
																													      " ",
																													      "c3091_hpmcounter19",
																													      " 0x%16h",
																													      wdata__h21009);
																												    else
																												      if (_theResult____h20783 ==
																													  12'hC14)
																													$fwrite(dump,
																														" ",
																														"c3092_hpmcounter20",
																														" 0x%16h",
																														wdata__h21009);
																												      else
																													if (_theResult____h20783 ==
																													    12'hC15)
																													  $fwrite(dump,
																														  " ",
																														  "c3093_hpmcounter21",
																														  " 0x%16h",
																														  wdata__h21009);
																													else
																													  if (_theResult____h20783 ==
																													      12'hC16)
																													    $fwrite(dump,
																														    " ",
																														    "c3094_hpmcounter22",
																														    " 0x%16h",
																														    wdata__h21009);
																													  else
																													    if (_theResult____h20783 ==
																														12'hC17)
																													      $fwrite(dump,
																														      " ",
																														      "c3095_hpmcounter23",
																														      " 0x%16h",
																														      wdata__h21009);
																													    else
																													      if (_theResult____h20783 ==
																														  12'hC18)
																														$fwrite(dump,
																															" ",
																															"c3096_hpmcounter24",
																															" 0x%16h",
																															wdata__h21009);
																													      else
																														if (_theResult____h20783 ==
																														    12'hC19)
																														  $fwrite(dump,
																															  " ",
																															  "c3097_hpmcounter25",
																															  " 0x%16h",
																															  wdata__h21009);
																														else
																														  if (_theResult____h20783 ==
																														      12'hC1A)
																														    $fwrite(dump,
																															    " ",
																															    "c3098_hpmcounter26",
																															    " 0x%16h",
																															    wdata__h21009);
																														  else
																														    if (_theResult____h20783 ==
																															12'hC1B)
																														      $fwrite(dump,
																															      " ",
																															      "c3099_hpmcounter27",
																															      " 0x%16h",
																															      wdata__h21009);
																														    else
																														      if (_theResult____h20783 ==
																															  12'hC1C)
																															$fwrite(dump,
																																" ",
																																"c3100_hpmcounter28",
																																" 0x%16h",
																																wdata__h21009);
																														      else
																															if (_theResult____h20783 ==
																															    12'hC1D)
																															  $fwrite(dump,
																																  " ",
																																  "c3101_hpmcounter29",
																																  " 0x%16h",
																																  wdata__h21009);
																															else
																															  if (_theResult____h20783 ==
																															      12'hC1E)
																															    $fwrite(dump,
																																    " ",
																																    "c3102_hpmcounter30",
																																    " 0x%16h",
																																    wdata__h21009);
																															  else
																															    if (_theResult____h20783 ==
																																12'hC1F)
																															      $fwrite(dump,
																																      " ",
																																      "c3103_hpmcounter31",
																																      " 0x%16h",
																																      wdata__h21009);
																															    else
																															      if (_theResult____h20783 ==
																																  12'h106)
																																$fwrite(dump,
																																	" ",
																																	"c262_scounteren",
																																	" 0x%16h",
																																	wdata__h21009);
																															      else
																																$fwrite(dump,
																																	" ",
																																	"c2048_customcontrol",
																																	" 0x%16h",
																																	wdata__h21009);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd1 &&
	  (soc_commitlog[16:14] == 3'd0 || soc_commitlog[16:14] == 3'd2) &&
	  soc_commitlog[8] &&
	  soc_commitlog[13:9] != 5'd0)
	$fwrite(dump,
		" x%d",
		soc_commitlog[13:9],
		" 0x%16h",
		soc_commitlog[80:17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd1 &&
	  (soc_commitlog[16:14] == 3'd0 || soc_commitlog[16:14] == 3'd2) &&
	  !soc_commitlog[8])
	$fwrite(dump,
		" f%d",
		soc_commitlog[13:9],
		" 0x%16h",
		soc_commitlog[80:17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd1 &&
	  soc_commitlog[16:14] != 3'd3 &&
	  soc_commitlog[16:14] != 3'd4)
	$fwrite(dump, " mem 0x%16h", soc_commitlog[208:145]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd1 &&
	  soc_commitlog[16:14] == 3'd2 &&
	  soc_commitlog[4:0] != 5'd5 &&
	  soc_commitlog[4:0] != 5'd7)
	$fwrite(dump, " mem 0x%16h", soc_commitlog[208:145]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  NOT_soc_commitlog__43_BITS_242_TO_211_45_EQ_0x_ETC___d836)
	$fwrite(dump, " 0x%1h", _theResult____h22300[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  NOT_soc_commitlog__43_BITS_242_TO_211_45_EQ_0x_ETC___d844)
	$fwrite(dump, " 0x%2h", _theResult____h22300[7:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd1 &&
	  (soc_commitlog[16:14] == 3'd1 ||
	   soc_commitlog[16:14] == 3'd2 && soc_commitlog[4:0] != 5'd5) &&
	  soc_commitlog[7:5] == 3'd1)
	$fwrite(dump, " 0x%4h", _theResult____h22300[15:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd1 &&
	  (soc_commitlog[16:14] == 3'd1 ||
	   soc_commitlog[16:14] == 3'd2 && soc_commitlog[4:0] != 5'd5) &&
	  soc_commitlog[7:5] == 3'd2)
	$fwrite(dump, " 0x%8h", _theResult____h22300[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_commitlog[210:209] == 2'd1 &&
	  (soc_commitlog[16:14] == 3'd1 ||
	   soc_commitlog[16:14] == 3'd2 && soc_commitlog[4:0] != 5'd5) &&
	  soc_commitlog[7:5] == 3'd3)
	$fwrite(dump, " 0x%16h", _theResult____h22300);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file && soc_commitlog[309] &&
	  soc_commitlog[242:211] != 32'h0000006F &&
	  soc_commitlog[242:211] != 32'h0000A001 &&
	  TASK_testplusargs___d353)
	$fwrite(dump, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_received_character)
	$fwrite(dump1, "%c", data__h19644);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d99 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d100 = $test$plusargs("muart");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d101 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  v__h10197 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("[%10d", v__h10197, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("Received char 'h%h. break_error:%b frame_error:%b overrun:%b parity_error:%b ",
	       bitdata__h10120,
	       _theResult_____2__h10128,
	       _theResult_____1__h10129,
	       _theResult_____3__h10127,
	       _theResult____h10126);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkTbSoc


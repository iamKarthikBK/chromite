//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:35:17 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// ma_lock_rd                     O     4 reg
// RDY_ma_lock_rd                 O     1 const
// RDY_ma_release_rd              O     1 const
// mv_board                       O   160
// RDY_mv_board                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_lock_rd_lock                I     9
// ma_release_rd_rls              I     9
// EN_ma_release_rd               I     1
// EN_ma_lock_rd                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkscoreboard(CLK,
		    RST_N,

		    ma_lock_rd_lock,
		    EN_ma_lock_rd,
		    ma_lock_rd,
		    RDY_ma_lock_rd,

		    ma_release_rd_rls,
		    EN_ma_release_rd,
		    RDY_ma_release_rd,

		    mv_board,
		    RDY_mv_board);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // actionvalue method ma_lock_rd
  input  [8 : 0] ma_lock_rd_lock;
  input  EN_ma_lock_rd;
  output [3 : 0] ma_lock_rd;
  output RDY_ma_lock_rd;

  // action method ma_release_rd
  input  [8 : 0] ma_release_rd_rls;
  input  EN_ma_release_rd;
  output RDY_ma_release_rd;

  // value method mv_board
  output [159 : 0] mv_board;
  output RDY_mv_board;

  // signals for module outputs
  wire [159 : 0] mv_board;
  wire [3 : 0] ma_lock_rd;
  wire RDY_ma_lock_rd, RDY_ma_release_rd, RDY_mv_board;

  // inlined wires
  wire [4 : 0] rg_rf_board_0_port0__write_1,
	       rg_rf_board_0_port1__write_1,
	       rg_rf_board_1_port1__read,
	       rg_rf_board_1_port2__read,
	       rg_rf_board_10_port1__read,
	       rg_rf_board_10_port2__read,
	       rg_rf_board_11_port1__read,
	       rg_rf_board_11_port2__read,
	       rg_rf_board_12_port1__read,
	       rg_rf_board_12_port2__read,
	       rg_rf_board_13_port1__read,
	       rg_rf_board_13_port2__read,
	       rg_rf_board_14_port1__read,
	       rg_rf_board_14_port2__read,
	       rg_rf_board_15_port1__read,
	       rg_rf_board_15_port2__read,
	       rg_rf_board_16_port1__read,
	       rg_rf_board_16_port2__read,
	       rg_rf_board_17_port1__read,
	       rg_rf_board_17_port2__read,
	       rg_rf_board_18_port1__read,
	       rg_rf_board_18_port2__read,
	       rg_rf_board_19_port1__read,
	       rg_rf_board_19_port2__read,
	       rg_rf_board_2_port1__read,
	       rg_rf_board_2_port2__read,
	       rg_rf_board_20_port1__read,
	       rg_rf_board_20_port2__read,
	       rg_rf_board_21_port1__read,
	       rg_rf_board_21_port2__read,
	       rg_rf_board_22_port1__read,
	       rg_rf_board_22_port2__read,
	       rg_rf_board_23_port1__read,
	       rg_rf_board_23_port2__read,
	       rg_rf_board_24_port1__read,
	       rg_rf_board_24_port2__read,
	       rg_rf_board_25_port1__read,
	       rg_rf_board_25_port2__read,
	       rg_rf_board_26_port1__read,
	       rg_rf_board_26_port2__read,
	       rg_rf_board_27_port1__read,
	       rg_rf_board_27_port2__read,
	       rg_rf_board_28_port1__read,
	       rg_rf_board_28_port2__read,
	       rg_rf_board_29_port1__read,
	       rg_rf_board_29_port2__read,
	       rg_rf_board_3_port1__read,
	       rg_rf_board_3_port2__read,
	       rg_rf_board_30_port1__read,
	       rg_rf_board_30_port2__read,
	       rg_rf_board_31_port1__read,
	       rg_rf_board_31_port2__read,
	       rg_rf_board_4_port1__read,
	       rg_rf_board_4_port2__read,
	       rg_rf_board_5_port1__read,
	       rg_rf_board_5_port2__read,
	       rg_rf_board_6_port1__read,
	       rg_rf_board_6_port2__read,
	       rg_rf_board_7_port1__read,
	       rg_rf_board_7_port2__read,
	       rg_rf_board_8_port1__read,
	       rg_rf_board_8_port2__read,
	       rg_rf_board_9_port1__read,
	       rg_rf_board_9_port2__read;
  wire rg_rf_board_1_EN_port0__write,
       rg_rf_board_1_EN_port1__write,
       rg_rf_board_10_EN_port0__write,
       rg_rf_board_10_EN_port1__write,
       rg_rf_board_11_EN_port0__write,
       rg_rf_board_11_EN_port1__write,
       rg_rf_board_12_EN_port0__write,
       rg_rf_board_12_EN_port1__write,
       rg_rf_board_13_EN_port0__write,
       rg_rf_board_13_EN_port1__write,
       rg_rf_board_14_EN_port0__write,
       rg_rf_board_14_EN_port1__write,
       rg_rf_board_15_EN_port0__write,
       rg_rf_board_15_EN_port1__write,
       rg_rf_board_16_EN_port0__write,
       rg_rf_board_16_EN_port1__write,
       rg_rf_board_17_EN_port0__write,
       rg_rf_board_17_EN_port1__write,
       rg_rf_board_18_EN_port0__write,
       rg_rf_board_18_EN_port1__write,
       rg_rf_board_19_EN_port0__write,
       rg_rf_board_19_EN_port1__write,
       rg_rf_board_2_EN_port0__write,
       rg_rf_board_2_EN_port1__write,
       rg_rf_board_20_EN_port0__write,
       rg_rf_board_20_EN_port1__write,
       rg_rf_board_21_EN_port0__write,
       rg_rf_board_21_EN_port1__write,
       rg_rf_board_22_EN_port0__write,
       rg_rf_board_22_EN_port1__write,
       rg_rf_board_23_EN_port0__write,
       rg_rf_board_23_EN_port1__write,
       rg_rf_board_24_EN_port0__write,
       rg_rf_board_24_EN_port1__write,
       rg_rf_board_25_EN_port0__write,
       rg_rf_board_25_EN_port1__write,
       rg_rf_board_26_EN_port0__write,
       rg_rf_board_26_EN_port1__write,
       rg_rf_board_27_EN_port0__write,
       rg_rf_board_27_EN_port1__write,
       rg_rf_board_28_EN_port0__write,
       rg_rf_board_28_EN_port1__write,
       rg_rf_board_29_EN_port0__write,
       rg_rf_board_29_EN_port1__write,
       rg_rf_board_3_EN_port0__write,
       rg_rf_board_3_EN_port1__write,
       rg_rf_board_30_EN_port0__write,
       rg_rf_board_30_EN_port1__write,
       rg_rf_board_31_EN_port0__write,
       rg_rf_board_31_EN_port1__write,
       rg_rf_board_4_EN_port0__write,
       rg_rf_board_4_EN_port1__write,
       rg_rf_board_5_EN_port0__write,
       rg_rf_board_5_EN_port1__write,
       rg_rf_board_6_EN_port0__write,
       rg_rf_board_6_EN_port1__write,
       rg_rf_board_7_EN_port0__write,
       rg_rf_board_7_EN_port1__write,
       rg_rf_board_8_EN_port0__write,
       rg_rf_board_8_EN_port1__write,
       rg_rf_board_9_EN_port0__write,
       rg_rf_board_9_EN_port1__write;

  // register rg_renameid
  reg [3 : 0] rg_renameid;
  wire [3 : 0] rg_renameid_D_IN;
  wire rg_renameid_EN;

  // register rg_rf_board_0
  reg [4 : 0] rg_rf_board_0;
  wire [4 : 0] rg_rf_board_0_D_IN;
  wire rg_rf_board_0_EN;

  // register rg_rf_board_1
  reg [4 : 0] rg_rf_board_1;
  wire [4 : 0] rg_rf_board_1_D_IN;
  wire rg_rf_board_1_EN;

  // register rg_rf_board_10
  reg [4 : 0] rg_rf_board_10;
  wire [4 : 0] rg_rf_board_10_D_IN;
  wire rg_rf_board_10_EN;

  // register rg_rf_board_11
  reg [4 : 0] rg_rf_board_11;
  wire [4 : 0] rg_rf_board_11_D_IN;
  wire rg_rf_board_11_EN;

  // register rg_rf_board_12
  reg [4 : 0] rg_rf_board_12;
  wire [4 : 0] rg_rf_board_12_D_IN;
  wire rg_rf_board_12_EN;

  // register rg_rf_board_13
  reg [4 : 0] rg_rf_board_13;
  wire [4 : 0] rg_rf_board_13_D_IN;
  wire rg_rf_board_13_EN;

  // register rg_rf_board_14
  reg [4 : 0] rg_rf_board_14;
  wire [4 : 0] rg_rf_board_14_D_IN;
  wire rg_rf_board_14_EN;

  // register rg_rf_board_15
  reg [4 : 0] rg_rf_board_15;
  wire [4 : 0] rg_rf_board_15_D_IN;
  wire rg_rf_board_15_EN;

  // register rg_rf_board_16
  reg [4 : 0] rg_rf_board_16;
  wire [4 : 0] rg_rf_board_16_D_IN;
  wire rg_rf_board_16_EN;

  // register rg_rf_board_17
  reg [4 : 0] rg_rf_board_17;
  wire [4 : 0] rg_rf_board_17_D_IN;
  wire rg_rf_board_17_EN;

  // register rg_rf_board_18
  reg [4 : 0] rg_rf_board_18;
  wire [4 : 0] rg_rf_board_18_D_IN;
  wire rg_rf_board_18_EN;

  // register rg_rf_board_19
  reg [4 : 0] rg_rf_board_19;
  wire [4 : 0] rg_rf_board_19_D_IN;
  wire rg_rf_board_19_EN;

  // register rg_rf_board_2
  reg [4 : 0] rg_rf_board_2;
  wire [4 : 0] rg_rf_board_2_D_IN;
  wire rg_rf_board_2_EN;

  // register rg_rf_board_20
  reg [4 : 0] rg_rf_board_20;
  wire [4 : 0] rg_rf_board_20_D_IN;
  wire rg_rf_board_20_EN;

  // register rg_rf_board_21
  reg [4 : 0] rg_rf_board_21;
  wire [4 : 0] rg_rf_board_21_D_IN;
  wire rg_rf_board_21_EN;

  // register rg_rf_board_22
  reg [4 : 0] rg_rf_board_22;
  wire [4 : 0] rg_rf_board_22_D_IN;
  wire rg_rf_board_22_EN;

  // register rg_rf_board_23
  reg [4 : 0] rg_rf_board_23;
  wire [4 : 0] rg_rf_board_23_D_IN;
  wire rg_rf_board_23_EN;

  // register rg_rf_board_24
  reg [4 : 0] rg_rf_board_24;
  wire [4 : 0] rg_rf_board_24_D_IN;
  wire rg_rf_board_24_EN;

  // register rg_rf_board_25
  reg [4 : 0] rg_rf_board_25;
  wire [4 : 0] rg_rf_board_25_D_IN;
  wire rg_rf_board_25_EN;

  // register rg_rf_board_26
  reg [4 : 0] rg_rf_board_26;
  wire [4 : 0] rg_rf_board_26_D_IN;
  wire rg_rf_board_26_EN;

  // register rg_rf_board_27
  reg [4 : 0] rg_rf_board_27;
  wire [4 : 0] rg_rf_board_27_D_IN;
  wire rg_rf_board_27_EN;

  // register rg_rf_board_28
  reg [4 : 0] rg_rf_board_28;
  wire [4 : 0] rg_rf_board_28_D_IN;
  wire rg_rf_board_28_EN;

  // register rg_rf_board_29
  reg [4 : 0] rg_rf_board_29;
  wire [4 : 0] rg_rf_board_29_D_IN;
  wire rg_rf_board_29_EN;

  // register rg_rf_board_3
  reg [4 : 0] rg_rf_board_3;
  wire [4 : 0] rg_rf_board_3_D_IN;
  wire rg_rf_board_3_EN;

  // register rg_rf_board_30
  reg [4 : 0] rg_rf_board_30;
  wire [4 : 0] rg_rf_board_30_D_IN;
  wire rg_rf_board_30_EN;

  // register rg_rf_board_31
  reg [4 : 0] rg_rf_board_31;
  wire [4 : 0] rg_rf_board_31_D_IN;
  wire rg_rf_board_31_EN;

  // register rg_rf_board_4
  reg [4 : 0] rg_rf_board_4;
  wire [4 : 0] rg_rf_board_4_D_IN;
  wire rg_rf_board_4_EN;

  // register rg_rf_board_5
  reg [4 : 0] rg_rf_board_5;
  wire [4 : 0] rg_rf_board_5_D_IN;
  wire rg_rf_board_5_EN;

  // register rg_rf_board_6
  reg [4 : 0] rg_rf_board_6;
  wire [4 : 0] rg_rf_board_6_D_IN;
  wire rg_rf_board_6_EN;

  // register rg_rf_board_7
  reg [4 : 0] rg_rf_board_7;
  wire [4 : 0] rg_rf_board_7_D_IN;
  wire rg_rf_board_7_EN;

  // register rg_rf_board_8
  reg [4 : 0] rg_rf_board_8;
  wire [4 : 0] rg_rf_board_8_D_IN;
  wire rg_rf_board_8_EN;

  // register rg_rf_board_9
  reg [4 : 0] rg_rf_board_9;
  wire [4 : 0] rg_rf_board_9_D_IN;
  wire rg_rf_board_9_EN;

  // rule scheduling signals
  wire CAN_FIRE_ma_lock_rd,
       CAN_FIRE_ma_release_rd,
       WILL_FIRE_ma_lock_rd,
       WILL_FIRE_ma_release_rd;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d1;
  reg TASK_testplusargs___d2;
  reg TASK_testplusargs___d3;
  reg [63 : 0] v__h5936;
  reg TASK_testplusargs___d179;
  reg TASK_testplusargs___d180;
  reg TASK_testplusargs___d181;
  reg [63 : 0] v__h8356;
  reg TASK_testplusargs___d185;
  reg TASK_testplusargs___d186;
  reg TASK_testplusargs___d187;
  reg [63 : 0] v__h8493;
  // synopsys translate_on

  // remaining internal signals
  reg [3 : 0] SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108;
  reg SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145;

  // actionvalue method ma_lock_rd
  assign ma_lock_rd = rg_renameid ;
  assign RDY_ma_lock_rd = 1'd1 ;
  assign CAN_FIRE_ma_lock_rd = 1'd1 ;
  assign WILL_FIRE_ma_lock_rd = EN_ma_lock_rd ;

  // action method ma_release_rd
  assign RDY_ma_release_rd = 1'd1 ;
  assign CAN_FIRE_ma_release_rd = 1'd1 ;
  assign WILL_FIRE_ma_release_rd = EN_ma_release_rd ;

  // value method mv_board
  assign mv_board =
	     { rg_rf_board_31[0],
	       rg_rf_board_30[0],
	       rg_rf_board_29[0],
	       rg_rf_board_28[0],
	       rg_rf_board_27[0],
	       rg_rf_board_26[0],
	       rg_rf_board_25[0],
	       rg_rf_board_24[0],
	       rg_rf_board_23[0],
	       rg_rf_board_22[0],
	       rg_rf_board_21[0],
	       rg_rf_board_20[0],
	       rg_rf_board_19[0],
	       rg_rf_board_18[0],
	       rg_rf_board_17[0],
	       rg_rf_board_16[0],
	       rg_rf_board_15[0],
	       rg_rf_board_14[0],
	       rg_rf_board_13[0],
	       rg_rf_board_12[0],
	       rg_rf_board_11[0],
	       rg_rf_board_10[0],
	       rg_rf_board_9[0],
	       rg_rf_board_8[0],
	       rg_rf_board_7[0],
	       rg_rf_board_6[0],
	       rg_rf_board_5[0],
	       rg_rf_board_4[0],
	       rg_rf_board_3[0],
	       rg_rf_board_2[0],
	       rg_rf_board_1[0],
	       rg_rf_board_0[0],
	       rg_rf_board_31[4:1],
	       rg_rf_board_30[4:1],
	       rg_rf_board_29[4:1],
	       rg_rf_board_28[4:1],
	       rg_rf_board_27[4:1],
	       rg_rf_board_26[4:1],
	       rg_rf_board_25[4:1],
	       rg_rf_board_24[4:1],
	       rg_rf_board_23[4:1],
	       rg_rf_board_22[4:1],
	       rg_rf_board_21[4:1],
	       rg_rf_board_20[4:1],
	       rg_rf_board_19[4:1],
	       rg_rf_board_18[4:1],
	       rg_rf_board_17[4:1],
	       rg_rf_board_16[4:1],
	       rg_rf_board_15[4:1],
	       rg_rf_board_14[4:1],
	       rg_rf_board_13[4:1],
	       rg_rf_board_12[4:1],
	       rg_rf_board_11[4:1],
	       rg_rf_board_10[4:1],
	       rg_rf_board_9[4:1],
	       rg_rf_board_8[4:1],
	       rg_rf_board_7[4:1],
	       rg_rf_board_6[4:1],
	       rg_rf_board_5[4:1],
	       rg_rf_board_4[4:1],
	       rg_rf_board_3[4:1],
	       rg_rf_board_2[4:1],
	       rg_rf_board_1[4:1],
	       rg_rf_board_0[4:1] } ;
  assign RDY_mv_board = 1'd1 ;

  // inlined wires
  assign rg_rf_board_0_port0__write_1 = { rg_renameid, 1'd1 } ;
  assign rg_rf_board_0_port1__write_1 =
	     { SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108,
	       ma_release_rd_rls[8:5] !=
	       SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 &&
	       SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 } ;
  assign rg_rf_board_1_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd1 ;
  assign rg_rf_board_1_port1__read =
	     rg_rf_board_1_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_1 ;
  assign rg_rf_board_1_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd1 ;
  assign rg_rf_board_1_port2__read =
	     rg_rf_board_1_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_1_port1__read ;
  assign rg_rf_board_2_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd2 ;
  assign rg_rf_board_2_port1__read =
	     rg_rf_board_2_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_2 ;
  assign rg_rf_board_2_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd2 ;
  assign rg_rf_board_2_port2__read =
	     rg_rf_board_2_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_2_port1__read ;
  assign rg_rf_board_3_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd3 ;
  assign rg_rf_board_3_port1__read =
	     rg_rf_board_3_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_3 ;
  assign rg_rf_board_3_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd3 ;
  assign rg_rf_board_3_port2__read =
	     rg_rf_board_3_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_3_port1__read ;
  assign rg_rf_board_4_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd4 ;
  assign rg_rf_board_4_port1__read =
	     rg_rf_board_4_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_4 ;
  assign rg_rf_board_4_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd4 ;
  assign rg_rf_board_4_port2__read =
	     rg_rf_board_4_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_4_port1__read ;
  assign rg_rf_board_5_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd5 ;
  assign rg_rf_board_5_port1__read =
	     rg_rf_board_5_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_5 ;
  assign rg_rf_board_5_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd5 ;
  assign rg_rf_board_5_port2__read =
	     rg_rf_board_5_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_5_port1__read ;
  assign rg_rf_board_6_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd6 ;
  assign rg_rf_board_6_port1__read =
	     rg_rf_board_6_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_6 ;
  assign rg_rf_board_6_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd6 ;
  assign rg_rf_board_6_port2__read =
	     rg_rf_board_6_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_6_port1__read ;
  assign rg_rf_board_7_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd7 ;
  assign rg_rf_board_7_port1__read =
	     rg_rf_board_7_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_7 ;
  assign rg_rf_board_7_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd7 ;
  assign rg_rf_board_7_port2__read =
	     rg_rf_board_7_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_7_port1__read ;
  assign rg_rf_board_8_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd8 ;
  assign rg_rf_board_8_port1__read =
	     rg_rf_board_8_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_8 ;
  assign rg_rf_board_8_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd8 ;
  assign rg_rf_board_8_port2__read =
	     rg_rf_board_8_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_8_port1__read ;
  assign rg_rf_board_9_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd9 ;
  assign rg_rf_board_9_port1__read =
	     rg_rf_board_9_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_9 ;
  assign rg_rf_board_9_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd9 ;
  assign rg_rf_board_9_port2__read =
	     rg_rf_board_9_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_9_port1__read ;
  assign rg_rf_board_10_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd10 ;
  assign rg_rf_board_10_port1__read =
	     rg_rf_board_10_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_10 ;
  assign rg_rf_board_10_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd10 ;
  assign rg_rf_board_10_port2__read =
	     rg_rf_board_10_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_10_port1__read ;
  assign rg_rf_board_11_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd11 ;
  assign rg_rf_board_11_port1__read =
	     rg_rf_board_11_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_11 ;
  assign rg_rf_board_11_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd11 ;
  assign rg_rf_board_11_port2__read =
	     rg_rf_board_11_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_11_port1__read ;
  assign rg_rf_board_12_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd12 ;
  assign rg_rf_board_12_port1__read =
	     rg_rf_board_12_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_12 ;
  assign rg_rf_board_12_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd12 ;
  assign rg_rf_board_12_port2__read =
	     rg_rf_board_12_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_12_port1__read ;
  assign rg_rf_board_13_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd13 ;
  assign rg_rf_board_13_port1__read =
	     rg_rf_board_13_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_13 ;
  assign rg_rf_board_13_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd13 ;
  assign rg_rf_board_13_port2__read =
	     rg_rf_board_13_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_13_port1__read ;
  assign rg_rf_board_14_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd14 ;
  assign rg_rf_board_14_port1__read =
	     rg_rf_board_14_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_14 ;
  assign rg_rf_board_14_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd14 ;
  assign rg_rf_board_14_port2__read =
	     rg_rf_board_14_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_14_port1__read ;
  assign rg_rf_board_15_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd15 ;
  assign rg_rf_board_15_port1__read =
	     rg_rf_board_15_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_15 ;
  assign rg_rf_board_15_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd15 ;
  assign rg_rf_board_15_port2__read =
	     rg_rf_board_15_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_15_port1__read ;
  assign rg_rf_board_16_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd16 ;
  assign rg_rf_board_16_port1__read =
	     rg_rf_board_16_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_16 ;
  assign rg_rf_board_16_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd16 ;
  assign rg_rf_board_16_port2__read =
	     rg_rf_board_16_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_16_port1__read ;
  assign rg_rf_board_17_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd17 ;
  assign rg_rf_board_17_port1__read =
	     rg_rf_board_17_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_17 ;
  assign rg_rf_board_17_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd17 ;
  assign rg_rf_board_17_port2__read =
	     rg_rf_board_17_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_17_port1__read ;
  assign rg_rf_board_18_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd18 ;
  assign rg_rf_board_18_port1__read =
	     rg_rf_board_18_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_18 ;
  assign rg_rf_board_18_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd18 ;
  assign rg_rf_board_18_port2__read =
	     rg_rf_board_18_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_18_port1__read ;
  assign rg_rf_board_19_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd19 ;
  assign rg_rf_board_19_port1__read =
	     rg_rf_board_19_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_19 ;
  assign rg_rf_board_19_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd19 ;
  assign rg_rf_board_19_port2__read =
	     rg_rf_board_19_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_19_port1__read ;
  assign rg_rf_board_20_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd20 ;
  assign rg_rf_board_20_port1__read =
	     rg_rf_board_20_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_20 ;
  assign rg_rf_board_20_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd20 ;
  assign rg_rf_board_20_port2__read =
	     rg_rf_board_20_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_20_port1__read ;
  assign rg_rf_board_21_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd21 ;
  assign rg_rf_board_21_port1__read =
	     rg_rf_board_21_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_21 ;
  assign rg_rf_board_21_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd21 ;
  assign rg_rf_board_21_port2__read =
	     rg_rf_board_21_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_21_port1__read ;
  assign rg_rf_board_22_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd22 ;
  assign rg_rf_board_22_port1__read =
	     rg_rf_board_22_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_22 ;
  assign rg_rf_board_22_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd22 ;
  assign rg_rf_board_22_port2__read =
	     rg_rf_board_22_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_22_port1__read ;
  assign rg_rf_board_23_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd23 ;
  assign rg_rf_board_23_port1__read =
	     rg_rf_board_23_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_23 ;
  assign rg_rf_board_23_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd23 ;
  assign rg_rf_board_23_port2__read =
	     rg_rf_board_23_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_23_port1__read ;
  assign rg_rf_board_24_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd24 ;
  assign rg_rf_board_24_port1__read =
	     rg_rf_board_24_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_24 ;
  assign rg_rf_board_24_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd24 ;
  assign rg_rf_board_24_port2__read =
	     rg_rf_board_24_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_24_port1__read ;
  assign rg_rf_board_25_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd25 ;
  assign rg_rf_board_25_port1__read =
	     rg_rf_board_25_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_25 ;
  assign rg_rf_board_25_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd25 ;
  assign rg_rf_board_25_port2__read =
	     rg_rf_board_25_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_25_port1__read ;
  assign rg_rf_board_26_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd26 ;
  assign rg_rf_board_26_port1__read =
	     rg_rf_board_26_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_26 ;
  assign rg_rf_board_26_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd26 ;
  assign rg_rf_board_26_port2__read =
	     rg_rf_board_26_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_26_port1__read ;
  assign rg_rf_board_27_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd27 ;
  assign rg_rf_board_27_port1__read =
	     rg_rf_board_27_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_27 ;
  assign rg_rf_board_27_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd27 ;
  assign rg_rf_board_27_port2__read =
	     rg_rf_board_27_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_27_port1__read ;
  assign rg_rf_board_28_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd28 ;
  assign rg_rf_board_28_port1__read =
	     rg_rf_board_28_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_28 ;
  assign rg_rf_board_28_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd28 ;
  assign rg_rf_board_28_port2__read =
	     rg_rf_board_28_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_28_port1__read ;
  assign rg_rf_board_29_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd29 ;
  assign rg_rf_board_29_port1__read =
	     rg_rf_board_29_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_29 ;
  assign rg_rf_board_29_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd29 ;
  assign rg_rf_board_29_port2__read =
	     rg_rf_board_29_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_29_port1__read ;
  assign rg_rf_board_30_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd30 ;
  assign rg_rf_board_30_port1__read =
	     rg_rf_board_30_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_30 ;
  assign rg_rf_board_30_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd30 ;
  assign rg_rf_board_30_port2__read =
	     rg_rf_board_30_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_30_port1__read ;
  assign rg_rf_board_31_EN_port0__write =
	     EN_ma_lock_rd && ma_lock_rd_lock[4:0] == 5'd31 ;
  assign rg_rf_board_31_port1__read =
	     rg_rf_board_31_EN_port0__write ?
	       rg_rf_board_0_port0__write_1 :
	       rg_rf_board_31 ;
  assign rg_rf_board_31_EN_port1__write =
	     EN_ma_release_rd && ma_release_rd_rls[4:0] == 5'd31 ;
  assign rg_rf_board_31_port2__read =
	     rg_rf_board_31_EN_port1__write ?
	       rg_rf_board_0_port1__write_1 :
	       rg_rf_board_31_port1__read ;

  // register rg_renameid
  assign rg_renameid_D_IN = rg_renameid + 4'd1 ;
  assign rg_renameid_EN = EN_ma_lock_rd ;

  // register rg_rf_board_0
  assign rg_rf_board_0_D_IN = rg_rf_board_0 ;
  assign rg_rf_board_0_EN = 1'b1 ;

  // register rg_rf_board_1
  assign rg_rf_board_1_D_IN = rg_rf_board_1_port2__read ;
  assign rg_rf_board_1_EN = 1'b1 ;

  // register rg_rf_board_10
  assign rg_rf_board_10_D_IN = rg_rf_board_10_port2__read ;
  assign rg_rf_board_10_EN = 1'b1 ;

  // register rg_rf_board_11
  assign rg_rf_board_11_D_IN = rg_rf_board_11_port2__read ;
  assign rg_rf_board_11_EN = 1'b1 ;

  // register rg_rf_board_12
  assign rg_rf_board_12_D_IN = rg_rf_board_12_port2__read ;
  assign rg_rf_board_12_EN = 1'b1 ;

  // register rg_rf_board_13
  assign rg_rf_board_13_D_IN = rg_rf_board_13_port2__read ;
  assign rg_rf_board_13_EN = 1'b1 ;

  // register rg_rf_board_14
  assign rg_rf_board_14_D_IN = rg_rf_board_14_port2__read ;
  assign rg_rf_board_14_EN = 1'b1 ;

  // register rg_rf_board_15
  assign rg_rf_board_15_D_IN = rg_rf_board_15_port2__read ;
  assign rg_rf_board_15_EN = 1'b1 ;

  // register rg_rf_board_16
  assign rg_rf_board_16_D_IN = rg_rf_board_16_port2__read ;
  assign rg_rf_board_16_EN = 1'b1 ;

  // register rg_rf_board_17
  assign rg_rf_board_17_D_IN = rg_rf_board_17_port2__read ;
  assign rg_rf_board_17_EN = 1'b1 ;

  // register rg_rf_board_18
  assign rg_rf_board_18_D_IN = rg_rf_board_18_port2__read ;
  assign rg_rf_board_18_EN = 1'b1 ;

  // register rg_rf_board_19
  assign rg_rf_board_19_D_IN = rg_rf_board_19_port2__read ;
  assign rg_rf_board_19_EN = 1'b1 ;

  // register rg_rf_board_2
  assign rg_rf_board_2_D_IN = rg_rf_board_2_port2__read ;
  assign rg_rf_board_2_EN = 1'b1 ;

  // register rg_rf_board_20
  assign rg_rf_board_20_D_IN = rg_rf_board_20_port2__read ;
  assign rg_rf_board_20_EN = 1'b1 ;

  // register rg_rf_board_21
  assign rg_rf_board_21_D_IN = rg_rf_board_21_port2__read ;
  assign rg_rf_board_21_EN = 1'b1 ;

  // register rg_rf_board_22
  assign rg_rf_board_22_D_IN = rg_rf_board_22_port2__read ;
  assign rg_rf_board_22_EN = 1'b1 ;

  // register rg_rf_board_23
  assign rg_rf_board_23_D_IN = rg_rf_board_23_port2__read ;
  assign rg_rf_board_23_EN = 1'b1 ;

  // register rg_rf_board_24
  assign rg_rf_board_24_D_IN = rg_rf_board_24_port2__read ;
  assign rg_rf_board_24_EN = 1'b1 ;

  // register rg_rf_board_25
  assign rg_rf_board_25_D_IN = rg_rf_board_25_port2__read ;
  assign rg_rf_board_25_EN = 1'b1 ;

  // register rg_rf_board_26
  assign rg_rf_board_26_D_IN = rg_rf_board_26_port2__read ;
  assign rg_rf_board_26_EN = 1'b1 ;

  // register rg_rf_board_27
  assign rg_rf_board_27_D_IN = rg_rf_board_27_port2__read ;
  assign rg_rf_board_27_EN = 1'b1 ;

  // register rg_rf_board_28
  assign rg_rf_board_28_D_IN = rg_rf_board_28_port2__read ;
  assign rg_rf_board_28_EN = 1'b1 ;

  // register rg_rf_board_29
  assign rg_rf_board_29_D_IN = rg_rf_board_29_port2__read ;
  assign rg_rf_board_29_EN = 1'b1 ;

  // register rg_rf_board_3
  assign rg_rf_board_3_D_IN = rg_rf_board_3_port2__read ;
  assign rg_rf_board_3_EN = 1'b1 ;

  // register rg_rf_board_30
  assign rg_rf_board_30_D_IN = rg_rf_board_30_port2__read ;
  assign rg_rf_board_30_EN = 1'b1 ;

  // register rg_rf_board_31
  assign rg_rf_board_31_D_IN = rg_rf_board_31_port2__read ;
  assign rg_rf_board_31_EN = 1'b1 ;

  // register rg_rf_board_4
  assign rg_rf_board_4_D_IN = rg_rf_board_4_port2__read ;
  assign rg_rf_board_4_EN = 1'b1 ;

  // register rg_rf_board_5
  assign rg_rf_board_5_D_IN = rg_rf_board_5_port2__read ;
  assign rg_rf_board_5_EN = 1'b1 ;

  // register rg_rf_board_6
  assign rg_rf_board_6_D_IN = rg_rf_board_6_port2__read ;
  assign rg_rf_board_6_EN = 1'b1 ;

  // register rg_rf_board_7
  assign rg_rf_board_7_D_IN = rg_rf_board_7_port2__read ;
  assign rg_rf_board_7_EN = 1'b1 ;

  // register rg_rf_board_8
  assign rg_rf_board_8_D_IN = rg_rf_board_8_port2__read ;
  assign rg_rf_board_8_EN = 1'b1 ;

  // register rg_rf_board_9
  assign rg_rf_board_9_D_IN = rg_rf_board_9_port2__read ;
  assign rg_rf_board_9_EN = 1'b1 ;

  // remaining internal signals
  always@(ma_release_rd_rls or
	  rg_rf_board_0 or
	  rg_rf_board_1_port1__read or
	  rg_rf_board_2_port1__read or
	  rg_rf_board_3_port1__read or
	  rg_rf_board_4_port1__read or
	  rg_rf_board_5_port1__read or
	  rg_rf_board_6_port1__read or
	  rg_rf_board_7_port1__read or
	  rg_rf_board_8_port1__read or
	  rg_rf_board_9_port1__read or
	  rg_rf_board_10_port1__read or
	  rg_rf_board_11_port1__read or
	  rg_rf_board_12_port1__read or
	  rg_rf_board_13_port1__read or
	  rg_rf_board_14_port1__read or
	  rg_rf_board_15_port1__read or
	  rg_rf_board_16_port1__read or
	  rg_rf_board_17_port1__read or
	  rg_rf_board_18_port1__read or
	  rg_rf_board_19_port1__read or
	  rg_rf_board_20_port1__read or
	  rg_rf_board_21_port1__read or
	  rg_rf_board_22_port1__read or
	  rg_rf_board_23_port1__read or
	  rg_rf_board_24_port1__read or
	  rg_rf_board_25_port1__read or
	  rg_rf_board_26_port1__read or
	  rg_rf_board_27_port1__read or
	  rg_rf_board_28_port1__read or
	  rg_rf_board_29_port1__read or
	  rg_rf_board_30_port1__read or rg_rf_board_31_port1__read)
  begin
    case (ma_release_rd_rls[4:0])
      5'd0:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_0[4:1];
      5'd1:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_1_port1__read[4:1];
      5'd2:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_2_port1__read[4:1];
      5'd3:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_3_port1__read[4:1];
      5'd4:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_4_port1__read[4:1];
      5'd5:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_5_port1__read[4:1];
      5'd6:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_6_port1__read[4:1];
      5'd7:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_7_port1__read[4:1];
      5'd8:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_8_port1__read[4:1];
      5'd9:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_9_port1__read[4:1];
      5'd10:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_10_port1__read[4:1];
      5'd11:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_11_port1__read[4:1];
      5'd12:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_12_port1__read[4:1];
      5'd13:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_13_port1__read[4:1];
      5'd14:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_14_port1__read[4:1];
      5'd15:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_15_port1__read[4:1];
      5'd16:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_16_port1__read[4:1];
      5'd17:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_17_port1__read[4:1];
      5'd18:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_18_port1__read[4:1];
      5'd19:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_19_port1__read[4:1];
      5'd20:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_20_port1__read[4:1];
      5'd21:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_21_port1__read[4:1];
      5'd22:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_22_port1__read[4:1];
      5'd23:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_23_port1__read[4:1];
      5'd24:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_24_port1__read[4:1];
      5'd25:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_25_port1__read[4:1];
      5'd26:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_26_port1__read[4:1];
      5'd27:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_27_port1__read[4:1];
      5'd28:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_28_port1__read[4:1];
      5'd29:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_29_port1__read[4:1];
      5'd30:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_30_port1__read[4:1];
      5'd31:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 =
	      rg_rf_board_31_port1__read[4:1];
    endcase
  end
  always@(ma_release_rd_rls or
	  rg_rf_board_0 or
	  rg_rf_board_1_port1__read or
	  rg_rf_board_2_port1__read or
	  rg_rf_board_3_port1__read or
	  rg_rf_board_4_port1__read or
	  rg_rf_board_5_port1__read or
	  rg_rf_board_6_port1__read or
	  rg_rf_board_7_port1__read or
	  rg_rf_board_8_port1__read or
	  rg_rf_board_9_port1__read or
	  rg_rf_board_10_port1__read or
	  rg_rf_board_11_port1__read or
	  rg_rf_board_12_port1__read or
	  rg_rf_board_13_port1__read or
	  rg_rf_board_14_port1__read or
	  rg_rf_board_15_port1__read or
	  rg_rf_board_16_port1__read or
	  rg_rf_board_17_port1__read or
	  rg_rf_board_18_port1__read or
	  rg_rf_board_19_port1__read or
	  rg_rf_board_20_port1__read or
	  rg_rf_board_21_port1__read or
	  rg_rf_board_22_port1__read or
	  rg_rf_board_23_port1__read or
	  rg_rf_board_24_port1__read or
	  rg_rf_board_25_port1__read or
	  rg_rf_board_26_port1__read or
	  rg_rf_board_27_port1__read or
	  rg_rf_board_28_port1__read or
	  rg_rf_board_29_port1__read or
	  rg_rf_board_30_port1__read or rg_rf_board_31_port1__read)
  begin
    case (ma_release_rd_rls[4:0])
      5'd0:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_0[0];
      5'd1:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_1_port1__read[0];
      5'd2:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_2_port1__read[0];
      5'd3:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_3_port1__read[0];
      5'd4:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_4_port1__read[0];
      5'd5:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_5_port1__read[0];
      5'd6:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_6_port1__read[0];
      5'd7:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_7_port1__read[0];
      5'd8:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_8_port1__read[0];
      5'd9:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_9_port1__read[0];
      5'd10:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_10_port1__read[0];
      5'd11:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_11_port1__read[0];
      5'd12:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_12_port1__read[0];
      5'd13:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_13_port1__read[0];
      5'd14:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_14_port1__read[0];
      5'd15:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_15_port1__read[0];
      5'd16:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_16_port1__read[0];
      5'd17:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_17_port1__read[0];
      5'd18:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_18_port1__read[0];
      5'd19:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_19_port1__read[0];
      5'd20:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_20_port1__read[0];
      5'd21:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_21_port1__read[0];
      5'd22:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_22_port1__read[0];
      5'd23:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_23_port1__read[0];
      5'd24:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_24_port1__read[0];
      5'd25:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_25_port1__read[0];
      5'd26:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_26_port1__read[0];
      5'd27:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_27_port1__read[0];
      5'd28:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_28_port1__read[0];
      5'd29:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_29_port1__read[0];
      5'd30:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_30_port1__read[0];
      5'd31:
	  SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145 =
	      rg_rf_board_31_port1__read[0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_renameid <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_rf_board_0 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_1 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_10 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_11 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_12 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_13 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_14 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_15 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_16 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_17 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_18 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_19 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_2 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_20 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_21 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_22 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_23 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_24 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_25 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_26 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_27 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_28 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_29 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_3 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_30 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_31 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_4 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_5 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_6 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_7 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_8 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_rf_board_9 <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (rg_renameid_EN)
	  rg_renameid <= `BSV_ASSIGNMENT_DELAY rg_renameid_D_IN;
	if (rg_rf_board_0_EN)
	  rg_rf_board_0 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_0_D_IN;
	if (rg_rf_board_1_EN)
	  rg_rf_board_1 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_1_D_IN;
	if (rg_rf_board_10_EN)
	  rg_rf_board_10 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_10_D_IN;
	if (rg_rf_board_11_EN)
	  rg_rf_board_11 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_11_D_IN;
	if (rg_rf_board_12_EN)
	  rg_rf_board_12 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_12_D_IN;
	if (rg_rf_board_13_EN)
	  rg_rf_board_13 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_13_D_IN;
	if (rg_rf_board_14_EN)
	  rg_rf_board_14 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_14_D_IN;
	if (rg_rf_board_15_EN)
	  rg_rf_board_15 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_15_D_IN;
	if (rg_rf_board_16_EN)
	  rg_rf_board_16 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_16_D_IN;
	if (rg_rf_board_17_EN)
	  rg_rf_board_17 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_17_D_IN;
	if (rg_rf_board_18_EN)
	  rg_rf_board_18 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_18_D_IN;
	if (rg_rf_board_19_EN)
	  rg_rf_board_19 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_19_D_IN;
	if (rg_rf_board_2_EN)
	  rg_rf_board_2 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_2_D_IN;
	if (rg_rf_board_20_EN)
	  rg_rf_board_20 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_20_D_IN;
	if (rg_rf_board_21_EN)
	  rg_rf_board_21 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_21_D_IN;
	if (rg_rf_board_22_EN)
	  rg_rf_board_22 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_22_D_IN;
	if (rg_rf_board_23_EN)
	  rg_rf_board_23 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_23_D_IN;
	if (rg_rf_board_24_EN)
	  rg_rf_board_24 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_24_D_IN;
	if (rg_rf_board_25_EN)
	  rg_rf_board_25 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_25_D_IN;
	if (rg_rf_board_26_EN)
	  rg_rf_board_26 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_26_D_IN;
	if (rg_rf_board_27_EN)
	  rg_rf_board_27 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_27_D_IN;
	if (rg_rf_board_28_EN)
	  rg_rf_board_28 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_28_D_IN;
	if (rg_rf_board_29_EN)
	  rg_rf_board_29 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_29_D_IN;
	if (rg_rf_board_3_EN)
	  rg_rf_board_3 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_3_D_IN;
	if (rg_rf_board_30_EN)
	  rg_rf_board_30 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_30_D_IN;
	if (rg_rf_board_31_EN)
	  rg_rf_board_31 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_31_D_IN;
	if (rg_rf_board_4_EN)
	  rg_rf_board_4 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_4_D_IN;
	if (rg_rf_board_5_EN)
	  rg_rf_board_5 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_5_D_IN;
	if (rg_rf_board_6_EN)
	  rg_rf_board_6 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_6_D_IN;
	if (rg_rf_board_7_EN)
	  rg_rf_board_7 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_7_D_IN;
	if (rg_rf_board_8_EN)
	  rg_rf_board_8 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_8_D_IN;
	if (rg_rf_board_9_EN)
	  rg_rf_board_9 <= `BSV_ASSIGNMENT_DELAY rg_rf_board_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_renameid = 4'hA;
    rg_rf_board_0 = 5'h0A;
    rg_rf_board_1 = 5'h0A;
    rg_rf_board_10 = 5'h0A;
    rg_rf_board_11 = 5'h0A;
    rg_rf_board_12 = 5'h0A;
    rg_rf_board_13 = 5'h0A;
    rg_rf_board_14 = 5'h0A;
    rg_rf_board_15 = 5'h0A;
    rg_rf_board_16 = 5'h0A;
    rg_rf_board_17 = 5'h0A;
    rg_rf_board_18 = 5'h0A;
    rg_rf_board_19 = 5'h0A;
    rg_rf_board_2 = 5'h0A;
    rg_rf_board_20 = 5'h0A;
    rg_rf_board_21 = 5'h0A;
    rg_rf_board_22 = 5'h0A;
    rg_rf_board_23 = 5'h0A;
    rg_rf_board_24 = 5'h0A;
    rg_rf_board_25 = 5'h0A;
    rg_rf_board_26 = 5'h0A;
    rg_rf_board_27 = 5'h0A;
    rg_rf_board_28 = 5'h0A;
    rg_rf_board_29 = 5'h0A;
    rg_rf_board_3 = 5'h0A;
    rg_rf_board_30 = 5'h0A;
    rg_rf_board_31 = 5'h0A;
    rg_rf_board_4 = 5'h0A;
    rg_rf_board_5 = 5'h0A;
    rg_rf_board_6 = 5'h0A;
    rg_rf_board_7 = 5'h0A;
    rg_rf_board_8 = 5'h0A;
    rg_rf_board_9 = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_lock_rd)
	begin
	  TASK_testplusargs___d1 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_lock_rd)
	begin
	  TASK_testplusargs___d2 = $test$plusargs("msboard");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_lock_rd)
	begin
	  TASK_testplusargs___d3 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_lock_rd)
	begin
	  v__h5936 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_lock_rd &&
	  (TASK_testplusargs___d1 ||
	   TASK_testplusargs___d2 && TASK_testplusargs___d3))
	$write("[%10d", v__h5936, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_lock_rd &&
	  (TASK_testplusargs___d1 ||
	   TASK_testplusargs___d2 && TASK_testplusargs___d3))
	$write("[%2d]SBoard Lock for : ",
	       hartid,
	       "X[%d]",
	       ma_lock_rd_lock[4:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_lock_rd &&
	  (TASK_testplusargs___d1 ||
	   TASK_testplusargs___d2 && TASK_testplusargs___d3))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd)
	begin
	  TASK_testplusargs___d179 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd)
	begin
	  TASK_testplusargs___d180 = $test$plusargs("msboard");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd)
	begin
	  TASK_testplusargs___d181 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd)
	begin
	  v__h8356 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d179 ||
	   TASK_testplusargs___d180 && TASK_testplusargs___d181))
	$write("[%10d", v__h8356, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d179 ||
	   TASK_testplusargs___d180 && TASK_testplusargs___d181))
	$write("[%2d]SBoard release for : ",
	       hartid,
	       "X[%d]",
	       ma_release_rd_rls[4:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d179 ||
	   TASK_testplusargs___d180 && TASK_testplusargs___d181))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd)
	begin
	  TASK_testplusargs___d185 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd)
	begin
	  TASK_testplusargs___d186 = $test$plusargs("msboard");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd)
	begin
	  TASK_testplusargs___d187 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd)
	begin
	  v__h8493 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d185 ||
	   TASK_testplusargs___d186 && TASK_testplusargs___d187))
	$write("[%10d", v__h8493, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d185 ||
	   TASK_testplusargs___d186 && TASK_testplusargs___d187))
	$write("[%2d]SBoard release entry : ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d185 ||
	   TASK_testplusargs___d186 && TASK_testplusargs___d187))
	$write("SBEntry { ", "id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d185 ||
	   TASK_testplusargs___d186 && TASK_testplusargs___d187))
	$write("'h%h",
	       SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d185 ||
	   TASK_testplusargs___d186 && TASK_testplusargs___d187))
	$write(", ", "lock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d185 ||
	   TASK_testplusargs___d186 && TASK_testplusargs___d187))
	$write("'h%h",
	       ma_release_rd_rls[8:5] !=
	       SEL_ARR_rg_rf_board_0_port1__read__2_BITS_4_TO_ETC___d108 &&
	       SEL_ARR_rg_rf_board_0_port1__read__2_BIT_0_12__ETC___d145,
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release_rd &&
	  (TASK_testplusargs___d185 ||
	   TASK_testplusargs___d186 && TASK_testplusargs___d187))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkscoreboard


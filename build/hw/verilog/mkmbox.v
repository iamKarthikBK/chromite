//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:35:24 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_inputs                  O     1 const
// mv_ready                       O     2
// RDY_mv_ready                   O     1 const
// tx_output_enq_ena              O     1
// tx_output_enq_data             O    64
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_inputs_inputs               I   132
// tx_output_notFull_b            I     1
// tx_output_enq_rdy_b            I     1
// EN_ma_inputs                   I     1
//
// Combinational paths from inputs to outputs:
//   tx_output_enq_rdy_b -> mv_ready
//   tx_output_enq_rdy_b -> tx_output_enq_ena
//   tx_output_enq_rdy_b -> tx_output_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkmbox(CLK,
	      RST_N,

	      ma_inputs_inputs,
	      EN_ma_inputs,
	      RDY_ma_inputs,

	      mv_ready,
	      RDY_mv_ready,

	      tx_output_notFull_b,

	      tx_output_enq_rdy_b,

	      tx_output_enq_ena,

	      tx_output_enq_data);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // action method ma_inputs
  input  [131 : 0] ma_inputs_inputs;
  input  EN_ma_inputs;
  output RDY_ma_inputs;

  // value method mv_ready
  output [1 : 0] mv_ready;
  output RDY_mv_ready;

  // action method tx_output_notFull
  input  tx_output_notFull_b;

  // action method tx_output_enq_rdy
  input  tx_output_enq_rdy_b;

  // value method tx_output_enq_ena
  output tx_output_enq_ena;

  // value method tx_output_enq_data
  output [63 : 0] tx_output_enq_data;

  // signals for module outputs
  wire [63 : 0] tx_output_enq_data;
  wire [1 : 0] mv_ready;
  wire RDY_ma_inputs, RDY_mv_ready, tx_output_enq_ena;

  // inlined wires
  wire tx_mbox_out_w_ena_whas;

  // ports of submodule div_
  wire [63 : 0] div__ma_inputs_in1, div__ma_inputs_in2, div__mv_output;
  wire [2 : 0] div__ma_inputs_funct3;
  wire div__EN_ma_inputs,
       div__EN_mv_output,
       div__ma_inputs_wordop,
       div__mv_output_valid,
       div__mv_ready;

  // ports of submodule ff_ordering
  wire ff_ordering_CLR,
       ff_ordering_DEQ,
       ff_ordering_D_IN,
       ff_ordering_D_OUT,
       ff_ordering_EMPTY_N,
       ff_ordering_ENQ,
       ff_ordering_FULL_N;

  // ports of submodule mul_
  wire [63 : 0] mul__ma_inputs_in1, mul__ma_inputs_in2, mul__mv_output;
  wire [2 : 0] mul__ma_inputs_funct3;
  wire mul__EN_ma_inputs,
       mul__EN_mv_output,
       mul__ma_inputs_wordop,
       mul__mv_output_valid,
       mul__mv_ready;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_capture_output,
       CAN_FIRE_RL_rl_fifo_full,
       CAN_FIRE_ma_inputs,
       CAN_FIRE_tx_output_enq_rdy,
       CAN_FIRE_tx_output_notFull,
       WILL_FIRE_RL_rl_capture_output,
       WILL_FIRE_RL_rl_fifo_full,
       WILL_FIRE_ma_inputs,
       WILL_FIRE_tx_output_enq_rdy,
       WILL_FIRE_tx_output_notFull;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d3;
  reg TASK_testplusargs___d4;
  reg TASK_testplusargs___d5;
  reg [63 : 0] v__h632;
  reg TASK_testplusargs___d22;
  reg TASK_testplusargs___d23;
  reg TASK_testplusargs___d24;
  reg [63 : 0] v__h1062;
  reg TASK_testplusargs___d32;
  reg TASK_testplusargs___d33;
  reg TASK_testplusargs___d34;
  reg [63 : 0] v__h1135;
  reg TASK_testplusargs___d40;
  reg TASK_testplusargs___d41;
  reg TASK_testplusargs___d42;
  reg [63 : 0] v__h1283;
  reg TASK_testplusargs___d50;
  reg TASK_testplusargs___d51;
  reg TASK_testplusargs___d52;
  reg [63 : 0] v__h1356;
  reg TASK_testplusargs___d62;
  reg TASK_testplusargs___d63;
  reg TASK_testplusargs___d64;
  reg [63 : 0] v__h1646;
  reg TASK_testplusargs___d73;
  reg TASK_testplusargs___d74;
  reg TASK_testplusargs___d75;
  reg [63 : 0] v__h1903;
  reg mul__mv_output_valid_AND_TASK_testplusargs_2_O_ETC___d27;
  reg NOT_mul__mv_output_valid_0_AND_TASK_testplusar_ETC___d37;
  reg div__mv_output_valid__0_AND_TASK_testplusargs__ETC___d45;
  reg NOT_div__mv_output_valid__0_8_AND_TASK_testplu_ETC___d55;
  reg NOT_ma_inputs_inputs_BIT_2_0_1_AND_TASK_testpl_ETC___d67;
  reg ma_inputs_inputs_BIT_2_0_AND_TASK_testplusargs_ETC___d78;
  // synopsys translate_on

  // action method ma_inputs
  assign RDY_ma_inputs = 1'd1 ;
  assign CAN_FIRE_ma_inputs = 1'd1 ;
  assign WILL_FIRE_ma_inputs = EN_ma_inputs ;

  // value method mv_ready
  assign mv_ready =
	     { mul__mv_ready && ff_ordering_FULL_N,
	       div__mv_ready && ff_ordering_FULL_N } ;
  assign RDY_mv_ready = 1'd1 ;

  // action method tx_output_notFull
  assign CAN_FIRE_tx_output_notFull = 1'd1 ;
  assign WILL_FIRE_tx_output_notFull = 1'd1 ;

  // action method tx_output_enq_rdy
  assign CAN_FIRE_tx_output_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_output_enq_rdy = 1'd1 ;

  // value method tx_output_enq_ena
  assign tx_output_enq_ena = tx_mbox_out_w_ena_whas ;

  // value method tx_output_enq_data
  assign tx_output_enq_data =
	     ff_ordering_D_OUT ? mul__mv_output : div__mv_output ;

  // submodule div_
  mkrestoring_div #(.hartid(hartid)) div_(.CLK(CLK),
					  .RST_N(RST_N),
					  .ma_inputs_funct3(div__ma_inputs_funct3),
					  .ma_inputs_in1(div__ma_inputs_in1),
					  .ma_inputs_in2(div__ma_inputs_in2),
					  .ma_inputs_wordop(div__ma_inputs_wordop),
					  .EN_ma_inputs(div__EN_ma_inputs),
					  .EN_mv_output(div__EN_mv_output),
					  .RDY_ma_inputs(),
					  .mv_ready(div__mv_ready),
					  .RDY_mv_ready(),
					  .mv_output_valid(div__mv_output_valid),
					  .RDY_mv_output_valid(),
					  .mv_output(div__mv_output),
					  .RDY_mv_output());

  // submodule ff_ordering
  FIFO2 #(.width(32'd1), .guarded(1'd0)) ff_ordering(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ff_ordering_D_IN),
						     .ENQ(ff_ordering_ENQ),
						     .DEQ(ff_ordering_DEQ),
						     .CLR(ff_ordering_CLR),
						     .D_OUT(ff_ordering_D_OUT),
						     .FULL_N(ff_ordering_FULL_N),
						     .EMPTY_N(ff_ordering_EMPTY_N));

  // submodule mul_
  mkcombo_mul mul_(.CLK(CLK),
		   .RST_N(RST_N),
		   .ma_inputs_funct3(mul__ma_inputs_funct3),
		   .ma_inputs_in1(mul__ma_inputs_in1),
		   .ma_inputs_in2(mul__ma_inputs_in2),
		   .ma_inputs_wordop(mul__ma_inputs_wordop),
		   .EN_ma_inputs(mul__EN_ma_inputs),
		   .EN_mv_output(mul__EN_mv_output),
		   .RDY_ma_inputs(),
		   .mv_ready(mul__mv_ready),
		   .RDY_mv_ready(),
		   .mv_output_valid(mul__mv_output_valid),
		   .RDY_mv_output_valid(),
		   .mv_output(mul__mv_output),
		   .RDY_mv_output());

  // rule RL_rl_fifo_full
  assign CAN_FIRE_RL_rl_fifo_full = !tx_output_notFull_b ;
  assign WILL_FIRE_RL_rl_fifo_full = CAN_FIRE_RL_rl_fifo_full ;

  // rule RL_rl_capture_output
  assign CAN_FIRE_RL_rl_capture_output =
	     tx_output_enq_rdy_b && ff_ordering_EMPTY_N ;
  assign WILL_FIRE_RL_rl_capture_output = CAN_FIRE_RL_rl_capture_output ;

  // inlined wires
  assign tx_mbox_out_w_ena_whas =
	     WILL_FIRE_RL_rl_capture_output &&
	     (ff_ordering_D_OUT && mul__mv_output_valid ||
	      !ff_ordering_D_OUT && div__mv_output_valid) ;

  // submodule div_
  assign div__ma_inputs_funct3 = ma_inputs_inputs[2:0] ;
  assign div__ma_inputs_in1 = ma_inputs_inputs[130:67] ;
  assign div__ma_inputs_in2 = ma_inputs_inputs[66:3] ;
  assign div__ma_inputs_wordop = ma_inputs_inputs[131] ;
  assign div__EN_ma_inputs = EN_ma_inputs && ma_inputs_inputs[2] ;
  assign div__EN_mv_output =
	     WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	     div__mv_output_valid ;

  // submodule ff_ordering
  assign ff_ordering_D_IN = !ma_inputs_inputs[2] ;
  assign ff_ordering_ENQ = EN_ma_inputs ;
  assign ff_ordering_DEQ = tx_mbox_out_w_ena_whas ;
  assign ff_ordering_CLR = 1'b0 ;

  // submodule mul_
  assign mul__ma_inputs_funct3 = ma_inputs_inputs[2:0] ;
  assign mul__ma_inputs_in1 = ma_inputs_inputs[130:67] ;
  assign mul__ma_inputs_in2 = ma_inputs_inputs[66:3] ;
  assign mul__ma_inputs_wordop = ma_inputs_inputs[131] ;
  assign mul__EN_ma_inputs = EN_ma_inputs && !ma_inputs_inputs[2] ;
  assign mul__EN_mv_output =
	     WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	     mul__mv_output_valid ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full)
	begin
	  TASK_testplusargs___d3 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full)
	begin
	  TASK_testplusargs___d4 = $test$plusargs("mmbox");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full)
	begin
	  TASK_testplusargs___d5 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full)
	begin
	  v__h632 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full &&
	  (TASK_testplusargs___d3 ||
	   TASK_testplusargs___d4 && TASK_testplusargs___d5))
	$write("[%10d", v__h632, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full &&
	  (TASK_testplusargs___d3 ||
	   TASK_testplusargs___d4 && TASK_testplusargs___d5))
	$write("[%2d]MBOX: Buffer is FULL", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full &&
	  (TASK_testplusargs___d3 ||
	   TASK_testplusargs___d4 && TASK_testplusargs___d5))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full && mul__mv_output_valid)
	$display("Dynamic assertion failed: \"src/mbox/mbox.bsv\", line 48, column 42\nMUL provided result when O/P FIFO is full");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full && mul__mv_output_valid) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full && div__mv_output_valid)
	$display("Dynamic assertion failed: \"src/mbox/mbox.bsv\", line 49, column 42\nDIV provided result when O/P FIFO is full");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fifo_full && div__mv_output_valid) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  mul__mv_output_valid)
	begin
	  TASK_testplusargs___d22 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  mul__mv_output_valid)
	begin
	  TASK_testplusargs___d23 = $test$plusargs("mmbox");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  mul__mv_output_valid)
	begin
	  TASK_testplusargs___d24 = $test$plusargs("l0");
	  #0;
	end
    mul__mv_output_valid_AND_TASK_testplusargs_2_O_ETC___d27 =
	mul__mv_output_valid &&
	(TASK_testplusargs___d22 ||
	 TASK_testplusargs___d23 && TASK_testplusargs___d24);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  mul__mv_output_valid)
	begin
	  v__h1062 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  mul__mv_output_valid_AND_TASK_testplusargs_2_O_ETC___d27)
	$write("[%10d", v__h1062, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  mul__mv_output_valid_AND_TASK_testplusargs_2_O_ETC___d27)
	$write("MBOX: Collecting MUL o/p");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  mul__mv_output_valid_AND_TASK_testplusargs_2_O_ETC___d27)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  !mul__mv_output_valid)
	begin
	  TASK_testplusargs___d32 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  !mul__mv_output_valid)
	begin
	  TASK_testplusargs___d33 = $test$plusargs("mmbox");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  !mul__mv_output_valid)
	begin
	  TASK_testplusargs___d34 = $test$plusargs("l0");
	  #0;
	end
    NOT_mul__mv_output_valid_0_AND_TASK_testplusar_ETC___d37 =
	!mul__mv_output_valid &&
	(TASK_testplusargs___d32 ||
	 TASK_testplusargs___d33 && TASK_testplusargs___d34);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  !mul__mv_output_valid)
	begin
	  v__h1135 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  NOT_mul__mv_output_valid_0_AND_TASK_testplusar_ETC___d37)
	$write("[%10d", v__h1135, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  NOT_mul__mv_output_valid_0_AND_TASK_testplusar_ETC___d37)
	$write("MBOX: Waiting for Mul o/p");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && ff_ordering_D_OUT &&
	  NOT_mul__mv_output_valid_0_AND_TASK_testplusar_ETC___d37)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  div__mv_output_valid)
	begin
	  TASK_testplusargs___d40 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  div__mv_output_valid)
	begin
	  TASK_testplusargs___d41 = $test$plusargs("mmbox");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  div__mv_output_valid)
	begin
	  TASK_testplusargs___d42 = $test$plusargs("l0");
	  #0;
	end
    div__mv_output_valid__0_AND_TASK_testplusargs__ETC___d45 =
	div__mv_output_valid &&
	(TASK_testplusargs___d40 ||
	 TASK_testplusargs___d41 && TASK_testplusargs___d42);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  div__mv_output_valid)
	begin
	  v__h1283 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  div__mv_output_valid__0_AND_TASK_testplusargs__ETC___d45)
	$write("[%10d", v__h1283, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  div__mv_output_valid__0_AND_TASK_testplusargs__ETC___d45)
	$write("MBOX: Collecting DIV o/p");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  div__mv_output_valid__0_AND_TASK_testplusargs__ETC___d45)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  !div__mv_output_valid)
	begin
	  TASK_testplusargs___d50 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  !div__mv_output_valid)
	begin
	  TASK_testplusargs___d51 = $test$plusargs("mmbox");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  !div__mv_output_valid)
	begin
	  TASK_testplusargs___d52 = $test$plusargs("l0");
	  #0;
	end
    NOT_div__mv_output_valid__0_8_AND_TASK_testplu_ETC___d55 =
	!div__mv_output_valid &&
	(TASK_testplusargs___d50 ||
	 TASK_testplusargs___d51 && TASK_testplusargs___d52);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  !div__mv_output_valid)
	begin
	  v__h1356 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  NOT_div__mv_output_valid__0_8_AND_TASK_testplu_ETC___d55)
	$write("[%10d", v__h1356, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  NOT_div__mv_output_valid__0_8_AND_TASK_testplu_ETC___d55)
	$write("MBOX: Waiting for Div o/p");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_output && !ff_ordering_D_OUT &&
	  NOT_div__mv_output_valid__0_8_AND_TASK_testplu_ETC___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && !ff_ordering_FULL_N)
	$display("Dynamic assertion failed: \"src/mbox/mbox.bsv\", line 78, column 42\nEnquing MBOX inputs to full fifo");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && !ff_ordering_FULL_N) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && !ma_inputs_inputs[2])
	begin
	  TASK_testplusargs___d62 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && !ma_inputs_inputs[2])
	begin
	  TASK_testplusargs___d63 = $test$plusargs("mmbox");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && !ma_inputs_inputs[2])
	begin
	  TASK_testplusargs___d64 = $test$plusargs("l0");
	  #0;
	end
    NOT_ma_inputs_inputs_BIT_2_0_1_AND_TASK_testpl_ETC___d67 =
	!ma_inputs_inputs[2] &&
	(TASK_testplusargs___d62 ||
	 TASK_testplusargs___d63 && TASK_testplusargs___d64);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && !ma_inputs_inputs[2])
	begin
	  v__h1646 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs &&
	  NOT_ma_inputs_inputs_BIT_2_0_1_AND_TASK_testpl_ETC___d67)
	$write("[%10d", v__h1646, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs &&
	  NOT_ma_inputs_inputs_BIT_2_0_1_AND_TASK_testpl_ETC___d67)
	$write("MBOX: To MUL. Op1:%h Op2:%h ",
	       ma_inputs_inputs[130:67],
	       ma_inputs_inputs[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs &&
	  NOT_ma_inputs_inputs_BIT_2_0_1_AND_TASK_testpl_ETC___d67)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && ma_inputs_inputs[2])
	begin
	  TASK_testplusargs___d73 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && ma_inputs_inputs[2])
	begin
	  TASK_testplusargs___d74 = $test$plusargs("mmbox");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && ma_inputs_inputs[2])
	begin
	  TASK_testplusargs___d75 = $test$plusargs("l0");
	  #0;
	end
    ma_inputs_inputs_BIT_2_0_AND_TASK_testplusargs_ETC___d78 =
	ma_inputs_inputs[2] &&
	(TASK_testplusargs___d73 ||
	 TASK_testplusargs___d74 && TASK_testplusargs___d75);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs && ma_inputs_inputs[2])
	begin
	  v__h1903 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs &&
	  ma_inputs_inputs_BIT_2_0_AND_TASK_testplusargs_ETC___d78)
	$write("[%10d", v__h1903, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs &&
	  ma_inputs_inputs_BIT_2_0_AND_TASK_testplusargs_ETC___d78)
	$write("MBOX: To DIV. Op1:%h Op2:%h sign:%b",
	       ma_inputs_inputs[130:67],
	       ma_inputs_inputs[66:3],
	       ma_inputs_inputs[130]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_inputs &&
	  ma_inputs_inputs_BIT_2_0_AND_TASK_testplusargs_ETC___d78)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkmbox


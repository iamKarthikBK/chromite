//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:35:34 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_allocate_line           O     1
// RDY_ma_allocate_store          O     1
// mav_core_lookup                O    67
// RDY_mav_core_lookup            O     1 const
// mv_sb_empty                    O     1
// RDY_mv_sb_empty                O     1 const
// mv_sb_full                     O     1
// RDY_mv_sb_full                 O     1 const
// mv_line_empty                  O     1
// RDY_mv_line_empty              O     1 const
// mv_line_full                   O     1
// RDY_mv_line_full               O     1 const
// mv_sb_busy                     O     1 reg
// RDY_mv_sb_busy                 O     1 const
// RDY_ma_commit_store            O     1 const
// mv_lb_tail                     O     2 reg
// RDY_mv_lb_tail                 O     1 const
// mv_lb_head                     O     2 reg
// RDY_mv_lb_head                 O     1 const
// mv_sb_tail                     O     1 reg
// RDY_mv_sb_tail                 O     1 const
// mv_release_head                O   545
// RDY_mv_release_head            O     1 const
// RDY_ma_release                 O     1 const
// RDY_ma_perform_atomic          O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_allocate_line_address       I    32 reg
// ma_allocate_line_line          I   512
// ma_allocate_store_address      I    32
// ma_allocate_store_data         I    64
// ma_allocate_store_epochs       I     1
// ma_allocate_store_size         I     2
// ma_allocate_store_lbindex      I     2
// mav_core_lookup_address        I    32
// ma_commit_store_c              I     2
// ma_perform_atomic_atomic_op    I     5 reg
// ma_perform_atomic_rdata        I    64 reg
// ma_perform_atomic_wdata        I    64 reg
// ma_perform_atomic_sbindex      I     1 reg
// EN_ma_allocate_line            I     1
// EN_ma_allocate_store           I     1
// EN_ma_commit_store             I     1
// EN_ma_release                  I     1
// EN_ma_perform_atomic           I     1
// EN_mav_core_lookup             I     1 unused
//
// Combinational paths from inputs to outputs:
//   (ma_allocate_store_lbindex, EN_ma_allocate_store) -> mv_release_head
//   mav_core_lookup_address -> mav_core_lookup
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstorebuffer(CLK,
		     RST_N,

		     ma_allocate_line_address,
		     ma_allocate_line_line,
		     EN_ma_allocate_line,
		     RDY_ma_allocate_line,

		     ma_allocate_store_address,
		     ma_allocate_store_data,
		     ma_allocate_store_epochs,
		     ma_allocate_store_size,
		     ma_allocate_store_lbindex,
		     EN_ma_allocate_store,
		     RDY_ma_allocate_store,

		     mav_core_lookup_address,
		     EN_mav_core_lookup,
		     mav_core_lookup,
		     RDY_mav_core_lookup,

		     mv_sb_empty,
		     RDY_mv_sb_empty,

		     mv_sb_full,
		     RDY_mv_sb_full,

		     mv_line_empty,
		     RDY_mv_line_empty,

		     mv_line_full,
		     RDY_mv_line_full,

		     mv_sb_busy,
		     RDY_mv_sb_busy,

		     ma_commit_store_c,
		     EN_ma_commit_store,
		     RDY_ma_commit_store,

		     mv_lb_tail,
		     RDY_mv_lb_tail,

		     mv_lb_head,
		     RDY_mv_lb_head,

		     mv_sb_tail,
		     RDY_mv_sb_tail,

		     mv_release_head,
		     RDY_mv_release_head,

		     EN_ma_release,
		     RDY_ma_release,

		     ma_perform_atomic_atomic_op,
		     ma_perform_atomic_rdata,
		     ma_perform_atomic_wdata,
		     ma_perform_atomic_sbindex,
		     EN_ma_perform_atomic,
		     RDY_ma_perform_atomic);
  parameter [31 : 0] id = 32'b0;
  input  CLK;
  input  RST_N;

  // action method ma_allocate_line
  input  [31 : 0] ma_allocate_line_address;
  input  [511 : 0] ma_allocate_line_line;
  input  EN_ma_allocate_line;
  output RDY_ma_allocate_line;

  // action method ma_allocate_store
  input  [31 : 0] ma_allocate_store_address;
  input  [63 : 0] ma_allocate_store_data;
  input  ma_allocate_store_epochs;
  input  [1 : 0] ma_allocate_store_size;
  input  [1 : 0] ma_allocate_store_lbindex;
  input  EN_ma_allocate_store;
  output RDY_ma_allocate_store;

  // actionvalue method mav_core_lookup
  input  [31 : 0] mav_core_lookup_address;
  input  EN_mav_core_lookup;
  output [66 : 0] mav_core_lookup;
  output RDY_mav_core_lookup;

  // value method mv_sb_empty
  output mv_sb_empty;
  output RDY_mv_sb_empty;

  // value method mv_sb_full
  output mv_sb_full;
  output RDY_mv_sb_full;

  // value method mv_line_empty
  output mv_line_empty;
  output RDY_mv_line_empty;

  // value method mv_line_full
  output mv_line_full;
  output RDY_mv_line_full;

  // value method mv_sb_busy
  output mv_sb_busy;
  output RDY_mv_sb_busy;

  // action method ma_commit_store
  input  [1 : 0] ma_commit_store_c;
  input  EN_ma_commit_store;
  output RDY_ma_commit_store;

  // value method mv_lb_tail
  output [1 : 0] mv_lb_tail;
  output RDY_mv_lb_tail;

  // value method mv_lb_head
  output [1 : 0] mv_lb_head;
  output RDY_mv_lb_head;

  // value method mv_sb_tail
  output mv_sb_tail;
  output RDY_mv_sb_tail;

  // value method mv_release_head
  output [544 : 0] mv_release_head;
  output RDY_mv_release_head;

  // action method ma_release
  input  EN_ma_release;
  output RDY_ma_release;

  // action method ma_perform_atomic
  input  [4 : 0] ma_perform_atomic_atomic_op;
  input  [63 : 0] ma_perform_atomic_rdata;
  input  [63 : 0] ma_perform_atomic_wdata;
  input  ma_perform_atomic_sbindex;
  input  EN_ma_perform_atomic;
  output RDY_ma_perform_atomic;

  // signals for module outputs
  wire [544 : 0] mv_release_head;
  wire [66 : 0] mav_core_lookup;
  wire [1 : 0] mv_lb_head, mv_lb_tail;
  wire RDY_ma_allocate_line,
       RDY_ma_allocate_store,
       RDY_ma_commit_store,
       RDY_ma_perform_atomic,
       RDY_ma_release,
       RDY_mav_core_lookup,
       RDY_mv_lb_head,
       RDY_mv_lb_tail,
       RDY_mv_line_empty,
       RDY_mv_line_full,
       RDY_mv_release_head,
       RDY_mv_sb_busy,
       RDY_mv_sb_empty,
       RDY_mv_sb_full,
       RDY_mv_sb_tail,
       mv_line_empty,
       mv_line_full,
       mv_sb_busy,
       mv_sb_empty,
       mv_sb_full,
       mv_sb_tail;

  // inlined wires
  wire v_lb_sbpending_0_0_EN_port0__write,
       v_lb_sbpending_0_0_EN_port1__write,
       v_lb_sbpending_0_0_port2__read,
       v_lb_sbpending_0_1_EN_port0__write,
       v_lb_sbpending_0_1_EN_port1__write,
       v_lb_sbpending_0_1_port2__read,
       v_lb_sbpending_1_0_EN_port0__write,
       v_lb_sbpending_1_0_EN_port1__write,
       v_lb_sbpending_1_0_port2__read,
       v_lb_sbpending_1_1_EN_port0__write,
       v_lb_sbpending_1_1_EN_port1__write,
       v_lb_sbpending_1_1_port2__read,
       v_lb_sbpending_2_0_EN_port0__write,
       v_lb_sbpending_2_0_EN_port1__write,
       v_lb_sbpending_2_0_port2__read,
       v_lb_sbpending_2_1_EN_port0__write,
       v_lb_sbpending_2_1_EN_port1__write,
       v_lb_sbpending_2_1_port2__read,
       v_lb_sbpending_3_0_EN_port0__write,
       v_lb_sbpending_3_0_EN_port1__write,
       v_lb_sbpending_3_0_port2__read,
       v_lb_sbpending_3_1_EN_port0__write,
       v_lb_sbpending_3_1_EN_port1__write,
       v_lb_sbpending_3_1_port2__read,
       v_sb_commit_0_EN_port0__write,
       v_sb_commit_0_port0__write_1,
       v_sb_commit_0_port1__read,
       v_sb_commit_0_port2__read,
       v_sb_commit_1_EN_port0__write,
       v_sb_commit_1_port0__write_1,
       v_sb_commit_1_port1__read,
       v_sb_commit_1_port2__read;

  // register rg_atomic_op
  reg [4 : 0] rg_atomic_op;
  wire [4 : 0] rg_atomic_op_D_IN;
  wire rg_atomic_op_EN;

  // register rg_atomic_readword
  reg [63 : 0] rg_atomic_readword;
  wire [63 : 0] rg_atomic_readword_D_IN;
  wire rg_atomic_readword_EN;

  // register rg_atomic_tail
  reg rg_atomic_tail;
  wire rg_atomic_tail_D_IN, rg_atomic_tail_EN;

  // register rg_atomic_writeword
  reg [63 : 0] rg_atomic_writeword;
  wire [63 : 0] rg_atomic_writeword_D_IN;
  wire rg_atomic_writeword_EN;

  // register rg_lb_head
  reg [1 : 0] rg_lb_head;
  wire [1 : 0] rg_lb_head_D_IN;
  wire rg_lb_head_EN;

  // register rg_lb_tail
  reg [1 : 0] rg_lb_tail;
  wire [1 : 0] rg_lb_tail_D_IN;
  wire rg_lb_tail_EN;

  // register rg_sb_busy
  reg rg_sb_busy;
  wire rg_sb_busy_D_IN, rg_sb_busy_EN;

  // register rg_sb_head
  reg rg_sb_head;
  wire rg_sb_head_D_IN, rg_sb_head_EN;

  // register rg_sb_tail
  reg rg_sb_tail;
  wire rg_sb_tail_D_IN, rg_sb_tail_EN;

  // register v_lb_line_0
  reg [511 : 0] v_lb_line_0;
  wire [511 : 0] v_lb_line_0_D_IN;
  wire v_lb_line_0_EN;

  // register v_lb_line_1
  reg [511 : 0] v_lb_line_1;
  wire [511 : 0] v_lb_line_1_D_IN;
  wire v_lb_line_1_EN;

  // register v_lb_line_2
  reg [511 : 0] v_lb_line_2;
  wire [511 : 0] v_lb_line_2_D_IN;
  wire v_lb_line_2_EN;

  // register v_lb_line_3
  reg [511 : 0] v_lb_line_3;
  wire [511 : 0] v_lb_line_3_D_IN;
  wire v_lb_line_3_EN;

  // register v_lb_sbpending_0_0
  reg v_lb_sbpending_0_0;
  wire v_lb_sbpending_0_0_D_IN, v_lb_sbpending_0_0_EN;

  // register v_lb_sbpending_0_1
  reg v_lb_sbpending_0_1;
  wire v_lb_sbpending_0_1_D_IN, v_lb_sbpending_0_1_EN;

  // register v_lb_sbpending_1_0
  reg v_lb_sbpending_1_0;
  wire v_lb_sbpending_1_0_D_IN, v_lb_sbpending_1_0_EN;

  // register v_lb_sbpending_1_1
  reg v_lb_sbpending_1_1;
  wire v_lb_sbpending_1_1_D_IN, v_lb_sbpending_1_1_EN;

  // register v_lb_sbpending_2_0
  reg v_lb_sbpending_2_0;
  wire v_lb_sbpending_2_0_D_IN, v_lb_sbpending_2_0_EN;

  // register v_lb_sbpending_2_1
  reg v_lb_sbpending_2_1;
  wire v_lb_sbpending_2_1_D_IN, v_lb_sbpending_2_1_EN;

  // register v_lb_sbpending_3_0
  reg v_lb_sbpending_3_0;
  wire v_lb_sbpending_3_0_D_IN, v_lb_sbpending_3_0_EN;

  // register v_lb_sbpending_3_1
  reg v_lb_sbpending_3_1;
  wire v_lb_sbpending_3_1_D_IN, v_lb_sbpending_3_1_EN;

  // register v_lb_tag_0
  reg [25 : 0] v_lb_tag_0;
  wire [25 : 0] v_lb_tag_0_D_IN;
  wire v_lb_tag_0_EN;

  // register v_lb_tag_1
  reg [25 : 0] v_lb_tag_1;
  wire [25 : 0] v_lb_tag_1_D_IN;
  wire v_lb_tag_1_EN;

  // register v_lb_tag_2
  reg [25 : 0] v_lb_tag_2;
  wire [25 : 0] v_lb_tag_2_D_IN;
  wire v_lb_tag_2_EN;

  // register v_lb_tag_3
  reg [25 : 0] v_lb_tag_3;
  wire [25 : 0] v_lb_tag_3_D_IN;
  wire v_lb_tag_3_EN;

  // register v_lb_valid_0
  reg v_lb_valid_0;
  wire v_lb_valid_0_D_IN, v_lb_valid_0_EN;

  // register v_lb_valid_1
  reg v_lb_valid_1;
  wire v_lb_valid_1_D_IN, v_lb_valid_1_EN;

  // register v_lb_valid_2
  reg v_lb_valid_2;
  wire v_lb_valid_2_D_IN, v_lb_valid_2_EN;

  // register v_lb_valid_3
  reg v_lb_valid_3;
  wire v_lb_valid_3_D_IN, v_lb_valid_3_EN;

  // register v_sb_commit_0
  reg v_sb_commit_0;
  wire v_sb_commit_0_D_IN, v_sb_commit_0_EN;

  // register v_sb_commit_1
  reg v_sb_commit_1;
  wire v_sb_commit_1_D_IN, v_sb_commit_1_EN;

  // register v_sb_meta_0
  reg [164 : 0] v_sb_meta_0;
  wire [164 : 0] v_sb_meta_0_D_IN;
  wire v_sb_meta_0_EN;

  // register v_sb_meta_1
  reg [164 : 0] v_sb_meta_1;
  wire [164 : 0] v_sb_meta_1_D_IN;
  wire v_sb_meta_1_EN;

  // register v_sb_valid_0
  reg v_sb_valid_0;
  wire v_sb_valid_0_D_IN, v_sb_valid_0_EN;

  // register v_sb_valid_1
  reg v_sb_valid_1;
  wire v_sb_valid_1_D_IN, v_sb_valid_1_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_commit_from_sb_to_line,
       CAN_FIRE_RL_rl_perform_atomic,
       CAN_FIRE_RL_rl_print_stats,
       CAN_FIRE_ma_allocate_line,
       CAN_FIRE_ma_allocate_store,
       CAN_FIRE_ma_commit_store,
       CAN_FIRE_ma_perform_atomic,
       CAN_FIRE_ma_release,
       CAN_FIRE_mav_core_lookup,
       WILL_FIRE_RL_rl_commit_from_sb_to_line,
       WILL_FIRE_RL_rl_perform_atomic,
       WILL_FIRE_RL_rl_print_stats,
       WILL_FIRE_ma_allocate_line,
       WILL_FIRE_ma_allocate_store,
       WILL_FIRE_ma_commit_store,
       WILL_FIRE_ma_perform_atomic,
       WILL_FIRE_ma_release,
       WILL_FIRE_mav_core_lookup;

  // inputs to muxes for submodule ports
  wire [511 : 0] MUX_v_lb_line_0_write_1__VAL_1;
  wire [164 : 0] MUX_v_sb_meta_0_write_1__VAL_1,
		 MUX_v_sb_meta_0_write_1__VAL_2;
  wire MUX_rg_sb_head_write_1__VAL_2,
       MUX_v_lb_line_0_write_1__SEL_1,
       MUX_v_lb_line_0_write_1__SEL_2,
       MUX_v_lb_line_1_write_1__SEL_1,
       MUX_v_lb_line_1_write_1__SEL_2,
       MUX_v_lb_line_2_write_1__SEL_1,
       MUX_v_lb_line_2_write_1__SEL_2,
       MUX_v_lb_line_3_write_1__SEL_1,
       MUX_v_lb_line_3_write_1__SEL_2,
       MUX_v_lb_valid_0_write_1__SEL_1,
       MUX_v_lb_valid_1_write_1__SEL_1,
       MUX_v_lb_valid_2_write_1__SEL_1,
       MUX_v_lb_valid_3_write_1__SEL_1,
       MUX_v_sb_meta_0_write_1__SEL_1,
       MUX_v_sb_meta_1_write_1__SEL_1,
       MUX_v_sb_valid_0_write_1__SEL_1,
       MUX_v_sb_valid_0_write_1__SEL_2,
       MUX_v_sb_valid_1_write_1__SEL_1,
       MUX_v_sb_valid_1_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d298;
  reg TASK_testplusargs___d299;
  reg TASK_testplusargs___d300;
  reg [63 : 0] v__h14500;
  reg TASK_testplusargs___d311;
  reg TASK_testplusargs___d312;
  reg TASK_testplusargs___d313;
  reg [63 : 0] v__h14714;
  reg TASK_testplusargs___d324;
  reg TASK_testplusargs___d325;
  reg TASK_testplusargs___d326;
  reg [63 : 0] v__h14933;
  reg TASK_testplusargs___d208;
  reg TASK_testplusargs___d209;
  reg TASK_testplusargs___d210;
  reg [63 : 0] v__h11009;
  reg TASK_testplusargs___d250;
  reg TASK_testplusargs___d251;
  reg TASK_testplusargs___d252;
  reg [63 : 0] v__h13545;
  reg TASK_testplusargs___d479;
  reg TASK_testplusargs___d480;
  reg TASK_testplusargs___d481;
  reg [63 : 0] v__h35770;
  reg TASK_testplusargs___d542;
  reg TASK_testplusargs___d543;
  reg TASK_testplusargs___d544;
  reg [63 : 0] v__h36948;
  reg TASK_testplusargs___d1;
  reg TASK_testplusargs___d2;
  reg TASK_testplusargs___d3;
  reg [63 : 0] v__h3332;
  reg TASK_testplusargs___d100;
  reg TASK_testplusargs___d101;
  reg TASK_testplusargs___d102;
  reg [63 : 0] v__h5577;
  reg TASK_testplusargs___d122;
  reg TASK_testplusargs___d123;
  reg TASK_testplusargs___d124;
  reg [63 : 0] v__h6024;
  // synopsys translate_on

  // remaining internal signals
  reg [511 : 0] SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160,
		x__h36317;
  reg [63 : 0] CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1,
	       CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2,
	       CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3,
	       CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4,
	       IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76,
	       SEL_ARR_v_sb_meta_0_read__0_BITS_132_TO_69_36__ETC___d139,
	       SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140,
	       temp__h11064,
	       x__h13462,
	       x__h15001,
	       x__h19645,
	       x__h5446,
	       x__h7552,
	       y__h19644;
  reg [31 : 0] SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135,
	       x__h5467;
  reg [25 : 0] SEL_ARR_v_lb_tag_0_read__89_v_lb_tag_1_read__8_ETC___d531;
  reg [1 : 0] SEL_ARR_v_sb_meta_0_read__0_BITS_1_TO_0_2_v_sb_ETC___d128,
	      SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115,
	      x__h36008,
	      x__h5437,
	      x__h5456;
  reg CASE_ma_commit_store_c_BIT_0_0_NOT_v_sb_commit_ETC__q9,
      CASE_ma_commit_store_c_BIT_0_0_v_sb_meta_0_BIT_ETC__q7,
      CASE_ma_commit_store_c_BIT_0_0_v_sb_valid_0_1__ETC__q10,
      CASE_rg_sb_tail_0_NOT_v_sb_commit_0port1__rea_ETC__q11,
      CASE_rg_sb_tail_0_NOT_v_sb_valid_0_1_NOT_v_sb__ETC__q8,
      SEL_ARR_NOT_v_lb_valid_0_read_4_NOT_v_lb_valid_ETC___d199,
      SEL_ARR_v_lb_sbpending_0_0_port1__read__19_v_l_ETC___d524,
      SEL_ARR_v_lb_sbpending_0_1_port1__read__13_v_l_ETC___d518,
      SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d116,
      SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d527,
      SEL_ARR_v_sb_commit_0_port1__read__09_v_sb_com_ETC___d112,
      SEL_ARR_v_sb_valid_0_read__1_v_sb_valid_1_read_ETC___d108,
      x__h5423;
  wire [383 : 0] IF_SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_ETC___d188;
  wire [255 : 0] IF_SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_ETC___d183;
  wire [63 : 0] _theResult____h4491,
		lv_storedata__h14865,
		lv_storemask__h14864,
		lv_word__h14866,
		n__h19495,
		n__h7324,
		op1___1__h5054,
		op1__h4995,
		op2___1__h5055,
		op2__h4996,
		storemask__h11065,
		v_sb_meta_0_read__0_BITS_65_TO_2_8_AND_v_sb_me_ETC___d412,
		v_sb_meta_1_read__2_BITS_65_TO_2_9_AND_v_sb_me_ETC___d448,
		x__h14999,
		x__h19643,
		x__h35113,
		x__h35328,
		x__h7550,
		y__h15000,
		y__h15002,
		y__h35114,
		y__h35329,
		y__h7551,
		y__h7553;
  wire [31 : 0] rg_atomic_readword_BITS_31_TO_0__q5,
		rg_atomic_writeword_BITS_31_TO_0__q6,
		x__h36333;
  wire [5 : 0] shiftamt__h11063;
  wire [3 : 0] IF_v_lb_valid_0_read_AND_v_lb_tag_0_read__89_E_ETC___d292,
	       hit_arr__h13846;
  wire [2 : 0] x__h13874,
	       x__h13886,
	       x__h13898,
	       y__h13875,
	       y__h13887,
	       y__h13899;
  wire [1 : 0] lv_index___h15012, x__h10921, x__h36392, x__h36661;
  wire IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d57,
       IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d62,
       NOT_0_CONCAT_v_lb_valid_3_read__0_AND_v_lb_tag_ETC___d297,
       NOT_SEL_ARR_NOT_v_sb_commit_0_port0__read__72__ETC___d478,
       NOT_SEL_ARR_NOT_v_sb_commit_0_port1__read__09__ETC___d222,
       NOT_SEL_ARR_NOT_v_sb_valid_0_read__1_4_NOT_v_s_ETC___d217,
       NOT_SEL_ARR_v_sb_valid_0_read__1_v_sb_valid_1__ETC___d471,
       b__h13882,
       b__h13894,
       b__h13906,
       ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488,
       v_lb_valid_0_read_AND_v_lb_valid_1_read_AND_v__ETC___d13,
       x__h10138,
       x__h13820,
       x__h19647,
       x_port1__read__h6646,
       x_port1__read__h6648,
       x_port1__read__h6650,
       x_port1__read__h6652,
       x_port1__read__h6654,
       x_port1__read__h6656,
       x_port1__read__h6658,
       x_port1__read__h6660;

  // action method ma_allocate_line
  assign RDY_ma_allocate_line = !rg_sb_busy ;
  assign CAN_FIRE_ma_allocate_line = !rg_sb_busy ;
  assign WILL_FIRE_ma_allocate_line = EN_ma_allocate_line ;

  // action method ma_allocate_store
  assign RDY_ma_allocate_store = !rg_sb_busy ;
  assign CAN_FIRE_ma_allocate_store = !rg_sb_busy ;
  assign WILL_FIRE_ma_allocate_store = EN_ma_allocate_store ;

  // actionvalue method mav_core_lookup
  assign mav_core_lookup =
	     { hit_arr__h13846 != 4'd0, lv_word__h14866, lv_index___h15012 } ;
  assign RDY_mav_core_lookup = 1'd1 ;
  assign CAN_FIRE_mav_core_lookup = 1'd1 ;
  assign WILL_FIRE_mav_core_lookup = EN_mav_core_lookup ;

  // value method mv_sb_empty
  assign mv_sb_empty = !v_sb_valid_0 && !v_sb_valid_1 ;
  assign RDY_mv_sb_empty = 1'd1 ;

  // value method mv_sb_full
  assign mv_sb_full = v_sb_valid_0 && v_sb_valid_1 ;
  assign RDY_mv_sb_full = 1'd1 ;

  // value method mv_line_empty
  assign mv_line_empty =
	     !v_lb_valid_0 && !v_lb_valid_1 && !v_lb_valid_2 &&
	     !v_lb_valid_3 ;
  assign RDY_mv_line_empty = 1'd1 ;

  // value method mv_line_full
  assign mv_line_full =
	     v_lb_valid_0 && v_lb_valid_1 && v_lb_valid_2 && v_lb_valid_3 ;
  assign RDY_mv_line_full = 1'd1 ;

  // value method mv_sb_busy
  assign mv_sb_busy = rg_sb_busy ;
  assign RDY_mv_sb_busy = 1'd1 ;

  // action method ma_commit_store
  assign RDY_ma_commit_store = 1'd1 ;
  assign CAN_FIRE_ma_commit_store = 1'd1 ;
  assign WILL_FIRE_ma_commit_store = EN_ma_commit_store ;

  // value method mv_lb_tail
  assign mv_lb_tail = rg_lb_tail ;
  assign RDY_mv_lb_tail = 1'd1 ;

  // value method mv_lb_head
  assign mv_lb_head = rg_lb_head ;
  assign RDY_mv_lb_head = 1'd1 ;

  // value method mv_sb_tail
  assign mv_sb_tail = rg_sb_tail ;
  assign RDY_mv_sb_tail = 1'd1 ;

  // value method mv_release_head
  assign mv_release_head =
	     { x__h36392 == 2'd0 &&
	       SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d527,
	       x__h36317,
	       x__h36333 } ;
  assign RDY_mv_release_head = 1'd1 ;

  // action method ma_release
  assign RDY_ma_release = 1'd1 ;
  assign CAN_FIRE_ma_release = 1'd1 ;
  assign WILL_FIRE_ma_release = EN_ma_release ;

  // action method ma_perform_atomic
  assign RDY_ma_perform_atomic = !rg_sb_busy ;
  assign CAN_FIRE_ma_perform_atomic = !rg_sb_busy ;
  assign WILL_FIRE_ma_perform_atomic = EN_ma_perform_atomic ;

  // rule RL_rl_print_stats
  assign CAN_FIRE_RL_rl_print_stats = 1'd1 ;
  assign WILL_FIRE_RL_rl_print_stats = 1'd1 ;

  // rule RL_rl_perform_atomic
  assign CAN_FIRE_RL_rl_perform_atomic = rg_sb_busy ;
  assign WILL_FIRE_RL_rl_perform_atomic = rg_sb_busy ;

  // rule RL_rl_commit_from_sb_to_line
  assign CAN_FIRE_RL_rl_commit_from_sb_to_line =
	     SEL_ARR_v_sb_valid_0_read__1_v_sb_valid_1_read_ETC___d108 &&
	     SEL_ARR_v_sb_commit_0_port1__read__09_v_sb_com_ETC___d112 &&
	     SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d116 &&
	     !rg_sb_busy ;
  assign WILL_FIRE_RL_rl_commit_from_sb_to_line =
	     CAN_FIRE_RL_rl_commit_from_sb_to_line ;

  // inputs to muxes for submodule ports
  assign MUX_v_lb_line_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd0 ;
  assign MUX_v_lb_line_0_write_1__SEL_2 =
	     EN_ma_allocate_line && rg_lb_tail == 2'd0 ;
  assign MUX_v_lb_line_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd1 ;
  assign MUX_v_lb_line_1_write_1__SEL_2 =
	     EN_ma_allocate_line && rg_lb_tail == 2'd1 ;
  assign MUX_v_lb_line_2_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd2 ;
  assign MUX_v_lb_line_2_write_1__SEL_2 =
	     EN_ma_allocate_line && rg_lb_tail == 2'd2 ;
  assign MUX_v_lb_line_3_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd3 ;
  assign MUX_v_lb_line_3_write_1__SEL_2 =
	     EN_ma_allocate_line && rg_lb_tail == 2'd3 ;
  assign MUX_v_lb_valid_0_write_1__SEL_1 =
	     EN_ma_release && rg_lb_head == 2'd0 ;
  assign MUX_v_lb_valid_1_write_1__SEL_1 =
	     EN_ma_release && rg_lb_head == 2'd1 ;
  assign MUX_v_lb_valid_2_write_1__SEL_1 =
	     EN_ma_release && rg_lb_head == 2'd2 ;
  assign MUX_v_lb_valid_3_write_1__SEL_1 =
	     EN_ma_release && rg_lb_head == 2'd3 ;
  assign MUX_v_sb_meta_0_write_1__SEL_1 =
	     EN_ma_allocate_store && rg_sb_tail == 1'd0 ;
  assign MUX_v_sb_meta_1_write_1__SEL_1 =
	     EN_ma_allocate_store && rg_sb_tail == 1'd1 ;
  assign MUX_v_sb_valid_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd0 ;
  assign MUX_v_sb_valid_0_write_1__SEL_2 =
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd0 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign MUX_v_sb_valid_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd1 ;
  assign MUX_v_sb_valid_1_write_1__SEL_2 =
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd1 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign MUX_rg_sb_head_write_1__VAL_2 = !rg_sb_head && x__h10138 ;
  assign MUX_v_lb_line_0_write_1__VAL_1 =
	     { IF_SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_ETC___d188,
	       (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3] ==
		3'd1) ?
		 n__h7324 :
		 SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[127:64],
	       (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3] ==
		3'd0) ?
		 n__h7324 :
		 SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[63:0] } ;
  assign MUX_v_sb_meta_0_write_1__VAL_1 =
	     { ma_allocate_store_address,
	       x__h13462,
	       ma_allocate_store_epochs,
	       ma_allocate_store_lbindex,
	       storemask__h11065,
	       ma_allocate_store_size } ;
  assign MUX_v_sb_meta_0_write_1__VAL_2 =
	     { x__h5467,
	       _theResult____h4491,
	       x__h5423,
	       x__h5437,
	       x__h5446,
	       x__h5456 } ;

  // inlined wires
  assign v_sb_commit_0_EN_port0__write =
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd0 ;
  assign v_sb_commit_0_port0__write_1 =
	     ma_commit_store_c[0] == 1'd0 &&
	     ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_sb_commit_0_port1__read =
	     v_sb_commit_0_EN_port0__write ?
	       v_sb_commit_0_port0__write_1 :
	       v_sb_commit_0 ;
  assign v_sb_commit_0_port2__read =
	     !MUX_v_sb_valid_0_write_1__SEL_1 && v_sb_commit_0_port1__read ;
  assign v_sb_commit_1_EN_port0__write =
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd1 ;
  assign v_sb_commit_1_port0__write_1 =
	     ma_commit_store_c[0] == 1'd1 &&
	     ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_sb_commit_1_port1__read =
	     v_sb_commit_1_EN_port0__write ?
	       v_sb_commit_1_port0__write_1 :
	       v_sb_commit_1 ;
  assign v_sb_commit_1_port2__read =
	     !MUX_v_sb_valid_1_write_1__SEL_1 && v_sb_commit_1_port1__read ;
  assign v_lb_sbpending_0_0_EN_port0__write =
	     EN_ma_allocate_store && rg_sb_tail == 1'd0 &&
	     ma_allocate_store_lbindex == 2'd0 ;
  assign v_lb_sbpending_0_0_EN_port1__write =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd0 &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd0 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd0 &&
	     x__h36008 == 2'd0 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_lb_sbpending_0_0_port2__read =
	     v_lb_sbpending_0_0_EN_port1__write ?
	       1'd0 :
	       x_port1__read__h6646 ;
  assign v_lb_sbpending_0_1_EN_port0__write =
	     EN_ma_allocate_store && rg_sb_tail == 1'd1 &&
	     ma_allocate_store_lbindex == 2'd0 ;
  assign v_lb_sbpending_0_1_EN_port1__write =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd1 &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd0 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd1 &&
	     x__h36008 == 2'd0 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_lb_sbpending_0_1_port2__read =
	     v_lb_sbpending_0_1_EN_port1__write ?
	       1'd0 :
	       x_port1__read__h6648 ;
  assign v_lb_sbpending_1_0_EN_port0__write =
	     EN_ma_allocate_store && rg_sb_tail == 1'd0 &&
	     ma_allocate_store_lbindex == 2'd1 ;
  assign v_lb_sbpending_1_0_EN_port1__write =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd0 &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd1 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd0 &&
	     x__h36008 == 2'd1 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_lb_sbpending_1_0_port2__read =
	     v_lb_sbpending_1_0_EN_port1__write ?
	       1'd0 :
	       x_port1__read__h6650 ;
  assign v_lb_sbpending_1_1_EN_port0__write =
	     EN_ma_allocate_store && rg_sb_tail == 1'd1 &&
	     ma_allocate_store_lbindex == 2'd1 ;
  assign v_lb_sbpending_1_1_EN_port1__write =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd1 &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd1 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd1 &&
	     x__h36008 == 2'd1 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_lb_sbpending_1_1_port2__read =
	     v_lb_sbpending_1_1_EN_port1__write ?
	       1'd0 :
	       x_port1__read__h6652 ;
  assign v_lb_sbpending_2_0_EN_port0__write =
	     EN_ma_allocate_store && rg_sb_tail == 1'd0 &&
	     ma_allocate_store_lbindex == 2'd2 ;
  assign v_lb_sbpending_2_0_EN_port1__write =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd0 &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd2 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd0 &&
	     x__h36008 == 2'd2 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_lb_sbpending_2_0_port2__read =
	     v_lb_sbpending_2_0_EN_port1__write ?
	       1'd0 :
	       x_port1__read__h6654 ;
  assign v_lb_sbpending_2_1_EN_port0__write =
	     EN_ma_allocate_store && rg_sb_tail == 1'd1 &&
	     ma_allocate_store_lbindex == 2'd2 ;
  assign v_lb_sbpending_2_1_EN_port1__write =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd1 &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd2 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd1 &&
	     x__h36008 == 2'd2 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_lb_sbpending_2_1_port2__read =
	     v_lb_sbpending_2_1_EN_port1__write ?
	       1'd0 :
	       x_port1__read__h6656 ;
  assign v_lb_sbpending_3_0_EN_port0__write =
	     EN_ma_allocate_store && rg_sb_tail == 1'd0 &&
	     ma_allocate_store_lbindex == 2'd3 ;
  assign v_lb_sbpending_3_0_EN_port1__write =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd0 &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd3 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd0 &&
	     x__h36008 == 2'd3 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_lb_sbpending_3_0_port2__read =
	     v_lb_sbpending_3_0_EN_port1__write ?
	       1'd0 :
	       x_port1__read__h6658 ;
  assign v_lb_sbpending_3_1_EN_port0__write =
	     EN_ma_allocate_store && rg_sb_tail == 1'd1 &&
	     ma_allocate_store_lbindex == 2'd3 ;
  assign v_lb_sbpending_3_1_EN_port1__write =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd1 &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd3 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd1 &&
	     x__h36008 == 2'd3 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;
  assign v_lb_sbpending_3_1_port2__read =
	     v_lb_sbpending_3_1_EN_port1__write ?
	       1'd0 :
	       x_port1__read__h6660 ;

  // register rg_atomic_op
  assign rg_atomic_op_D_IN = ma_perform_atomic_atomic_op ;
  assign rg_atomic_op_EN = EN_ma_perform_atomic ;

  // register rg_atomic_readword
  assign rg_atomic_readword_D_IN = ma_perform_atomic_rdata ;
  assign rg_atomic_readword_EN = EN_ma_perform_atomic ;

  // register rg_atomic_tail
  assign rg_atomic_tail_D_IN = ma_perform_atomic_sbindex ;
  assign rg_atomic_tail_EN = EN_ma_perform_atomic ;

  // register rg_atomic_writeword
  assign rg_atomic_writeword_D_IN = ma_perform_atomic_wdata ;
  assign rg_atomic_writeword_EN = EN_ma_perform_atomic ;

  // register rg_lb_head
  assign rg_lb_head_D_IN = (rg_lb_head == 2'd3) ? 2'd0 : x__h36661 ;
  assign rg_lb_head_EN = EN_ma_release ;

  // register rg_lb_tail
  assign rg_lb_tail_D_IN = (rg_lb_tail == 2'd3) ? 2'd0 : x__h10921 ;
  assign rg_lb_tail_EN = EN_ma_allocate_line ;

  // register rg_sb_busy
  assign rg_sb_busy_D_IN = !rg_sb_busy ;
  assign rg_sb_busy_EN = rg_sb_busy || EN_ma_perform_atomic ;

  // register rg_sb_head
  assign rg_sb_head_D_IN =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line ?
	       MUX_rg_sb_head_write_1__VAL_2 :
	       MUX_rg_sb_head_write_1__VAL_2 ;
  assign rg_sb_head_EN =
	     EN_ma_commit_store &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ||
	     WILL_FIRE_RL_rl_commit_from_sb_to_line ;

  // register rg_sb_tail
  assign rg_sb_tail_D_IN = !rg_sb_tail && x__h13820 ;
  assign rg_sb_tail_EN = EN_ma_allocate_store ;

  // register v_lb_line_0
  assign v_lb_line_0_D_IN =
	     MUX_v_lb_line_0_write_1__SEL_1 ?
	       MUX_v_lb_line_0_write_1__VAL_1 :
	       ma_allocate_line_line ;
  assign v_lb_line_0_EN =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd0 ||
	     EN_ma_allocate_line && rg_lb_tail == 2'd0 ;

  // register v_lb_line_1
  assign v_lb_line_1_D_IN =
	     MUX_v_lb_line_1_write_1__SEL_1 ?
	       MUX_v_lb_line_0_write_1__VAL_1 :
	       ma_allocate_line_line ;
  assign v_lb_line_1_EN =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd1 ||
	     EN_ma_allocate_line && rg_lb_tail == 2'd1 ;

  // register v_lb_line_2
  assign v_lb_line_2_D_IN =
	     MUX_v_lb_line_2_write_1__SEL_1 ?
	       MUX_v_lb_line_0_write_1__VAL_1 :
	       ma_allocate_line_line ;
  assign v_lb_line_2_EN =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd2 ||
	     EN_ma_allocate_line && rg_lb_tail == 2'd2 ;

  // register v_lb_line_3
  assign v_lb_line_3_D_IN =
	     MUX_v_lb_line_3_write_1__SEL_1 ?
	       MUX_v_lb_line_0_write_1__VAL_1 :
	       ma_allocate_line_line ;
  assign v_lb_line_3_EN =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 ==
	     2'd3 ||
	     EN_ma_allocate_line && rg_lb_tail == 2'd3 ;

  // register v_lb_sbpending_0_0
  assign v_lb_sbpending_0_0_D_IN = v_lb_sbpending_0_0_port2__read ;
  assign v_lb_sbpending_0_0_EN = 1'b1 ;

  // register v_lb_sbpending_0_1
  assign v_lb_sbpending_0_1_D_IN = v_lb_sbpending_0_1_port2__read ;
  assign v_lb_sbpending_0_1_EN = 1'b1 ;

  // register v_lb_sbpending_1_0
  assign v_lb_sbpending_1_0_D_IN = v_lb_sbpending_1_0_port2__read ;
  assign v_lb_sbpending_1_0_EN = 1'b1 ;

  // register v_lb_sbpending_1_1
  assign v_lb_sbpending_1_1_D_IN = v_lb_sbpending_1_1_port2__read ;
  assign v_lb_sbpending_1_1_EN = 1'b1 ;

  // register v_lb_sbpending_2_0
  assign v_lb_sbpending_2_0_D_IN = v_lb_sbpending_2_0_port2__read ;
  assign v_lb_sbpending_2_0_EN = 1'b1 ;

  // register v_lb_sbpending_2_1
  assign v_lb_sbpending_2_1_D_IN = v_lb_sbpending_2_1_port2__read ;
  assign v_lb_sbpending_2_1_EN = 1'b1 ;

  // register v_lb_sbpending_3_0
  assign v_lb_sbpending_3_0_D_IN = v_lb_sbpending_3_0_port2__read ;
  assign v_lb_sbpending_3_0_EN = 1'b1 ;

  // register v_lb_sbpending_3_1
  assign v_lb_sbpending_3_1_D_IN = v_lb_sbpending_3_1_port2__read ;
  assign v_lb_sbpending_3_1_EN = 1'b1 ;

  // register v_lb_tag_0
  assign v_lb_tag_0_D_IN = ma_allocate_line_address[31:6] ;
  assign v_lb_tag_0_EN = MUX_v_lb_line_0_write_1__SEL_2 ;

  // register v_lb_tag_1
  assign v_lb_tag_1_D_IN = ma_allocate_line_address[31:6] ;
  assign v_lb_tag_1_EN = MUX_v_lb_line_1_write_1__SEL_2 ;

  // register v_lb_tag_2
  assign v_lb_tag_2_D_IN = ma_allocate_line_address[31:6] ;
  assign v_lb_tag_2_EN = MUX_v_lb_line_2_write_1__SEL_2 ;

  // register v_lb_tag_3
  assign v_lb_tag_3_D_IN = ma_allocate_line_address[31:6] ;
  assign v_lb_tag_3_EN = MUX_v_lb_line_3_write_1__SEL_2 ;

  // register v_lb_valid_0
  assign v_lb_valid_0_D_IN = !MUX_v_lb_valid_0_write_1__SEL_1 ;
  assign v_lb_valid_0_EN =
	     EN_ma_allocate_line && rg_lb_tail == 2'd0 ||
	     EN_ma_release && rg_lb_head == 2'd0 ;

  // register v_lb_valid_1
  assign v_lb_valid_1_D_IN = !MUX_v_lb_valid_1_write_1__SEL_1 ;
  assign v_lb_valid_1_EN =
	     EN_ma_allocate_line && rg_lb_tail == 2'd1 ||
	     EN_ma_release && rg_lb_head == 2'd1 ;

  // register v_lb_valid_2
  assign v_lb_valid_2_D_IN = !MUX_v_lb_valid_2_write_1__SEL_1 ;
  assign v_lb_valid_2_EN =
	     EN_ma_allocate_line && rg_lb_tail == 2'd2 ||
	     EN_ma_release && rg_lb_head == 2'd2 ;

  // register v_lb_valid_3
  assign v_lb_valid_3_D_IN = !MUX_v_lb_valid_3_write_1__SEL_1 ;
  assign v_lb_valid_3_EN =
	     EN_ma_release && rg_lb_head == 2'd3 ||
	     EN_ma_allocate_line && rg_lb_tail == 2'd3 ;

  // register v_sb_commit_0
  assign v_sb_commit_0_D_IN = v_sb_commit_0_port2__read ;
  assign v_sb_commit_0_EN = 1'b1 ;

  // register v_sb_commit_1
  assign v_sb_commit_1_D_IN = v_sb_commit_1_port2__read ;
  assign v_sb_commit_1_EN = 1'b1 ;

  // register v_sb_meta_0
  assign v_sb_meta_0_D_IN =
	     MUX_v_sb_meta_0_write_1__SEL_1 ?
	       MUX_v_sb_meta_0_write_1__VAL_1 :
	       MUX_v_sb_meta_0_write_1__VAL_2 ;
  assign v_sb_meta_0_EN =
	     EN_ma_allocate_store && rg_sb_tail == 1'd0 ||
	     rg_sb_busy && rg_atomic_tail == 1'd0 ;

  // register v_sb_meta_1
  assign v_sb_meta_1_D_IN =
	     MUX_v_sb_meta_1_write_1__SEL_1 ?
	       MUX_v_sb_meta_0_write_1__VAL_1 :
	       MUX_v_sb_meta_0_write_1__VAL_2 ;
  assign v_sb_meta_1_EN =
	     EN_ma_allocate_store && rg_sb_tail == 1'd1 ||
	     rg_sb_busy && rg_atomic_tail == 1'd1 ;

  // register v_sb_valid_0
  assign v_sb_valid_0_D_IN =
	     !MUX_v_sb_valid_0_write_1__SEL_1 &&
	     !MUX_v_sb_valid_0_write_1__SEL_2 ;
  assign v_sb_valid_0_EN =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd0 ||
	     EN_ma_allocate_store && rg_sb_tail == 1'd0 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd0 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;

  // register v_sb_valid_1
  assign v_sb_valid_1_D_IN =
	     !MUX_v_sb_valid_1_write_1__SEL_1 &&
	     !MUX_v_sb_valid_1_write_1__SEL_2 ;
  assign v_sb_valid_1_EN =
	     WILL_FIRE_RL_rl_commit_from_sb_to_line && rg_sb_head == 1'd1 ||
	     EN_ma_allocate_store && rg_sb_tail == 1'd1 ||
	     EN_ma_commit_store && ma_commit_store_c[0] == 1'd1 &&
	     !ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 ;

  // remaining internal signals
  assign IF_SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_ETC___d183 =
	     { (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3] ==
		3'd7) ?
		 n__h7324 :
		 SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[511:448],
	       (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3] ==
		3'd6) ?
		 n__h7324 :
		 SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[447:384],
	       (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3] ==
		3'd5) ?
		 n__h7324 :
		 SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[383:320],
	       (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3] ==
		3'd4) ?
		 n__h7324 :
		 SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[319:256] } ;
  assign IF_SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_ETC___d188 =
	     { IF_SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_ETC___d183,
	       (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3] ==
		3'd3) ?
		 n__h7324 :
		 SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[255:192],
	       (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3] ==
		3'd2) ?
		 n__h7324 :
		 SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[191:128] } ;
  assign IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d57 =
	     op1__h4995 <= op2__h4996 ;
  assign IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d62 =
	     (op1__h4995 ^ 64'h8000000000000000) <=
	     (op2__h4996 ^ 64'h8000000000000000) ;
  assign IF_v_lb_valid_0_read_AND_v_lb_tag_0_read__89_E_ETC___d292 =
	     (v_lb_valid_0 && v_lb_tag_0 == mav_core_lookup_address[31:6]) ?
	       4'd1 :
	       4'd0 ;
  assign NOT_0_CONCAT_v_lb_valid_3_read__0_AND_v_lb_tag_ETC___d297 =
	     x__h13874 + y__h13875 > 3'd1 ;
  assign NOT_SEL_ARR_NOT_v_sb_commit_0_port0__read__72__ETC___d478 =
	     !CASE_ma_commit_store_c_BIT_0_0_NOT_v_sb_commit_ETC__q9 ;
  assign NOT_SEL_ARR_NOT_v_sb_commit_0_port1__read__09__ETC___d222 =
	     !CASE_rg_sb_tail_0_NOT_v_sb_commit_0port1__rea_ETC__q11 ;
  assign NOT_SEL_ARR_NOT_v_sb_valid_0_read__1_4_NOT_v_s_ETC___d217 =
	     !CASE_rg_sb_tail_0_NOT_v_sb_valid_0_1_NOT_v_sb__ETC__q8 ;
  assign NOT_SEL_ARR_v_sb_valid_0_read__1_v_sb_valid_1__ETC___d471 =
	     !CASE_ma_commit_store_c_BIT_0_0_v_sb_valid_0_1__ETC__q10 ;
  assign _theResult____h4491 =
	     rg_atomic_op[4] ?
	       IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 :
	       {2{IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76[31:0]}} ;
  assign b__h13882 =
	     v_lb_valid_1 && v_lb_tag_1 == mav_core_lookup_address[31:6] ;
  assign b__h13894 =
	     v_lb_valid_2 && v_lb_tag_2 == mav_core_lookup_address[31:6] ;
  assign b__h13906 =
	     v_lb_valid_3 && v_lb_tag_3 == mav_core_lookup_address[31:6] ;
  assign hit_arr__h13846 =
	     { b__h13906,
	       b__h13894,
	       b__h13882,
	       IF_v_lb_valid_0_read_AND_v_lb_tag_0_read__89_E_ETC___d292[0] } ;
  assign lv_index___h15012 =
	     { b__h13894 || b__h13906, b__h13882 || b__h13906 } ;
  assign lv_storedata__h14865 = x__h35328 | y__h35329 ;
  assign lv_storemask__h14864 = x__h35113 | y__h35114 ;
  assign lv_word__h14866 = x__h14999 | y__h15000 ;
  assign ma_commit_store_c_BIT_1_86_EQ_SEL_ARR_v_sb_met_ETC___d488 =
	     ma_commit_store_c[1] ==
	     CASE_ma_commit_store_c_BIT_0_0_v_sb_meta_0_BIT_ETC__q7 ;
  assign n__h19495 = x__h19643 & y__h19644 ;
  assign n__h7324 = x__h7550 | y__h7551 ;
  assign op1___1__h5054 =
	     { {32{rg_atomic_readword_BITS_31_TO_0__q5[31]}},
	       rg_atomic_readword_BITS_31_TO_0__q5 } ;
  assign op1__h4995 = rg_atomic_op[4] ? rg_atomic_readword : op1___1__h5054 ;
  assign op2___1__h5055 =
	     { {32{rg_atomic_writeword_BITS_31_TO_0__q6[31]}},
	       rg_atomic_writeword_BITS_31_TO_0__q6 } ;
  assign op2__h4996 = rg_atomic_op[4] ? rg_atomic_writeword : op2___1__h5055 ;
  assign rg_atomic_readword_BITS_31_TO_0__q5 = rg_atomic_readword[31:0] ;
  assign rg_atomic_writeword_BITS_31_TO_0__q6 = rg_atomic_writeword[31:0] ;
  assign shiftamt__h11063 = { ma_allocate_store_address[2:0], 3'd0 } ;
  assign storemask__h11065 = temp__h11064 << shiftamt__h11063 ;
  assign v_lb_valid_0_read_AND_v_lb_valid_1_read_AND_v__ETC___d13 =
	     v_lb_valid_0 && v_lb_valid_1 && v_lb_valid_2 && v_lb_valid_3 ;
  assign v_sb_meta_0_read__0_BITS_65_TO_2_8_AND_v_sb_me_ETC___d412 =
	     v_sb_meta_0[65:2] &
	     {64{v_sb_meta_0[164:136] == mav_core_lookup_address[31:3] &&
		 v_sb_valid_0}} ;
  assign v_sb_meta_1_read__2_BITS_65_TO_2_9_AND_v_sb_me_ETC___d448 =
	     v_sb_meta_1[65:2] &
	     {64{v_sb_meta_1[164:136] == mav_core_lookup_address[31:3] &&
		 v_sb_valid_1}} ;
  assign x__h10138 = rg_sb_head + 1'd1 ;
  assign x__h10921 = rg_lb_tail + 2'd1 ;
  assign x__h13820 = rg_sb_tail + 1'd1 ;
  assign x__h13874 = x__h13886 + y__h13887 ;
  assign x__h13886 = x__h13898 + y__h13899 ;
  assign x__h13898 = { 2'd0, b__h13906 } ;
  assign x__h14999 = x__h15001 & y__h15002 ;
  assign x__h19643 = ~x__h19645 ;
  assign x__h19647 = rg_sb_tail - 1'd1 ;
  assign x__h35113 =
	     rg_sb_tail ?
	       v_sb_meta_0_read__0_BITS_65_TO_2_8_AND_v_sb_me_ETC___d412 :
	       n__h19495 ;
  assign x__h35328 = x__h35113 & v_sb_meta_0[132:69] ;
  assign x__h36333 =
	     { SEL_ARR_v_lb_tag_0_read__89_v_lb_tag_1_read__8_ETC___d531,
	       6'd0 } ;
  assign x__h36392 =
	     { SEL_ARR_v_lb_sbpending_0_1_port1__read__13_v_l_ETC___d518,
	       SEL_ARR_v_lb_sbpending_0_0_port1__read__19_v_l_ETC___d524 } ;
  assign x__h36661 = rg_lb_head + 2'd1 ;
  assign x__h7550 = x__h7552 & y__h7553 ;
  assign x_port1__read__h6646 =
	     v_lb_sbpending_0_0_EN_port0__write || v_lb_sbpending_0_0 ;
  assign x_port1__read__h6648 =
	     v_lb_sbpending_0_1_EN_port0__write || v_lb_sbpending_0_1 ;
  assign x_port1__read__h6650 =
	     v_lb_sbpending_1_0_EN_port0__write || v_lb_sbpending_1_0 ;
  assign x_port1__read__h6652 =
	     v_lb_sbpending_1_1_EN_port0__write || v_lb_sbpending_1_1 ;
  assign x_port1__read__h6654 =
	     v_lb_sbpending_2_0_EN_port0__write || v_lb_sbpending_2_0 ;
  assign x_port1__read__h6656 =
	     v_lb_sbpending_2_1_EN_port0__write || v_lb_sbpending_2_1 ;
  assign x_port1__read__h6658 =
	     v_lb_sbpending_3_0_EN_port0__write || v_lb_sbpending_3_0 ;
  assign x_port1__read__h6660 =
	     v_lb_sbpending_3_1_EN_port0__write || v_lb_sbpending_3_1 ;
  assign y__h13875 =
	     { 2'd0,
	       IF_v_lb_valid_0_read_AND_v_lb_tag_0_read__89_E_ETC___d292[0] } ;
  assign y__h13887 = { 2'd0, b__h13882 } ;
  assign y__h13899 = { 2'd0, b__h13894 } ;
  assign y__h15000 = lv_storemask__h14864 & lv_storedata__h14865 ;
  assign y__h15002 = ~lv_storemask__h14864 ;
  assign y__h35114 =
	     rg_sb_tail ?
	       n__h19495 :
	       v_sb_meta_1_read__2_BITS_65_TO_2_9_AND_v_sb_me_ETC___d448 ;
  assign y__h35329 = y__h35114 & v_sb_meta_1[132:69] ;
  assign y__h7551 =
	     SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140 &
	     SEL_ARR_v_sb_meta_0_read__0_BITS_132_TO_69_36__ETC___d139 ;
  assign y__h7553 =
	     ~SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140 ;
  always@(ma_allocate_store_size or ma_allocate_store_data)
  begin
    case (ma_allocate_store_size)
      2'd0: x__h13462 = {8{ma_allocate_store_data[7:0]}};
      2'd1: x__h13462 = {4{ma_allocate_store_data[15:0]}};
      2'd2: x__h13462 = {2{ma_allocate_store_data[31:0]}};
      2'd3: x__h13462 = ma_allocate_store_data;
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: x__h5423 = v_sb_meta_0[68];
      1'd1: x__h5423 = v_sb_meta_1[68];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: x__h5437 = v_sb_meta_0[67:66];
      1'd1: x__h5437 = v_sb_meta_1[67:66];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: x__h5446 = v_sb_meta_0[65:2];
      1'd1: x__h5446 = v_sb_meta_1[65:2];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: x__h5456 = v_sb_meta_0[1:0];
      1'd1: x__h5456 = v_sb_meta_1[1:0];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: x__h5467 = v_sb_meta_0[164:133];
      1'd1: x__h5467 = v_sb_meta_1[164:133];
    endcase
  end
  always@(rg_lb_head or
	  v_lb_line_0 or v_lb_line_1 or v_lb_line_2 or v_lb_line_3)
  begin
    case (rg_lb_head)
      2'd0: x__h36317 = v_lb_line_0;
      2'd1: x__h36317 = v_lb_line_1;
      2'd2: x__h36317 = v_lb_line_2;
      2'd3: x__h36317 = v_lb_line_3;
    endcase
  end
  always@(mav_core_lookup_address or v_lb_line_0)
  begin
    case (mav_core_lookup_address[5:3])
      3'd0:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 =
	      v_lb_line_0[63:0];
      3'd1:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 =
	      v_lb_line_0[127:64];
      3'd2:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 =
	      v_lb_line_0[191:128];
      3'd3:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 =
	      v_lb_line_0[255:192];
      3'd4:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 =
	      v_lb_line_0[319:256];
      3'd5:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 =
	      v_lb_line_0[383:320];
      3'd6:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 =
	      v_lb_line_0[447:384];
      3'd7:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 =
	      v_lb_line_0[511:448];
    endcase
  end
  always@(mav_core_lookup_address or v_lb_line_1)
  begin
    case (mav_core_lookup_address[5:3])
      3'd0:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 =
	      v_lb_line_1[63:0];
      3'd1:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 =
	      v_lb_line_1[127:64];
      3'd2:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 =
	      v_lb_line_1[191:128];
      3'd3:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 =
	      v_lb_line_1[255:192];
      3'd4:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 =
	      v_lb_line_1[319:256];
      3'd5:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 =
	      v_lb_line_1[383:320];
      3'd6:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 =
	      v_lb_line_1[447:384];
      3'd7:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 =
	      v_lb_line_1[511:448];
    endcase
  end
  always@(mav_core_lookup_address or v_lb_line_2)
  begin
    case (mav_core_lookup_address[5:3])
      3'd0:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 =
	      v_lb_line_2[63:0];
      3'd1:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 =
	      v_lb_line_2[127:64];
      3'd2:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 =
	      v_lb_line_2[191:128];
      3'd3:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 =
	      v_lb_line_2[255:192];
      3'd4:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 =
	      v_lb_line_2[319:256];
      3'd5:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 =
	      v_lb_line_2[383:320];
      3'd6:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 =
	      v_lb_line_2[447:384];
      3'd7:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 =
	      v_lb_line_2[511:448];
    endcase
  end
  always@(mav_core_lookup_address or v_lb_line_3)
  begin
    case (mav_core_lookup_address[5:3])
      3'd0:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4 =
	      v_lb_line_3[63:0];
      3'd1:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4 =
	      v_lb_line_3[127:64];
      3'd2:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4 =
	      v_lb_line_3[191:128];
      3'd3:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4 =
	      v_lb_line_3[255:192];
      3'd4:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4 =
	      v_lb_line_3[319:256];
      3'd5:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4 =
	      v_lb_line_3[383:320];
      3'd6:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4 =
	      v_lb_line_3[447:384];
      3'd7:
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4 =
	      v_lb_line_3[511:448];
    endcase
  end
  always@(lv_index___h15012 or
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1 or
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2 or
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3 or
	  CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4)
  begin
    case (lv_index___h15012)
      2'd0:
	  x__h15001 = CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q1;
      2'd1:
	  x__h15001 = CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q2;
      2'd2:
	  x__h15001 = CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q3;
      2'd3:
	  x__h15001 = CASE_mav_core_lookup_address_BITS_5_TO_3_0_v_l_ETC__q4;
    endcase
  end
  always@(ma_allocate_store_size)
  begin
    case (ma_allocate_store_size)
      2'd0: temp__h11064 = 64'h00000000000000FF;
      2'd1: temp__h11064 = 64'h000000000000FFFF;
      2'd2: temp__h11064 = 64'h00000000FFFFFFFF;
      2'd3: temp__h11064 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(ma_commit_store_c or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (ma_commit_store_c[0])
      1'd0: x__h36008 = v_sb_meta_0[67:66];
      1'd1: x__h36008 = v_sb_meta_1[67:66];
    endcase
  end
  always@(rg_atomic_op or
	  op1__h4995 or
	  op2__h4996 or
	  IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d62 or
	  IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d57)
  begin
    case (rg_atomic_op[3:0])
      4'b0:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      op1__h4995 + op2__h4996;
      4'b0010:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      op1__h4995 ^ op2__h4996;
      4'b0011, 4'b0111:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      op2__h4996;
      4'b0100:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      op1__h4995 | op2__h4996;
      4'b0110:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      op1__h4995 & op2__h4996;
      4'b1000:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d62 ?
		op1__h4995 :
		op2__h4996;
      4'b1010:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d62 ?
		op2__h4996 :
		op1__h4995;
      4'b1100:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d57 ?
		op1__h4995 :
		op2__h4996;
      4'b1110:
	  IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
	      IF_rg_atomic_op_6_BIT_4_7_THEN_rg_atomic_readw_ETC___d57 ?
		op2__h4996 :
		op1__h4995;
      default: IF_rg_atomic_op_6_BITS_3_TO_0_8_EQ_0b11_9_THEN_ETC___d76 =
		   op1__h4995;
    endcase
  end
  always@(rg_sb_head or v_sb_valid_0 or v_sb_valid_1)
  begin
    case (rg_sb_head)
      1'd0:
	  SEL_ARR_v_sb_valid_0_read__1_v_sb_valid_1_read_ETC___d108 =
	      v_sb_valid_0;
      1'd1:
	  SEL_ARR_v_sb_valid_0_read__1_v_sb_valid_1_read_ETC___d108 =
	      v_sb_valid_1;
    endcase
  end
  always@(rg_sb_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_sb_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 =
	      v_sb_meta_0[67:66];
      1'd1:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 =
	      v_sb_meta_1[67:66];
    endcase
  end
  always@(SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 or
	  v_lb_valid_0 or v_lb_valid_1 or v_lb_valid_2 or v_lb_valid_3)
  begin
    case (SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115)
      2'd0:
	  SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d116 =
	      v_lb_valid_0;
      2'd1:
	  SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d116 =
	      v_lb_valid_1;
      2'd2:
	  SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d116 =
	      v_lb_valid_2;
      2'd3:
	  SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d116 =
	      v_lb_valid_3;
    endcase
  end
  always@(SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115 or
	  v_lb_line_0 or v_lb_line_1 or v_lb_line_2 or v_lb_line_3)
  begin
    case (SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115)
      2'd0:
	  SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160 =
	      v_lb_line_0;
      2'd1:
	  SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160 =
	      v_lb_line_1;
      2'd2:
	  SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160 =
	      v_lb_line_2;
      2'd3:
	  SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160 =
	      v_lb_line_3;
    endcase
  end
  always@(rg_sb_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_sb_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_1_TO_0_2_v_sb_ETC___d128 =
	      v_sb_meta_0[1:0];
      1'd1:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_1_TO_0_2_v_sb_ETC___d128 =
	      v_sb_meta_1[1:0];
    endcase
  end
  always@(rg_sb_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_sb_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135 =
	      v_sb_meta_0[164:133];
      1'd1:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135 =
	      v_sb_meta_1[164:133];
    endcase
  end
  always@(SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135 or
	  SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160)
  begin
    case (SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135[5:3])
      3'd0:
	  x__h7552 =
	      SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[63:0];
      3'd1:
	  x__h7552 =
	      SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[127:64];
      3'd2:
	  x__h7552 =
	      SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[191:128];
      3'd3:
	  x__h7552 =
	      SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[255:192];
      3'd4:
	  x__h7552 =
	      SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[319:256];
      3'd5:
	  x__h7552 =
	      SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[383:320];
      3'd6:
	  x__h7552 =
	      SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[447:384];
      3'd7:
	  x__h7552 =
	      SEL_ARR_v_lb_line_0_read__55_v_lb_line_1_read__ETC___d160[511:448];
    endcase
  end
  always@(rg_lb_tail or
	  v_lb_valid_0 or v_lb_valid_1 or v_lb_valid_2 or v_lb_valid_3)
  begin
    case (rg_lb_tail)
      2'd0:
	  SEL_ARR_NOT_v_lb_valid_0_read_4_NOT_v_lb_valid_ETC___d199 =
	      !v_lb_valid_0;
      2'd1:
	  SEL_ARR_NOT_v_lb_valid_0_read_4_NOT_v_lb_valid_ETC___d199 =
	      !v_lb_valid_1;
      2'd2:
	  SEL_ARR_NOT_v_lb_valid_0_read_4_NOT_v_lb_valid_ETC___d199 =
	      !v_lb_valid_2;
      2'd3:
	  SEL_ARR_NOT_v_lb_valid_0_read_4_NOT_v_lb_valid_ETC___d199 =
	      !v_lb_valid_3;
    endcase
  end
  always@(rg_sb_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_sb_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140 =
	      v_sb_meta_0[65:2];
      1'd1:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140 =
	      v_sb_meta_1[65:2];
    endcase
  end
  always@(rg_sb_tail or
	  v_sb_meta_0_read__0_BITS_65_TO_2_8_AND_v_sb_me_ETC___d412 or
	  v_sb_meta_1_read__2_BITS_65_TO_2_9_AND_v_sb_me_ETC___d448)
  begin
    case (rg_sb_tail)
      1'd0:
	  y__h19644 =
	      v_sb_meta_0_read__0_BITS_65_TO_2_8_AND_v_sb_me_ETC___d412;
      1'd1:
	  y__h19644 =
	      v_sb_meta_1_read__2_BITS_65_TO_2_9_AND_v_sb_me_ETC___d448;
    endcase
  end
  always@(x__h19647 or
	  v_sb_meta_0_read__0_BITS_65_TO_2_8_AND_v_sb_me_ETC___d412 or
	  v_sb_meta_1_read__2_BITS_65_TO_2_9_AND_v_sb_me_ETC___d448)
  begin
    case (x__h19647)
      1'd0:
	  x__h19645 =
	      v_sb_meta_0_read__0_BITS_65_TO_2_8_AND_v_sb_me_ETC___d412;
      1'd1:
	  x__h19645 =
	      v_sb_meta_1_read__2_BITS_65_TO_2_9_AND_v_sb_me_ETC___d448;
    endcase
  end
  always@(ma_commit_store_c or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (ma_commit_store_c[0])
      1'd0:
	  CASE_ma_commit_store_c_BIT_0_0_v_sb_meta_0_BIT_ETC__q7 =
	      v_sb_meta_0[68];
      1'd1:
	  CASE_ma_commit_store_c_BIT_0_0_v_sb_meta_0_BIT_ETC__q7 =
	      v_sb_meta_1[68];
    endcase
  end
  always@(rg_lb_head or
	  v_lb_valid_0 or v_lb_valid_1 or v_lb_valid_2 or v_lb_valid_3)
  begin
    case (rg_lb_head)
      2'd0:
	  SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d527 =
	      v_lb_valid_0;
      2'd1:
	  SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d527 =
	      v_lb_valid_1;
      2'd2:
	  SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d527 =
	      v_lb_valid_2;
      2'd3:
	  SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d527 =
	      v_lb_valid_3;
    endcase
  end
  always@(rg_sb_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_sb_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_132_TO_69_36__ETC___d139 =
	      v_sb_meta_0[132:69];
      1'd1:
	  SEL_ARR_v_sb_meta_0_read__0_BITS_132_TO_69_36__ETC___d139 =
	      v_sb_meta_1[132:69];
    endcase
  end
  always@(rg_lb_head or v_lb_tag_0 or v_lb_tag_1 or v_lb_tag_2 or v_lb_tag_3)
  begin
    case (rg_lb_head)
      2'd0:
	  SEL_ARR_v_lb_tag_0_read__89_v_lb_tag_1_read__8_ETC___d531 =
	      v_lb_tag_0;
      2'd1:
	  SEL_ARR_v_lb_tag_0_read__89_v_lb_tag_1_read__8_ETC___d531 =
	      v_lb_tag_1;
      2'd2:
	  SEL_ARR_v_lb_tag_0_read__89_v_lb_tag_1_read__8_ETC___d531 =
	      v_lb_tag_2;
      2'd3:
	  SEL_ARR_v_lb_tag_0_read__89_v_lb_tag_1_read__8_ETC___d531 =
	      v_lb_tag_3;
    endcase
  end
  always@(rg_sb_tail or v_sb_valid_0 or v_sb_valid_1)
  begin
    case (rg_sb_tail)
      1'd0:
	  CASE_rg_sb_tail_0_NOT_v_sb_valid_0_1_NOT_v_sb__ETC__q8 =
	      !v_sb_valid_0;
      1'd1:
	  CASE_rg_sb_tail_0_NOT_v_sb_valid_0_1_NOT_v_sb__ETC__q8 =
	      !v_sb_valid_1;
    endcase
  end
  always@(ma_commit_store_c or v_sb_commit_0 or v_sb_commit_1)
  begin
    case (ma_commit_store_c[0])
      1'd0:
	  CASE_ma_commit_store_c_BIT_0_0_NOT_v_sb_commit_ETC__q9 =
	      !v_sb_commit_0;
      1'd1:
	  CASE_ma_commit_store_c_BIT_0_0_NOT_v_sb_commit_ETC__q9 =
	      !v_sb_commit_1;
    endcase
  end
  always@(ma_commit_store_c or v_sb_valid_0 or v_sb_valid_1)
  begin
    case (ma_commit_store_c[0])
      1'd0:
	  CASE_ma_commit_store_c_BIT_0_0_v_sb_valid_0_1__ETC__q10 =
	      v_sb_valid_0;
      1'd1:
	  CASE_ma_commit_store_c_BIT_0_0_v_sb_valid_0_1__ETC__q10 =
	      v_sb_valid_1;
    endcase
  end
  always@(rg_lb_head or
	  x_port1__read__h6646 or
	  x_port1__read__h6650 or
	  x_port1__read__h6654 or x_port1__read__h6658)
  begin
    case (rg_lb_head)
      2'd0:
	  SEL_ARR_v_lb_sbpending_0_0_port1__read__19_v_l_ETC___d524 =
	      x_port1__read__h6646;
      2'd1:
	  SEL_ARR_v_lb_sbpending_0_0_port1__read__19_v_l_ETC___d524 =
	      x_port1__read__h6650;
      2'd2:
	  SEL_ARR_v_lb_sbpending_0_0_port1__read__19_v_l_ETC___d524 =
	      x_port1__read__h6654;
      2'd3:
	  SEL_ARR_v_lb_sbpending_0_0_port1__read__19_v_l_ETC___d524 =
	      x_port1__read__h6658;
    endcase
  end
  always@(rg_lb_head or
	  x_port1__read__h6648 or
	  x_port1__read__h6652 or
	  x_port1__read__h6656 or x_port1__read__h6660)
  begin
    case (rg_lb_head)
      2'd0:
	  SEL_ARR_v_lb_sbpending_0_1_port1__read__13_v_l_ETC___d518 =
	      x_port1__read__h6648;
      2'd1:
	  SEL_ARR_v_lb_sbpending_0_1_port1__read__13_v_l_ETC___d518 =
	      x_port1__read__h6652;
      2'd2:
	  SEL_ARR_v_lb_sbpending_0_1_port1__read__13_v_l_ETC___d518 =
	      x_port1__read__h6656;
      2'd3:
	  SEL_ARR_v_lb_sbpending_0_1_port1__read__13_v_l_ETC___d518 =
	      x_port1__read__h6660;
    endcase
  end
  always@(rg_sb_head or
	  v_sb_commit_0_port1__read or v_sb_commit_1_port1__read)
  begin
    case (rg_sb_head)
      1'd0:
	  SEL_ARR_v_sb_commit_0_port1__read__09_v_sb_com_ETC___d112 =
	      v_sb_commit_0_port1__read;
      1'd1:
	  SEL_ARR_v_sb_commit_0_port1__read__09_v_sb_com_ETC___d112 =
	      v_sb_commit_1_port1__read;
    endcase
  end
  always@(rg_sb_tail or
	  v_sb_commit_0_port1__read or v_sb_commit_1_port1__read)
  begin
    case (rg_sb_tail)
      1'd0:
	  CASE_rg_sb_tail_0_NOT_v_sb_commit_0port1__rea_ETC__q11 =
	      !v_sb_commit_0_port1__read;
      1'd1:
	  CASE_rg_sb_tail_0_NOT_v_sb_commit_0port1__rea_ETC__q11 =
	      !v_sb_commit_1_port1__read;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (v_lb_line_0_EN) v_lb_line_0 <= `BSV_ASSIGNMENT_DELAY v_lb_line_0_D_IN;
    if (v_lb_line_1_EN) v_lb_line_1 <= `BSV_ASSIGNMENT_DELAY v_lb_line_1_D_IN;
    if (v_lb_line_2_EN) v_lb_line_2 <= `BSV_ASSIGNMENT_DELAY v_lb_line_2_D_IN;
    if (v_lb_line_3_EN) v_lb_line_3 <= `BSV_ASSIGNMENT_DELAY v_lb_line_3_D_IN;
    if (v_lb_tag_0_EN) v_lb_tag_0 <= `BSV_ASSIGNMENT_DELAY v_lb_tag_0_D_IN;
    if (v_lb_tag_1_EN) v_lb_tag_1 <= `BSV_ASSIGNMENT_DELAY v_lb_tag_1_D_IN;
    if (v_lb_tag_2_EN) v_lb_tag_2 <= `BSV_ASSIGNMENT_DELAY v_lb_tag_2_D_IN;
    if (v_lb_tag_3_EN) v_lb_tag_3 <= `BSV_ASSIGNMENT_DELAY v_lb_tag_3_D_IN;
    if (v_sb_meta_0_EN) v_sb_meta_0 <= `BSV_ASSIGNMENT_DELAY v_sb_meta_0_D_IN;
    if (v_sb_meta_1_EN) v_sb_meta_1 <= `BSV_ASSIGNMENT_DELAY v_sb_meta_1_D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      rg_atomic_op <= `BSV_ASSIGNMENT_DELAY 5'd0;
      rg_atomic_readword <= `BSV_ASSIGNMENT_DELAY 64'd0;
      rg_atomic_tail <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_atomic_writeword <= `BSV_ASSIGNMENT_DELAY 64'd0;
      rg_lb_head <= `BSV_ASSIGNMENT_DELAY 2'd0;
      rg_lb_tail <= `BSV_ASSIGNMENT_DELAY 2'd0;
      rg_sb_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_sb_head <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_sb_tail <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_sbpending_0_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_sbpending_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_sbpending_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_sbpending_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_sbpending_2_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_sbpending_2_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_sbpending_3_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_sbpending_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_lb_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_sb_commit_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_sb_commit_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_sb_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_sb_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (rg_atomic_op_EN)
	rg_atomic_op <= `BSV_ASSIGNMENT_DELAY rg_atomic_op_D_IN;
      if (rg_atomic_readword_EN)
	rg_atomic_readword <= `BSV_ASSIGNMENT_DELAY rg_atomic_readword_D_IN;
      if (rg_atomic_tail_EN)
	rg_atomic_tail <= `BSV_ASSIGNMENT_DELAY rg_atomic_tail_D_IN;
      if (rg_atomic_writeword_EN)
	rg_atomic_writeword <= `BSV_ASSIGNMENT_DELAY rg_atomic_writeword_D_IN;
      if (rg_lb_head_EN) rg_lb_head <= `BSV_ASSIGNMENT_DELAY rg_lb_head_D_IN;
      if (rg_lb_tail_EN) rg_lb_tail <= `BSV_ASSIGNMENT_DELAY rg_lb_tail_D_IN;
      if (rg_sb_busy_EN) rg_sb_busy <= `BSV_ASSIGNMENT_DELAY rg_sb_busy_D_IN;
      if (rg_sb_head_EN) rg_sb_head <= `BSV_ASSIGNMENT_DELAY rg_sb_head_D_IN;
      if (rg_sb_tail_EN) rg_sb_tail <= `BSV_ASSIGNMENT_DELAY rg_sb_tail_D_IN;
      if (v_lb_sbpending_0_0_EN)
	v_lb_sbpending_0_0 <= `BSV_ASSIGNMENT_DELAY v_lb_sbpending_0_0_D_IN;
      if (v_lb_sbpending_0_1_EN)
	v_lb_sbpending_0_1 <= `BSV_ASSIGNMENT_DELAY v_lb_sbpending_0_1_D_IN;
      if (v_lb_sbpending_1_0_EN)
	v_lb_sbpending_1_0 <= `BSV_ASSIGNMENT_DELAY v_lb_sbpending_1_0_D_IN;
      if (v_lb_sbpending_1_1_EN)
	v_lb_sbpending_1_1 <= `BSV_ASSIGNMENT_DELAY v_lb_sbpending_1_1_D_IN;
      if (v_lb_sbpending_2_0_EN)
	v_lb_sbpending_2_0 <= `BSV_ASSIGNMENT_DELAY v_lb_sbpending_2_0_D_IN;
      if (v_lb_sbpending_2_1_EN)
	v_lb_sbpending_2_1 <= `BSV_ASSIGNMENT_DELAY v_lb_sbpending_2_1_D_IN;
      if (v_lb_sbpending_3_0_EN)
	v_lb_sbpending_3_0 <= `BSV_ASSIGNMENT_DELAY v_lb_sbpending_3_0_D_IN;
      if (v_lb_sbpending_3_1_EN)
	v_lb_sbpending_3_1 <= `BSV_ASSIGNMENT_DELAY v_lb_sbpending_3_1_D_IN;
      if (v_lb_valid_0_EN)
	v_lb_valid_0 <= `BSV_ASSIGNMENT_DELAY v_lb_valid_0_D_IN;
      if (v_lb_valid_1_EN)
	v_lb_valid_1 <= `BSV_ASSIGNMENT_DELAY v_lb_valid_1_D_IN;
      if (v_lb_valid_2_EN)
	v_lb_valid_2 <= `BSV_ASSIGNMENT_DELAY v_lb_valid_2_D_IN;
      if (v_lb_valid_3_EN)
	v_lb_valid_3 <= `BSV_ASSIGNMENT_DELAY v_lb_valid_3_D_IN;
      if (v_sb_commit_0_EN)
	v_sb_commit_0 <= `BSV_ASSIGNMENT_DELAY v_sb_commit_0_D_IN;
      if (v_sb_commit_1_EN)
	v_sb_commit_1 <= `BSV_ASSIGNMENT_DELAY v_sb_commit_1_D_IN;
      if (v_sb_valid_0_EN)
	v_sb_valid_0 <= `BSV_ASSIGNMENT_DELAY v_sb_valid_0_D_IN;
      if (v_sb_valid_1_EN)
	v_sb_valid_1 <= `BSV_ASSIGNMENT_DELAY v_sb_valid_1_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_atomic_op = 5'h0A;
    rg_atomic_readword = 64'hAAAAAAAAAAAAAAAA;
    rg_atomic_tail = 1'h0;
    rg_atomic_writeword = 64'hAAAAAAAAAAAAAAAA;
    rg_lb_head = 2'h2;
    rg_lb_tail = 2'h2;
    rg_sb_busy = 1'h0;
    rg_sb_head = 1'h0;
    rg_sb_tail = 1'h0;
    v_lb_line_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_lb_line_1 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_lb_line_2 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_lb_line_3 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_lb_sbpending_0_0 = 1'h0;
    v_lb_sbpending_0_1 = 1'h0;
    v_lb_sbpending_1_0 = 1'h0;
    v_lb_sbpending_1_1 = 1'h0;
    v_lb_sbpending_2_0 = 1'h0;
    v_lb_sbpending_2_1 = 1'h0;
    v_lb_sbpending_3_0 = 1'h0;
    v_lb_sbpending_3_1 = 1'h0;
    v_lb_tag_0 = 26'h2AAAAAA;
    v_lb_tag_1 = 26'h2AAAAAA;
    v_lb_tag_2 = 26'h2AAAAAA;
    v_lb_tag_3 = 26'h2AAAAAA;
    v_lb_valid_0 = 1'h0;
    v_lb_valid_1 = 1'h0;
    v_lb_valid_2 = 1'h0;
    v_lb_valid_3 = 1'h0;
    v_sb_commit_0 = 1'h0;
    v_sb_commit_1 = 1'h0;
    v_sb_meta_0 = 165'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_sb_meta_1 = 165'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_sb_valid_0 = 1'h0;
    v_sb_valid_1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  NOT_0_CONCAT_v_lb_valid_3_read__0_AND_v_lb_tag_ETC___d297)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache_lib.bsv\", line 2073, column 44\nSB: Multiple lines indicate a hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  NOT_0_CONCAT_v_lb_valid_3_read__0_AND_v_lb_tag_ETC___d297)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d298 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d299 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d300 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  v__h14500 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d298 ||
	   TASK_testplusargs___d299 && TASK_testplusargs___d300))
	$write("[%10d", v__h14500, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d298 ||
	   TASK_testplusargs___d299 && TASK_testplusargs___d300))
	if (v_sb_meta_0[1:0] == 2'd0)
	  $write("[%2d]SB: Lookup[%2d]:valid: %b ",
		 id,
		 $signed(32'd0),
		 v_sb_valid_0,
		 "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		 "B",
		 v_sb_meta_0[164:133],
		 v_sb_meta_0[132:69],
		 v_sb_meta_0[65:2],
		 v_sb_meta_0[67:66]);
	else
	  if (v_sb_meta_0[1:0] == 2'd1)
	    $write("[%2d]SB: Lookup[%2d]:valid: %b ",
		   id,
		   $signed(32'd0),
		   v_sb_valid_0,
		   "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		   "H",
		   v_sb_meta_0[164:133],
		   v_sb_meta_0[132:69],
		   v_sb_meta_0[65:2],
		   v_sb_meta_0[67:66]);
	  else
	    if (v_sb_meta_0[1:0] == 2'd2)
	      $write("[%2d]SB: Lookup[%2d]:valid: %b ",
		     id,
		     $signed(32'd0),
		     v_sb_valid_0,
		     "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		     "W",
		     v_sb_meta_0[164:133],
		     v_sb_meta_0[132:69],
		     v_sb_meta_0[65:2],
		     v_sb_meta_0[67:66]);
	    else
	      $write("[%2d]SB: Lookup[%2d]:valid: %b ",
		     id,
		     $signed(32'd0),
		     v_sb_valid_0,
		     "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		     "D",
		     v_sb_meta_0[164:133],
		     v_sb_meta_0[132:69],
		     v_sb_meta_0[65:2],
		     v_sb_meta_0[67:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d298 ||
	   TASK_testplusargs___d299 && TASK_testplusargs___d300))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d311 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d312 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d313 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  v__h14714 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d311 ||
	   TASK_testplusargs___d312 && TASK_testplusargs___d313))
	$write("[%10d", v__h14714, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d311 ||
	   TASK_testplusargs___d312 && TASK_testplusargs___d313))
	if (v_sb_meta_1[1:0] == 2'd0)
	  $write("[%2d]SB: Lookup[%2d]:valid: %b ",
		 id,
		 $signed(32'd1),
		 v_sb_valid_1,
		 "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		 "B",
		 v_sb_meta_1[164:133],
		 v_sb_meta_1[132:69],
		 v_sb_meta_1[65:2],
		 v_sb_meta_1[67:66]);
	else
	  if (v_sb_meta_1[1:0] == 2'd1)
	    $write("[%2d]SB: Lookup[%2d]:valid: %b ",
		   id,
		   $signed(32'd1),
		   v_sb_valid_1,
		   "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		   "H",
		   v_sb_meta_1[164:133],
		   v_sb_meta_1[132:69],
		   v_sb_meta_1[65:2],
		   v_sb_meta_1[67:66]);
	  else
	    if (v_sb_meta_1[1:0] == 2'd2)
	      $write("[%2d]SB: Lookup[%2d]:valid: %b ",
		     id,
		     $signed(32'd1),
		     v_sb_valid_1,
		     "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		     "W",
		     v_sb_meta_1[164:133],
		     v_sb_meta_1[132:69],
		     v_sb_meta_1[65:2],
		     v_sb_meta_1[67:66]);
	    else
	      $write("[%2d]SB: Lookup[%2d]:valid: %b ",
		     id,
		     $signed(32'd1),
		     v_sb_valid_1,
		     "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		     "D",
		     v_sb_meta_1[164:133],
		     v_sb_meta_1[132:69],
		     v_sb_meta_1[65:2],
		     v_sb_meta_1[67:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d311 ||
	   TASK_testplusargs___d312 && TASK_testplusargs___d313))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d324 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d325 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  TASK_testplusargs___d326 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup)
	begin
	  v__h14933 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write("[%10d", v__h14933, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write("[%2d]DCACHE: SB lookup response:%h", id, lv_word__h14866);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_core_lookup &&
	  (TASK_testplusargs___d324 ||
	   TASK_testplusargs___d325 && TASK_testplusargs___d326))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line &&
	  v_lb_valid_0_read_AND_v_lb_valid_1_read_AND_v__ETC___d13)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache_lib.bsv\", line 1988, column 31\nSB: Allocating line when its full");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line &&
	  v_lb_valid_0_read_AND_v_lb_valid_1_read_AND_v__ETC___d13)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line &&
	  !SEL_ARR_NOT_v_lb_valid_0_read_4_NOT_v_lb_valid_ETC___d199)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache_lib.bsv\", line 1989, column 46\nSB: Allocating line which is already valid");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line &&
	  !SEL_ARR_NOT_v_lb_valid_0_read_4_NOT_v_lb_valid_ETC___d199)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line)
	begin
	  TASK_testplusargs___d208 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line)
	begin
	  TASK_testplusargs___d209 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line)
	begin
	  TASK_testplusargs___d210 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line)
	begin
	  v__h11009 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line &&
	  (TASK_testplusargs___d208 ||
	   TASK_testplusargs___d209 && TASK_testplusargs___d210))
	$write("[%10d", v__h11009, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line &&
	  (TASK_testplusargs___d208 ||
	   TASK_testplusargs___d209 && TASK_testplusargs___d210))
	$write("[%2d]SB: Allocating Line@[%2d]", id, rg_lb_tail);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_line &&
	  (TASK_testplusargs___d208 ||
	   TASK_testplusargs___d209 && TASK_testplusargs___d210))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store &&
	  NOT_SEL_ARR_NOT_v_sb_valid_0_read__1_4_NOT_v_s_ETC___d217)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache_lib.bsv\", line 2017, column 45\nValid SB Entry Allocated");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store &&
	  NOT_SEL_ARR_NOT_v_sb_valid_0_read__1_4_NOT_v_s_ETC___d217)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store &&
	  NOT_SEL_ARR_NOT_v_sb_commit_0_port1__read__09__ETC___d222)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache_lib.bsv\", line 2018, column 49\nCommit field of SB is already set");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store &&
	  NOT_SEL_ARR_NOT_v_sb_commit_0_port1__read__09__ETC___d222)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store)
	begin
	  TASK_testplusargs___d250 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store)
	begin
	  TASK_testplusargs___d251 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store)
	begin
	  TASK_testplusargs___d252 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store)
	begin
	  v__h13545 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store &&
	  (TASK_testplusargs___d250 ||
	   TASK_testplusargs___d251 && TASK_testplusargs___d252))
	$write("[%10d", v__h13545, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store &&
	  (TASK_testplusargs___d250 ||
	   TASK_testplusargs___d251 && TASK_testplusargs___d252))
	if (ma_allocate_store_size == 2'd0)
	  $write("[%2d]SB: SB Allocation@[%d]:",
		 id,
		 rg_sb_tail,
		 "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		 "B",
		 ma_allocate_store_address,
		 x__h13462,
		 storemask__h11065,
		 ma_allocate_store_lbindex);
	else
	  if (ma_allocate_store_size == 2'd1)
	    $write("[%2d]SB: SB Allocation@[%d]:",
		   id,
		   rg_sb_tail,
		   "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		   "H",
		   ma_allocate_store_address,
		   x__h13462,
		   storemask__h11065,
		   ma_allocate_store_lbindex);
	  else
	    if (ma_allocate_store_size == 2'd2)
	      $write("[%2d]SB: SB Allocation@[%d]:",
		     id,
		     rg_sb_tail,
		     "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		     "W",
		     ma_allocate_store_address,
		     x__h13462,
		     storemask__h11065,
		     ma_allocate_store_lbindex);
	    else
	      $write("[%2d]SB: SB Allocation@[%d]:",
		     id,
		     rg_sb_tail,
		     "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		     "D",
		     ma_allocate_store_address,
		     x__h13462,
		     storemask__h11065,
		     ma_allocate_store_lbindex);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_store &&
	  (TASK_testplusargs___d250 ||
	   TASK_testplusargs___d251 && TASK_testplusargs___d252))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release &&
	  (!SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d527 ||
	   x__h36392 != 2'd0))
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache_lib.bsv\", line 2119, column 67\nSB release of empty line");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_release &&
	  (!SEL_ARR_v_lb_valid_0_read_v_lb_valid_1_read_v__ETC___d527 ||
	   x__h36392 != 2'd0))
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store &&
	  NOT_SEL_ARR_v_sb_valid_0_read__1_v_sb_valid_1__ETC___d471)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache_lib.bsv\", line 2131, column 39\nSB: commiting STORE from empty entry");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store &&
	  NOT_SEL_ARR_v_sb_valid_0_read__1_v_sb_valid_1__ETC___d471)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store &&
	  NOT_SEL_ARR_NOT_v_sb_commit_0_port0__read__72__ETC___d478)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache_lib.bsv\", line 2132, column 44\nSB: commit field not False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store &&
	  NOT_SEL_ARR_NOT_v_sb_commit_0_port0__read__72__ETC___d478)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store)
	begin
	  TASK_testplusargs___d479 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store)
	begin
	  TASK_testplusargs___d480 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store)
	begin
	  TASK_testplusargs___d481 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store)
	begin
	  v__h35770 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store &&
	  (TASK_testplusargs___d479 ||
	   TASK_testplusargs___d480 && TASK_testplusargs___d481))
	$write("[%10d", v__h35770, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store &&
	  (TASK_testplusargs___d479 ||
	   TASK_testplusargs___d480 && TASK_testplusargs___d481))
	$write("[%2d]SB: making entry ready for commit [%2d]: ",
	       id,
	       ma_commit_store_c[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store &&
	  (TASK_testplusargs___d479 ||
	   TASK_testplusargs___d480 && TASK_testplusargs___d481))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_atomic)
	begin
	  TASK_testplusargs___d542 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_atomic)
	begin
	  TASK_testplusargs___d543 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_atomic)
	begin
	  TASK_testplusargs___d544 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_atomic)
	begin
	  v__h36948 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_atomic &&
	  (TASK_testplusargs___d542 ||
	   TASK_testplusargs___d543 && TASK_testplusargs___d544))
	$write("[%10d", v__h36948, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_atomic &&
	  (TASK_testplusargs___d542 ||
	   TASK_testplusargs___d543 && TASK_testplusargs___d544))
	$write("[%2d]SB: initiating atomic op sbindex:%d",
	       id,
	       ma_perform_atomic_sbindex);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_atomic &&
	  (TASK_testplusargs___d542 ||
	   TASK_testplusargs___d543 && TASK_testplusargs___d544))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d1 = $test$plusargs("fullverbose");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d2 = $test$plusargs("mdcache");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d3 = $test$plusargs("l3");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h3332 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%10d", v__h3332, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%2d]DCACHE: lb_full:%b lb_empty:%b sb_full:%b sb_empty:%b",
	       id,
	       v_lb_valid_0_read_AND_v_lb_valid_1_read_AND_v__ETC___d13,
	       !v_lb_valid_0 && !v_lb_valid_1 && !v_lb_valid_2 &&
	       !v_lb_valid_3,
	       v_sb_valid_0 && v_sb_valid_1,
	       !v_sb_valid_0 && !v_sb_valid_1);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy)
	begin
	  TASK_testplusargs___d100 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy)
	begin
	  TASK_testplusargs___d101 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy)
	begin
	  TASK_testplusargs___d102 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy)
	begin
	  v__h5577 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy &&
	  (TASK_testplusargs___d100 ||
	   TASK_testplusargs___d101 && TASK_testplusargs___d102))
	$write("[%10d", v__h5577, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy &&
	  (TASK_testplusargs___d100 ||
	   TASK_testplusargs___d101 && TASK_testplusargs___d102))
	$write("[%2d]SB: Performing Atomic: Op:%b Wdata:%h Rdata:%h Result:%h",
	       id,
	       rg_atomic_op,
	       rg_atomic_writeword,
	       rg_atomic_readword,
	       _theResult____h4491);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy &&
	  (TASK_testplusargs___d100 ||
	   TASK_testplusargs___d101 && TASK_testplusargs___d102))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_commit_from_sb_to_line)
	begin
	  TASK_testplusargs___d122 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_commit_from_sb_to_line)
	begin
	  TASK_testplusargs___d123 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_commit_from_sb_to_line)
	begin
	  TASK_testplusargs___d124 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_commit_from_sb_to_line)
	begin
	  v__h6024 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	  (TASK_testplusargs___d122 ||
	   TASK_testplusargs___d123 && TASK_testplusargs___d124))
	$write("[%10d", v__h6024, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	  (TASK_testplusargs___d122 ||
	   TASK_testplusargs___d123 && TASK_testplusargs___d124))
	if (SEL_ARR_v_sb_meta_0_read__0_BITS_1_TO_0_2_v_sb_ETC___d128 == 2'd0)
	  $write("[%2d]SB: Commiting Store from entry@[%2d]: ",
		 id,
		 rg_sb_head,
		 "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		 "B",
		 SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135,
		 SEL_ARR_v_sb_meta_0_read__0_BITS_132_TO_69_36__ETC___d139,
		 SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140,
		 SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115);
	else
	  if (SEL_ARR_v_sb_meta_0_read__0_BITS_1_TO_0_2_v_sb_ETC___d128 ==
	      2'd1)
	    $write("[%2d]SB: Commiting Store from entry@[%2d]: ",
		   id,
		   rg_sb_head,
		   "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		   "H",
		   SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135,
		   SEL_ARR_v_sb_meta_0_read__0_BITS_132_TO_69_36__ETC___d139,
		   SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140,
		   SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115);
	  else
	    if (SEL_ARR_v_sb_meta_0_read__0_BITS_1_TO_0_2_v_sb_ETC___d128 ==
		2'd2)
	      $write("[%2d]SB: Commiting Store from entry@[%2d]: ",
		     id,
		     rg_sb_head,
		     "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		     "W",
		     SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135,
		     SEL_ARR_v_sb_meta_0_read__0_BITS_132_TO_69_36__ETC___d139,
		     SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140,
		     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115);
	    else
	      $write("[%2d]SB: Commiting Store from entry@[%2d]: ",
		     id,
		     rg_sb_head,
		     "SBEntry: {%s@[%h]=%h(mask:%h) to lb@[%d]",
		     "D",
		     SEL_ARR_v_sb_meta_0_read__0_BITS_164_TO_133_1__ETC___d135,
		     SEL_ARR_v_sb_meta_0_read__0_BITS_132_TO_69_36__ETC___d139,
		     SEL_ARR_v_sb_meta_0_read__0_BITS_65_TO_2_8_v_s_ETC___d140,
		     SEL_ARR_v_sb_meta_0_read__0_BITS_67_TO_66_4_v__ETC___d115);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_commit_from_sb_to_line &&
	  (TASK_testplusargs___d122 ||
	   TASK_testplusargs___d123 && TASK_testplusargs___d124))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstorebuffer


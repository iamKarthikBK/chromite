//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Sat Oct  2 15:36:13 +0530 2021
//
//
// Ports:
// Name                         I/O  size props
// slave_AWREADY                  O     1
// slave_WREADY                   O     1
// slave_BVALID                   O     1
// slave_BID                      O     1 reg
// slave_BRESP                    O     2 reg
// slave_ARREADY                  O     1
// slave_RVALID                   O     1
// slave_RID                      O     1 reg
// slave_RDATA                    O    64 reg
// slave_RRESP                    O     2 reg
// slave_RLAST                    O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_AWVALID                  I     1
// slave_AWID                     I     1 reg
// slave_AWADDR                   I    32 reg
// slave_AWLEN                    I     8 reg
// slave_AWSIZE                   I     3 reg
// slave_AWBURST                  I     2 reg
// slave_AWLOCK                   I     1 reg
// slave_AWCACHE                  I     4 reg
// slave_AWPROT                   I     3 reg
// slave_AWQOS                    I     4 reg
// slave_AWREGION                 I     4 reg
// slave_WVALID                   I     1
// slave_WDATA                    I    64 reg
// slave_WSTRB                    I     8 reg
// slave_WLAST                    I     1 reg
// slave_BREADY                   I     1
// slave_ARVALID                  I     1
// slave_ARID                     I     1 reg
// slave_ARADDR                   I    32 reg
// slave_ARLEN                    I     8 reg
// slave_ARSIZE                   I     3 reg
// slave_ARBURST                  I     2 reg
// slave_ARLOCK                   I     1 reg
// slave_ARCACHE                  I     4 reg
// slave_ARPROT                   I     3 reg
// slave_ARQOS                    I     4 reg
// slave_ARREGION                 I     4 reg
// slave_RREADY                   I     1
//
// Combinational paths from inputs to outputs:
//   slave_BREADY -> slave_AWREADY
//   slave_BREADY -> slave_WREADY
//   slave_RREADY -> slave_ARREADY
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbram(CLK,
	      RST_N,

	      slave_AWVALID,
	      slave_AWID,
	      slave_AWADDR,
	      slave_AWLEN,
	      slave_AWSIZE,
	      slave_AWBURST,
	      slave_AWLOCK,
	      slave_AWCACHE,
	      slave_AWPROT,
	      slave_AWQOS,
	      slave_AWREGION,

	      slave_AWREADY,

	      slave_WVALID,
	      slave_WDATA,
	      slave_WSTRB,
	      slave_WLAST,

	      slave_WREADY,

	      slave_BVALID,

	      slave_BID,

	      slave_BRESP,

	      slave_BREADY,

	      slave_ARVALID,
	      slave_ARID,
	      slave_ARADDR,
	      slave_ARLEN,
	      slave_ARSIZE,
	      slave_ARBURST,
	      slave_ARLOCK,
	      slave_ARCACHE,
	      slave_ARPROT,
	      slave_ARQOS,
	      slave_ARREGION,

	      slave_ARREADY,

	      slave_RVALID,

	      slave_RID,

	      slave_RDATA,

	      slave_RRESP,

	      slave_RLAST,

	      slave_RREADY);
  input  CLK;
  input  RST_N;

  // action method slave_m_awvalid
  input  slave_AWVALID;
  input  slave_AWID;
  input  [31 : 0] slave_AWADDR;
  input  [7 : 0] slave_AWLEN;
  input  [2 : 0] slave_AWSIZE;
  input  [1 : 0] slave_AWBURST;
  input  slave_AWLOCK;
  input  [3 : 0] slave_AWCACHE;
  input  [2 : 0] slave_AWPROT;
  input  [3 : 0] slave_AWQOS;
  input  [3 : 0] slave_AWREGION;

  // value method slave_m_awready
  output slave_AWREADY;

  // action method slave_m_wvalid
  input  slave_WVALID;
  input  [63 : 0] slave_WDATA;
  input  [7 : 0] slave_WSTRB;
  input  slave_WLAST;

  // value method slave_m_wready
  output slave_WREADY;

  // value method slave_m_bvalid
  output slave_BVALID;

  // value method slave_m_bid
  output slave_BID;

  // value method slave_m_bresp
  output [1 : 0] slave_BRESP;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_BREADY;

  // action method slave_m_arvalid
  input  slave_ARVALID;
  input  slave_ARID;
  input  [31 : 0] slave_ARADDR;
  input  [7 : 0] slave_ARLEN;
  input  [2 : 0] slave_ARSIZE;
  input  [1 : 0] slave_ARBURST;
  input  slave_ARLOCK;
  input  [3 : 0] slave_ARCACHE;
  input  [2 : 0] slave_ARPROT;
  input  [3 : 0] slave_ARQOS;
  input  [3 : 0] slave_ARREGION;

  // value method slave_m_arready
  output slave_ARREADY;

  // value method slave_m_rvalid
  output slave_RVALID;

  // value method slave_m_rid
  output slave_RID;

  // value method slave_m_rdata
  output [63 : 0] slave_RDATA;

  // value method slave_m_rresp
  output [1 : 0] slave_RRESP;

  // value method slave_m_rlast
  output slave_RLAST;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_RREADY;

  // signals for module outputs
  wire [63 : 0] slave_RDATA;
  wire [1 : 0] slave_BRESP, slave_RRESP;
  wire slave_ARREADY,
       slave_AWREADY,
       slave_BID,
       slave_BVALID,
       slave_RID,
       slave_RLAST,
       slave_RVALID,
       slave_WREADY;

  // inlined wires
  wire [7 : 0] rg_readresp_count_port0__write_1,
	       rg_readresp_count_port1__read,
	       rg_readresp_count_port2__read;
  wire rg_capture_response_EN_port1__write,
       rg_capture_response_port1__read,
       rg_capture_response_port2__read,
       s_xactor_crg_rd_addr_full_EN_port1__write,
       s_xactor_crg_rd_addr_full_port1__read,
       s_xactor_crg_rd_addr_full_port2__read,
       s_xactor_crg_rd_data_full_EN_port0__write,
       s_xactor_crg_rd_data_full_port1__read,
       s_xactor_crg_rd_data_full_port2__read,
       s_xactor_crg_wr_addr_full_EN_port1__write,
       s_xactor_crg_wr_addr_full_port1__read,
       s_xactor_crg_wr_addr_full_port2__read,
       s_xactor_crg_wr_data_full_EN_port0__write,
       s_xactor_crg_wr_data_full_EN_port1__write,
       s_xactor_crg_wr_data_full_port1__read,
       s_xactor_crg_wr_data_full_port2__read,
       s_xactor_crg_wr_resp_full_EN_port0__write,
       s_xactor_crg_wr_resp_full_EN_port1__write,
       s_xactor_crg_wr_resp_full_port1__read,
       s_xactor_crg_wr_resp_full_port2__read;

  // register rg_capture_response
  reg rg_capture_response;
  wire rg_capture_response_D_IN, rg_capture_response_EN;

  // register rg_rd_req
  reg [61 : 0] rg_rd_req;
  wire [61 : 0] rg_rd_req_D_IN;
  wire rg_rd_req_EN;

  // register rg_rd_state
  reg rg_rd_state;
  wire rg_rd_state_D_IN, rg_rd_state_EN;

  // register rg_readreq_count
  reg [7 : 0] rg_readreq_count;
  wire [7 : 0] rg_readreq_count_D_IN;
  wire rg_readreq_count_EN;

  // register rg_readresp_count
  reg [7 : 0] rg_readresp_count;
  wire [7 : 0] rg_readresp_count_D_IN;
  wire rg_readresp_count_EN;

  // register rg_wr_req
  reg [61 : 0] rg_wr_req;
  wire [61 : 0] rg_wr_req_D_IN;
  wire rg_wr_req_EN;

  // register rg_wr_state
  reg rg_wr_state;
  wire rg_wr_state_D_IN, rg_wr_state_EN;

  // register rg_write_response
  reg [2 : 0] rg_write_response;
  wire [2 : 0] rg_write_response_D_IN;
  wire rg_write_response_EN;

  // register s_xactor_crg_rd_addr_full
  reg s_xactor_crg_rd_addr_full;
  wire s_xactor_crg_rd_addr_full_D_IN, s_xactor_crg_rd_addr_full_EN;

  // register s_xactor_crg_rd_data_full
  reg s_xactor_crg_rd_data_full;
  wire s_xactor_crg_rd_data_full_D_IN, s_xactor_crg_rd_data_full_EN;

  // register s_xactor_crg_wr_addr_full
  reg s_xactor_crg_wr_addr_full;
  wire s_xactor_crg_wr_addr_full_D_IN, s_xactor_crg_wr_addr_full_EN;

  // register s_xactor_crg_wr_data_full
  reg s_xactor_crg_wr_data_full;
  wire s_xactor_crg_wr_data_full_D_IN, s_xactor_crg_wr_data_full_EN;

  // register s_xactor_crg_wr_resp_full
  reg s_xactor_crg_wr_resp_full;
  wire s_xactor_crg_wr_resp_full_D_IN, s_xactor_crg_wr_resp_full_EN;

  // register s_xactor_rg_rd_addr
  reg [61 : 0] s_xactor_rg_rd_addr;
  wire [61 : 0] s_xactor_rg_rd_addr_D_IN;
  wire s_xactor_rg_rd_addr_EN;

  // register s_xactor_rg_rd_data
  reg [67 : 0] s_xactor_rg_rd_data;
  wire [67 : 0] s_xactor_rg_rd_data_D_IN;
  wire s_xactor_rg_rd_data_EN;

  // register s_xactor_rg_wr_addr
  reg [61 : 0] s_xactor_rg_wr_addr;
  wire [61 : 0] s_xactor_rg_wr_addr_D_IN;
  wire s_xactor_rg_wr_addr_EN;

  // register s_xactor_rg_wr_data
  reg [72 : 0] s_xactor_rg_wr_data;
  wire [72 : 0] s_xactor_rg_wr_data_D_IN;
  wire s_xactor_rg_wr_data_EN;

  // register s_xactor_rg_wr_resp
  reg [2 : 0] s_xactor_rg_wr_resp;
  wire [2 : 0] s_xactor_rg_wr_resp_D_IN;
  wire s_xactor_rg_wr_resp_EN;

  // ports of submodule ram_v_mem_0
  wire [63 : 0] ram_v_mem_0_dina, ram_v_mem_0_dinb, ram_v_mem_0_doutb;
  wire [21 : 0] ram_v_mem_0_addra, ram_v_mem_0_addrb;
  wire [7 : 0] ram_v_mem_0_wea, ram_v_mem_0_web;
  wire ram_v_mem_0_ena, ram_v_mem_0_enb;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_read_request,
       CAN_FIRE_RL_rl_read_request_burst,
       CAN_FIRE_RL_rl_read_response,
       CAN_FIRE_RL_rl_write_request,
       CAN_FIRE_RL_rl_write_response,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       WILL_FIRE_RL_rl_read_request,
       WILL_FIRE_RL_rl_read_request_burst,
       WILL_FIRE_RL_rl_read_response,
       WILL_FIRE_RL_rl_write_request,
       WILL_FIRE_RL_rl_write_response,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid;

  // inputs to muxes for submodule ports
  wire [61 : 0] MUX_rg_rd_req_write_1__VAL_2, MUX_rg_wr_req_write_1__VAL_2;
  wire [7 : 0] MUX_rg_readreq_count_write_1__VAL_2;
  wire [2 : 0] MUX_s_xactor_rg_wr_resp_write_1__VAL_2;
  wire MUX_rg_rd_state_write_1__SEL_1, MUX_rg_wr_state_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d96;
  reg TASK_testplusargs___d97;
  reg TASK_testplusargs___d98;
  reg [63 : 0] v__h3688;
  reg TASK_testplusargs___d8;
  reg TASK_testplusargs___d9;
  reg TASK_testplusargs___d10;
  reg [63 : 0] v__h2074;
  reg TASK_testplusargs___d22;
  reg TASK_testplusargs___d23;
  reg TASK_testplusargs___d24;
  reg [63 : 0] v__h2583;
  reg TASK_testplusargs___d66;
  reg TASK_testplusargs___d67;
  reg TASK_testplusargs___d68;
  reg [63 : 0] v__h3040;
  reg TASK_testplusargs___d77;
  reg TASK_testplusargs___d78;
  reg TASK_testplusargs___d79;
  reg [63 : 0] v__h3213;
  reg TASK_testplusargs___d125;
  reg TASK_testplusargs___d126;
  reg TASK_testplusargs___d127;
  reg [63 : 0] v__h4334;
  reg TASK_testplusargs___d139;
  reg TASK_testplusargs___d140;
  reg TASK_testplusargs___d141;
  reg [63 : 0] v__h4496;
  reg TASK_testplusargs___d177;
  reg TASK_testplusargs___d178;
  reg TASK_testplusargs___d179;
  reg [63 : 0] v__h5083;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d102;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d104;
  reg TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d145;
  reg TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d146;
  reg s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] address__h2718, address__h4584;
  reg [2 : 0] CASE_rg_rd_req_BITS_28_TO_21_3_2_7_3_15_4_1__q1,
	      CASE_rg_wr_req_BITS_28_TO_21_3_2_7_3_15_4_1__q2;
  wire [31 : 0] mask__h2790,
		mask__h4656,
		new_address__h2788,
		new_address__h4654,
		rel_addr__h1996,
		rel_addr__h2924,
		rel_addr__h3893,
		rel_addr__h4792,
		temp1__h2791,
		temp1__h4657,
		temp2__h2792,
		temp2__h4658,
		y__h2892,
		y__h4758;
  wire [24 : 0] addr__h2007, addr__h3146;
  wire [2 : 0] x__h2833, x__h4699;
  wire _dor1s_xactor_crg_wr_resp_full_EN_port1__write;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_AWREADY = !s_xactor_crg_wr_addr_full_port1__read ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_WREADY = !s_xactor_crg_wr_data_full_port1__read ;

  // value method slave_m_bvalid
  assign slave_BVALID = s_xactor_crg_wr_resp_full ;

  // value method slave_m_bid
  assign slave_BID = s_xactor_rg_wr_resp[2] ;

  // value method slave_m_bresp
  assign slave_BRESP = s_xactor_rg_wr_resp[1:0] ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_ARREADY = !s_xactor_crg_rd_addr_full_port1__read ;

  // value method slave_m_rvalid
  assign slave_RVALID = s_xactor_crg_rd_data_full ;

  // value method slave_m_rid
  assign slave_RID = s_xactor_rg_rd_data[67] ;

  // value method slave_m_rdata
  assign slave_RDATA = s_xactor_rg_rd_data[66:3] ;

  // value method slave_m_rresp
  assign slave_RRESP = s_xactor_rg_rd_data[2:1] ;

  // value method slave_m_rlast
  assign slave_RLAST = s_xactor_rg_rd_data[0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // submodule ram_v_mem_0
  brambe_2rw_nc_load #(.ADDR_WIDTH(32'd22),
		       .DATA_WIDTH(32'd64),
		       .MEMSIZE(32'd4194304),
		       .FILENAME("code.mem")) ram_v_mem_0(.clka(CLK),
							  .clkb(CLK),
							  .addra(ram_v_mem_0_addra),
							  .addrb(ram_v_mem_0_addrb),
							  .dina(ram_v_mem_0_dina),
							  .dinb(ram_v_mem_0_dinb),
							  .wea(ram_v_mem_0_wea),
							  .web(ram_v_mem_0_web),
							  .ena(ram_v_mem_0_ena),
							  .enb(ram_v_mem_0_enb),
							  .douta(),
							  .doutb(ram_v_mem_0_doutb));

  // rule RL_rl_read_response
  assign CAN_FIRE_RL_rl_read_response =
	     !s_xactor_crg_rd_data_full_port1__read && rg_capture_response ;
  assign WILL_FIRE_RL_rl_read_response = CAN_FIRE_RL_rl_read_response ;

  // rule RL_rl_read_request
  assign CAN_FIRE_RL_rl_read_request =
	     s_xactor_crg_rd_addr_full && !rg_rd_state &&
	     !rg_capture_response_port1__read ;
  assign WILL_FIRE_RL_rl_read_request = CAN_FIRE_RL_rl_read_request ;

  // rule RL_rl_read_request_burst
  assign CAN_FIRE_RL_rl_read_request_burst =
	     rg_rd_state && !rg_capture_response_port1__read ;
  assign WILL_FIRE_RL_rl_read_request_burst =
	     CAN_FIRE_RL_rl_read_request_burst ;

  // rule RL_rl_write_request
  assign CAN_FIRE_RL_rl_write_request =
	     s_xactor_crg_wr_addr_full && s_xactor_crg_wr_data_full &&
	     !s_xactor_crg_wr_resp_full_port1__read &&
	     !rg_wr_state ;
  assign WILL_FIRE_RL_rl_write_request = CAN_FIRE_RL_rl_write_request ;

  // rule RL_rl_write_response
  assign CAN_FIRE_RL_rl_write_response =
	     s_xactor_crg_wr_data_full &&
	     !s_xactor_crg_wr_resp_full_port1__read &&
	     rg_wr_state ;
  assign WILL_FIRE_RL_rl_write_response = CAN_FIRE_RL_rl_write_response ;

  // inputs to muxes for submodule ports
  assign MUX_rg_rd_state_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_read_request &&
	     s_xactor_rg_rd_addr[28:21] != 8'd0 ;
  assign MUX_rg_wr_state_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_write_response && s_xactor_rg_wr_data[0] ;
  assign MUX_rg_rd_req_write_1__VAL_2 =
	     { rg_rd_req[61], address__h2718, rg_rd_req[28:0] } ;
  assign MUX_rg_readreq_count_write_1__VAL_2 = rg_readreq_count - 8'd1 ;
  assign MUX_rg_wr_req_write_1__VAL_2 =
	     { rg_wr_req[61], address__h4584, rg_wr_req[28:0] } ;
  assign MUX_s_xactor_rg_wr_resp_write_1__VAL_2 =
	     { s_xactor_rg_wr_addr[61], 2'd0 } ;

  // inlined wires
  assign s_xactor_crg_wr_addr_full_port1__read =
	     !CAN_FIRE_RL_rl_write_request && s_xactor_crg_wr_addr_full ;
  assign s_xactor_crg_wr_addr_full_EN_port1__write =
	     slave_AWVALID && !s_xactor_crg_wr_addr_full_port1__read ;
  assign s_xactor_crg_wr_addr_full_port2__read =
	     s_xactor_crg_wr_addr_full_EN_port1__write ||
	     s_xactor_crg_wr_addr_full_port1__read ;
  assign s_xactor_crg_wr_data_full_EN_port0__write =
	     WILL_FIRE_RL_rl_write_response || WILL_FIRE_RL_rl_write_request ;
  assign s_xactor_crg_wr_data_full_port1__read =
	     !s_xactor_crg_wr_data_full_EN_port0__write &&
	     s_xactor_crg_wr_data_full ;
  assign s_xactor_crg_wr_data_full_EN_port1__write =
	     slave_WVALID && !s_xactor_crg_wr_data_full_port1__read ;
  assign s_xactor_crg_wr_data_full_port2__read =
	     s_xactor_crg_wr_data_full_EN_port1__write ||
	     s_xactor_crg_wr_data_full_port1__read ;
  assign s_xactor_crg_wr_resp_full_EN_port0__write =
	     slave_BREADY && s_xactor_crg_wr_resp_full ;
  assign s_xactor_crg_wr_resp_full_port1__read =
	     !s_xactor_crg_wr_resp_full_EN_port0__write &&
	     s_xactor_crg_wr_resp_full ;
  assign s_xactor_crg_wr_resp_full_EN_port1__write =
	     _dor1s_xactor_crg_wr_resp_full_EN_port1__write &&
	     s_xactor_rg_wr_data[0] ;
  assign s_xactor_crg_wr_resp_full_port2__read =
	     s_xactor_crg_wr_resp_full_EN_port1__write ||
	     s_xactor_crg_wr_resp_full_port1__read ;
  assign s_xactor_crg_rd_addr_full_port1__read =
	     !CAN_FIRE_RL_rl_read_request && s_xactor_crg_rd_addr_full ;
  assign s_xactor_crg_rd_addr_full_EN_port1__write =
	     slave_ARVALID && !s_xactor_crg_rd_addr_full_port1__read ;
  assign s_xactor_crg_rd_addr_full_port2__read =
	     s_xactor_crg_rd_addr_full_EN_port1__write ||
	     s_xactor_crg_rd_addr_full_port1__read ;
  assign s_xactor_crg_rd_data_full_EN_port0__write =
	     slave_RREADY && s_xactor_crg_rd_data_full ;
  assign s_xactor_crg_rd_data_full_port1__read =
	     !s_xactor_crg_rd_data_full_EN_port0__write &&
	     s_xactor_crg_rd_data_full ;
  assign s_xactor_crg_rd_data_full_port2__read =
	     CAN_FIRE_RL_rl_read_response ||
	     s_xactor_crg_rd_data_full_port1__read ;
  assign rg_readresp_count_port0__write_1 = rg_readresp_count - 8'd1 ;
  assign rg_readresp_count_port1__read =
	     CAN_FIRE_RL_rl_read_response ?
	       rg_readresp_count_port0__write_1 :
	       rg_readresp_count ;
  assign rg_readresp_count_port2__read =
	     CAN_FIRE_RL_rl_read_request ?
	       s_xactor_rg_rd_addr[28:21] :
	       rg_readresp_count_port1__read ;
  assign rg_capture_response_port1__read =
	     !CAN_FIRE_RL_rl_read_response && rg_capture_response ;
  assign rg_capture_response_EN_port1__write =
	     WILL_FIRE_RL_rl_read_request_burst ||
	     WILL_FIRE_RL_rl_read_request ;
  assign rg_capture_response_port2__read =
	     rg_capture_response_EN_port1__write ||
	     rg_capture_response_port1__read ;

  // register rg_capture_response
  assign rg_capture_response_D_IN = rg_capture_response_port2__read ;
  assign rg_capture_response_EN = 1'b1 ;

  // register rg_rd_req
  assign rg_rd_req_D_IN =
	     WILL_FIRE_RL_rl_read_request ?
	       s_xactor_rg_rd_addr :
	       MUX_rg_rd_req_write_1__VAL_2 ;
  assign rg_rd_req_EN =
	     WILL_FIRE_RL_rl_read_request ||
	     WILL_FIRE_RL_rl_read_request_burst ;

  // register rg_rd_state
  assign rg_rd_state_D_IN = MUX_rg_rd_state_write_1__SEL_1 ;
  assign rg_rd_state_EN =
	     WILL_FIRE_RL_rl_read_request &&
	     s_xactor_rg_rd_addr[28:21] != 8'd0 ||
	     WILL_FIRE_RL_rl_read_request_burst && rg_readreq_count == 8'd1 ;

  // register rg_readreq_count
  assign rg_readreq_count_D_IN =
	     WILL_FIRE_RL_rl_read_request ?
	       s_xactor_rg_rd_addr[28:21] :
	       MUX_rg_readreq_count_write_1__VAL_2 ;
  assign rg_readreq_count_EN =
	     WILL_FIRE_RL_rl_read_request ||
	     WILL_FIRE_RL_rl_read_request_burst ;

  // register rg_readresp_count
  assign rg_readresp_count_D_IN = rg_readresp_count_port2__read ;
  assign rg_readresp_count_EN = 1'b1 ;

  // register rg_wr_req
  assign rg_wr_req_D_IN =
	     WILL_FIRE_RL_rl_write_request ?
	       s_xactor_rg_wr_addr :
	       MUX_rg_wr_req_write_1__VAL_2 ;
  assign rg_wr_req_EN =
	     WILL_FIRE_RL_rl_write_request || WILL_FIRE_RL_rl_write_response ;

  // register rg_wr_state
  assign rg_wr_state_D_IN = !MUX_rg_wr_state_write_1__SEL_1 ;
  assign rg_wr_state_EN =
	     WILL_FIRE_RL_rl_write_response && s_xactor_rg_wr_data[0] ||
	     WILL_FIRE_RL_rl_write_request && !s_xactor_rg_wr_data[0] ;

  // register rg_write_response
  assign rg_write_response_D_IN = MUX_s_xactor_rg_wr_resp_write_1__VAL_2 ;
  assign rg_write_response_EN = CAN_FIRE_RL_rl_write_request ;

  // register s_xactor_crg_rd_addr_full
  assign s_xactor_crg_rd_addr_full_D_IN =
	     s_xactor_crg_rd_addr_full_port2__read ;
  assign s_xactor_crg_rd_addr_full_EN = 1'b1 ;

  // register s_xactor_crg_rd_data_full
  assign s_xactor_crg_rd_data_full_D_IN =
	     s_xactor_crg_rd_data_full_port2__read ;
  assign s_xactor_crg_rd_data_full_EN = 1'b1 ;

  // register s_xactor_crg_wr_addr_full
  assign s_xactor_crg_wr_addr_full_D_IN =
	     s_xactor_crg_wr_addr_full_port2__read ;
  assign s_xactor_crg_wr_addr_full_EN = 1'b1 ;

  // register s_xactor_crg_wr_data_full
  assign s_xactor_crg_wr_data_full_D_IN =
	     s_xactor_crg_wr_data_full_port2__read ;
  assign s_xactor_crg_wr_data_full_EN = 1'b1 ;

  // register s_xactor_crg_wr_resp_full
  assign s_xactor_crg_wr_resp_full_D_IN =
	     s_xactor_crg_wr_resp_full_port2__read ;
  assign s_xactor_crg_wr_resp_full_EN = 1'b1 ;

  // register s_xactor_rg_rd_addr
  assign s_xactor_rg_rd_addr_D_IN =
	     { slave_ARID,
	       slave_ARADDR,
	       slave_ARLEN,
	       slave_ARSIZE,
	       slave_ARBURST,
	       slave_ARLOCK,
	       slave_ARCACHE,
	       slave_ARPROT,
	       slave_ARQOS,
	       slave_ARREGION } ;
  assign s_xactor_rg_rd_addr_EN =
	     slave_ARVALID && !s_xactor_crg_rd_addr_full_port1__read ;

  // register s_xactor_rg_rd_data
  assign s_xactor_rg_rd_data_D_IN =
	     { rg_rd_req[61],
	       ram_v_mem_0_doutb,
	       2'b0,
	       rg_readresp_count == 8'd0 } ;
  assign s_xactor_rg_rd_data_EN = CAN_FIRE_RL_rl_read_response ;

  // register s_xactor_rg_wr_addr
  assign s_xactor_rg_wr_addr_D_IN =
	     { slave_AWID,
	       slave_AWADDR,
	       slave_AWLEN,
	       slave_AWSIZE,
	       slave_AWBURST,
	       slave_AWLOCK,
	       slave_AWCACHE,
	       slave_AWPROT,
	       slave_AWQOS,
	       slave_AWREGION } ;
  assign s_xactor_rg_wr_addr_EN =
	     slave_AWVALID && !s_xactor_crg_wr_addr_full_port1__read ;

  // register s_xactor_rg_wr_data
  assign s_xactor_rg_wr_data_D_IN =
	     { slave_WDATA, slave_WSTRB, slave_WLAST } ;
  assign s_xactor_rg_wr_data_EN =
	     slave_WVALID && !s_xactor_crg_wr_data_full_port1__read ;

  // register s_xactor_rg_wr_resp
  assign s_xactor_rg_wr_resp_D_IN =
	     MUX_rg_wr_state_write_1__SEL_1 ?
	       rg_write_response :
	       MUX_s_xactor_rg_wr_resp_write_1__VAL_2 ;
  assign s_xactor_rg_wr_resp_EN =
	     WILL_FIRE_RL_rl_write_response && s_xactor_rg_wr_data[0] ||
	     WILL_FIRE_RL_rl_write_request && s_xactor_rg_wr_data[0] ;

  // submodule ram_v_mem_0
  assign ram_v_mem_0_addra =
	     WILL_FIRE_RL_rl_write_request ?
	       rel_addr__h3893[24:3] :
	       rel_addr__h4792[24:3] ;
  assign ram_v_mem_0_addrb =
	     WILL_FIRE_RL_rl_read_request ?
	       rel_addr__h1996[24:3] :
	       rel_addr__h2924[24:3] ;
  assign ram_v_mem_0_dina = s_xactor_rg_wr_data[72:9] ;
  assign ram_v_mem_0_dinb =
	     WILL_FIRE_RL_rl_read_request ?
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  :
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign ram_v_mem_0_wea = s_xactor_rg_wr_data[8:1] ;
  assign ram_v_mem_0_web = 8'd0 ;
  assign ram_v_mem_0_ena =
	     WILL_FIRE_RL_rl_write_request || WILL_FIRE_RL_rl_write_response ;
  assign ram_v_mem_0_enb =
	     WILL_FIRE_RL_rl_read_request ||
	     WILL_FIRE_RL_rl_read_request_burst ;

  // remaining internal signals
  assign _dor1s_xactor_crg_wr_resp_full_EN_port1__write =
	     WILL_FIRE_RL_rl_write_response || WILL_FIRE_RL_rl_write_request ;
  assign addr__h2007 = { 3'd0, rel_addr__h1996[24:3] } ;
  assign addr__h3146 = { 3'd0, rel_addr__h2924[24:3] } ;
  assign mask__h2790 = 32'hFFFFFFFF << x__h2833 ;
  assign mask__h4656 = 32'hFFFFFFFF << x__h4699 ;
  assign new_address__h2788 =
	     rg_rd_req[60:29] +
	     (32'b00000000000000000000000000000001 << rg_rd_req[20:18]) ;
  assign new_address__h4654 =
	     rg_wr_req[60:29] +
	     (32'b00000000000000000000000000000001 << rg_wr_req[20:18]) ;
  assign rel_addr__h1996 = s_xactor_rg_rd_addr[60:29] - 32'h80000000 ;
  assign rel_addr__h2924 = address__h2718 - 32'h80000000 ;
  assign rel_addr__h3893 = s_xactor_rg_wr_addr[60:29] - 32'h80000000 ;
  assign rel_addr__h4792 = address__h4584 - 32'h80000000 ;
  assign temp1__h2791 = rg_rd_req[60:29] & mask__h2790 ;
  assign temp1__h4657 = rg_wr_req[60:29] & mask__h4656 ;
  assign temp2__h2792 = new_address__h2788 & y__h2892 ;
  assign temp2__h4658 = new_address__h4654 & y__h4758 ;
  assign x__h2833 =
	     rg_rd_req[20:18] +
	     CASE_rg_rd_req_BITS_28_TO_21_3_2_7_3_15_4_1__q1 ;
  assign x__h4699 =
	     rg_wr_req[20:18] +
	     CASE_rg_wr_req_BITS_28_TO_21_3_2_7_3_15_4_1__q2 ;
  assign y__h2892 = ~mask__h2790 ;
  assign y__h4758 = ~mask__h4656 ;
  always@(rg_rd_req)
  begin
    case (rg_rd_req[28:21])
      8'd3: CASE_rg_rd_req_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd2;
      8'd7: CASE_rg_rd_req_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd3;
      8'd15: CASE_rg_rd_req_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd4;
      default: CASE_rg_rd_req_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd1;
    endcase
  end
  always@(rg_rd_req or temp1__h2791 or temp2__h2792 or new_address__h2788)
  begin
    case (rg_rd_req[17:16])
      2'b0: address__h2718 = rg_rd_req[60:29];
      2'b01: address__h2718 = new_address__h2788;
      default: address__h2718 = temp1__h2791 | temp2__h2792;
    endcase
  end
  always@(rg_wr_req)
  begin
    case (rg_wr_req[28:21])
      8'd3: CASE_rg_wr_req_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd2;
      8'd7: CASE_rg_wr_req_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd3;
      8'd15: CASE_rg_wr_req_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd4;
      default: CASE_rg_wr_req_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd1;
    endcase
  end
  always@(rg_wr_req or temp1__h4657 or temp2__h4658 or new_address__h4654)
  begin
    case (rg_wr_req[17:16])
      2'b0: address__h4584 = rg_wr_req[60:29];
      2'b01: address__h4584 = new_address__h4654;
      default: address__h4584 = temp1__h4657 | temp2__h4658;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_capture_response <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_rd_req <= `BSV_ASSIGNMENT_DELAY 62'd0;
	rg_rd_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_readreq_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_readresp_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_wr_req <= `BSV_ASSIGNMENT_DELAY 62'd0;
	rg_wr_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_write_response <= `BSV_ASSIGNMENT_DELAY 3'd0;
	s_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_capture_response_EN)
	  rg_capture_response <= `BSV_ASSIGNMENT_DELAY
	      rg_capture_response_D_IN;
	if (rg_rd_req_EN) rg_rd_req <= `BSV_ASSIGNMENT_DELAY rg_rd_req_D_IN;
	if (rg_rd_state_EN)
	  rg_rd_state <= `BSV_ASSIGNMENT_DELAY rg_rd_state_D_IN;
	if (rg_readreq_count_EN)
	  rg_readreq_count <= `BSV_ASSIGNMENT_DELAY rg_readreq_count_D_IN;
	if (rg_readresp_count_EN)
	  rg_readresp_count <= `BSV_ASSIGNMENT_DELAY rg_readresp_count_D_IN;
	if (rg_wr_req_EN) rg_wr_req <= `BSV_ASSIGNMENT_DELAY rg_wr_req_D_IN;
	if (rg_wr_state_EN)
	  rg_wr_state <= `BSV_ASSIGNMENT_DELAY rg_wr_state_D_IN;
	if (rg_write_response_EN)
	  rg_write_response <= `BSV_ASSIGNMENT_DELAY rg_write_response_D_IN;
	if (s_xactor_crg_rd_addr_full_EN)
	  s_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      s_xactor_crg_rd_addr_full_D_IN;
	if (s_xactor_crg_rd_data_full_EN)
	  s_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      s_xactor_crg_rd_data_full_D_IN;
	if (s_xactor_crg_wr_addr_full_EN)
	  s_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      s_xactor_crg_wr_addr_full_D_IN;
	if (s_xactor_crg_wr_data_full_EN)
	  s_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      s_xactor_crg_wr_data_full_D_IN;
	if (s_xactor_crg_wr_resp_full_EN)
	  s_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      s_xactor_crg_wr_resp_full_D_IN;
      end
    if (s_xactor_rg_rd_addr_EN)
      s_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY s_xactor_rg_rd_addr_D_IN;
    if (s_xactor_rg_rd_data_EN)
      s_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY s_xactor_rg_rd_data_D_IN;
    if (s_xactor_rg_wr_addr_EN)
      s_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY s_xactor_rg_wr_addr_D_IN;
    if (s_xactor_rg_wr_data_EN)
      s_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY s_xactor_rg_wr_data_D_IN;
    if (s_xactor_rg_wr_resp_EN)
      s_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY s_xactor_rg_wr_resp_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_capture_response = 1'h0;
    rg_rd_req = 62'h2AAAAAAAAAAAAAAA;
    rg_rd_state = 1'h0;
    rg_readreq_count = 8'hAA;
    rg_readresp_count = 8'hAA;
    rg_wr_req = 62'h2AAAAAAAAAAAAAAA;
    rg_wr_state = 1'h0;
    rg_write_response = 3'h2;
    s_xactor_crg_rd_addr_full = 1'h0;
    s_xactor_crg_rd_data_full = 1'h0;
    s_xactor_crg_wr_addr_full = 1'h0;
    s_xactor_crg_wr_data_full = 1'h0;
    s_xactor_crg_wr_resp_full = 1'h0;
    s_xactor_rg_rd_addr = 62'h2AAAAAAAAAAAAAAA;
    s_xactor_rg_rd_data = 68'hAAAAAAAAAAAAAAAAA;
    s_xactor_rg_wr_addr = 62'h2AAAAAAAAAAAAAAA;
    s_xactor_rg_wr_data = 73'h0AAAAAAAAAAAAAAAAAA;
    s_xactor_rg_wr_resp = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response)
	begin
	  TASK_testplusargs___d96 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response)
	begin
	  TASK_testplusargs___d97 = $test$plusargs("mram2rw");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response)
	begin
	  TASK_testplusargs___d98 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d102 =
	(TASK_testplusargs___d96 ||
	 TASK_testplusargs___d97 && TASK_testplusargs___d98) &&
	rg_readresp_count == 8'd0;
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d104 =
	(TASK_testplusargs___d96 ||
	 TASK_testplusargs___d97 && TASK_testplusargs___d98) &&
	rg_readresp_count != 8'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response)
	begin
	  v__h3688 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("[%10d", v__h3688, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("RAM2RW : RdResp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("Axi4_rd_data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", rg_rd_req[61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", ram_v_mem_0_doutb);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", 2'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d102)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d104)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request)
	begin
	  TASK_testplusargs___d8 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request)
	begin
	  TASK_testplusargs___d9 = $test$plusargs("mram2rw_user");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request)
	begin
	  TASK_testplusargs___d10 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request)
	begin
	  v__h2074 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$write("[%10d", v__h2074, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$write("RAM2RW-USER:index:%h", addr__h2007);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d8 ||
	   TASK_testplusargs___d9 && TASK_testplusargs___d10))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request)
	begin
	  TASK_testplusargs___d22 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request)
	begin
	  TASK_testplusargs___d23 = $test$plusargs("mram2rw");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request)
	begin
	  TASK_testplusargs___d24 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request)
	begin
	  v__h2583 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("[%10d", v__h2583, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("RAM2RW : RdReq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("Axi4_rd_addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", s_xactor_rg_rd_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request &&
	  (TASK_testplusargs___d22 ||
	   TASK_testplusargs___d23 && TASK_testplusargs___d24))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst)
	begin
	  TASK_testplusargs___d66 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst)
	begin
	  TASK_testplusargs___d67 = $test$plusargs("mram2rw");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst)
	begin
	  TASK_testplusargs___d68 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst)
	begin
	  v__h3040 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("[%10d", v__h3040, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("RAM2RW : Burst RdReq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("Axi4_rd_addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", rg_rd_req[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d66 ||
	   TASK_testplusargs___d67 && TASK_testplusargs___d68))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst)
	begin
	  TASK_testplusargs___d77 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst)
	begin
	  TASK_testplusargs___d78 = $test$plusargs("mram2rw_user");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst)
	begin
	  TASK_testplusargs___d79 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst)
	begin
	  v__h3213 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d77 ||
	   TASK_testplusargs___d78 && TASK_testplusargs___d79))
	$write("[%10d", v__h3213, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d77 ||
	   TASK_testplusargs___d78 && TASK_testplusargs___d79))
	$write("RAM2RW-USER:index:%h", addr__h3146);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_request_burst &&
	  (TASK_testplusargs___d77 ||
	   TASK_testplusargs___d78 && TASK_testplusargs___d79))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request)
	begin
	  TASK_testplusargs___d125 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request)
	begin
	  TASK_testplusargs___d126 = $test$plusargs("mram2rw");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request)
	begin
	  TASK_testplusargs___d127 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request)
	begin
	  v__h4334 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("[%10d", v__h4334, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("RAM2RW : WrReq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("Axi4_wr_addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", s_xactor_rg_wr_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request)
	begin
	  TASK_testplusargs___d139 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request)
	begin
	  TASK_testplusargs___d140 = $test$plusargs("mram2rw");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request)
	begin
	  TASK_testplusargs___d141 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d145 =
	(TASK_testplusargs___d139 ||
	 TASK_testplusargs___d140 && TASK_testplusargs___d141) &&
	s_xactor_rg_wr_data[0];
    TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d146 =
	(TASK_testplusargs___d139 ||
	 TASK_testplusargs___d140 && TASK_testplusargs___d141) &&
	!s_xactor_rg_wr_data[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request)
	begin
	  v__h4496 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write("[%10d", v__h4496, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write("RAM2RW : WrDReq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write("Axi4_wr_data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write("'h%h", s_xactor_rg_wr_data[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write("'h%h", s_xactor_rg_wr_data[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d145)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d146)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_request &&
	  (TASK_testplusargs___d139 ||
	   TASK_testplusargs___d140 && TASK_testplusargs___d141))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response && s_xactor_rg_wr_data[0])
	begin
	  TASK_testplusargs___d177 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response && s_xactor_rg_wr_data[0])
	begin
	  TASK_testplusargs___d178 = $test$plusargs("mram2rw");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response && s_xactor_rg_wr_data[0])
	begin
	  TASK_testplusargs___d179 = $test$plusargs("l1");
	  #0;
	end
    s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182 =
	s_xactor_rg_wr_data[0] &&
	(TASK_testplusargs___d177 ||
	 TASK_testplusargs___d178 && TASK_testplusargs___d179);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response && s_xactor_rg_wr_data[0])
	begin
	  v__h5083 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write("[%10d", v__h5083, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write("RAM2RW : RdResp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write("Axi4_wr_resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write("'h%h", rg_write_response[2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write("'h%h", rg_write_response[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  s_xactor_rg_wr_data_14_BIT_0_21_AND_TASK_testp_ETC___d182)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkbram

